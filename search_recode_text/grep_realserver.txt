./for_install/WiseGrid.sql:56:  `realserver` varchar(255) NOT NULL COMMENT '真实服务器名称',
./smartcli/libvcenter/libvcenter.c:532:	/* get realserver */
./smartcli/libvcenter/libvcenter.c:547:			/* get realserver */
./smartcli/libvcenter/libvcenter.c:554:		printf("Error: not found realserver :[%s] in pool[%s]!\n", rsaddr, poolname);
./smartcli/libvs/libvs.c:1475:			printf("ERROR: zero port is used by realserver\n");
./smartcli/libvs/libpool.c:154:				printf("\nError: existed realserver '%s'\n", value);
./smartcli/libvs/libpool.c:227:	if (strcmp(command, "add realserver") == 0) {
./smartcli/libvs/libpool.c:240:	if (strcmp(command, "delete realserver") == 0) {
./smartcli/libvs/libpool.c:246:				printf("The realserver is draining, and soon will be automatically deleted.\n");
./smartcli/libvs/libpool.c:253:	if (strcmp(command, "add realserver") == 0) {
./smartcli/libvs/libpool.c:254:		snprintf(buff, 1024, "script4 system pool %s add realserver %s,weight=10,enable=on",
./smartcli/libvs/libpool.c:257:		snprintf(buff, 1024, "script4 system pool %s delete realserver %s",
./smartcli/libvs/libpool.c:271:		printf("Can't add this realserver %s to apppool\n", argv[0]);
./smartcli/libvs/libpool.c:291:	sprintf(buff, "script4 system pool %s add realserver %s", poolname, address);
./smartcli/libvs/libpool.c:652:	t = cli_register_command(cli, parent, "realserver", realserver_new_delete, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c:813:	t = cli_register_command(cli, parent, "realserver", realserver_set_default, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c:861:	t = cli_register_command(cli, parent, "realserver", realserver_new_delete, PRIVILEGE_PRIVILEGED,
./smartcli/libgslb/gslb_libpool.c:129:			char realserver[256] = {0};
./smartcli/libgslb/gslb_libpool.c:139:				sscanf(rsaddr, "%[^-]-%s", realserver, device_vsname);
./smartcli/libgslb/gslb_libpool.c:140:				if(strcmp(realserver, gslb_rserver->device) != 0  || strcmp(device_vsname, gslb_rserver->device_vsname) != 0)
./smartcli/libgslb/gslb_libpool.c:276:				printf("\nError: existed realserver '%s'\n", value);
./smartcli/libgslb/gslb_libpool.c:429:			char realserver[256] = {0};
./smartcli/libgslb/gslb_libpool.c:439:				sscanf(rsaddr, "%[^-]-%s", realserver, device_vsname);
./smartcli/libgslb/gslb_libpool.c:440:				if(strcmp(realserver, gslb_rserver->device) != 0  || strcmp(device_vsname, gslb_rserver->device_vsname) != 0)
./smartcli/libgslb/gslb_libpool.c:953:			char realserver[256] = {0};
./smartcli/libgslb/gslb_libpool.c:963:				sscanf(rsaddr, "%[^-]-%s", realserver, device_vsname);
./smartcli/libgslb/gslb_libpool.c:964:				if(strcmp(realserver, gslb_rserver->device) != 0  || strcmp(device_vsname, gslb_rserver->device_vsname) != 0)
./smartcli/libllb/llb_libpool.c:87:				printf("\nError: existed realserver '%s'\n", value);
./smartsnmp/lvs.c:663:/* register LVS realserver table handler */
./keepalived/doc/man/man5/keepalived.conf.5:355:    # setup realserver(s)
./keepalived/doc/man/man5/keepalived.conf.5:360:    # one entry for each realserver 	
./keepalived/doc/man/man5/keepalived.conf.5:396:               #IP, tcp port for service on realserver 
./keepalived/doc/man/man5/keepalived.conf.5:462:       } # realserver defn
./keepalived/doc/keepalived.conf.SYNOPSIS:312:					#   realserver are down
./keepalived/ChangeLog:333:	  realserver on MD5SUM mismatch !!! whats that crap.
./keepalived/ChangeLog:726:	  framework to support multiple checkers per realserver.
./keepalived/ChangeLog:727:	  Each checker own a uniq id, each realserver own a list
./keepalived/ChangeLog:734:	  updater helper function to perform realserver state according
./keepalived/ChangeLog:1096:	* Added support to "notify_up" & "notify_down" for realserver config.
./keepalived/ChangeLog:1102:	* Set default realserver weight to 1. So, realserver will be active
./keepalived/ChangeLog:1439:	  the realserver pool since LVS VIP is owned by master LVS.
./keepalived/ChangeLog:1518:	* Prepare work on real_server_group in order to group some realserver
./keepalived/keepalived/check/check_api.c:78:	checker->rs = rs;		/* point to realserver */
./keepalived/keepalived/check/ipwrapper.c:59:/* Remove a realserver IPVS rule */
./keepalived/keepalived/check/ipwrapper.c:164:/* Set a realserver IPVS rules */
./keepalived/keepalived/check/ipwrapper.c:183:		/** add by anhk, set the state of the realserver from XXX to unset **/
./keepalived/keepalived/check/ipwrapper.c:518:/* Test if realserver is marked UP for a specific checker */
./keepalived/keepalived/check/ipvswrapper.c:302:	/* Process realserver queue */
./keepalived/keepalived/check/ipvswrapper.c:711:	/* Process realserver queue */
./keepalived/keepalived/include/check_http.h:77:	struct sockaddr_storage dst;	/* realserver address */
./keepalived/keepalived/include/check_api.h:38:	real_server *rs;			/* point to realserver */
./keepalived/keepalived/include/check_data.h:96:	int sorry_server_flag;	/** if this realserver is sorry_server **/
./smartvs/linux1/ip_vs.h:97:#define IP_VS_CONN_F_RSERVER_CLEANUP	0x0001	/* cleanup realserver after deleting */
./smartcommon/common/dependence.c:1561:	struct rserver *realserver;
./smartcommon/common/dependence.c:1569:	list_for_each_entry(realserver, &apppool->realserver_head, list) {
./smartcommon/common/dependence.c:1585:			inet_sockaddr2address(&realserver->address, raddress);
./smartcommon/common/dependence.c:1753: * Apppool 添加 realserver
./smartcommon/loadbalance/apppool.h:39:	char healthcheck[32];		/* realserver healthcheck name */
./smartcommon/loadbalance/vserver.c:2206:		/** realserver data **/
./smartcommon/loadbalance/apppool.c:43:			ret = module_add_sub("apppool", poolname, "realserver", ipaddr);
./smartcommon/loadbalance/apppool.c:51:			ret = module_add_sub("apppool", poolname, "realserver", ipaddr);
./smartcommon/loadbalance/apppool.c:124:		ret = module_add_sub("apppool", poolname, "realserver", value);
./smartcommon/loadbalance/apppool.c:132:			ret = module_add_sub("apppool", poolname, "realserver", ipaddr);
./smartcommon/loadbalance/apppool.c:146:	struct rserver *realserver;
./smartcommon/loadbalance/apppool.c:147:	if ((realserver = calloc(1, sizeof(*realserver))) == NULL) {
./smartcommon/loadbalance/apppool.c:150:	strcpy(realserver->state, "unknown");
./smartcommon/loadbalance/apppool.c:151:	strcpy(realserver->fail_timeout, "10");
./smartcommon/loadbalance/apppool.c:152:	return &realserver->list;
./smartcommon/loadbalance/apppool.c:202:	struct rserver *realserver = list_entry(list, struct rserver, list);
./smartcommon/loadbalance/apppool.c:203:	free(realserver);
./smartcommon/loadbalance/apppool.c:222:	struct rserver *realserver = list_entry(list, struct rserver, list);
./smartcommon/loadbalance/apppool.c:223:	//m_analyse_common(pnode, realserver, address);
./smartcommon/loadbalance/apppool.c:227:		inet_address2sockaddr(value, &realserver->address);
./smartcommon/loadbalance/apppool.c:231:	m_analyse_common(pnode, realserver, maxconn);
./smartcommon/loadbalance/apppool.c:232:	m_analyse_common(pnode, realserver, bandwidth);
./smartcommon/loadbalance/apppool.c:233:	m_analyse_common(pnode, realserver, maxreq);
./smartcommon/loadbalance/apppool.c:234:	m_analyse_common(pnode, realserver, weight);
./smartcommon/loadbalance/apppool.c:235:	m_analyse_common(pnode, realserver, healthcheck);
./smartcommon/loadbalance/apppool.c:236:	m_analyse_common(pnode, realserver, enable);
./smartcommon/loadbalance/apppool.c:237:	m_analyse_common(pnode, realserver, state);
./smartcommon/loadbalance/apppool.c:238:	m_analyse_common(pnode, realserver, id);
./smartcommon/loadbalance/apppool.c:239:	m_analyse_common(pnode, realserver, fail_timeout);
./smartcommon/loadbalance/apppool.c:242:	m_analyse_common(pnode, realserver, rscenter);
./smartcommon/loadbalance/apppool.c:243:	m_analyse_common(pnode, realserver, vmdatacenter);
./smartcommon/loadbalance/apppool.c:245:	m_analyse_common(pnode, realserver, vmxpath);
./smartcommon/loadbalance/apppool.c:247:	m_analyse_common(pnode, realserver, uuid);
./smartcommon/loadbalance/apppool.c:249:	m_analyse_common(pnode, realserver, vmname);
./smartcommon/loadbalance/apppool.c:250:	m_analyse_common(pnode, realserver, vmstate);
./smartcommon/loadbalance/apppool.c:280:	struct rserver *realserver = list_entry(list, struct rserver, list);
./smartcommon/loadbalance/apppool.c:281:	//m_restore_common(pnode, realserver, address);
./smartcommon/loadbalance/apppool.c:283:	if (inet_sockaddr2address(&realserver->address, address) == 0) {
./smartcommon/loadbalance/apppool.c:286:	m_restore_common(pnode, realserver, maxconn);
./smartcommon/loadbalance/apppool.c:287:	m_restore_common(pnode, realserver, bandwidth);
./smartcommon/loadbalance/apppool.c:288:	m_restore_common(pnode, realserver, maxreq);
./smartcommon/loadbalance/apppool.c:289:	m_restore_common(pnode, realserver, weight);
./smartcommon/loadbalance/apppool.c:290:	m_restore_common(pnode, realserver, healthcheck);
./smartcommon/loadbalance/apppool.c:291:	m_restore_common(pnode, realserver, enable);
./smartcommon/loadbalance/apppool.c:292:	m_restore_common(pnode, realserver, state);
./smartcommon/loadbalance/apppool.c:293:	m_restore_common(pnode, realserver, id);
./smartcommon/loadbalance/apppool.c:294:	m_restore_common(pnode, realserver, fail_timeout);
./smartcommon/loadbalance/apppool.c:297:	m_restore_common(pnode, realserver, rscenter);
./smartcommon/loadbalance/apppool.c:298:	m_restore_common(pnode, realserver, vmdatacenter);
./smartcommon/loadbalance/apppool.c:300:	m_restore_common(pnode, realserver, vmxpath);
./smartcommon/loadbalance/apppool.c:302:	m_restore_common(pnode, realserver, uuid);
./smartcommon/loadbalance/apppool.c:304:	m_restore_common(pnode, realserver, vmname);
./smartcommon/loadbalance/apppool.c:305:	m_restore_common(pnode, realserver, vmstate);
./smartcommon/loadbalance/apppool.c:453:		} else if (!strncasecmp(token, "healthcheck=", 12)) {	/* realserver healthcheck */
./smartcommon/loadbalance/apppool.c:646:		/* generate realserver */
./smartcommon/loadbalance/apppool.c:717:	if (strcmp(name, "realserver") == 0) {
./smartcommon/loadbalance/apppool.c:888:	/* realserver copy */
./smartcommon/loadbalance/apppool.c:917:	.m_desc = "realserver",
./smartcommon/gslb/gslb_pool.c:165:	char realserver[256] = {0};
./smartcommon/gslb/gslb_pool.c:179:	strcpy(realserver, token);
./smartcommon/gslb/gslb_pool.c:193:		return strcmp(address, realserver);
./smartcommon/gslb/gslb_pool.c:198:	return strcmp(realserver, gslb_rserver->device) != 0 || strcmp(device_vsname, gslb_rserver->device_vsname) != 0;
./smartcommon/gslb/gslb_pool.c:206:	sscanf(name, "%[^-]-%s", realserver, device_vsname);
./smartcommon/gslb/gslb_pool.c:207:	return strcmp(realserver, gslb_rserver->device) != 0 || strcmp(device_vsname, gslb_rserver->device_vsname) != 0;
./smartshell/vmware_daemon/vmware_daemon.c:1437:	snprintf(buff, 1023, "script4 system pool %s add realserver %s", poolname, address);
./smartshell/vmware_daemon/vmware_daemon.c:1879:	 * if only one realserver in this pool, we do nothing. */
./smartshell/status/db.h:36:	char realserver[256];	/** 真实服务器 **/
./smartshell/status/main.c:47:	char realserver[512];			/** 真实服务器名 **/
./smartshell/status/main.c:90:	//strcpy(stat->realserver, rdesc->address);
./smartshell/status/main.c:91:	inet_sockaddr2address(&rdesc->address, stat->realserver);
./smartshell/status/main.c:335:					sprintf(db->cmd, "insert into pool_stat(poolname, realserver, "
./smartshell/daemon4/snmpsched.c:430:						"realserver", 
./smartshell/daemon4/snmpsched.c:436:						"realserver", 
./smartshell/daemon4/snmpsched.c:443:						"realserver",
./smartshell/daemon4/analyzer.c:563: * eg: pool2 add realserver 192.168.10.20:8877,maxconn=10000,bandwidth=10000,healthcheck=check3,enable=on...
./smartshell/daemon4/analyzer.c:564: * eg: pool2 del realserver 192.168.10.20:8877
./smartshell/daemon4/analyzer.c:565: * eg: pool2 show [realserver,backserver]
./smartshell/daemon4/analyzer.c:575:	if (strcmp(op, "add") == 0 && strcmp(key, "realserver") == 0) {
./smartshell/daemon4/analyzer.c:577:	} else if (strcmp(op, "delete") == 0 && strcmp(key, "realserver") == 0) {
./smartshell/daemon4/analyzer.c:578:		ret = module_del_sub("apppool", poolname, "realserver", value);
./smartshell/daemon4/generator.c:259: * rcheck: realserver healthcheck
./smartshell/daemon4/layer7.c:935:		/** when enable contentswitch, then Disable "gzip/deflate"-encoding to realserver **/
./smartshell/daemon4/event_log.c:370:		if (!strcmp(op, "add") && !strcmp(key, "realserver")) {
./smartshell/daemon4/event_log.c:375:		} else if (!strcmp(op, "delete") && !strcmp(key, "realserver")) {
find . -name *.c |xargs grep -n realserver_set
./smartcli/libvs/libpool.c:796:static int realserver_set_default(struct cli_def *cli, char *command, char *argv[],
./smartcli/libvs/libpool.c:805:static int realserver_set_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c:808:	t = cli_register_command(cli, parent, "realserver", realserver_set_default, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c:1535:	realserver_set_command(cli, t);
./smartcommon/loadbalance/apppool.c:454:static int realserver_set(struct list_head *list, const char *name,
./smartcommon/loadbalance/apppool.c:1020:	.m_set = realserver_set,
