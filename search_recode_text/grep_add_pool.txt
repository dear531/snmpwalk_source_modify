./smartcli/libvcenter/libvcenter.c-42-	module_purge_queue(&queue, "vcenter");
./smartcli/libvcenter/libvcenter.c-43-
./smartcli/libvcenter/libvcenter.c-44-	return k;
./smartcli/libvcenter/libvcenter.c-45-}
./smartcli/libvcenter/libvcenter.c-46-
./smartcli/libvcenter/libvcenter.c-47-int vcenter_vmname_get_values(struct cli_def *cli, char **values)
./smartcli/libvcenter/libvcenter.c-48-{
./smartcli/libvcenter/libvcenter.c-49-	int k = 0, found = 0;
./smartcli/libvcenter/libvcenter.c-50-	char ipaddr[512];
./smartcli/libvcenter/libvcenter.c-51-	char *address, *poolname;
./smartcli/libvcenter/libvcenter.c:52:	struct apppool *pool;
./smartcli/libvcenter/libvcenter.c-53-	struct rserver *rs;
./smartcli/libvcenter/libvcenter.c-54-	struct vcenter_datacenter *datacenter;
./smartcli/libvcenter/libvcenter.c-55-	struct vcenter_vm *vm;
./smartcli/libvcenter/libvcenter.c-56-
./smartcli/libvcenter/libvcenter.c-57-	address = cli->folder->value;
./smartcli/libvcenter/libvcenter.c-58-	poolname = cli->folder->parent->parent->value;
./smartcli/libvcenter/libvcenter.c-59-	/* get rserver */
./smartcli/libvcenter/libvcenter.c-60-	LIST_HEAD(pool_head);
./smartcli/libvcenter/libvcenter.c-61-	module_get_queue(&pool_head, "apppool", poolname);
./smartcli/libvcenter/libvcenter.c:62:	list_for_each_entry(pool, &pool_head, list) {
./smartcli/libvcenter/libvcenter.c:63:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartcli/libvcenter/libvcenter.c-64-			memset(ipaddr, 0, sizeof(ipaddr));
./smartcli/libvcenter/libvcenter.c-65-			if (inet_sockaddr2address(&rs->address, ipaddr) != 0) {
./smartcli/libvcenter/libvcenter.c-66-				continue;
./smartcli/libvcenter/libvcenter.c-67-			}
./smartcli/libvcenter/libvcenter.c-68-			if (strcmp(ipaddr, address) == 0) {
./smartcli/libvcenter/libvcenter.c-69-				found = 1;
./smartcli/libvcenter/libvcenter.c-70-				break;
./smartcli/libvcenter/libvcenter.c-71-			}
./smartcli/libvcenter/libvcenter.c-72-		}
./smartcli/libvcenter/libvcenter.c-73-		if (found) {
--
./smartcli/libvcenter/libvcenter.c-254-	return CLI_OK;
./smartcli/libvcenter/libvcenter.c-255-}
./smartcli/libvcenter/libvcenter.c-256-static int vcenter_delete_check(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libvcenter/libvcenter.c-257-{
./smartcli/libvcenter/libvcenter.c-258-	if (vcenter_check_name(cli, c, value) ==CLI_ERROR) {
./smartcli/libvcenter/libvcenter.c-259-		printf("ERROR : vcenter '%s' not exists.\n", value);
./smartcli/libvcenter/libvcenter.c-260-		return CLI_ERROR;
./smartcli/libvcenter/libvcenter.c-261-	}
./smartcli/libvcenter/libvcenter.c-262-	
./smartcli/libvcenter/libvcenter.c-263-	if(vcenter_is_busy(value) == 1) {
./smartcli/libvcenter/libvcenter.c:264:		printf("ERROR: vcenter '%s' is used by some pool by now!\n", value);
./smartcli/libvcenter/libvcenter.c-265-		return CLI_ERROR;
./smartcli/libvcenter/libvcenter.c-266-	}
./smartcli/libvcenter/libvcenter.c-267-	
./smartcli/libvcenter/libvcenter.c-268-
./smartcli/libvcenter/libvcenter.c-269-	return CLI_OK;
./smartcli/libvcenter/libvcenter.c-270-}
./smartcli/libvcenter/libvcenter.c-271-
./smartcli/libvcenter/libvcenter.c-272-static int vcenter_set_check(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libvcenter/libvcenter.c-273-{
./smartcli/libvcenter/libvcenter.c-274-	if (vcenter_check_name(cli, c, value) ==CLI_ERROR) {
--
./smartcli/libvcenter/libvcenter.c-514-
./smartcli/libvcenter/libvcenter.c-515-	module_purge_queue(&vcenter_head, "vcenter");
./smartcli/libvcenter/libvcenter.c-516-
./smartcli/libvcenter/libvcenter.c-517-	return k;
./smartcli/libvcenter/libvcenter.c-518-}
./smartcli/libvcenter/libvcenter.c-519-
./smartcli/libvcenter/libvcenter.c-520-
./smartcli/libvcenter/libvcenter.c-521-int vcenter_datacenter_get_values(struct cli_def *cli, char **values)
./smartcli/libvcenter/libvcenter.c-522-{
./smartcli/libvcenter/libvcenter.c-523-	int found = 0;
./smartcli/libvcenter/libvcenter.c:524:	struct apppool *pool = NULL;
./smartcli/libvcenter/libvcenter.c-525-	struct rserver *rs = NULL;
./smartcli/libvcenter/libvcenter.c-526-	char *poolname, *rsaddr;
./smartcli/libvcenter/libvcenter.c-527-	char addr[512];
./smartcli/libvcenter/libvcenter.c-528-
./smartcli/libvcenter/libvcenter.c-529-	rsaddr = cli->folder->value;
./smartcli/libvcenter/libvcenter.c-530-	poolname = cli->folder->parent->parent->value;
./smartcli/libvcenter/libvcenter.c-531-
./smartcli/libvcenter/libvcenter.c-532-	/* get realserver */
./smartcli/libvcenter/libvcenter.c-533-	LIST_HEAD(pool_head);
./smartcli/libvcenter/libvcenter.c-534-	module_get_queue(&pool_head, "apppool", poolname);
./smartcli/libvcenter/libvcenter.c:535:	list_for_each_entry(pool, &pool_head, list) {
./smartcli/libvcenter/libvcenter.c-536-		if (found) { 
./smartcli/libvcenter/libvcenter.c-537-			break;
./smartcli/libvcenter/libvcenter.c-538-		}
./smartcli/libvcenter/libvcenter.c:539:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartcli/libvcenter/libvcenter.c-540-			memset(addr, 0, sizeof(addr));
./smartcli/libvcenter/libvcenter.c-541-			if (inet_sockaddr2address(&rs->address, addr) != 0) {
./smartcli/libvcenter/libvcenter.c-542-				continue;
./smartcli/libvcenter/libvcenter.c-543-			}
./smartcli/libvcenter/libvcenter.c-544-			if (check_ipport_equal(addr, rsaddr) != 0) {
./smartcli/libvcenter/libvcenter.c-545-				continue;
./smartcli/libvcenter/libvcenter.c-546-			}
./smartcli/libvcenter/libvcenter.c-547-			/* get realserver */
./smartcli/libvcenter/libvcenter.c-548-			found = 1;
./smartcli/libvcenter/libvcenter.c-549-			break;
./smartcli/libvcenter/libvcenter.c-550-		}
./smartcli/libvcenter/libvcenter.c-551-	}
./smartcli/libvcenter/libvcenter.c-552-
./smartcli/libvcenter/libvcenter.c-553-	if (!found) {
./smartcli/libvcenter/libvcenter.c:554:		printf("Error: not found realserver :[%s] in pool[%s]!\n", rsaddr, poolname);
./smartcli/libvcenter/libvcenter.c-555-		return 0;
./smartcli/libvcenter/libvcenter.c-556-	}
./smartcli/libvcenter/libvcenter.c-557-
./smartcli/libvcenter/libvcenter.c-558-	int k = 0;
./smartcli/libvcenter/libvcenter.c-559-	struct vcenter_datacenter *datacenter;
./smartcli/libvcenter/libvcenter.c-560-	struct vcenter *vcenter;
./smartcli/libvcenter/libvcenter.c-561-
./smartcli/libvcenter/libvcenter.c-562-	LIST_HEAD(vcenter_head);
./smartcli/libvcenter/libvcenter.c-563-	module_get_queue(&vcenter_head, "vcenter", rs->rscenter);
./smartcli/libvcenter/libvcenter.c-564-
--
./smartcli/libvs/librule.c-210-		return CLI_OK;
./smartcli/libvs/librule.c-211-	return CLI_ERROR;
./smartcli/libvs/librule.c-212-}
./smartcli/libvs/librule.c-213-
./smartcli/libvs/librule.c-214-int check_route(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libvs/librule.c-215-{
./smartcli/libvs/librule.c-216-	if (check_name(cli, c, value) != CLI_OK)
./smartcli/libvs/librule.c-217-		return CLI_ERROR;
./smartcli/libvs/librule.c-218-
./smartcli/libvs/librule.c-219-	if (!pool_exists(value)) {
./smartcli/libvs/librule.c:220:		fprintf(stderr, "ERROR : Route pool '%s' doesn't exist.\n", value);
./smartcli/libvs/librule.c-221-		return CLI_ERROR;
./smartcli/libvs/librule.c-222-	}
./smartcli/libvs/librule.c-223-
./smartcli/libvs/librule.c-224-	return CLI_OK;
./smartcli/libvs/librule.c-225-}
./smartcli/libvs/librule.c-226-
./smartcli/libvs/librule.c-227-
./smartcli/libvs/librule.c-228-
./smartcli/libvs/librule.c-229-/** 获取当前所有的rule的名字，由CLI的TAB键显示 **/
./smartcli/libvs/librule.c-230-int rule_get_values(struct cli_def *cli, char **values)
--
./smartcli/libvs/libvs.c-45-	return CLI_OK;
./smartcli/libvs/libvs.c-46-}
./smartcli/libvs/libvs.c-47-
./smartcli/libvs/libvs.c-48-
./smartcli/libvs/libvs.c-49-int check_pool_type(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libvs/libvs.c-50-{
./smartcli/libvs/libvs.c-51-	
./smartcli/libvs/libvs.c-52-	LIST_HEAD(vs_queue);
./smartcli/libvs/libvs.c-53-	LIST_HEAD(pool_queue);
./smartcli/libvs/libvs.c-54-	struct vserver *vserver;
./smartcli/libvs/libvs.c:55:	struct apppool *pool;
./smartcli/libvs/libvs.c-56-	
./smartcli/libvs/libvs.c-57-	module_get_queue(&vs_queue, "vserver", cli->folder->value);
./smartcli/libvs/libvs.c-58-	module_get_queue(&pool_queue, "apppool", value);
./smartcli/libvs/libvs.c-59-
./smartcli/libvs/libvs.c-60-	if(list_empty(&vs_queue)){
./smartcli/libvs/libvs.c-61-		return CLI_ERROR;
./smartcli/libvs/libvs.c-62-	}
./smartcli/libvs/libvs.c-63-	
./smartcli/libvs/libvs.c-64-	if(list_empty(&pool_queue)){
./smartcli/libvs/libvs.c-65-		return CLI_ERROR;
./smartcli/libvs/libvs.c-66-	}
./smartcli/libvs/libvs.c-67-
./smartcli/libvs/libvs.c-68-	vserver = list_entry(&vs_queue, struct vserver ,list);
./smartcli/libvs/libvs.c-69-	
./smartcli/libvs/libvs.c:70:	pool = list_entry(&pool_queue, struct apppool, list);
./smartcli/libvs/libvs.c-71-	
./smartcli/libvs/libvs.c-72-
./smartcli/libvs/libvs.c-73-	if(strcmp(vserver->vm_enable, "on") == 0){
./smartcli/libvs/libvs.c:74:		if(strcmp(pool->vmenable, "on") != 0){
./smartcli/libvs/libvs.c:75:			printf("Can not add vm unenable pool to a vm enable vserver!\n");
./smartcli/libvs/libvs.c-76-			return CLI_ERROR;
./smartcli/libvs/libvs.c-77-		}
./smartcli/libvs/libvs.c-78-	} else{
./smartcli/libvs/libvs.c:79:		if(strcmp(pool->vmenable, "on") == 0){
./smartcli/libvs/libvs.c:80:			printf("Can not add vm enable pool to  a vm unenable vserver!\n");
./smartcli/libvs/libvs.c-81-			return CLI_ERROR;
./smartcli/libvs/libvs.c-82-		}
./smartcli/libvs/libvs.c-83-	}
./smartcli/libvs/libvs.c-84-
./smartcli/libvs/libvs.c-85-	module_purge_queue(&vs_queue, "vserver");
./smartcli/libvs/libvs.c-86-	module_purge_queue(&pool_queue, "apppool");
./smartcli/libvs/libvs.c-87-
./smartcli/libvs/libvs.c-88-	return CLI_OK;
./smartcli/libvs/libvs.c-89-	
./smartcli/libvs/libvs.c-90-}
--
./smartcli/libvs/libvs.c-128-	SHOW_ALARM1(sched, "scheduler");
./smartcli/libvs/libvs.c-129-	SHOW_ALARM1(protocol, "protocol");
./smartcli/libvs/libvs.c-130-	//SHOW_ALARM1(address, "address");
./smartcli/libvs/libvs.c-131-	char address[BUFSIZ];
./smartcli/libvs/libvs.c-132-	if (inet_sockaddr2address(&vserver->address, address) != 0) {
./smartcli/libvs/libvs.c-133-		_SHOW_ALARM("Please Set the \" address \" of vserver.");
./smartcli/libvs/libvs.c-134-		return;
./smartcli/libvs/libvs.c-135-	}
./smartcli/libvs/libvs.c-136-
./smartcli/libvs/libvs.c-137-	/**  打印警告信息  Step2 **/
./smartcli/libvs/libvs.c:138:	if (strcmp(vserver->contentswitch, "on") != 0 && vserver->pool[0] == 0) {
./smartcli/libvs/libvs.c-139-		printf("\n\n**************************************************\n");
./smartcli/libvs/libvs.c:140:		printf("Please Set the \"pool\" of vserver.\n\n");
./smartcli/libvs/libvs.c-141-		return;
./smartcli/libvs/libvs.c-142-	}
./smartcli/libvs/libvs.c-143-
./smartcli/libvs/libvs.c-144-	/**  打印警告信息  Step3 **/
./smartcli/libvs/libvs.c-145-#define SHOW_ALARM2(proto, arg, info) 							\
./smartcli/libvs/libvs.c-146-	do { 										\
./smartcli/libvs/libvs.c-147-		if (strcmp(vserver->protocol, proto) == 0 && vserver->arg[0] == 0) { 	\
./smartcli/libvs/libvs.c-148-			_SHOW_ALARM("Please Set the \"" info "\" of vserver."); 	\
./smartcli/libvs/libvs.c-149-		} 									\
./smartcli/libvs/libvs.c-150-	} while (0)
--
./smartcli/libvs/libvs.c-635-		sprintf(desc, "%serrpage=%s,", desc, vserver->errpage);
./smartcli/libvs/libvs.c-636-	}
./smartcli/libvs/libvs.c-637-
./smartcli/libvs/libvs.c-638-	return desc;
./smartcli/libvs/libvs.c-639-}
./smartcli/libvs/libvs.c-640-
./smartcli/libvs/libvs.c-641-static char *get_pool_desc(struct vserver *vserver, char *desc)
./smartcli/libvs/libvs.c-642-{
./smartcli/libvs/libvs.c-643-	desc[0] = 0;
./smartcli/libvs/libvs.c-644-
./smartcli/libvs/libvs.c:645:	if (vserver->pool[0] != 0) {
./smartcli/libvs/libvs.c:646:		sprintf(desc, "pool=%s,", vserver->pool);
./smartcli/libvs/libvs.c-647-	}
./smartcli/libvs/libvs.c-648-	if (vserver->backpool[0] != 0) {
./smartcli/libvs/libvs.c:649:		sprintf(desc, "%sback-pool=%s,", desc, vserver->backpool);
./smartcli/libvs/libvs.c-650-	}
./smartcli/libvs/libvs.c-651-	return desc;
./smartcli/libvs/libvs.c-652-}
./smartcli/libvs/libvs.c-653-
./smartcli/libvs/libvs.c-654-
./smartcli/libvs/libvs.c-655-#define SHOW_INDEX_LINE printf(/** 16 **/ "+----------------"	\
./smartcli/libvs/libvs.c-656-		/** 10 **/ "+----------"			\
./smartcli/libvs/libvs.c-657-		/** 18 **/ "+------------------"		\
./smartcli/libvs/libvs.c-658-		/** 10 **/ "+----------"			\
./smartcli/libvs/libvs.c-659-		/** 10 **/ "+----------"			\
--
./smartcli/libvs/libvs.c-690-		strcpy(buff, vserver->name);
./smartcli/libvs/libvs.c-691-	}
./smartcli/libvs/libvs.c-692-
./smartcli/libvs/libvs.c-693-	memset(address, 0, BUFSIZ);
./smartcli/libvs/libvs.c-694-	inet_sockaddr2address(&vserver->address, address);
./smartcli/libvs/libvs.c-695-	struct show_fmt show_fmt[] = {
./smartcli/libvs/libvs.c-696-		{16, buff},
./smartcli/libvs/libvs.c-697-		{10, vserver->protocol},
./smartcli/libvs/libvs.c-698-		{18, address},
./smartcli/libvs/libvs.c-699-		{10, vserver->sched},
./smartcli/libvs/libvs.c:700:		{10, vserver->pool},
./smartcli/libvs/libvs.c-701-		{8, vserver->enable},
./smartcli/libvs/libvs.c-702-	};
./smartcli/libvs/libvs.c-703-
./smartcli/libvs/libvs.c-704-	show_line(show_fmt, sizeof(show_fmt) / sizeof(struct show_fmt));
./smartcli/libvs/libvs.c-705-	SHOW_INDEX_LINE;
./smartcli/libvs/libvs.c-706-}
./smartcli/libvs/libvs.c-707-
./smartcli/libvs/libvs.c-708-
./smartcli/libvs/libvs.c-709-static void vserver_print_detail_content_line(const char *attr,
./smartcli/libvs/libvs.c-710-		const char *value) 
--
./smartcli/libvs/libvs.c-1162-	struct vserver *vserver;
./smartcli/libvs/libvs.c-1163-	struct apppool *apppool;
./smartcli/libvs/libvs.c-1164-	struct rserver *rserver;
./smartcli/libvs/libvs.c-1165-	LIST_HEAD(queue);
./smartcli/libvs/libvs.c-1166-	LIST_HEAD(pool_queue);
./smartcli/libvs/libvs.c-1167-	char address[512] = {0};
./smartcli/libvs/libvs.c-1168-
./smartcli/libvs/libvs.c-1169-	module_get_queue(&queue, "vserver", cli->folder->value);
./smartcli/libvs/libvs.c-1170-
./smartcli/libvs/libvs.c-1171-	list_for_each_entry(vserver, &queue, list) {
./smartcli/libvs/libvs.c:1172:		if (strlen(vserver->pool) == 0) {
./smartcli/libvs/libvs.c-1173-			goto err;
./smartcli/libvs/libvs.c-1174-		}
./smartcli/libvs/libvs.c:1175:		module_get_queue(&pool_queue, "apppool", vserver->pool);
./smartcli/libvs/libvs.c-1176-		list_for_each_entry(apppool, &pool_queue, list) {
./smartcli/libvs/libvs.c:1177:			module_get_queue(&pool_queue, "apppool", vserver->pool);
./smartcli/libvs/libvs.c-1178-			if (list_empty(&apppool->realserver_head)) {
./smartcli/libvs/libvs.c-1179-				goto err;
./smartcli/libvs/libvs.c-1180-			}
./smartcli/libvs/libvs.c-1181-			list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartcli/libvs/libvs.c-1182-				if (inet_sockaddr2address(&rserver->address, address) != 0
./smartcli/libvs/libvs.c-1183-					|| memcmp(rserver->snmp_enable, "on", sizeof("on")) != 0) {
./smartcli/libvs/libvs.c-1184-					goto err;
./smartcli/libvs/libvs.c-1185-				}
./smartcli/libvs/libvs.c-1186-			}
./smartcli/libvs/libvs.c-1187-		}
--
./smartcli/libvs/libvs.c-1454-static int vs_config_cache(struct cli_def *cli,
./smartcli/libvs/libvs.c-1455-		char *command, char *argv[], int argc)
./smartcli/libvs/libvs.c-1456-{
./smartcli/libvs/libvs.c-1457-	int ret;
./smartcli/libvs/libvs.c-1458-	ret = vs_config_arg(cli, command, argv, argc);
./smartcli/libvs/libvs.c-1459-	vserver_configure_commands(cli, cli->folder->value);
./smartcli/libvs/libvs.c-1460-	return ret;
./smartcli/libvs/libvs.c-1461-}
./smartcli/libvs/libvs.c-1462-
./smartcli/libvs/libvs.c-1463-
./smartcli/libvs/libvs.c:1464:static int vs_print_confirm(int port, const char *pool)
./smartcli/libvs/libvs.c-1465-{
./smartcli/libvs/libvs.c-1466-	int ret = CLI_ERROR;
./smartcli/libvs/libvs.c-1467-	char ch[BUFSIZ];
./smartcli/libvs/libvs.c:1468:	printf("some realservers have port %d in your pool %s, do you confirm ? [Y/N] ",
./smartcli/libvs/libvs.c:1469:			port, pool);
./smartcli/libvs/libvs.c-1470-	set_normal_tty();
./smartcli/libvs/libvs.c-1471-	if (fgets(ch, BUFSIZ, stdin) == NULL) {
./smartcli/libvs/libvs.c-1472-		goto error;
./smartcli/libvs/libvs.c-1473-	}
./smartcli/libvs/libvs.c-1474-
./smartcli/libvs/libvs.c-1475-	if (strcasecmp(ch, "y\n") == 0 || strcasecmp(ch, "yes\n") == 0) {
./smartcli/libvs/libvs.c-1476-		ret = CLI_OK;
./smartcli/libvs/libvs.c-1477-	}
./smartcli/libvs/libvs.c-1478-
./smartcli/libvs/libvs.c-1479-error:
--
./smartcli/libvs/libvs.c-1557-	if (list_empty(&head)) {
./smartcli/libvs/libvs.c-1558-		return CLI_OK;
./smartcli/libvs/libvs.c-1559-	}
./smartcli/libvs/libvs.c-1560-
./smartcli/libvs/libvs.c-1561-
./smartcli/libvs/libvs.c-1562-	vserver = list_first_entry(&head, struct vserver, list);
./smartcli/libvs/libvs.c-1563-	//strcpy(vsaddr, vserver->address);
./smartcli/libvs/libvs.c-1564-	inet_sockaddr2address(&vserver->address, vsaddr);
./smartcli/libvs/libvs.c-1565-
./smartcli/libvs/libvs.c-1566-	sscanf(command, "%*s %s", protocol);
./smartcli/libvs/libvs.c:1567:	if (vs_config_check_port(protocol, vserver->pool) != CLI_OK) {
./smartcli/libvs/libvs.c-1568-		module_purge_queue(&head, "vserver");
./smartcli/libvs/libvs.c-1569-		return CLI_ERROR;
./smartcli/libvs/libvs.c-1570-	}
./smartcli/libvs/libvs.c-1571-
./smartcli/libvs/libvs.c-1572-	if (strcasecmp(protocol, "udp") == 0) {
./smartcli/libvs/libvs.c-1573-		if (gslb_listener_unused_check(vserver, protocol) == -1) {
./smartcli/libvs/libvs.c-1574-			module_purge_queue(&head, "vserver");
./smartcli/libvs/libvs.c-1575-			return CLI_ERROR;
./smartcli/libvs/libvs.c-1576-		}
./smartcli/libvs/libvs.c-1577-	}
--
./smartcli/libvs/libvs.c-1607-	char protocol[16];
./smartcli/libvs/libvs.c-1608-	char address[128];
./smartcli/libvs/libvs.c-1609-	get_vserver_protocol_address(cli->folder->value, protocol, address);
./smartcli/libvs/libvs.c-1610-
./smartcli/libvs/libvs.c-1611-	if (vs_config_check_port(protocol, argv[0]) != CLI_OK) {
./smartcli/libvs/libvs.c-1612-		return CLI_ERROR;
./smartcli/libvs/libvs.c-1613-	}
./smartcli/libvs/libvs.c-1614-
./smartcli/libvs/libvs.c-1615-
./smartcli/libvs/libvs.c-1616-	if (check_vserver_address_loops(cli->folder->value, NULL, argv[0], NULL) != 0) {
./smartcli/libvs/libvs.c:1617:		printf("Can't set this pool [%s] to vserver\n", argv[0]);
./smartcli/libvs/libvs.c-1618-		return CLI_ERROR;
./smartcli/libvs/libvs.c-1619-	}
./smartcli/libvs/libvs.c-1620-
./smartcli/libvs/libvs.c-1621-#if 0
./smartcli/libvs/libvs.c-1622-	if (check_busy_pool_address(address, argv[0]) < 0) {
./smartcli/libvs/libvs.c:1623:		printf("Can't set this pool [%s] to vserver\n", argv[0]);
./smartcli/libvs/libvs.c-1624-		return CLI_ERROR;
./smartcli/libvs/libvs.c-1625-	}
./smartcli/libvs/libvs.c-1626-#endif
./smartcli/libvs/libvs.c:1627:	/** set pool **/
./smartcli/libvs/libvs.c-1628-	vs_config_arg1(cli, command, argv, argc);
./smartcli/libvs/libvs.c-1629-
./smartcli/libvs/libvs.c-1630-	return CLI_OK;
./smartcli/libvs/libvs.c-1631-}
./smartcli/libvs/libvs.c-1632-
./smartcli/libvs/libvs.c-1633-static int vs_config_backpool(struct cli_def *cli,
./smartcli/libvs/libvs.c-1634-		char *command, char *argv[], int argc)
./smartcli/libvs/libvs.c-1635-{
./smartcli/libvs/libvs.c-1636-	if (argc == 0) {
./smartcli/libvs/libvs.c-1637-		vs_config_arg(cli, command, argv, argc);
--
./smartcli/libvs/libvs.c-1669-	if (list_empty(&queue)) {
./smartcli/libvs/libvs.c-1670-		return pool_get_values(cli, values);
./smartcli/libvs/libvs.c-1671-	}
./smartcli/libvs/libvs.c-1672-
./smartcli/libvs/libvs.c-1673-	if ((ret = pool_get_values(cli, vals)) == 0) {
./smartcli/libvs/libvs.c-1674-		module_purge_queue(&queue, "vserver");
./smartcli/libvs/libvs.c-1675-		return 0;
./smartcli/libvs/libvs.c-1676-	}
./smartcli/libvs/libvs.c-1677-
./smartcli/libvs/libvs.c-1678-	list_for_each_entry(vserver, &queue, list) {
./smartcli/libvs/libvs.c:1679:		poolname = vserver->pool;
./smartcli/libvs/libvs.c-1680-	}
./smartcli/libvs/libvs.c-1681-
./smartcli/libvs/libvs.c-1682-	for (i = 0; i < ret; i++) {
./smartcli/libvs/libvs.c-1683-		if (strcasecmp(poolname, vals[i]) == 0) {
./smartcli/libvs/libvs.c-1684-			continue;
./smartcli/libvs/libvs.c-1685-		}
./smartcli/libvs/libvs.c-1686-		values[count] = strdup(vals[i]);
./smartcli/libvs/libvs.c-1687-		count++;
./smartcli/libvs/libvs.c-1688-	}
./smartcli/libvs/libvs.c-1689-
--
./smartcli/libvs/libvs.c-1967-		if (strcmp(tmp->name, vserver->name)==0) {
./smartcli/libvs/libvs.c-1968-			continue;
./smartcli/libvs/libvs.c-1969-		}
./smartcli/libvs/libvs.c-1970-
./smartcli/libvs/libvs.c-1971-		if (strcmp(tmp->persistentgroup, vserver->name)==0) {
./smartcli/libvs/libvs.c-1972-			printf("\n\nERROR: vserver %s is persistent-group's parent, can't be set!\n", vserver->name);
./smartcli/libvs/libvs.c-1973-			goto error;
./smartcli/libvs/libvs.c-1974-		}
./smartcli/libvs/libvs.c-1975-	}
./smartcli/libvs/libvs.c-1976-
./smartcli/libvs/libvs.c:1977:	if (vserver->pool[0] == 0) {
./smartcli/libvs/libvs.c-1978-		goto error;
./smartcli/libvs/libvs.c-1979-	}
./smartcli/libvs/libvs.c-1980-
./smartcli/libvs/libvs.c-1981-	if (strncmp(vserver->protocol, "http", 4) == 0) {
./smartcli/libvs/libvs.c-1982-		layer = 7;
./smartcli/libvs/libvs.c-1983-	} else {
./smartcli/libvs/libvs.c-1984-		layer = 4;
./smartcli/libvs/libvs.c-1985-	}
./smartcli/libvs/libvs.c-1986-
./smartcli/libvs/libvs.c-1987-	/** 获取当前的应用池中真实服务器个数 **/
./smartcli/libvs/libvs.c:1988:	if ((count = pool_get_counts(cli, vserver->pool)) == 0) {
./smartcli/libvs/libvs.c-1989-		goto error;
./smartcli/libvs/libvs.c-1990-	}
./smartcli/libvs/libvs.c-1991-
./smartcli/libvs/libvs.c-1992-	/** 扫描所有vserver **/
./smartcli/libvs/libvs.c-1993-	list_for_each_entry(tmp, &vs_head, list) {
./smartcli/libvs/libvs.c:1994:		if (tmp->pool[0] == 0) {
./smartcli/libvs/libvs.c-1995-			continue;
./smartcli/libvs/libvs.c-1996-		}
./smartcli/libvs/libvs.c-1997-
./smartcli/libvs/libvs.c-1998-		if (vserver == tmp) {
./smartcli/libvs/libvs.c-1999-			continue;
./smartcli/libvs/libvs.c-2000-		}
./smartcli/libvs/libvs.c-2001-
./smartcli/libvs/libvs.c-2002-		/** vserver layer4 ,  tmp  layer7 **/
./smartcli/libvs/libvs.c-2003-		/** layer4 **/
./smartcli/libvs/libvs.c-2004-		if ( (strncmp(tmp->protocol, "http", 4) != 0 && layer==7) ||
./smartcli/libvs/libvs.c-2005-				(strncmp(tmp->protocol, "http",4)==0 && layer==4 ) ) {
./smartcli/libvs/libvs.c-2006-			continue;
./smartcli/libvs/libvs.c-2007-		}
./smartcli/libvs/libvs.c-2008-
./smartcli/libvs/libvs.c:2009:		if (count == pool_get_counts(cli, tmp->pool)) {
./smartcli/libvs/libvs.c-2010-			if (tmp->persistent[0]==0) {
./smartcli/libvs/libvs.c-2011-				continue;
./smartcli/libvs/libvs.c-2012-			}
./smartcli/libvs/libvs.c-2013-			values[pool_count++] = strdup(tmp->name);
./smartcli/libvs/libvs.c-2014-		}
./smartcli/libvs/libvs.c-2015-	}
./smartcli/libvs/libvs.c-2016-
./smartcli/libvs/libvs.c-2017-error:
./smartcli/libvs/libvs.c-2018-	module_purge_queue(&vs_head, "vserver");
./smartcli/libvs/libvs.c-2019-
--
./smartcli/libvs/libvs.c-2264-	}
./smartcli/libvs/libvs.c-2265-
./smartcli/libvs/libvs.c-2266-	return 0;
./smartcli/libvs/libvs.c-2267-}
./smartcli/libvs/libvs.c-2268-
./smartcli/libvs/libvs.c-2269-/** 重新整理 apppool 命令 **/
./smartcli/libvs/libvs.c-2270-static int do_vserver_configure_apppool_command(struct cli_def *cli,
./smartcli/libvs/libvs.c-2271-		struct cli_command *root, struct vserver *vs)
./smartcli/libvs/libvs.c-2272-{
./smartcli/libvs/libvs.c-2273-	struct cli_command *c;
./smartcli/libvs/libvs.c:2274:	cli_unregister_command(cli, root, "pool");
./smartcli/libvs/libvs.c:2275:	cli_unregister_command(cli, root, "back-pool");
./smartcli/libvs/libvs.c-2276-
./smartcli/libvs/libvs.c-2277-	if (strcmp(vs->contentswitch, "on") == 0 &&
./smartcli/libvs/libvs.c-2278-			(strcmp(vs->protocol, "http") == 0 || 
./smartcli/libvs/libvs.c-2279-			 strcmp(vs->protocol, "https") == 0)) {
./smartcli/libvs/libvs.c-2280-		return 0;
./smartcli/libvs/libvs.c-2281-	}
./smartcli/libvs/libvs.c:2282:	/********** pool <poolname> **********/
./smartcli/libvs/libvs.c:2283:	c = cli_register_command(cli, root, "pool", vs_config_pool,
./smartcli/libvs/libvs.c-2284-			PRIVILEGE_PRIVILEGED, MODE_EXEC,
./smartcli/libvs/libvs.c-2285-			LIBCLI_VSERVER_SET_POOL);
./smartcli/libvs/libvs.c-2286-	cli_command_add_argument(c, "<poolname>", check_pool_type);
./smartcli/libvs/libvs.c-2287-	cli_command_setvalues_func(c, pool_get_values, default_free_values);
./smartcli/libvs/libvs.c-2288-
./smartcli/libvs/libvs.c:2289:	/********** back-pool <poolname> **********/
./smartcli/libvs/libvs.c:2290:	c = cli_register_command(cli, root, "back-pool", vs_config_backpool,
./smartcli/libvs/libvs.c-2291-			PRIVILEGE_PRIVILEGED, MODE_EXEC,
./smartcli/libvs/libvs.c-2292-			LIBCLI_VSERVER_SET_BACKPOOL);
./smartcli/libvs/libvs.c-2293-	cli_command_add_argument(c, "[poolname]", check_pool_type);
./smartcli/libvs/libvs.c-2294-	cli_command_setvalues_func(c, backpool_get_values,
./smartcli/libvs/libvs.c-2295-			default_free_values);
./smartcli/libvs/libvs.c-2296-
./smartcli/libvs/libvs.c-2297-	return 0;
./smartcli/libvs/libvs.c-2298-}
./smartcli/libvs/libvs.c-2299-static int vm_enable_set_default(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libvs/libvs.c-2300-{
--
./smartcli/libvs/libpool.c-245-			if (strcmp(address, argv[0]) == 0
./smartcli/libvs/libpool.c-246-					&& strcmp(rserver->state, "draining") == 0) {
./smartcli/libvs/libpool.c-247-				printf("The realserver is draining, and soon will be automatically deleted.\n");
./smartcli/libvs/libpool.c-248-				ret = CLI_ERROR;
./smartcli/libvs/libpool.c-249-				goto out;
./smartcli/libvs/libpool.c-250-			}
./smartcli/libvs/libpool.c-251-		}
./smartcli/libvs/libpool.c-252-	}
./smartcli/libvs/libpool.c-253-
./smartcli/libvs/libpool.c-254-	if (strcmp(command, "add realserver") == 0) {
./smartcli/libvs/libpool.c:255:		snprintf(buff, 1024, "script4 system pool %s add realserver %s,weight=10,enable=on",
./smartcli/libvs/libpool.c-256-				cli->folder->value, argv[0]);
./smartcli/libvs/libpool.c-257-	} else {
./smartcli/libvs/libpool.c:258:		snprintf(buff, 1024, "script4 system pool %s delete realserver %s",
./smartcli/libvs/libpool.c-259-				cli->folder->value, argv[0]);
./smartcli/libvs/libpool.c-260-	}
./smartcli/libvs/libpool.c-261-
./smartcli/libvs/libpool.c-262-	fp = popen(buff, "r");
./smartcli/libvs/libpool.c-263-	if (fp == NULL) {
./smartcli/libvs/libpool.c-264-		fprintf(stderr, "Internal Error.\r\n");
./smartcli/libvs/libpool.c-265-		ret = CLI_ERROR;
./smartcli/libvs/libpool.c-266-		goto out;
./smartcli/libvs/libpool.c-267-	}
./smartcli/libvs/libpool.c-268-	while (fgets(buff, BUFSIZ, fp) != NULL) { }
--
./smartcli/libvs/libpool.c-276-	module_purge_queue(&head, "apppool");
./smartcli/libvs/libpool.c-277-	return ret;
./smartcli/libvs/libpool.c-278-}
./smartcli/libvs/libpool.c-279-
./smartcli/libvs/libpool.c-280-
./smartcli/libvs/libpool.c-281-/**
./smartcli/libvs/libpool.c-282- * 对realserver进行修改操作
./smartcli/libvs/libpool.c-283- **/
./smartcli/libvs/libpool.c-284-static int do_realserver_config_modify(char *poolname, struct rserver *rserver)
./smartcli/libvs/libpool.c-285-{
./smartcli/libvs/libpool.c:286:	struct apppool *pool;
./smartcli/libvs/libpool.c-287-	FILE *fp;
./smartcli/libvs/libpool.c-288-	char buff[BUFSIZ];
./smartcli/libvs/libpool.c-289-
./smartcli/libvs/libpool.c-290-	char address[BUFSIZ];
./smartcli/libvs/libpool.c-291-	inet_sockaddr2address(&rserver->address, address);
./smartcli/libvs/libpool.c:292:	sprintf(buff, "script4 system pool %s add realserver %s", poolname, address);
./smartcli/libvs/libpool.c-293-
./smartcli/libvs/libpool.c-294-#define RSERVER_SET_VALUE(x, value)					\
./smartcli/libvs/libpool.c-295-	do {								\
./smartcli/libvs/libpool.c-296-		if (value[0] != 0) {					\
./smartcli/libvs/libpool.c-297-			sprintf(buff, "%s,%s=%s", buff, x, value);	\
./smartcli/libvs/libpool.c-298-		}							\
./smartcli/libvs/libpool.c-299-	} while (0)
./smartcli/libvs/libpool.c-300-
./smartcli/libvs/libpool.c-301-	RSERVER_SET_VALUE("weight", rserver->weight);
./smartcli/libvs/libpool.c-302-	RSERVER_SET_VALUE("maxconn", rserver->maxconn);
--
./smartcli/libvs/libpool.c-333-	RSERVER_SET_VALUE("trap_v3_privacy_protocol", rserver->trap_v3_privacy_protocol);
./smartcli/libvs/libpool.c-334-	/* privacy password */
./smartcli/libvs/libpool.c-335-	RSERVER_SET_VALUE("trap_v3_privacy_password", rserver->trap_v3_privacy_password);
./smartcli/libvs/libpool.c-336-	/* authencation usm_name */
./smartcli/libvs/libpool.c-337-	RSERVER_SET_VALUE("username", rserver->username);
./smartcli/libvs/libpool.c-338-	/* authencation password */
./smartcli/libvs/libpool.c-339-	RSERVER_SET_VALUE("password", rserver->password);
./smartcli/libvs/libpool.c-340-	RSERVER_SET_VALUE("cpu", rserver->cpu);
./smartcli/libvs/libpool.c-341-	RSERVER_SET_VALUE("memory", rserver->memory);
./smartcli/libvs/libpool.c-342-
./smartcli/libvs/libpool.c:343:	/* get pool */
./smartcli/libvs/libpool.c-344-	LIST_HEAD(pool_head);
./smartcli/libvs/libpool.c-345-	module_get_queue(&pool_head, "apppool", poolname);
./smartcli/libvs/libpool.c-346-	if (list_empty(&pool_head)) {
./smartcli/libvs/libpool.c-347-		return CLI_ERROR;
./smartcli/libvs/libpool.c-348-	}
./smartcli/libvs/libpool.c:349:	pool = list_first_entry(&pool_head, struct apppool, list);
./smartcli/libvs/libpool.c:350:	if( strcmp(pool->vmtype, "vmware")==0 && strlen(rserver->vmxpath)) {
./smartcli/libvs/libpool.c-351-		char tmp[1024];
./smartcli/libvs/libpool.c-352-		memset(tmp, 0, 1024);
./smartcli/libvs/libpool.c-353-		base64_encode(tmp, 1023, (uint8_t *)rserver->vmxpath,
./smartcli/libvs/libpool.c-354-							strlen(rserver->vmxpath));
./smartcli/libvs/libpool.c-355-		RSERVER_SET_VALUE("vmxpath", tmp);
./smartcli/libvs/libpool.c:356:	} else if(strcmp(pool->vmtype, "xenserver")==0 && strlen(rserver->uuid)) {
./smartcli/libvs/libpool.c-357-		char tmp[1024];
./smartcli/libvs/libpool.c-358-		memset(tmp, 0, 1024);
./smartcli/libvs/libpool.c-359-		base64_encode(tmp, 1023, (uint8_t *)rserver->uuid, 
./smartcli/libvs/libpool.c-360-					strlen(rserver->uuid));
./smartcli/libvs/libpool.c-361-		RSERVER_SET_VALUE("uuid", tmp);
./smartcli/libvs/libpool.c-362-	}
./smartcli/libvs/libpool.c-363-
./smartcli/libvs/libpool.c-364-	if (rserver->rscenter[0] != 0) {
./smartcli/libvs/libpool.c-365-		RSERVER_SET_VALUE("rscenter", rserver->rscenter);
./smartcli/libvs/libpool.c-366-	}
--
./smartcli/libvs/libpool.c-443-			//strcpy(addr, rserver->address);
./smartcli/libvs/libpool.c-444-			inet_sockaddr2address(&rserver->address, addr);
./smartcli/libvs/libpool.c-445-			values[k++] = strdup(addr);
./smartcli/libvs/libpool.c-446-		}
./smartcli/libvs/libpool.c-447-	}
./smartcli/libvs/libpool.c-448-	apppool_queue_purge(&app_head);
./smartcli/libvs/libpool.c-449-
./smartcli/libvs/libpool.c-450-	return k;
./smartcli/libvs/libpool.c-451-}
./smartcli/libvs/libpool.c-452-
./smartcli/libvs/libpool.c:453:static char * get_pool_elastic_desc(struct apppool *pool, char *desc)
./smartcli/libvs/libpool.c-454-{
./smartcli/libvs/libpool.c-455-	desc[0] = 0;
./smartcli/libvs/libpool.c-456-
./smartcli/libvs/libpool.c:457:	if (pool->vmenable[0] != 0) {
./smartcli/libvs/libpool.c:458:		sprintf(desc + strlen(desc), "vmenable=%s,", pool->vmenable);
./smartcli/libvs/libpool.c-459-	}
./smartcli/libvs/libpool.c:460:	if (pool->vmtype[0] != 0) {
./smartcli/libvs/libpool.c:461:		sprintf(desc + strlen(desc), "vmtype=%s,", pool->vmtype);
./smartcli/libvs/libpool.c-462-	}
./smartcli/libvs/libpool.c:463:	if (pool->vminterval[0] != 0) {
./smartcli/libvs/libpool.c:464:		sprintf(desc + strlen(desc), "vminterval=%s,", pool->vminterval);
./smartcli/libvs/libpool.c-465-	}
./smartcli/libvs/libpool.c:466:	if (pool->vmcount[0] != 0) {
./smartcli/libvs/libpool.c:467:		sprintf(desc + strlen(desc), "vmcount=%s,", pool->vmcount);
./smartcli/libvs/libpool.c-468-	}
./smartcli/libvs/libpool.c:469:	if (pool->alive_vm[0] != 0) {
./smartcli/libvs/libpool.c:470:		sprintf(desc + strlen(desc), "alive_vm=%s,", pool->alive_vm);
./smartcli/libvs/libpool.c-471-	}
./smartcli/libvs/libpool.c-472-
./smartcli/libvs/libpool.c-473-	return desc;
./smartcli/libvs/libpool.c-474-}
./smartcli/libvs/libpool.c-475-
./smartcli/libvs/libpool.c-476-
./smartcli/libvs/libpool.c-477-static char * get_rserver_vmx_desc(struct rserver *rserver, char *desc)
./smartcli/libvs/libpool.c-478-{
./smartcli/libvs/libpool.c-479-	desc[0] = 0;
./smartcli/libvs/libpool.c-480-
--
./smartcli/libvs/libpool.c-774-static int _realserver_config_modify(struct cli_def *cli, char *command, char *argv[], int argc, char *poolname, char *rsaddr)
./smartcli/libvs/libpool.c-775-{
./smartcli/libvs/libpool.c-776-	struct apppool *apppool;
./smartcli/libvs/libpool.c-777-	struct rserver *rserver;
./smartcli/libvs/libpool.c-778-	LIST_HEAD(app_head);
./smartcli/libvs/libpool.c-779-
./smartcli/libvs/libpool.c-780-	if (poolname == NULL) {
./smartcli/libvs/libpool.c-781-		return CLI_ERROR;
./smartcli/libvs/libpool.c-782-	}
./smartcli/libvs/libpool.c-783-
./smartcli/libvs/libpool.c:784:	/** get pool **/
./smartcli/libvs/libpool.c-785-	apppool_queue_create(&app_head, poolname);
./smartcli/libvs/libpool.c-786-
./smartcli/libvs/libpool.c-787-	list_for_each_entry(apppool, &app_head, list) {
./smartcli/libvs/libpool.c-788-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartcli/libvs/libpool.c-789-			char address[BUFSIZ];
./smartcli/libvs/libpool.c-790-			inet_sockaddr2address(&rserver->address, address);
./smartcli/libvs/libpool.c-791-			if (rsaddr != NULL && strcmp(rsaddr, address) != 0) {
./smartcli/libvs/libpool.c-792-				continue;
./smartcli/libvs/libpool.c-793-			}
./smartcli/libvs/libpool.c-794-#define RSERVER_SET_VALUE(x,value)					\
--
./smartcli/libvs/libpool.c-869-	apppool_queue_purge(&app_head);
./smartcli/libvs/libpool.c-870-
./smartcli/libvs/libpool.c-871-	return CLI_OK;
./smartcli/libvs/libpool.c-872-}
./smartcli/libvs/libpool.c-873-
./smartcli/libvs/libpool.c-874-static int realserver_config_modify(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libvs/libpool.c-875-{
./smartcli/libvs/libpool.c-876-	struct cli_command *c = cli->folder;
./smartcli/libvs/libpool.c-877-	char *rsaddr = c->value;
./smartcli/libvs/libpool.c-878-
./smartcli/libvs/libpool.c:879:	/** get pool name **/
./smartcli/libvs/libpool.c-880-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libvs/libpool.c-881-
./smartcli/libvs/libpool.c-882-	return _realserver_config_modify(cli, command, argv, argc, c->value, rsaddr);
./smartcli/libvs/libpool.c-883-}
./smartcli/libvs/libpool.c-884-
./smartcli/libvs/libpool.c-885-static int realserver_add_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c-886-{
./smartcli/libvs/libpool.c-887-	struct cli_command *t;
./smartcli/libvs/libpool.c-888-
./smartcli/libvs/libpool.c-889-	t = cli_register_command(cli, parent, "realserver", realserver_new_delete, PRIVILEGE_PRIVILEGED,
--
./smartcli/libvs/libpool.c-906-	struct apppool *apppool;
./smartcli/libvs/libpool.c-907-	struct rserver *rserver;
./smartcli/libvs/libpool.c-908-	LIST_HEAD(app_head);
./smartcli/libvs/libpool.c-909-
./smartcli/libvs/libpool.c-910-	struct cli_command *c = cli->folder;
./smartcli/libvs/libpool.c-911-	char *rsaddr = c->value;
./smartcli/libvs/libpool.c-912-
./smartcli/libvs/libpool.c-913-	/** get poolname **/
./smartcli/libvs/libpool.c-914-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libvs/libpool.c-915-
./smartcli/libvs/libpool.c:916:	/** get pool **/
./smartcli/libvs/libpool.c-917-	apppool_queue_create(&app_head, c->value);
./smartcli/libvs/libpool.c-918-
./smartcli/libvs/libpool.c-919-	if (list_empty(&app_head) ) {
./smartcli/libvs/libpool.c-920-		return -1;
./smartcli/libvs/libpool.c-921-	}
./smartcli/libvs/libpool.c-922-	apppool = list_first_entry(&app_head, struct apppool, list);
./smartcli/libvs/libpool.c-923-	list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartcli/libvs/libpool.c-924-		char address[512] = {0};
./smartcli/libvs/libpool.c-925-		inet_sockaddr2address(&rserver->address, address);
./smartcli/libvs/libpool.c-926-		if(strcmp(address, rsaddr) != 0) {
./smartcli/libvs/libpool.c-927-			continue;
./smartcli/libvs/libpool.c-928-		}
./smartcli/libvs/libpool.c:929:		if(strcmp(apppool->vmenable, "off") == 0 || apppool->vmenable[0] == 0) { //for normal pool print rserver
./smartcli/libvs/libpool.c-930-			realserver_show_for_normal(rserver);	
./smartcli/libvs/libpool.c:931:		}else if(strcmp(apppool->vmenable, "on") == 0) { // for Elastic pool print rserver
./smartcli/libvs/libpool.c-932-			realserver_show_for_elastic(rserver);	
./smartcli/libvs/libpool.c-933-		}
./smartcli/libvs/libpool.c-934-	}
./smartcli/libvs/libpool.c-935-
./smartcli/libvs/libpool.c-936-	apppool_queue_purge(&app_head);
./smartcli/libvs/libpool.c-937-	return CLI_OK;	
./smartcli/libvs/libpool.c-938-}
./smartcli/libvs/libpool.c-939-
./smartcli/libvs/libpool.c-940-
./smartcli/libvs/libpool.c-941-static int do_realserver_configure_show_command(struct cli_def *cli,
--
./smartcli/libvs/libpool.c-945-	struct cli_command *c;
./smartcli/libvs/libpool.c-946-
./smartcli/libvs/libpool.c-947-	cli_unregister_command(cli, root, "show");
./smartcli/libvs/libpool.c-948-	c = cli_register_command(cli, root, "show", rserver_show_default,
./smartcli/libvs/libpool.c-949-			PRIVILEGE_UNPRIVILEGED, MODE_EXEC,
./smartcli/libvs/libpool.c-950-			LIBCLI_VSERVER_SHOW_INFO);
./smartcli/libvs/libpool.c-951-	return CLI_OK;
./smartcli/libvs/libpool.c-952-}
./smartcli/libvs/libpool.c-953-
./smartcli/libvs/libpool.c-954-static int do_realserver_configure_elastic_command(struct cli_def *cli,
./smartcli/libvs/libpool.c:955:		struct cli_command *root, struct rserver *rserver, struct apppool *pool)
./smartcli/libvs/libpool.c-956-{
./smartcli/libvs/libpool.c-957-	struct cli_command *p ;
./smartcli/libvs/libpool.c-958-
./smartcli/libvs/libpool.c-959-	cli_unregister_command(cli, root, "vmxpath");
./smartcli/libvs/libpool.c-960-	cli_unregister_command(cli, root, "uuid");
./smartcli/libvs/libpool.c-961-	/** 资源调度中心 **/
./smartcli/libvs/libpool.c-962-	cli_unregister_command(cli, root, "rscenter");
./smartcli/libvs/libpool.c-963-	cli_unregister_command(cli, root, "vmdatacenter");
./smartcli/libvs/libpool.c-964-
./smartcli/libvs/libpool.c:965:	if(pool->vmenable[0] == 0 || strcmp(pool->vmenable, "off") == 0) {
./smartcli/libvs/libpool.c-966-		//doing nothing
./smartcli/libvs/libpool.c:967:	}else if(strcmp(pool->vmenable, "on") == 0) {
./smartcli/libvs/libpool.c-968-		p = cli_register_command(cli, root, "rscenter", realserver_config_modify,
./smartcli/libvs/libpool.c-969-				PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_REALSERVER_RSCENTER);
./smartcli/libvs/libpool.c-970-		cli_command_add_argument(p, "<Resource scheduling center>", NULL);
./smartcli/libvs/libpool.c-971-		cli_command_setvalues_func(p, vcenter_get_values, default_free_values);
./smartcli/libvs/libpool.c-972-
./smartcli/libvs/libpool.c-973-		/** datacenter **/
./smartcli/libvs/libpool.c:974:		if(strcmp(pool->vmtype, "vcenter") == 0) {
./smartcli/libvs/libpool.c-975-			p = cli_register_command(cli, root, "vmdatacenter", realserver_config_modify,
./smartcli/libvs/libpool.c-976-					PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_REALSERVER_DATACENTER);
./smartcli/libvs/libpool.c-977-			cli_command_add_argument(p, "<VCenter dataceter>", NULL);
./smartcli/libvs/libpool.c-978-			cli_command_setvalues_func(p, vcenter_datacenter_get_values, default_free_values);
./smartcli/libvs/libpool.c-979-		}
./smartcli/libvs/libpool.c-980-
./smartcli/libvs/libpool.c:981:		if(strcmp(pool->vmtype, "vmware") == 0)	{
./smartcli/libvs/libpool.c-982-			p = cli_register_command(cli, root, "vmxpath", realserver_config_modify,
./smartcli/libvs/libpool.c-983-					PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_REALSERVER_VMXPATH);
./smartcli/libvs/libpool.c-984-			cli_command_add_argument(p, "<path>", check_vmxpath);
./smartcli/libvs/libpool.c:985:		}else if(strcmp(pool->vmtype, "xenserver") == 0) {
./smartcli/libvs/libpool.c-986-			p = cli_register_command(cli, root, "uuid", realserver_config_modify,
./smartcli/libvs/libpool.c-987-					PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_REALSERVER_UUID);
./smartcli/libvs/libpool.c-988-			cli_command_add_argument(p, "<uuid>", check_vmxpath);
./smartcli/libvs/libpool.c-989-		}
./smartcli/libvs/libpool.c-990-	}
./smartcli/libvs/libpool.c-991-
./smartcli/libvs/libpool.c-992-	return CLI_OK;
./smartcli/libvs/libpool.c-993-}
./smartcli/libvs/libpool.c-994-
./smartcli/libvs/libpool.c-995-static int do_realserver_configure_commands(struct cli_def *cli, 
./smartcli/libvs/libpool.c-996-		struct cli_command *root, struct rserver *rserver, struct list_head *list)
./smartcli/libvs/libpool.c-997-{
./smartcli/libvs/libpool.c-998-
./smartcli/libvs/libpool.c:999:	struct apppool *pool;
./smartcli/libvs/libpool.c:1000:	list_for_each_entry(pool, list, list) {
./smartcli/libvs/libpool.c-1001-		do_realserver_configure_show_command(cli, root, rserver);
./smartcli/libvs/libpool.c:1002:		do_realserver_configure_elastic_command(cli, root, rserver, pool);
./smartcli/libvs/libpool.c-1003-	}
./smartcli/libvs/libpool.c-1004-	return 0;
./smartcli/libvs/libpool.c-1005-}
./smartcli/libvs/libpool.c-1006-
./smartcli/libvs/libpool.c-1007-static int realserver_configure_commands(struct cli_def *cli, char *rserverip)
./smartcli/libvs/libpool.c-1008-{
./smartcli/libvs/libpool.c-1009-	struct apppool *apppool;
./smartcli/libvs/libpool.c-1010-	struct rserver *rserver;
./smartcli/libvs/libpool.c-1011-	LIST_HEAD(queue);
./smartcli/libvs/libpool.c-1012-
./smartcli/libvs/libpool.c-1013-	struct cli_command *c = cli->folder;
./smartcli/libvs/libpool.c-1014-
./smartcli/libvs/libpool.c-1015-	/** get poolname **/
./smartcli/libvs/libpool.c-1016-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libvs/libpool.c-1017-
./smartcli/libvs/libpool.c:1018:	/** get pool **/
./smartcli/libvs/libpool.c-1019-	apppool_queue_create(&queue, c->value);
./smartcli/libvs/libpool.c-1020-
./smartcli/libvs/libpool.c-1021-	/** 这里有且只有一个成员 **/
./smartcli/libvs/libpool.c-1022-	list_for_each_entry(apppool, &queue, list) {
./smartcli/libvs/libpool.c-1023-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartcli/libvs/libpool.c-1024-			char address[512] = {0};
./smartcli/libvs/libpool.c-1025-			inet_sockaddr2address(&rserver->address, address);
./smartcli/libvs/libpool.c-1026-			if(strcmp(address, rserverip) != 0) {
./smartcli/libvs/libpool.c-1027-				continue;
./smartcli/libvs/libpool.c-1028-			}
--
./smartcli/libvs/libpool.c-1180-	struct show_fmt show_fmt[] = {
./smartcli/libvs/libpool.c-1181-		{12, ""},
./smartcli/libvs/libpool.c-1182-		{21, (char *)attr},
./smartcli/libvs/libpool.c-1183-		{119, (char *)value},
./smartcli/libvs/libpool.c-1184-	};
./smartcli/libvs/libpool.c-1185-
./smartcli/libvs/libpool.c-1186-	show_line(show_fmt, sizeof(show_fmt) / sizeof(struct show_fmt));
./smartcli/libvs/libpool.c-1187-}
./smartcli/libvs/libpool.c-1188-static int pool_print(struct list_head *app_head)
./smartcli/libvs/libpool.c-1189-{
./smartcli/libvs/libpool.c:1190:	struct apppool *pool;
./smartcli/libvs/libpool.c-1191-	
./smartcli/libvs/libpool.c:1192:	list_for_each_entry(pool, app_head, list){
./smartcli/libvs/libpool.c:1193:		if(strcmp(pool->vmenable, "off") == 0 || pool->vmenable[0] == 0) {
./smartcli/libvs/libpool.c:1194:			pool_print_for_normal(pool);
./smartcli/libvs/libpool.c:1195:		}else if(strcmp(pool->vmenable, "on") == 0) {
./smartcli/libvs/libpool.c:1196:			pool_print_for_Elastic(pool);
./smartcli/libvs/libpool.c-1197-		}
./smartcli/libvs/libpool.c-1198-	}
./smartcli/libvs/libpool.c-1199-	
./smartcli/libvs/libpool.c-1200-	return CLI_OK;
./smartcli/libvs/libpool.c-1201-}
./smartcli/libvs/libpool.c-1202-
./smartcli/libvs/libpool.c-1203-
./smartcli/libvs/libpool.c-1204-/****************for Elastic pool_*****************************************/
./smartcli/libvs/libpool.c-1205-static int pool_print_for_Elastic(struct apppool *apppool)
./smartcli/libvs/libpool.c-1206-{
--
./smartcli/libvs/libpool.c-1227-	} while (0)
./smartcli/libvs/libpool.c-1228-
./smartcli/libvs/libpool.c-1229-#define SHOW_VMX_LINE									\
./smartcli/libvs/libpool.c-1230-	do {										\
./smartcli/libvs/libpool.c-1231-		printf("|            |---------------------+-------------"		\
./smartcli/libvs/libpool.c-1232-				"---------------------------------"			\
./smartcli/libvs/libpool.c-1233-				"-------------------------------------------------------------------------+\r\n");		\
./smartcli/libvs/libpool.c-1234-	} while (0)
./smartcli/libvs/libpool.c-1235-
./smartcli/libvs/libpool.c-1236-
./smartcli/libvs/libpool.c:1237:#define SHOW_POOL_HEADER(pool)		\
./smartcli/libvs/libpool.c-1238-	do {	\
./smartcli/libvs/libpool.c-1239-		SHOW_LINE;		\
./smartcli/libvs/libpool.c-1240-		struct show_fmt show_fmt[] = {		\
./smartcli/libvs/libpool.c-1241-			{12, "Pool Name"},		\
./smartcli/libvs/libpool.c-1242-			{21, "RealServer/VMX"},	\
./smartcli/libvs/libpool.c-1243-			{12, "HealthCheck"},	\
./smartcli/libvs/libpool.c-1244-			{60, "VMData"},				\
./smartcli/libvs/libpool.c-1245-			{45, "Notes"},			\
./smartcli/libvs/libpool.c-1246-		};		\
./smartcli/libvs/libpool.c-1247-		show_line(show_fmt, sizeof(show_fmt) / sizeof(struct show_fmt));		\
--
./smartcli/libvs/libpool.c-1383-static int pool_show(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libvs/libpool.c-1384-{
./smartcli/libvs/libpool.c-1385-	LIST_HEAD(app_head);
./smartcli/libvs/libpool.c-1386-
./smartcli/libvs/libpool.c-1387-	cli_send_flush_state_command("vserver");
./smartcli/libvs/libpool.c-1388-
./smartcli/libvs/libpool.c-1389-	/* not implemented */
./smartcli/libvs/libpool.c-1390-	cli_send_flush_state_command("apppool");
./smartcli/libvs/libpool.c-1391-
./smartcli/libvs/libpool.c-1392-	if (strcmp(command, "show") == 0) {
./smartcli/libvs/libpool.c:1393:		/** show one pool **/
./smartcli/libvs/libpool.c-1394-		apppool_queue_create(&app_head, cli->folder->value);
./smartcli/libvs/libpool.c-1395-	} else if (argc == 0) {
./smartcli/libvs/libpool.c:1396:		/** show all pool **/
./smartcli/libvs/libpool.c-1397-		apppool_queue_create(&app_head, NULL);
./smartcli/libvs/libpool.c-1398-	} else {
./smartcli/libvs/libpool.c-1399-		apppool_queue_create(&app_head, strtolower(argv[0]));
./smartcli/libvs/libpool.c-1400-	}
./smartcli/libvs/libpool.c-1401-
./smartcli/libvs/libpool.c-1402-	pool_print(&app_head);
./smartcli/libvs/libpool.c-1403-	apppool_queue_purge(&app_head);
./smartcli/libvs/libpool.c-1404-
./smartcli/libvs/libpool.c-1405-	return CLI_OK;
./smartcli/libvs/libpool.c-1406-}
--
./smartcli/libvs/libpool.c-1419-	fp = popen(buff, "r");
./smartcli/libvs/libpool.c-1420-	if (fp == NULL) {
./smartcli/libvs/libpool.c-1421-		return CLI_ERROR;
./smartcli/libvs/libpool.c-1422-	}
./smartcli/libvs/libpool.c-1423-
./smartcli/libvs/libpool.c-1424-	while (fgets(buff, BUFSIZ, fp) != NULL) {
./smartcli/libvs/libpool.c-1425-	}
./smartcli/libvs/libpool.c-1426-	pclose(fp);
./smartcli/libvs/libpool.c-1427-
./smartcli/libvs/libpool.c-1428-	if (strcmp(buff, "EBUSY") == 0) {
./smartcli/libvs/libpool.c:1429:		printf("Can't delete the busy pool \"%s\"\n", argv[0]);
./smartcli/libvs/libpool.c-1430-	}
./smartcli/libvs/libpool.c-1431-
./smartcli/libvs/libpool.c-1432-	return CLI_OK;
./smartcli/libvs/libpool.c-1433-}
./smartcli/libvs/libpool.c-1434-
./smartcli/libvs/libpool.c-1435-
./smartcli/libvs/libpool.c-1436-static int pool_new(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libvs/libpool.c-1437-{
./smartcli/libvs/libpool.c-1438-	char buff[BUFSIZ];
./smartcli/libvs/libpool.c-1439-
./smartcli/libvs/libpool.c-1440-	if (check_name(cli, cli->folder, argv[0]) != CLI_OK) {
./smartcli/libvs/libpool.c-1441-		return CLI_ERROR;
./smartcli/libvs/libpool.c-1442-	}
./smartcli/libvs/libpool.c-1443-
./smartcli/libvs/libpool.c:1444:	if (strcmp(command, "add pool ipv6") == 0) {
./smartcli/libvs/libpool.c:1445:		sprintf(buff, "script4 system pool %s ipv6", argv[0]);
./smartcli/libvs/libpool.c-1446-	} else {
./smartcli/libvs/libpool.c:1447:		sprintf(buff, "script4 system pool %s ", argv[0]);
./smartcli/libvs/libpool.c-1448-	}
./smartcli/libvs/libpool.c-1449-
./smartcli/libvs/libpool.c-1450-	system(buff);
./smartcli/libvs/libpool.c-1451-
./smartcli/libvs/libpool.c-1452-	return CLI_OK;
./smartcli/libvs/libpool.c-1453-}
./smartcli/libvs/libpool.c-1454-
./smartcli/libvs/libpool.c-1455-static int pool_delete(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libvs/libpool.c-1456-{
./smartcli/libvs/libpool.c-1457-	if (check_name(cli, cli->folder, argv[0]) != CLI_OK) {
--
./smartcli/libvs/libpool.c-1459-	}
./smartcli/libvs/libpool.c-1460-
./smartcli/libvs/libpool.c-1461-	return pool_config(cli, command, argv, argc);
./smartcli/libvs/libpool.c-1462-}
./smartcli/libvs/libpool.c-1463-
./smartcli/libvs/libpool.c-1464-static int pool_config_arg1(struct cli_def *cli,
./smartcli/libvs/libpool.c-1465-		char *command, char *argv[], int argc)
./smartcli/libvs/libpool.c-1466-{
./smartcli/libvs/libpool.c-1467-	char buff[BUFSIZ], resp[BUFSIZ];
./smartcli/libvs/libpool.c-1468-	FILE *fp;
./smartcli/libvs/libpool.c:1469:	char *cmd = "script4 system pool";
./smartcli/libvs/libpool.c-1470-
./smartcli/libvs/libpool.c-1471-	if (argc == 0) {
./smartcli/libvs/libpool.c-1472-		snprintf(buff, BUFSIZ, " %s %s %s ", cmd, cli->folder->value, command);
./smartcli/libvs/libpool.c-1473-	} else {
./smartcli/libvs/libpool.c-1474-		snprintf(buff, BUFSIZ, " %s %s %s %s", cmd, cli->folder->value, command, argv[0]);
./smartcli/libvs/libpool.c-1475-	}
./smartcli/libvs/libpool.c-1476-
./smartcli/libvs/libpool.c-1477-	fp = popen(buff, "r");
./smartcli/libvs/libpool.c-1478-	if (fp == NULL) {
./smartcli/libvs/libpool.c-1479-		fprintf(stderr, "Internal Error.\r\n");
--
./smartcli/libvs/libpool.c-1557-		if (strcasecmp(apppool->name, name) == 0) {
./smartcli/libvs/libpool.c-1558-			return 0;
./smartcli/libvs/libpool.c-1559-		}
./smartcli/libvs/libpool.c-1560-	}
./smartcli/libvs/libpool.c-1561-	apppool_queue_purge(&app_head);
./smartcli/libvs/libpool.c-1562-
./smartcli/libvs/libpool.c-1563-	return -1;
./smartcli/libvs/libpool.c-1564-}
./smartcli/libvs/libpool.c-1565-
./smartcli/libvs/libpool.c-1566-
./smartcli/libvs/libpool.c:1567:/** 检查set pool xxx 中输入的名字合法性 **/
./smartcli/libvs/libpool.c-1568-int pool_check_name(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libvs/libpool.c-1569-{
./smartcli/libvs/libpool.c-1570-	if (value == NULL || strlen(value) == 0) {
./smartcli/libvs/libpool.c-1571-		return CLI_OK;
./smartcli/libvs/libpool.c-1572-	}
./smartcli/libvs/libpool.c-1573-
./smartcli/libvs/libpool.c-1574-	/** 先检查输入合法性 **/
./smartcli/libvs/libpool.c-1575-	if (check_name(cli, c, value) != CLI_OK) {
./smartcli/libvs/libpool.c-1576-		return CLI_ERROR;
./smartcli/libvs/libpool.c-1577-	}
--
./smartcli/libvs/libpool.c-1586-
./smartcli/libvs/libpool.c-1587-
./smartcli/libvs/libpool.c-1588-int pool_show_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c-1589-{
./smartcli/libvs/libpool.c-1590-	struct cli_command *c;
./smartcli/libvs/libpool.c-1591-
./smartcli/libvs/libpool.c-1592-	if (cli == NULL || parent == NULL) {
./smartcli/libvs/libpool.c-1593-		return -1;
./smartcli/libvs/libpool.c-1594-	}
./smartcli/libvs/libpool.c-1595-
./smartcli/libvs/libpool.c:1596:	c = cli_register_command(cli, parent, "pool", pool_show, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1597-			MODE_EXEC, LIBCLI_POOL_SHOW_INFO);
./smartcli/libvs/libpool.c-1598-	cli_command_add_argument(c, "[poolname]", NULL);
./smartcli/libvs/libpool.c-1599-	cli_command_setvalues_func(c, pool_get_values, default_free_values);
./smartcli/libvs/libpool.c-1600-	return 0;
./smartcli/libvs/libpool.c-1601-}
./smartcli/libvs/libpool.c-1602-
./smartcli/libvs/libpool.c-1603-int pool_add_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c-1604-{
./smartcli/libvs/libpool.c-1605-	struct cli_command *c;
./smartcli/libvs/libpool.c-1606-
./smartcli/libvs/libpool.c-1607-	if (cli == NULL || parent == NULL) {
./smartcli/libvs/libpool.c-1608-		return -1;
./smartcli/libvs/libpool.c-1609-	}
./smartcli/libvs/libpool.c-1610-
./smartcli/libvs/libpool.c:1611:	c = cli_register_command(cli, parent, "pool", pool_new, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1612-			MODE_EXEC, LIBCLI_POOL_ADD_INFO);
./smartcli/libvs/libpool.c-1613-	cli_command_add_argument(c, "<poolname>", pool_check_name);
./smartcli/libvs/libpool.c-1614-
./smartcli/libvs/libpool.c-1615-	cli_register_command(cli, c, "ipv4", pool_new, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1616-			MODE_EXEC, LIBCLI_POOL_ADD_INFO);
./smartcli/libvs/libpool.c-1617-	cli_register_command(cli, c, "ipv6", pool_new, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1618-			MODE_EXEC, LIBCLI_POOL_ADD_INFO);
./smartcli/libvs/libpool.c-1619-	return 0;
./smartcli/libvs/libpool.c-1620-}
./smartcli/libvs/libpool.c-1621-__attribute__((unused))
--
./smartcli/libvs/libpool.c-1654-		return CLI_ERROR;
./smartcli/libvs/libpool.c-1655-	}
./smartcli/libvs/libpool.c-1656-}
./smartcli/libvs/libpool.c-1657-
./smartcli/libvs/libpool.c-1658-__attribute__((unused))
./smartcli/libvs/libpool.c-1659-static int pool_vcenter_host_get_values(struct cli_def *cli, char **values)
./smartcli/libvs/libpool.c-1660-{
./smartcli/libvs/libpool.c-1661-	int k = 0;
./smartcli/libvs/libpool.c-1662-	struct vcenter_datacenter *datacenter;
./smartcli/libvs/libpool.c-1663-	struct vcenter *vcenter;
./smartcli/libvs/libpool.c:1664:	struct apppool *pool;
./smartcli/libvs/libpool.c-1665-
./smartcli/libvs/libpool.c-1666-	LIST_HEAD(pool_head);
./smartcli/libvs/libpool.c-1667-	module_get_queue(&pool_head, "apppool", cli->folder->value);
./smartcli/libvs/libpool.c-1668-	if (list_empty(&pool_head)) {
./smartcli/libvs/libpool.c-1669-		goto error1;
./smartcli/libvs/libpool.c-1670-	}
./smartcli/libvs/libpool.c:1671:	pool = list_first_entry(&pool_head, struct apppool, list);
./smartcli/libvs/libpool.c:1672:	if (pool->vmvcenter[0] == 0) {
./smartcli/libvs/libpool.c-1673-		printf("\n\nError: please set vcenter first!\n");
./smartcli/libvs/libpool.c-1674-		goto error1;
./smartcli/libvs/libpool.c-1675-	}
./smartcli/libvs/libpool.c-1676-
./smartcli/libvs/libpool.c-1677-	LIST_HEAD(vcenter_head);
./smartcli/libvs/libpool.c:1678:	module_get_queue(&vcenter_head, "vcenter", pool->vmvcenter);
./smartcli/libvs/libpool.c-1679-	list_for_each_entry(vcenter, &vcenter_head, list) {
./smartcli/libvs/libpool.c:1680:		if (strcmp(pool->vmvcenter, vcenter->name) == 0) {
./smartcli/libvs/libpool.c-1681-			list_for_each_entry(datacenter, &vcenter->datacenter_head, list) {
./smartcli/libvs/libpool.c-1682-				values[k++] = strdup(datacenter->name);
./smartcli/libvs/libpool.c-1683-			}
./smartcli/libvs/libpool.c-1684-			break;
./smartcli/libvs/libpool.c-1685-		}
./smartcli/libvs/libpool.c-1686-	}
./smartcli/libvs/libpool.c-1687-
./smartcli/libvs/libpool.c-1688-	module_purge_queue(&vcenter_head, "vcenter");
./smartcli/libvs/libpool.c-1689-
./smartcli/libvs/libpool.c-1690-error1:
./smartcli/libvs/libpool.c-1691-	module_purge_queue(&pool_head, "apppool");
./smartcli/libvs/libpool.c-1692-
./smartcli/libvs/libpool.c-1693-	return k;
./smartcli/libvs/libpool.c-1694-}
./smartcli/libvs/libpool.c-1695-
./smartcli/libvs/libpool.c-1696-static int pool_show_default(struct cli_def *cli, char *command, char *argv[],
./smartcli/libvs/libpool.c-1697-		int argc)
./smartcli/libvs/libpool.c-1698-{
./smartcli/libvs/libpool.c:1699:	struct apppool *pool = NULL;
./smartcli/libvs/libpool.c-1700-	LIST_HEAD(queue);
./smartcli/libvs/libpool.c-1701-	module_get_queue(&queue, "apppool", cli->folder->value);
./smartcli/libvs/libpool.c-1702-	
./smartcli/libvs/libpool.c-1703-
./smartcli/libvs/libpool.c-1704-	if(list_empty(&queue)){
./smartcli/libvs/libpool.c-1705-		return CLI_ERROR;
./smartcli/libvs/libpool.c-1706-	}
./smartcli/libvs/libpool.c-1707-	
./smartcli/libvs/libpool.c-1708-
./smartcli/libvs/libpool.c:1709:	list_for_each_entry(pool, &queue, list) {
./smartcli/libvs/libpool.c:1710:		if(strcmp(pool->vmenable, "off") == 0 || pool->vmenable[0] == 0) { //just normal pool show 
./smartcli/libvs/libpool.c:1711:			pool_print_for_normal(pool);
./smartcli/libvs/libpool.c:1712:		}else if(strcmp(pool->vmenable, "on") == 0) {//for Elastic pool show
./smartcli/libvs/libpool.c:1713:			pool_print_for_Elastic(pool);	
./smartcli/libvs/libpool.c-1714-		}
./smartcli/libvs/libpool.c-1715-	}
./smartcli/libvs/libpool.c-1716-	return CLI_OK;
./smartcli/libvs/libpool.c-1717-}
./smartcli/libvs/libpool.c-1718-
./smartcli/libvs/libpool.c-1719-
./smartcli/libvs/libpool.c-1720-static int do_pool_configure_show_command(struct cli_def *cli,
./smartcli/libvs/libpool.c:1721:		struct cli_command *root, struct apppool *pool)
./smartcli/libvs/libpool.c-1722-{
./smartcli/libvs/libpool.c-1723-		
./smartcli/libvs/libpool.c-1724-	struct cli_command *c;
./smartcli/libvs/libpool.c-1725-
./smartcli/libvs/libpool.c-1726-	cli_unregister_command(cli, root, "show");
./smartcli/libvs/libpool.c-1727-	c = cli_register_command(cli, root, "show", pool_show_default,
./smartcli/libvs/libpool.c-1728-			PRIVILEGE_UNPRIVILEGED, MODE_EXEC,
./smartcli/libvs/libpool.c-1729-			LIBCLI_VSERVER_SHOW_INFO);
./smartcli/libvs/libpool.c-1730-	return CLI_OK;
./smartcli/libvs/libpool.c-1731-}
./smartcli/libvs/libpool.c-1732-
./smartcli/libvs/libpool.c-1733-static int do_pool_configure_elastic_command(struct cli_def *cli,
./smartcli/libvs/libpool.c:1734:		struct cli_command *root, struct apppool *pool)
./smartcli/libvs/libpool.c-1735-{
./smartcli/libvs/libpool.c-1736-
./smartcli/libvs/libpool.c-1737-	struct cli_command *t;
./smartcli/libvs/libpool.c-1738-	cli_unregister_command(cli, root, "vmtype");
./smartcli/libvs/libpool.c-1739-	cli_unregister_command(cli, root, "vminterval");
./smartcli/libvs/libpool.c-1740-	cli_unregister_command(cli, root, "vmcount");
./smartcli/libvs/libpool.c-1741-	cli_unregister_command(cli, root, "alive_vm");
./smartcli/libvs/libpool.c-1742-	
./smartcli/libvs/libpool.c:1743:	if(strcmp(pool->vmenable, "off") == 0 || pool->vmenable[0] == 0) { //just normal pool show 
./smartcli/libvs/libpool.c-1744-		
./smartcli/libvs/libpool.c-1745-		return CLI_OK;
./smartcli/libvs/libpool.c-1746-		
./smartcli/libvs/libpool.c:1747:	}else if(strcmp(pool->vmenable, "on") == 0) {//for Elastic pool show
./smartcli/libvs/libpool.c-1748-		t = cli_register_command(cli, root, "vmtype", pool_config_arg1,
./smartcli/libvs/libpool.c-1749-				PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VMTYPE);
./smartcli/libvs/libpool.c-1750-		cli_register_command(cli, t, "xenserver", pool_config_arg1, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1751-				MODE_EXEC, LIBCLI_POOL_SET_VMTYPE_XEN);
./smartcli/libvs/libpool.c-1752-		cli_register_command(cli, t, "vcenter", pool_config_arg1, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1753-				MODE_EXEC, LIBCLI_POOL_SET_VMTYPE_VCENTER);
./smartcli/libvs/libpool.c-1754-		t = cli_register_command(cli, root, "vminterval", pool_config_arg1,
./smartcli/libvs/libpool.c-1755-				PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VM_INTERVAL);
./smartcli/libvs/libpool.c-1756-		cli_command_add_argument(t, "<interval>", check_interval);
./smartcli/libvs/libpool.c-1757-
--
./smartcli/libvs/libpool.c-1761-
./smartcli/libvs/libpool.c-1762-		t = cli_register_command(cli, root, "alive_vm", pool_config_arg1,
./smartcli/libvs/libpool.c-1763-				PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VM_ALIVE_COUNT);
./smartcli/libvs/libpool.c-1764-		cli_command_add_argument(t, "<count>", check_vm_counts);
./smartcli/libvs/libpool.c-1765-	}
./smartcli/libvs/libpool.c-1766-
./smartcli/libvs/libpool.c-1767-	return CLI_OK;
./smartcli/libvs/libpool.c-1768-}
./smartcli/libvs/libpool.c-1769-
./smartcli/libvs/libpool.c-1770-static int do_pool_configure_commands(struct cli_def *cli, 
./smartcli/libvs/libpool.c:1771:		struct cli_command *root, struct apppool *pool)
./smartcli/libvs/libpool.c-1772-{
./smartcli/libvs/libpool.c:1773:	do_pool_configure_show_command(cli, root, pool);
./smartcli/libvs/libpool.c:1774:	do_pool_configure_elastic_command(cli, root, pool);
./smartcli/libvs/libpool.c-1775-	return 0;
./smartcli/libvs/libpool.c-1776-}
./smartcli/libvs/libpool.c-1777-static int pool_configure_commands(struct cli_def *cli, char *poolname)
./smartcli/libvs/libpool.c-1778-{
./smartcli/libvs/libpool.c:1779:	struct apppool *pool;
./smartcli/libvs/libpool.c-1780-	LIST_HEAD(queue);
./smartcli/libvs/libpool.c-1781-
./smartcli/libvs/libpool.c-1782-	module_get_queue(&queue, "apppool", poolname);
./smartcli/libvs/libpool.c-1783-
./smartcli/libvs/libpool.c-1784-	/** 这里有且只有一个成员 **/
./smartcli/libvs/libpool.c:1785:	list_for_each_entry(pool, &queue, list) {
./smartcli/libvs/libpool.c:1786:		do_pool_configure_commands(cli, cli->folder, pool);
./smartcli/libvs/libpool.c-1787-	}
./smartcli/libvs/libpool.c-1788-	module_purge_queue(&queue, "apppool");
./smartcli/libvs/libpool.c-1789-
./smartcli/libvs/libpool.c-1790-	return CLI_OK;
./smartcli/libvs/libpool.c-1791-}
./smartcli/libvs/libpool.c-1792-
./smartcli/libvs/libpool.c-1793-static int pool_set_default(struct cli_def *cli, char *command, char *argv[],
./smartcli/libvs/libpool.c-1794-		int argc)
./smartcli/libvs/libpool.c-1795-{
./smartcli/libvs/libpool.c-1796-	pool_configure_commands(cli, argv[0]);
--
./smartcli/libvs/libpool.c-1800-static int vmenable_set_default(struct cli_def *cli, char *command, char *argv[],
./smartcli/libvs/libpool.c-1801-		int argc)
./smartcli/libvs/libpool.c-1802-{
./smartcli/libvs/libpool.c-1803-	pool_config_arg1(cli, command, argv, argc);
./smartcli/libvs/libpool.c-1804-	pool_configure_commands(cli, cli->folder->value);
./smartcli/libvs/libpool.c-1805-	return CLI_OK;
./smartcli/libvs/libpool.c-1806-}
./smartcli/libvs/libpool.c-1807-
./smartcli/libvs/libpool.c-1808-int pool_set_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c-1809-{
./smartcli/libvs/libpool.c:1810:	struct cli_command *pool, *t;
./smartcli/libvs/libpool.c-1811-	if (cli == NULL || parent == NULL) {
./smartcli/libvs/libpool.c-1812-		return -1;
./smartcli/libvs/libpool.c-1813-	}
./smartcli/libvs/libpool.c-1814-
./smartcli/libvs/libpool.c:1815:	pool = cli_register_command(cli, parent, "pool", pool_set_default, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c-1816-			MODE_FOLDER, LIBCLI_POOL_MANAGE_INFO);
./smartcli/libvs/libpool.c:1817:	cli_command_add_argument(pool, "<poolname>", NULL);
./smartcli/libvs/libpool.c:1818:	cli_command_setvalues_func(pool, pool_get_values, default_free_values);
./smartcli/libvs/libpool.c-1819-
./smartcli/libvs/libpool.c:1820:	t = cli_register_command(cli, pool, "add", NULL, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c-1821-			MODE_EXEC, LIBCLI_POOL_SET_ADD_REALSERVER);
./smartcli/libvs/libpool.c-1822-	realserver_add_command(cli, t);
./smartcli/libvs/libpool.c-1823-
./smartcli/libvs/libpool.c:1824:	t = cli_register_command(cli, pool, "delete", NULL, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c-1825-			MODE_EXEC, LIBCLI_POOL_SET_DEL_REALSERVER);
./smartcli/libvs/libpool.c-1826-	realserver_delete_command(cli, t);
./smartcli/libvs/libpool.c-1827-
./smartcli/libvs/libpool.c:1828:	t = cli_register_command(cli, pool, "set", NULL, PRIVILEGE_PRIVILEGED,
./smartcli/libvs/libpool.c-1829-			MODE_EXEC, LIBCLI_POOL_SET_DEL_REALSERVER);
./smartcli/libvs/libpool.c-1830-	realserver_set_command(cli, t);
./smartcli/libvs/libpool.c-1831-
./smartcli/libvs/libpool.c:1832:	t = cli_register_command(cli, pool, "healthcheck", pool_config_healthcheck,
./smartcli/libvs/libpool.c-1833-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_HEALTHCHECK_MANAGE_INFO);
./smartcli/libvs/libpool.c-1834-	cli_command_add_argument(t, "[healthcheckname]", NULL);
./smartcli/libvs/libpool.c-1835-	cli_command_setvalues_func(t, healthcheck_get_values, default_free_values);
./smartcli/libvs/libpool.c-1836-
./smartcli/libvs/libpool.c:1837:	t = cli_register_command(cli, pool, "vmenable", vmenable_set_default,
./smartcli/libvs/libpool.c-1838-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VM_ENABLE);
./smartcli/libvs/libpool.c-1839-	cli_register_command(cli, t, "on", vmenable_set_default,
./smartcli/libvs/libpool.c-1840-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VM_ENABLE_ON);
./smartcli/libvs/libpool.c-1841-	cli_register_command(cli, t, "off", vmenable_set_default,
./smartcli/libvs/libpool.c-1842-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_POOL_SET_VM_ENABLE_OFF);
./smartcli/libvs/libpool.c-1843-
./smartcli/libvs/libpool.c-1844-
./smartcli/libvs/libpool.c-1845-	return 0;
./smartcli/libvs/libpool.c-1846-}
./smartcli/libvs/libpool.c-1847-
./smartcli/libvs/libpool.c-1848-
./smartcli/libvs/libpool.c-1849-int pool_delete_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libvs/libpool.c-1850-{
./smartcli/libvs/libpool.c-1851-	struct cli_command *c;
./smartcli/libvs/libpool.c-1852-
./smartcli/libvs/libpool.c-1853-	if (cli == NULL || parent == NULL) {
./smartcli/libvs/libpool.c-1854-		return -1;
./smartcli/libvs/libpool.c-1855-	}
./smartcli/libvs/libpool.c-1856-
./smartcli/libvs/libpool.c:1857:	c = cli_register_command(cli, parent, "pool", pool_delete, PRIVILEGE_UNPRIVILEGED,
./smartcli/libvs/libpool.c-1858-			MODE_EXEC, LIBCLI_POOL_DELETE_INFO);
./smartcli/libvs/libpool.c-1859-	cli_command_add_argument(c, "<poolname>", NULL);
./smartcli/libvs/libpool.c-1860-	cli_command_setvalues_func(c, pool_get_values, default_free_values);
./smartcli/libvs/libpool.c-1861-
./smartcli/libvs/libpool.c-1862-	return 0;
./smartcli/libvs/libpool.c-1863-}
./smartcli/libvs/libpool.c-1864-
./smartcli/libvs/libpool.c-1865-int pool_search_port(const char *pname, int port)
./smartcli/libvs/libpool.c-1866-{
./smartcli/libvs/libpool.c-1867-	int n;
--
./smartcli/libgslb/gslb_libpool.c-28-	if(check_name(cli, c, value)!=CLI_OK){
./smartcli/libgslb/gslb_libpool.c-29-    	printf("ERROR : vserver '%s' name error.\n", value);
./smartcli/libgslb/gslb_libpool.c-30-    	return CLI_ERROR;
./smartcli/libgslb/gslb_libpool.c-31-  	}
./smartcli/libgslb/gslb_libpool.c-32-
./smartcli/libgslb/gslb_libpool.c-33-  	/* check exist */
./smartcli/libgslb/gslb_libpool.c-34-	LIST_HEAD(queue);
./smartcli/libgslb/gslb_libpool.c-35-	module_get_queue(&queue, "gslb_pool", value);
./smartcli/libgslb/gslb_libpool.c-36-	if (!list_empty(&queue)) {
./smartcli/libgslb/gslb_libpool.c-37-    	ret = CLI_ERROR;
./smartcli/libgslb/gslb_libpool.c:38:    	printf("ERROR : pool '%s' already exists, add failture!\n", value);	
./smartcli/libgslb/gslb_libpool.c-39-	}
./smartcli/libgslb/gslb_libpool.c-40-	module_purge_queue(&queue, "gslb_pool");
./smartcli/libgslb/gslb_libpool.c-41-
./smartcli/libgslb/gslb_libpool.c-42-	return ret; 
./smartcli/libgslb/gslb_libpool.c-43-}
./smartcli/libgslb/gslb_libpool.c-44-
./smartcli/libgslb/gslb_libpool.c-45-
./smartcli/libgslb/gslb_libpool.c-46-int gslb_pool_queue_create(struct list_head *queue, const char *name)
./smartcli/libgslb/gslb_libpool.c-47-{
./smartcli/libgslb/gslb_libpool.c-48-	return module_get_queue(queue, "gslb_pool", name);
--
./smartcli/libgslb/gslb_libpool.c-83-{
./smartcli/libgslb/gslb_libpool.c-84-	struct gslb_pool *gslb_pool;
./smartcli/libgslb/gslb_libpool.c-85-	struct gslb_rserver *gslb_rserver;
./smartcli/libgslb/gslb_libpool.c-86-	LIST_HEAD(app_head);
./smartcli/libgslb/gslb_libpool.c-87-
./smartcli/libgslb/gslb_libpool.c-88-	struct cli_command *c = cli->folder;
./smartcli/libgslb/gslb_libpool.c-89-	char *rsaddr = c->value;
./smartcli/libgslb/gslb_libpool.c-90-	/** get poolname **/
./smartcli/libgslb/gslb_libpool.c-91-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libgslb/gslb_libpool.c-92-
./smartcli/libgslb/gslb_libpool.c:93:	/** get pool **/
./smartcli/libgslb/gslb_libpool.c-94-	gslb_pool_queue_create(&app_head, c->value);
./smartcli/libgslb/gslb_libpool.c-95-
./smartcli/libgslb/gslb_libpool.c-96-
./smartcli/libgslb/gslb_libpool.c-97-#define FORMAT0						\
./smartcli/libgslb/gslb_libpool.c-98-	/** 21 **/ "+---------------------"		\
./smartcli/libgslb/gslb_libpool.c-99-	/** 5 **/ "+----------"			\
./smartcli/libgslb/gslb_libpool.c-100-	/** 10 **/ "+----------"	\
./smartcli/libgslb/gslb_libpool.c-101-	/** 10 **/ "+----------"	\
./smartcli/libgslb/gslb_libpool.c-102-	/** 10 **/ "-----"	\
./smartcli/libgslb/gslb_libpool.c-103-	/** 17 **/ "+-----------------+"	\
--
./smartcli/libgslb/gslb_libpool.c-326-	return CLI_OK;
./smartcli/libgslb/gslb_libpool.c-327-}
./smartcli/libgslb/gslb_libpool.c-328-
./smartcli/libgslb/gslb_libpool.c-329-static int gslb_rserver_new_delete(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libgslb/gslb_libpool.c-330-{
./smartcli/libgslb/gslb_libpool.c-331-	struct cli_command *c = cli->folder;
./smartcli/libgslb/gslb_libpool.c-332-	char buff[BUFSIZ];
./smartcli/libgslb/gslb_libpool.c-333-	LIST_HEAD(head);
./smartcli/libgslb/gslb_libpool.c-334-	char *p = NULL, vsname[1024], vsip[1024];
./smartcli/libgslb/gslb_libpool.c-335-
./smartcli/libgslb/gslb_libpool.c:336:	// find pool name
./smartcli/libgslb/gslb_libpool.c-337-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libgslb/gslb_libpool.c-338-
./smartcli/libgslb/gslb_libpool.c-339-	module_get_queue(&head, "gslb_pool", c->value);
./smartcli/libgslb/gslb_libpool.c-340-	if (list_empty(&head)) {
./smartcli/libgslb/gslb_libpool.c-341-		return CLI_ERROR;
./smartcli/libgslb/gslb_libpool.c-342-	}
./smartcli/libgslb/gslb_libpool.c-343-
./smartcli/libgslb/gslb_libpool.c-344-	if (strcasecmp(command, "device_vsname") == 0) {
./smartcli/libgslb/gslb_libpool.c-345-		if ((p = strchr(argv[0], '-')) == NULL)
./smartcli/libgslb/gslb_libpool.c-346-			return CLI_ERROR;
--
./smartcli/libgslb/gslb_libpool.c-406-					char *poolname, char *rsaddr)
./smartcli/libgslb/gslb_libpool.c-407-{
./smartcli/libgslb/gslb_libpool.c-408-	struct gslb_pool *gslb_pool;
./smartcli/libgslb/gslb_libpool.c-409-	struct gslb_rserver *gslb_rserver;
./smartcli/libgslb/gslb_libpool.c-410-	LIST_HEAD(app_head);
./smartcli/libgslb/gslb_libpool.c-411-
./smartcli/libgslb/gslb_libpool.c-412-	if (poolname == NULL) {
./smartcli/libgslb/gslb_libpool.c-413-		return CLI_ERROR;
./smartcli/libgslb/gslb_libpool.c-414-	}
./smartcli/libgslb/gslb_libpool.c-415-
./smartcli/libgslb/gslb_libpool.c:416:	/** get pool **/
./smartcli/libgslb/gslb_libpool.c-417-	gslb_pool_queue_create(&app_head, poolname);
./smartcli/libgslb/gslb_libpool.c-418-
./smartcli/libgslb/gslb_libpool.c-419-	list_for_each_entry(gslb_pool, &app_head, list) {
./smartcli/libgslb/gslb_libpool.c-420-		list_for_each_entry(gslb_rserver, &gslb_pool->gslb_rserver_head, list) {
./smartcli/libgslb/gslb_libpool.c-421-			char buf[STR_IP_LEN] = {0};
./smartcli/libgslb/gslb_libpool.c-422-#if 0
./smartcli/libgslb/gslb_libpool.c-423-			inet_sockaddr2address(&gslb_rserver->ip, buf);
./smartcli/libgslb/gslb_libpool.c-424-			if (strcmp(rsaddr, buf) != 0 && strcmp(rsaddr, gslb_rserver->device) != 0) {
./smartcli/libgslb/gslb_libpool.c-425-				continue;
./smartcli/libgslb/gslb_libpool.c-426-			}
--
./smartcli/libgslb/gslb_libpool.c-479-	gslb_pool_queue_purge(&app_head);
./smartcli/libgslb/gslb_libpool.c-480-
./smartcli/libgslb/gslb_libpool.c-481-	return CLI_OK;
./smartcli/libgslb/gslb_libpool.c-482-}
./smartcli/libgslb/gslb_libpool.c-483-
./smartcli/libgslb/gslb_libpool.c-484-
./smartcli/libgslb/gslb_libpool.c-485-static int gslb_rserver_config_modify(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libgslb/gslb_libpool.c-486-{
./smartcli/libgslb/gslb_libpool.c-487-	struct cli_command *c = cli->folder;
./smartcli/libgslb/gslb_libpool.c-488-	char *rsaddr = c->value;
./smartcli/libgslb/gslb_libpool.c:489:	/** get pool name **/
./smartcli/libgslb/gslb_libpool.c-490-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libgslb/gslb_libpool.c-491-	return _gslb_rserver_config_modify(cli, command, argv, argc, c->value, rsaddr);
./smartcli/libgslb/gslb_libpool.c-492-}
./smartcli/libgslb/gslb_libpool.c-493-
./smartcli/libgslb/gslb_libpool.c-494-__attribute__((unused))
./smartcli/libgslb/gslb_libpool.c-495-static int check_weight_range(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libgslb/gslb_libpool.c-496-{
./smartcli/libgslb/gslb_libpool.c-497-	if (check_num_range(cli, c, 1, 100, value) != CLI_OK) {
./smartcli/libgslb/gslb_libpool.c-498-		return CLI_ERROR;
./smartcli/libgslb/gslb_libpool.c-499-	}
--
./smartcli/libgslb/gslb_libpool.c-678-
./smartcli/libgslb/gslb_libpool.c-679-	return k;
./smartcli/libgslb/gslb_libpool.c-680-}
./smartcli/libgslb/gslb_libpool.c-681-
./smartcli/libgslb/gslb_libpool.c-682-static int gslb_pool_show(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libgslb/gslb_libpool.c-683-{
./smartcli/libgslb/gslb_libpool.c-684-	LIST_HEAD(head);
./smartcli/libgslb/gslb_libpool.c-685-
./smartcli/libgslb/gslb_libpool.c-686-	if (strcmp(command, "show") == 0) {
./smartcli/libgslb/gslb_libpool.c-687-		module_get_queue(&head, "gslb_pool", cli->folder->value);
./smartcli/libgslb/gslb_libpool.c:688:	} else if (!strcmp(command, "show pool")) {
./smartcli/libgslb/gslb_libpool.c-689-		if (argc == 0) {
./smartcli/libgslb/gslb_libpool.c-690-			module_get_queue(&head, "gslb_pool", NULL);
./smartcli/libgslb/gslb_libpool.c-691-		} else {
./smartcli/libgslb/gslb_libpool.c-692-			module_get_queue(&head, "gslb_pool", strtolower(argv[0]));
./smartcli/libgslb/gslb_libpool.c-693-		}
./smartcli/libgslb/gslb_libpool.c-694-	}
./smartcli/libgslb/gslb_libpool.c-695-
./smartcli/libgslb/gslb_libpool.c-696-	gslb_pool_print(&head);
./smartcli/libgslb/gslb_libpool.c-697-	module_purge_queue(&head, "gslb_pool");
./smartcli/libgslb/gslb_libpool.c-698-
--
./smartcli/libgslb/gslb_libpool.c-936-						char *command, 
./smartcli/libgslb/gslb_libpool.c-937-						char *argv[], int argc)
./smartcli/libgslb/gslb_libpool.c-938-{
./smartcli/libgslb/gslb_libpool.c-939-	char buff[BUFSIZ];
./smartcli/libgslb/gslb_libpool.c-940-	struct gslb_rserver *gslb_rserver;
./smartcli/libgslb/gslb_libpool.c-941-	struct gslb_pool *gslb_pool;
./smartcli/libgslb/gslb_libpool.c-942-	struct cli_command *c = cli->folder;
./smartcli/libgslb/gslb_libpool.c-943-	char *rsaddr = c->value;
./smartcli/libgslb/gslb_libpool.c-944-	LIST_HEAD(queue);
./smartcli/libgslb/gslb_libpool.c-945-	char ipaddr[BUFSIZ];
./smartcli/libgslb/gslb_libpool.c:946:	/** get pool name **/
./smartcli/libgslb/gslb_libpool.c-947-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libgslb/gslb_libpool.c-948-
./smartcli/libgslb/gslb_libpool.c-949-	module_get_queue(&queue, "gslb_pool", c->value);
./smartcli/libgslb/gslb_libpool.c-950-	list_for_each_entry(gslb_pool, &queue, list){
./smartcli/libgslb/gslb_libpool.c-951-		list_for_each_entry(gslb_rserver, &gslb_pool->gslb_rserver_head, list) {
./smartcli/libgslb/gslb_libpool.c-952-			char *ptr = NULL;
./smartcli/libgslb/gslb_libpool.c-953-			char realserver[256] = {0};
./smartcli/libgslb/gslb_libpool.c-954-			char device_vsname[256] = {0};
./smartcli/libgslb/gslb_libpool.c-955-			ptr = strchr(rsaddr, '-');
./smartcli/libgslb/gslb_libpool.c-956-			
--
./smartcli/libgslb/gslb_libpool.c-1000-}
./smartcli/libgslb/gslb_libpool.c-1001-
./smartcli/libgslb/gslb_libpool.c-1002-int gslb_pool_show_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libgslb/gslb_libpool.c-1003-{
./smartcli/libgslb/gslb_libpool.c-1004-	struct cli_command *c;
./smartcli/libgslb/gslb_libpool.c-1005-
./smartcli/libgslb/gslb_libpool.c-1006-	if (cli == NULL || parent == NULL) {
./smartcli/libgslb/gslb_libpool.c-1007-		return -1;
./smartcli/libgslb/gslb_libpool.c-1008-	}
./smartcli/libgslb/gslb_libpool.c-1009-
./smartcli/libgslb/gslb_libpool.c:1010:	c = cli_register_command(cli, parent, "pool", gslb_pool_show, PRIVILEGE_UNPRIVILEGED,
./smartcli/libgslb/gslb_libpool.c-1011-			MODE_EXEC, LIBCLI_GSLB_POOL_SHOW_INFO);
./smartcli/libgslb/gslb_libpool.c-1012-	cli_command_add_argument(c, "[name]", NULL);
./smartcli/libgslb/gslb_libpool.c-1013-	cli_command_setvalues_func(c, gslb_pool_get_values, default_free_values);
./smartcli/libgslb/gslb_libpool.c-1014-
./smartcli/libgslb/gslb_libpool.c-1015-	return 0;
./smartcli/libgslb/gslb_libpool.c-1016-}
./smartcli/libgslb/gslb_libpool.c-1017-
./smartcli/libgslb/gslb_libpool.c-1018-int gslb_pool_add_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libgslb/gslb_libpool.c-1019-{
./smartcli/libgslb/gslb_libpool.c-1020-	struct cli_command *c;
./smartcli/libgslb/gslb_libpool.c-1021-
./smartcli/libgslb/gslb_libpool.c-1022-	if (cli == NULL || parent == NULL) {
./smartcli/libgslb/gslb_libpool.c-1023-		return -1;
./smartcli/libgslb/gslb_libpool.c-1024-	}
./smartcli/libgslb/gslb_libpool.c-1025-
./smartcli/libgslb/gslb_libpool.c:1026:	c = cli_register_command(cli, parent, "pool", gslb_pool_new, PRIVILEGE_UNPRIVILEGED,
./smartcli/libgslb/gslb_libpool.c-1027-			MODE_EXEC, LIBCLI_GSLB_POOL_ADD_INFO);
./smartcli/libgslb/gslb_libpool.c-1028-	cli_command_add_argument(c, "<gslb_pool name>", pool_add_check);
./smartcli/libgslb/gslb_libpool.c-1029-	return 0;
./smartcli/libgslb/gslb_libpool.c-1030-}
./smartcli/libgslb/gslb_libpool.c-1031-
./smartcli/libgslb/gslb_libpool.c-1032-int gslb_pool_set_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libgslb/gslb_libpool.c-1033-{
./smartcli/libgslb/gslb_libpool.c-1034-	struct cli_command *gslb_pool, *t;
./smartcli/libgslb/gslb_libpool.c-1035-
./smartcli/libgslb/gslb_libpool.c-1036-	if (cli == NULL || parent == NULL) {
./smartcli/libgslb/gslb_libpool.c-1037-		return -1;
./smartcli/libgslb/gslb_libpool.c-1038-	}
./smartcli/libgslb/gslb_libpool.c:1039:	gslb_pool = cli_register_command(cli, parent, "pool", NULL, PRIVILEGE_PRIVILEGED,
./smartcli/libgslb/gslb_libpool.c-1040-			MODE_FOLDER, LIBCLI_GSLB_POOL_MANAGE_INFO);
./smartcli/libgslb/gslb_libpool.c-1041-	cli_command_add_argument(gslb_pool, "<gslb_pool name>", NULL);
./smartcli/libgslb/gslb_libpool.c-1042-	cli_command_setvalues_func(gslb_pool, gslb_pool_get_values, default_free_values);
./smartcli/libgslb/gslb_libpool.c-1043-
./smartcli/libgslb/gslb_libpool.c-1044-/********************GSLB Pool show************************************************/
./smartcli/libgslb/gslb_libpool.c-1045-	t = cli_register_command(cli, gslb_pool, "show", gslb_pool_show,
./smartcli/libgslb/gslb_libpool.c-1046-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_GSLB_RSERVER_SHOW_INFO);
./smartcli/libgslb/gslb_libpool.c-1047-
./smartcli/libgslb/gslb_libpool.c-1048-	t = cli_register_command(cli, gslb_pool, "healthcheck", gslb_pool_config_arg,
./smartcli/libgslb/gslb_libpool.c-1049-			PRIVILEGE_PRIVILEGED, MODE_EXEC, LIBCLI_GSLB_POOL_SET_HEALTHCHECK);
--
./smartcli/libgslb/gslb_libpool.c-1068-}
./smartcli/libgslb/gslb_libpool.c-1069-
./smartcli/libgslb/gslb_libpool.c-1070-int gslb_pool_delete_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libgslb/gslb_libpool.c-1071-{
./smartcli/libgslb/gslb_libpool.c-1072-	struct cli_command *c;
./smartcli/libgslb/gslb_libpool.c-1073-
./smartcli/libgslb/gslb_libpool.c-1074-	if (cli == NULL || parent == NULL) {
./smartcli/libgslb/gslb_libpool.c-1075-		return -1;
./smartcli/libgslb/gslb_libpool.c-1076-	}
./smartcli/libgslb/gslb_libpool.c-1077-
./smartcli/libgslb/gslb_libpool.c:1078:	c = cli_register_command(cli, parent, "pool", gslb_pool_delete, PRIVILEGE_UNPRIVILEGED,
./smartcli/libgslb/gslb_libpool.c-1079-			MODE_EXEC, LIBCLI_GSLB_POOL_DELETE_INFO);
./smartcli/libgslb/gslb_libpool.c-1080-	cli_command_add_argument(c, "<gslb_pool name>", gslb_pool_exists);
./smartcli/libgslb/gslb_libpool.c-1081-	cli_command_setvalues_func(c, gslb_pool_get_values, default_free_values);
./smartcli/libgslb/gslb_libpool.c-1082-	return 0;
./smartcli/libgslb/gslb_libpool.c-1083-}
--
./smartcli/libgslb/gslb_libdevice.c-178-			}
./smartcli/libgslb/gslb_libdevice.c-179-		}
./smartcli/libgslb/gslb_libdevice.c-180-	}
./smartcli/libgslb/gslb_libdevice.c-181-out:
./smartcli/libgslb/gslb_libdevice.c-182-	module_purge_queue(&queue, "gslb_group");
./smartcli/libgslb/gslb_libdevice.c-183-	return rc;
./smartcli/libgslb/gslb_libdevice.c-184-}
./smartcli/libgslb/gslb_libdevice.c-185-
./smartcli/libgslb/gslb_libdevice.c-186-static int gslb_device_unused_check_pool(struct cli_def *cli, char *command, char *argv[], int argc, char *device_name)
./smartcli/libgslb/gslb_libdevice.c-187-{
./smartcli/libgslb/gslb_libdevice.c:188:	struct gslb_pool *pool = NULL;
./smartcli/libgslb/gslb_libdevice.c-189-	struct gslb_rserver *rserver = NULL;
./smartcli/libgslb/gslb_libdevice.c-190-	LIST_HEAD(queue);
./smartcli/libgslb/gslb_libdevice.c-191-	int rc = CLI_OK;
./smartcli/libgslb/gslb_libdevice.c-192-
./smartcli/libgslb/gslb_libdevice.c-193-	module_get_queue(&queue, "gslb_pool", NULL);
./smartcli/libgslb/gslb_libdevice.c:194:	list_for_each_entry(pool, &queue, list) {
./smartcli/libgslb/gslb_libdevice.c:195:		list_for_each_entry(rserver, &pool->gslb_rserver_head, list) {
./smartcli/libgslb/gslb_libdevice.c-196-			if (strcasecmp(rserver->device, device_name) == 0) {
./smartcli/libgslb/gslb_libdevice.c:197:				printf("Device [%s] is using by pool [%s], so not allow modify!\n", 
./smartcli/libgslb/gslb_libdevice.c:198:						device_name, pool->name);
./smartcli/libgslb/gslb_libdevice.c-199-				rc = CLI_ERROR;
./smartcli/libgslb/gslb_libdevice.c-200-				goto out;
./smartcli/libgslb/gslb_libdevice.c-201-			}
./smartcli/libgslb/gslb_libdevice.c-202-		}
./smartcli/libgslb/gslb_libdevice.c-203-	}
./smartcli/libgslb/gslb_libdevice.c-204-out:
./smartcli/libgslb/gslb_libdevice.c-205-	module_purge_queue(&queue, "gslb_pool");
./smartcli/libgslb/gslb_libdevice.c-206-	return rc;
./smartcli/libgslb/gslb_libdevice.c-207-}
./smartcli/libgslb/gslb_libdevice.c-208-
--
./smartcli/libllb/llb_libpool.c-14-
./smartcli/libllb/llb_libpool.c-15-
./smartcli/libllb/llb_libpool.c-16-#include "check/check.h"
./smartcli/libllb/llb_libpool.c-17-#include "libcli/str_desc.h"
./smartcli/libllb/llb_libpool.c-18-#include "llb/llb_pool.h"
./smartcli/libllb/llb_libpool.c-19-#include "loadbalance/healthcheck.h"
./smartcli/libllb/llb_libpool.c-20-
./smartcli/libllb/llb_libpool.c-21-
./smartcli/libllb/llb_libpool.c-22-int llb_pool_delete_check(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libllb/llb_libpool.c-23-{
./smartcli/libllb/llb_libpool.c:24:	struct llb_pool *pool;
./smartcli/libllb/llb_libpool.c-25-	LIST_HEAD(queue);
./smartcli/libllb/llb_libpool.c-26-	module_get_queue(&queue, "llb_pool", value);
./smartcli/libllb/llb_libpool.c-27-	
./smartcli/libllb/llb_libpool.c-28-	if(list_empty(&queue)) {
./smartcli/libllb/llb_libpool.c-29-		return CLI_ERROR;
./smartcli/libllb/llb_libpool.c-30-	}
./smartcli/libllb/llb_libpool.c-31-
./smartcli/libllb/llb_libpool.c:32:	pool = list_first_entry(&queue, struct llb_pool, list);
./smartcli/libllb/llb_libpool.c-33-	
./smartcli/libllb/llb_libpool.c:34:	if(Is_llb_pool_busy(pool) == 1) {
./smartcli/libllb/llb_libpool.c-35-		fprintf(stderr, "ERROR: %s is used by vserver!\n", value);
./smartcli/libllb/llb_libpool.c-36-		module_purge_queue(&queue, "llb_pool");
./smartcli/libllb/llb_libpool.c-37-		return CLI_ERROR;
./smartcli/libllb/llb_libpool.c-38-	}
./smartcli/libllb/llb_libpool.c-39-	
./smartcli/libllb/llb_libpool.c-40-	module_purge_queue(&queue, "llb_pool");
./smartcli/libllb/llb_libpool.c-41-	return CLI_OK;
./smartcli/libllb/llb_libpool.c-42-}
./smartcli/libllb/llb_libpool.c-43-int llb_pool_get_healthcheck_values(struct cli_def *cli, char **values)
./smartcli/libllb/llb_libpool.c-44-{
--
./smartcli/libllb/llb_libpool.c-304-static int _llb_rserver_config_modify(struct cli_def *cli, char *command, char *argv[], int argc, char *poolname, char *rsaddr)
./smartcli/libllb/llb_libpool.c-305-{
./smartcli/libllb/llb_libpool.c-306-	struct llb_pool *llb_pool;
./smartcli/libllb/llb_libpool.c-307-	struct llb_rserver *llb_rserver;
./smartcli/libllb/llb_libpool.c-308-	LIST_HEAD(app_head);
./smartcli/libllb/llb_libpool.c-309-
./smartcli/libllb/llb_libpool.c-310-	if (poolname == NULL) {
./smartcli/libllb/llb_libpool.c-311-		return CLI_ERROR;
./smartcli/libllb/llb_libpool.c-312-	}
./smartcli/libllb/llb_libpool.c-313-
./smartcli/libllb/llb_libpool.c:314:	/** get pool **/
./smartcli/libllb/llb_libpool.c-315-	llb_pool_queue_create(&app_head, poolname);
./smartcli/libllb/llb_libpool.c-316-
./smartcli/libllb/llb_libpool.c-317-	list_for_each_entry(llb_pool, &app_head, list) {
./smartcli/libllb/llb_libpool.c-318-		list_for_each_entry(llb_rserver, &llb_pool->rserver_head, list) {
./smartcli/libllb/llb_libpool.c-319-			char address[BUFSIZ];
./smartcli/libllb/llb_libpool.c-320-			inet_sockaddr2ip(&llb_rserver->address, address);
./smartcli/libllb/llb_libpool.c-321-			if (rsaddr != NULL && strcmp(rsaddr, address) != 0) {
./smartcli/libllb/llb_libpool.c-322-				continue;
./smartcli/libllb/llb_libpool.c-323-			}
./smartcli/libllb/llb_libpool.c-324-#define RSERVER_SET_VALUE(x,value)					\
--
./smartcli/libllb/llb_libpool.c-348-	llb_pool_queue_purge(&app_head);
./smartcli/libllb/llb_libpool.c-349-
./smartcli/libllb/llb_libpool.c-350-	return CLI_OK;
./smartcli/libllb/llb_libpool.c-351-}
./smartcli/libllb/llb_libpool.c-352-
./smartcli/libllb/llb_libpool.c-353-static int llb_rserver_config_modify(struct cli_def *cli, char *command, char *argv[], int argc)
./smartcli/libllb/llb_libpool.c-354-{
./smartcli/libllb/llb_libpool.c-355-	struct cli_command *c = cli->folder;
./smartcli/libllb/llb_libpool.c-356-	char *rsaddr = c->value;
./smartcli/libllb/llb_libpool.c-357-
./smartcli/libllb/llb_libpool.c:358:	/** get pool name **/
./smartcli/libllb/llb_libpool.c-359-	while ((c = c->parent) != NULL && c->mode != MODE_FOLDER);
./smartcli/libllb/llb_libpool.c-360-
./smartcli/libllb/llb_libpool.c-361-	return _llb_rserver_config_modify(cli, command, argv, argc, c->value, rsaddr);
./smartcli/libllb/llb_libpool.c-362-}
./smartcli/libllb/llb_libpool.c-363-
./smartcli/libllb/llb_libpool.c-364-
./smartcli/libllb/llb_libpool.c-365-
./smartcli/libllb/llb_libpool.c-366-
./smartcli/libllb/llb_libpool.c-367-static int llb_rserver_add_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libllb/llb_libpool.c-368-{
--
./smartcli/libllb/llb_libpool.c-689-	while(*ptr != '\0') {
./smartcli/libllb/llb_libpool.c-690-		if (!isalpha(*ptr) && !isdigit(*ptr) && *ptr != '_' ) {
./smartcli/libllb/llb_libpool.c-691-			return CLI_ERROR;
./smartcli/libllb/llb_libpool.c-692-		}
./smartcli/libllb/llb_libpool.c-693-		ptr++;
./smartcli/libllb/llb_libpool.c-694-	}
./smartcli/libllb/llb_libpool.c-695-	
./smartcli/libllb/llb_libpool.c-696-	return CLI_OK;
./smartcli/libllb/llb_libpool.c-697-}
./smartcli/libllb/llb_libpool.c-698-
./smartcli/libllb/llb_libpool.c:699:/** 检查set pool xxx 中输入的名字合法性 **/
./smartcli/libllb/llb_libpool.c-700-int llb_pool_check_name(struct cli_def *cli, struct cli_command *c, char *value)
./smartcli/libllb/llb_libpool.c-701-{
./smartcli/libllb/llb_libpool.c-702-	if (value == NULL || strlen(value) == 0) {
./smartcli/libllb/llb_libpool.c-703-		return CLI_OK;
./smartcli/libllb/llb_libpool.c-704-	}
./smartcli/libllb/llb_libpool.c-705-
./smartcli/libllb/llb_libpool.c-706-	/** 先检查输入合法性 **/
./smartcli/libllb/llb_libpool.c-707-	if (llb_check_poolname(cli, c, value) != CLI_OK) {
./smartcli/libllb/llb_libpool.c-708-		return CLI_ERROR;
./smartcli/libllb/llb_libpool.c-709-	}
--
./smartcli/libllb/llb_libpool.c-717-
./smartcli/libllb/llb_libpool.c-718-
./smartcli/libllb/llb_libpool.c-719-int llb_pool_show_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libllb/llb_libpool.c-720-{
./smartcli/libllb/llb_libpool.c-721-	struct cli_command *c;
./smartcli/libllb/llb_libpool.c-722-
./smartcli/libllb/llb_libpool.c-723-	if (cli == NULL || parent == NULL) {
./smartcli/libllb/llb_libpool.c-724-		return -1;
./smartcli/libllb/llb_libpool.c-725-	}
./smartcli/libllb/llb_libpool.c-726-
./smartcli/libllb/llb_libpool.c:727:	c = cli_register_command(cli, parent, "pool", llb_pool_show, PRIVILEGE_UNPRIVILEGED,
./smartcli/libllb/llb_libpool.c-728-			MODE_EXEC, LIBCLI_LLB_POOL_SHOW_INFO);
./smartcli/libllb/llb_libpool.c-729-	cli_command_add_argument(c, "[poolname]", NULL);
./smartcli/libllb/llb_libpool.c-730-	cli_command_setvalues_func(c, llb_pool_get_values, default_free_values);
./smartcli/libllb/llb_libpool.c-731-
./smartcli/libllb/llb_libpool.c-732-	return 0;
./smartcli/libllb/llb_libpool.c-733-}
./smartcli/libllb/llb_libpool.c-734-
./smartcli/libllb/llb_libpool.c-735-int llb_pool_add_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libllb/llb_libpool.c-736-{
./smartcli/libllb/llb_libpool.c-737-	struct cli_command *c;
./smartcli/libllb/llb_libpool.c-738-
./smartcli/libllb/llb_libpool.c-739-	if (cli == NULL || parent == NULL) {
./smartcli/libllb/llb_libpool.c-740-		return -1;
./smartcli/libllb/llb_libpool.c-741-	}
./smartcli/libllb/llb_libpool.c-742-
./smartcli/libllb/llb_libpool.c:743:	c = cli_register_command(cli, parent, "pool", llb_pool_new, PRIVILEGE_UNPRIVILEGED,
./smartcli/libllb/llb_libpool.c-744-			MODE_EXEC, LIBCLI_LLB_POOL_ADD_INFO);
./smartcli/libllb/llb_libpool.c-745-	cli_command_add_argument(c, "<poolname>", llb_pool_check_name);
./smartcli/libllb/llb_libpool.c-746-
./smartcli/libllb/llb_libpool.c-747-	return 0;
./smartcli/libllb/llb_libpool.c-748-}
./smartcli/libllb/llb_libpool.c-749-
./smartcli/libllb/llb_libpool.c-750-int llb_pool_set_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libllb/llb_libpool.c-751-{
./smartcli/libllb/llb_libpool.c-752-	struct cli_command *llb_pool, *t;
./smartcli/libllb/llb_libpool.c-753-	if (cli == NULL || parent == NULL) {
./smartcli/libllb/llb_libpool.c-754-		return -1;
./smartcli/libllb/llb_libpool.c-755-	}
./smartcli/libllb/llb_libpool.c-756-
./smartcli/libllb/llb_libpool.c:757:	llb_pool = cli_register_command(cli, parent, "pool", NULL, PRIVILEGE_PRIVILEGED,
./smartcli/libllb/llb_libpool.c-758-			MODE_FOLDER, LIBCLI_LLB_POOL_MANAGE_INFO);
./smartcli/libllb/llb_libpool.c-759-	cli_command_add_argument(llb_pool, "<poolname>", NULL);
./smartcli/libllb/llb_libpool.c-760-	cli_command_setvalues_func(llb_pool, llb_pool_get_values, default_free_values);
./smartcli/libllb/llb_libpool.c-761-
./smartcli/libllb/llb_libpool.c-762-	/**** SHOW command ****/
./smartcli/libllb/llb_libpool.c-763-	t = cli_register_command(cli, llb_pool, "show", llb_pool_show, PRIVILEGE_PRIVILEGED,
./smartcli/libllb/llb_libpool.c-764-			MODE_EXEC, LIBCLI_LLB_POOL_SHOW_INFO);
./smartcli/libllb/llb_libpool.c-765-	healthcheck_show_command(cli, t);
./smartcli/libllb/llb_libpool.c-766-
./smartcli/libllb/llb_libpool.c-767-	/**** ADD command ****/
--
./smartcli/libllb/llb_libpool.c-788-}
./smartcli/libllb/llb_libpool.c-789-
./smartcli/libllb/llb_libpool.c-790-int llb_pool_delete_command(struct cli_def *cli, struct cli_command *parent)
./smartcli/libllb/llb_libpool.c-791-{
./smartcli/libllb/llb_libpool.c-792-	struct cli_command *c;
./smartcli/libllb/llb_libpool.c-793-
./smartcli/libllb/llb_libpool.c-794-	if (cli == NULL || parent == NULL) {
./smartcli/libllb/llb_libpool.c-795-		return -1;
./smartcli/libllb/llb_libpool.c-796-	}
./smartcli/libllb/llb_libpool.c-797-
./smartcli/libllb/llb_libpool.c:798:	c = cli_register_command(cli, parent, "pool", llb_pool_delete, PRIVILEGE_UNPRIVILEGED,
./smartcli/libllb/llb_libpool.c-799-			MODE_EXEC, LIBCLI_LLB_POOL_DELETE_INFO);
./smartcli/libllb/llb_libpool.c-800-	cli_command_add_argument(c, "<poolname>", llb_pool_delete_check);
./smartcli/libllb/llb_libpool.c-801-	cli_command_setvalues_func(c, llb_pool_get_values, default_free_values);
./smartcli/libllb/llb_libpool.c-802-
./smartcli/libllb/llb_libpool.c-803-	return 0;
./smartcli/libllb/llb_libpool.c-804-}
./smartcli/libllb/llb_libpool.c-805-
--
./web_ext/web_filter/mod_web_filter.c-86-	 * src[0].value.str = vb
./web_ext/web_filter/mod_web_filter.c-87-	 * src[1].str = ]所用应用池[
./web_ext/web_filter/mod_web_filter.c-88-	 * src[1].value.str = pa
./web_ext/web_filter/mod_web_filter.c-89-	 * src[2].str = ]中的真实服务器[
./web_ext/web_filter/mod_web_filter.c-90-	 * src[2].value.str = 192.168.10.220:80
./web_ext/web_filter/mod_web_filter.c-91-	 * src[3].str = ]已经启动/停止
./web_ext/web_filter/mod_web_filter.c-92-	 * src[3].value.str = NULL
./web_ext/web_filter/mod_web_filter.c-93-	 * src[4].str = NULL
./web_ext/web_filter/mod_web_filter.c-94-	 * 
./web_ext/web_filter/mod_web_filter.c-95-	 * Detected the real server[192.168.10.220:80] belonged to the Virtual Server[vb]
./web_ext/web_filter/mod_web_filter.c:96:	 *     entitled with application pool[pa] already started/stopped
./web_ext/web_filter/mod_web_filter.c-97-	 * ========>
./web_ext/web_filter/mod_web_filter.c-98-	 * dst[0].str = Detected the real server[
./web_ext/web_filter/mod_web_filter.c-99-	 * dst[0].order = 2
./web_ext/web_filter/mod_web_filter.c-100-	 * dst[1].str = ] belonged to the Virtual Server[
./web_ext/web_filter/mod_web_filter.c-101-	 * dst[0].order = 0
./web_ext/web_filter/mod_web_filter.c:102:	 * dst[2].str = ] entitled with application pool[
./web_ext/web_filter/mod_web_filter.c-103-	 * dst[0].order = 1
./web_ext/web_filter/mod_web_filter.c-104-	 * dst[3].str = ] already started/stopped
./web_ext/web_filter/mod_web_filter.c-105-	 * dst[4].str = NULL
./web_ext/web_filter/mod_web_filter.c-106-	 *
./web_ext/web_filter/mod_web_filter.c-107-	 * 原始串 =======>
./web_ext/web_filter/mod_web_filter.c-108-	 * 检测到虚拟服务器[${0}]所用应用池[${1}]中的真实服务器[${2}]已经启动/停止
./web_ext/web_filter/mod_web_filter.c-109-	 * 替换串 =======>
./web_ext/web_filter/mod_web_filter.c-110-	 * Detected the real server[${2}] belonged to the Virtual Server[${0}] entitled with 
./web_ext/web_filter/mod_web_filter.c:111:	 *     application pool[${1}] already started/stopped
./web_ext/web_filter/mod_web_filter.c-112-	 *
./web_ext/web_filter/mod_web_filter.c-113-	 *
./web_ext/web_filter/mod_web_filter.c-114-	 **/
./web_ext/web_filter/mod_web_filter.c-115-} ws_pattern;
./web_ext/web_filter/mod_web_filter.c-116-
./web_ext/web_filter/mod_web_filter.c-117-typedef struct _for_write {
./web_ext/web_filter/mod_web_filter.c-118-	long pos;			/** 当前buff的偏移 --> 已经使用的长度 **/
./web_ext/web_filter/mod_web_filter.c-119-	long last;			/** 当前data的偏移 --> 上次命中data的长度 **/
./web_ext/web_filter/mod_web_filter.c-120-	long last_mod_len;
./web_ext/web_filter/mod_web_filter.c-121-	char *buff;
--
./web_ext/web_filter/mod_web_filter.c-594-		pv = NULL;
./web_ext/web_filter/mod_web_filter.c-595-	} else if (strncasecmp(accept_language, "en", 2) == 0) {
./web_ext/web_filter/mod_web_filter.c-596-		pv = pvs.pv_en;
./web_ext/web_filter/mod_web_filter.c-597-	} else if (strncasecmp(accept_language, "mn", 2) == 0) {
./web_ext/web_filter/mod_web_filter.c-598-		pv = pvs.pv_mn;
./web_ext/web_filter/mod_web_filter.c-599-	}
./web_ext/web_filter/mod_web_filter.c-600-
./web_ext/web_filter/mod_web_filter.c-601-next:
./web_ext/web_filter/mod_web_filter.c-602-	memset(&_w, 0, sizeof(ws_for_write));
./web_ext/web_filter/mod_web_filter.c-603-
./web_ext/web_filter/mod_web_filter.c:604:	pbbOut = apr_brigade_create(r->pool, c->bucket_alloc);
./web_ext/web_filter/mod_web_filter.c-605-
./web_ext/web_filter/mod_web_filter.c-606-	for (pbktIn = APR_BRIGADE_FIRST(pbbIn);
./web_ext/web_filter/mod_web_filter.c-607-			pbktIn != APR_BRIGADE_SENTINEL(pbbIn);
./web_ext/web_filter/mod_web_filter.c-608-			pbktIn = APR_BUCKET_NEXT(pbktIn)) {
./web_ext/web_filter/mod_web_filter.c-609-		const char *data;
./web_ext/web_filter/mod_web_filter.c-610-		apr_size_t len;
./web_ext/web_filter/mod_web_filter.c-611-		char *buf, *pos;
./web_ext/web_filter/mod_web_filter.c-612-		apr_size_t n;
./web_ext/web_filter/mod_web_filter.c-613-		apr_bucket *pbktOut;
./web_ext/web_filter/mod_web_filter.c-614-
--
./web_ext/web_filter/mod_web_filter.c-887-		}
./web_ext/web_filter/mod_web_filter.c-888-	}
./web_ext/web_filter/mod_web_filter.c-889-
./web_ext/web_filter/mod_web_filter.c-890-	MatchPrepPattern(pv);
./web_ext/web_filter/mod_web_filter.c-891-
./web_ext/web_filter/mod_web_filter.c-892-error:
./web_ext/web_filter/mod_web_filter.c-893-	fclose(fp);
./web_ext/web_filter/mod_web_filter.c-894-	return pv;
./web_ext/web_filter/mod_web_filter.c-895-}
./web_ext/web_filter/mod_web_filter.c-896-
./web_ext/web_filter/mod_web_filter.c:897:static void *web_filter_init(apr_pool_t * pool, char *x)
./web_ext/web_filter/mod_web_filter.c-898-{
./web_ext/web_filter/mod_web_filter.c-899-	pvs.pv_en = load_web_filter_pv("/SmartGrid/apache/conf/ws_dict_en.txt");
./web_ext/web_filter/mod_web_filter.c-900-	pvs.pv_mn = load_web_filter_pv("/SmartGrid/apache/conf/ws_dict_mn.txt");
./web_ext/web_filter/mod_web_filter.c-901-
./web_ext/web_filter/mod_web_filter.c-902-	return &pvs;
./web_ext/web_filter/mod_web_filter.c-903-}
./web_ext/web_filter/mod_web_filter.c-904-
./web_ext/web_filter/mod_web_filter.c-905-/* Dispatch list for API hooks */
./web_ext/web_filter/mod_web_filter.c-906-module AP_MODULE_DECLARE_DATA web_filter_module = {
./web_ext/web_filter/mod_web_filter.c-907-	STANDARD20_MODULE_STUFF,
--
./smartsnmp/getinfo.c-57-
./smartsnmp/getinfo.c-58-	get->num_services = num;
./smartsnmp/getinfo.c-59-	i = 0;
./smartsnmp/getinfo.c-60-	list_for_each_entry(vserver, &vserver_queue, list) {
./smartsnmp/getinfo.c-61-		LIST_HEAD(apppool_queue);
./smartsnmp/getinfo.c-62-		struct apppool *apppool;
./smartsnmp/getinfo.c-63-
./smartsnmp/getinfo.c-64-		struct rserver *rserver;
./smartsnmp/getinfo.c-65-		int num_dests = 0;;
./smartsnmp/getinfo.c-66-
./smartsnmp/getinfo.c:67:		if (vserver->pool[0] == '\0') {
./smartsnmp/getinfo.c-68-			goto skip_pool;
./smartsnmp/getinfo.c-69-		}
./smartsnmp/getinfo.c-70-
./smartsnmp/getinfo.c:71:		module_get_queue(&apppool_queue, "apppool", vserver->pool);
./smartsnmp/getinfo.c-72-
./smartsnmp/getinfo.c-73-		apppool = list_first_entry(&apppool_queue, struct apppool, list);
./smartsnmp/getinfo.c-74-
./smartsnmp/getinfo.c-75-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartsnmp/getinfo.c-76-			num_dests++;
./smartsnmp/getinfo.c-77-		}
./smartsnmp/getinfo.c-78-		module_purge_queue(&apppool_queue, "apppool");
./smartsnmp/getinfo.c-79-
./smartsnmp/getinfo.c-80-skip_pool:
./smartsnmp/getinfo.c-81-
--
./smartsnmp/getinfo.c-93-		module_purge_queue(&apppool_queue, "apppool");
./smartsnmp/getinfo.c-94-
./smartsnmp/getinfo.c-95-skip_backpool:
./smartsnmp/getinfo.c-96-
./smartsnmp/getinfo.c-97-		get->entrytable[i].num_dests = num_dests;
./smartsnmp/getinfo.c-98-
./smartsnmp/getinfo.c-99-		STRNCPY(get->entrytable[i].name, vserver->name);
./smartsnmp/getinfo.c-100-		//STRNCPY(get->entrytable[i].address, vserver->address);
./smartsnmp/getinfo.c-101-		inet_sockaddr2address(&vserver->address, get->entrytable[i].address);
./smartsnmp/getinfo.c-102-		STRNCPY(get->entrytable[i].protocol, vserver->protocol);
./smartsnmp/getinfo.c:103:		STRNCPY(get->entrytable[i].pool, vserver->pool);
./smartsnmp/getinfo.c-104-		STRNCPY(get->entrytable[i].backpool, vserver->backpool);
./smartsnmp/getinfo.c-105-		STRNCPY(get->entrytable[i].sched_name, vserver->sched);
./smartsnmp/getinfo.c-106-		STRNCPY(get->entrytable[i].enable, vserver->enable);
./smartsnmp/getinfo.c-107-
./smartsnmp/getinfo.c-108-		if (vserver->persistent[0] == 0) {
./smartsnmp/getinfo.c-109-			STRNCPY(get->entrytable[i].persistent, "off");
./smartsnmp/getinfo.c-110-		} else {
./smartsnmp/getinfo.c-111-			STRNCPY(get->entrytable[i].persistent, vserver->persistent);
./smartsnmp/getinfo.c-112-		}
./smartsnmp/getinfo.c-113-
--
./smartsnmp/getinfo.c-166-		/** FIXME **/
./smartsnmp/getinfo.c-167-		return NULL;
./smartsnmp/getinfo.c-168-	}
./smartsnmp/getinfo.c-169-
./smartsnmp/getinfo.c-170-
./smartsnmp/getinfo.c-171-	/** Get Apppool List **/
./smartsnmp/getinfo.c-172-	module_get_queue(&apppool_queue, "apppool", NULL);
./smartsnmp/getinfo.c-173-
./smartsnmp/getinfo.c-174-	i = 0;
./smartsnmp/getinfo.c-175-	list_for_each_entry(apppool, &apppool_queue, list) {
./smartsnmp/getinfo.c:176:		if (strcasecmp(apppool->name, svc->pool) 
./smartsnmp/getinfo.c-177-				&& strcasecmp(apppool->name, svc->backpool))
./smartsnmp/getinfo.c-178-			continue;
./smartsnmp/getinfo.c-179-		/** Then Got the Pool, and try to get the apppool_desc **/
./smartsnmp/getinfo.c-180-		apppool_desc = apppool_desc_search(&vserver->apppool_desc_head,
./smartsnmp/getinfo.c-181-				apppool->name);
./smartsnmp/getinfo.c-182-
./smartsnmp/getinfo.c-183-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartsnmp/getinfo.c-184-
./smartsnmp/getinfo.c-185-			//STRNCPY(d->entrytable[i].address, rserver->address);
./smartsnmp/getinfo.c-186-			inet_sockaddr2address(&rserver->address, d->entrytable[i].address);
--
./keepalived/lib/vector.c-1-/* 
./keepalived/lib/vector.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/vector.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/vector.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/vector.c-5- * 
./keepalived/lib/vector.c-6- * Part:        Vector structure manipulation.
./keepalived/lib/vector.c-7- *  
./keepalived/lib/vector.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/vector.c-9- *              
./keepalived/lib/vector.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/vector.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/vector.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/vector.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/vector.c-14- *
--
./keepalived/lib/timer.c-1-/* 
./keepalived/lib/timer.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/timer.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/timer.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/timer.c-5- * 
./keepalived/lib/timer.c-6- * Part:        Timer manipulations.
./keepalived/lib/timer.c-7- *  
./keepalived/lib/timer.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/timer.c-9- *              
./keepalived/lib/timer.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/timer.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/timer.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/timer.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/timer.c-14- *
--
./keepalived/lib/signals.c-1-/* 
./keepalived/lib/signals.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/signals.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/signals.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/signals.c-5- * 
./keepalived/lib/signals.c-6- * Part:        Signals framework.
./keepalived/lib/signals.c-7- *  
./keepalived/lib/signals.c-8- * Author:      Kevin Lindsay, <kevinl@netnation.com>
./keepalived/lib/signals.c-9- *              Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/signals.c-10- *              
./keepalived/lib/signals.c-11- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/signals.c-12- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/signals.c-13- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/signals.c-14- *              See the GNU General Public License for more details.
--
./keepalived/lib/scheduler.c-1-/*
./keepalived/lib/scheduler.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/scheduler.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/scheduler.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/scheduler.c-5- *
./keepalived/lib/scheduler.c-6- * Part:        Scheduling framework. This code is highly inspired from
./keepalived/lib/scheduler.c-7- *              the thread management routine (thread.c) present in the 
./keepalived/lib/scheduler.c-8- *              very nice zebra project (http://www.zebra.org).
./keepalived/lib/scheduler.c-9- *
./keepalived/lib/scheduler.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/scheduler.c-11- *
./keepalived/lib/scheduler.c-12- *              This program is distributed in the hope that it will be useful, 
./keepalived/lib/scheduler.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of 
./keepalived/lib/scheduler.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
--
./keepalived/lib/memory.c-1-/*
./keepalived/lib/memory.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/memory.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/memory.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/memory.c-5- *
./keepalived/lib/memory.c-6- * Part:        Memory management framework. This framework is used to
./keepalived/lib/memory.c-7- *              find any memory leak.
./keepalived/lib/memory.c-8- *
./keepalived/lib/memory.c-9- * Authors:     Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/memory.c-10- *              Jan Holmberg, <jan@artech.net>
./keepalived/lib/memory.c-11- *
./keepalived/lib/memory.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/memory.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/memory.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
--
./keepalived/lib/logger.c-1-/* 
./keepalived/lib/logger.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/logger.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/logger.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/logger.c-5- * 
./keepalived/lib/logger.c-6- * Part:        logging facility.
./keepalived/lib/logger.c-7- *  
./keepalived/lib/logger.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/logger.c-9- *              
./keepalived/lib/logger.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/logger.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/logger.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/logger.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/logger.c-14- *
--
./keepalived/lib/parser.c-1-/* 
./keepalived/lib/parser.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/parser.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/parser.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/parser.c-5- * 
./keepalived/lib/parser.c-6- * Part:        Configuration file parser/reader. Place into the dynamic
./keepalived/lib/parser.c-7- *              data structure representation the conf file representing
./keepalived/lib/parser.c:8: *              the loadbalanced server pool.
./keepalived/lib/parser.c-9- *  
./keepalived/lib/parser.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/parser.c-11- *              
./keepalived/lib/parser.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/parser.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/parser.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/parser.c-15- *              See the GNU General Public License for more details.
./keepalived/lib/parser.c-16- *
./keepalived/lib/parser.c-17- *              This program is free software; you can redistribute it and/or
./keepalived/lib/parser.c-18- *              modify it under the terms of the GNU General Public License
--
./keepalived/lib/notify.c-1-/*
./keepalived/lib/notify.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/notify.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/notify.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/notify.c-5- *
./keepalived/lib/notify.c-6- * Part:        Forked system call to launch an extra script.
./keepalived/lib/notify.c-7- *
./keepalived/lib/notify.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/notify.c-9- *
./keepalived/lib/notify.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/notify.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/notify.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/notify.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/notify.c-14- *
--
./keepalived/lib/list.c-1-/* 
./keepalived/lib/list.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/list.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/list.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/list.c-5- * 
./keepalived/lib/list.c-6- * Part:        List structure manipulation.
./keepalived/lib/list.c-7- *  
./keepalived/lib/list.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/list.c-9- *              
./keepalived/lib/list.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/list.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/list.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/list.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/list.c-14- *
--
./keepalived/lib/utils.c-1-/*
./keepalived/lib/utils.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/lib/utils.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/lib/utils.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/lib/utils.c-5- *
./keepalived/lib/utils.c-6- * Part:        General program utils.
./keepalived/lib/utils.c-7- *
./keepalived/lib/utils.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/lib/utils.c-9- *
./keepalived/lib/utils.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/lib/utils.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/lib/utils.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/lib/utils.c-13- *              See the GNU General Public License for more details.
./keepalived/lib/utils.c-14- *
--
./keepalived/genhash/sock.c-1-/*
./keepalived/genhash/sock.c-2- * Soft:        Perform a GET query to a remote HTTP/HTTPS server.
./keepalived/genhash/sock.c-3- *              Set a timer to compute global remote server response
./keepalived/genhash/sock.c-4- *              time.
./keepalived/genhash/sock.c-5- *
./keepalived/genhash/sock.c:6: * Part:        Socket pool utility functions.
./keepalived/genhash/sock.c-7- *
./keepalived/genhash/sock.c-8- * Version:     $Id: sock.c,v 1.1.16 2009/02/14 03:25:07 acassen Exp $
./keepalived/genhash/sock.c-9- *
./keepalived/genhash/sock.c-10- * Authors:     Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/genhash/sock.c-11- *
./keepalived/genhash/sock.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/genhash/sock.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/genhash/sock.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/genhash/sock.c-15- *              See the GNU General Public License for more details.
./keepalived/genhash/sock.c-16- *
--
./keepalived/keepalived/core/daemon.c-1-/*
./keepalived/keepalived/core/daemon.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/daemon.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/daemon.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/daemon.c-5- *
./keepalived/keepalived/core/daemon.c-6- * Part:        Main program structure.
./keepalived/keepalived/core/daemon.c-7- *
./keepalived/keepalived/core/daemon.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/daemon.c-9- *
./keepalived/keepalived/core/daemon.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/daemon.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/daemon.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/daemon.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/core/daemon.c-14- *
--
./keepalived/keepalived/core/global_parser.c-1-/* 
./keepalived/keepalived/core/global_parser.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/global_parser.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/global_parser.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/global_parser.c-5- * 
./keepalived/keepalived/core/global_parser.c-6- * Part:        Configuration file parser/reader. Place into the dynamic
./keepalived/keepalived/core/global_parser.c-7- *              data structure representation the conf file representing
./keepalived/keepalived/core/global_parser.c:8: *              the loadbalanced server pool.
./keepalived/keepalived/core/global_parser.c-9- *  
./keepalived/keepalived/core/global_parser.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/global_parser.c-11- *              
./keepalived/keepalived/core/global_parser.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/global_parser.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/global_parser.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/global_parser.c-15- *              See the GNU General Public License for more details.
./keepalived/keepalived/core/global_parser.c-16- *
./keepalived/keepalived/core/global_parser.c-17- *              This program is free software; you can redistribute it and/or
./keepalived/keepalived/core/global_parser.c-18- *              modify it under the terms of the GNU General Public License
--
./keepalived/keepalived/core/layer4.c-1-/*
./keepalived/keepalived/core/layer4.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/layer4.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/layer4.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/layer4.c-5- *
./keepalived/keepalived/core/layer4.c-6- * Part:        Layer4 checkers handling. Register worker threads &
./keepalived/keepalived/core/layer4.c-7- *              upper layer checkers.
./keepalived/keepalived/core/layer4.c-8- *
./keepalived/keepalived/core/layer4.c-9- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/layer4.c-10- *
./keepalived/keepalived/core/layer4.c-11- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/layer4.c-12- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/layer4.c-13- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/layer4.c-14- *              See the GNU General Public License for more details.
--
./keepalived/keepalived/core/smtp.c-1-/*
./keepalived/keepalived/core/smtp.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/smtp.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/smtp.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/smtp.c-5- *
./keepalived/keepalived/core/smtp.c-6- * Part:        SMTP WRAPPER connect to a specified smtp server and send mail
./keepalived/keepalived/core/smtp.c-7- *              using the smtp protocol according to the RFC 821. A non blocking
./keepalived/keepalived/core/smtp.c-8- *              timeouted connection is used to handle smtp protocol.
./keepalived/keepalived/core/smtp.c-9- *
./keepalived/keepalived/core/smtp.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/smtp.c-11- *
./keepalived/keepalived/core/smtp.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/smtp.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/smtp.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
--
./keepalived/keepalived/core/pidfile.c-1-/*
./keepalived/keepalived/core/pidfile.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/pidfile.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/pidfile.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/pidfile.c-5- *
./keepalived/keepalived/core/pidfile.c-6- * Part:        pidfile utility.
./keepalived/keepalived/core/pidfile.c-7- *
./keepalived/keepalived/core/pidfile.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/pidfile.c-9- *
./keepalived/keepalived/core/pidfile.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/pidfile.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/pidfile.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/pidfile.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/core/pidfile.c-14- *
--
./keepalived/keepalived/core/global_data.c-1-/*
./keepalived/keepalived/core/global_data.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/global_data.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/global_data.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/global_data.c-5- *
./keepalived/keepalived/core/global_data.c-6- * Part:        Dynamic data structure definition.
./keepalived/keepalived/core/global_data.c-7- *
./keepalived/keepalived/core/global_data.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/global_data.c-9- *
./keepalived/keepalived/core/global_data.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/global_data.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/global_data.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/global_data.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/core/global_data.c-14- *
--
./keepalived/keepalived/core/main.c-1-/*
./keepalived/keepalived/core/main.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/core/main.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/core/main.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/core/main.c-5- *
./keepalived/keepalived/core/main.c-6- * Part:        Main program structure.
./keepalived/keepalived/core/main.c-7- *
./keepalived/keepalived/core/main.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/core/main.c-9- *
./keepalived/keepalived/core/main.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/core/main.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/core/main.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/core/main.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/core/main.c-14- *
--
./keepalived/keepalived/check/check_http.c-1-/*
./keepalived/keepalived/check/check_http.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_http.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_http.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_http.c-5- *
./keepalived/keepalived/check/check_http.c-6- * Part:        WEB CHECK. Common HTTP/SSL checker primitives.
./keepalived/keepalived/check/check_http.c-7- *
./keepalived/keepalived/check/check_http.c-8- * Authors:     Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_http.c-9- *              Jan Holmberg, <jan@artech.net>
./keepalived/keepalived/check/check_http.c-10- *
./keepalived/keepalived/check/check_http.c-11- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_http.c-12- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_http.c-13- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_http.c-14- *              See the GNU General Public License for more details.
--
./keepalived/keepalived/check/check_api.c-1-/*
./keepalived/keepalived/check/check_api.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_api.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_api.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_api.c-5- *
./keepalived/keepalived/check/check_api.c-6- * Part:        Checkers registration.
./keepalived/keepalived/check/check_api.c-7- *
./keepalived/keepalived/check/check_api.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_api.c-9- *
./keepalived/keepalived/check/check_api.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_api.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_api.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_api.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/check_api.c-14- *
--
./keepalived/keepalived/check/check_data.c-1-/*
./keepalived/keepalived/check/check_data.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_data.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_data.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_data.c-5- *
./keepalived/keepalived/check/check_data.c-6- * Part:        Healthcheckers dynamic data structure definition.
./keepalived/keepalived/check/check_data.c-7- *
./keepalived/keepalived/check/check_data.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_data.c-9- *
./keepalived/keepalived/check/check_data.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_data.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_data.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_data.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/check_data.c-14- *
--
./keepalived/keepalived/check/check_tcp.c-1-/*
./keepalived/keepalived/check/check_tcp.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_tcp.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_tcp.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_tcp.c-5- *
./keepalived/keepalived/check/check_tcp.c-6- * Part:        TCP checker.
./keepalived/keepalived/check/check_tcp.c-7- *
./keepalived/keepalived/check/check_tcp.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_tcp.c-9- *
./keepalived/keepalived/check/check_tcp.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_tcp.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_tcp.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_tcp.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/check_tcp.c-14- *
--
./keepalived/keepalived/check/ipwrapper.c-1-/*
./keepalived/keepalived/check/ipwrapper.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/ipwrapper.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/ipwrapper.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/ipwrapper.c-5- *
./keepalived/keepalived/check/ipwrapper.c-6- * Part:        Manipulation functions for IPVS & IPFW wrappers.
./keepalived/keepalived/check/ipwrapper.c-7- *
./keepalived/keepalived/check/ipwrapper.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/ipwrapper.c-9- *
./keepalived/keepalived/check/ipwrapper.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/ipwrapper.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/ipwrapper.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/ipwrapper.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/ipwrapper.c-14- *
--
./keepalived/keepalived/check/ipwrapper.c-269-	}
./keepalived/keepalived/check/ipwrapper.c-270-	return 1;
./keepalived/keepalived/check/ipwrapper.c-271-}
./keepalived/keepalived/check/ipwrapper.c-272-
./keepalived/keepalived/check/ipwrapper.c-273-/* add or remove _alive_ real servers from a virtual server */
./keepalived/keepalived/check/ipwrapper.c-274-static void perform_quorum_state(virtual_server * vs, int vserver_up)
./keepalived/keepalived/check/ipwrapper.c-275-{
./keepalived/keepalived/check/ipwrapper.c-276-	element e;
./keepalived/keepalived/check/ipwrapper.c-277-	real_server *rs;
./keepalived/keepalived/check/ipwrapper.c-278-
./keepalived/keepalived/check/ipwrapper.c:279:	log_message( LOG_INFO, "%s the pool for VS [%s]:%d",
./keepalived/keepalived/check/ipwrapper.c-280-			vserver_up ? "Adding alive servers to" :
./keepalived/keepalived/check/ipwrapper.c-281-			"Removing alive servers from",
./keepalived/keepalived/check/ipwrapper.c-282-			(vs->vsgname) ? vs->vsgname : inet_sockaddrtos(&vs->addr),
./keepalived/keepalived/check/ipwrapper.c-283-			ntohs(inet_sockaddrport(&vs->addr)));
./keepalived/keepalived/check/ipwrapper.c-284-
./keepalived/keepalived/check/ipwrapper.c-285-	if (LIST_ISEMPTY(vs->rs))
./keepalived/keepalived/check/ipwrapper.c-286-		goto check_sorry_server;
./keepalived/keepalived/check/ipwrapper.c-287-
./keepalived/keepalived/check/ipwrapper.c-288-	for (e = LIST_HEAD(vs->rs); e; ELEMENT_NEXT(e)) {
./keepalived/keepalived/check/ipwrapper.c-289-		rs = ELEMENT_DATA(e);
--
./keepalived/keepalived/check/ipwrapper.c-402-
./keepalived/keepalived/check/ipwrapper.c-403-
./keepalived/keepalived/check/ipwrapper.c-404-/* manipulate add/remove rs according to alive state */
./keepalived/keepalived/check/ipwrapper.c-405-void perform_svr_state(int alive, virtual_server * vs, real_server * rs)
./keepalived/keepalived/check/ipwrapper.c-406-{
./keepalived/keepalived/check/ipwrapper.c-407-	char rsip[INET6_ADDRSTRLEN];
./keepalived/keepalived/check/ipwrapper.c-408-
./keepalived/keepalived/check/ipwrapper.c-409-	/*
./keepalived/keepalived/check/ipwrapper.c-410-	 * | ISALIVE(rs) | alive | context
./keepalived/keepalived/check/ipwrapper.c-411-	 * | 0           | 0     | first check failed under alpha mode, unreachable here
./keepalived/keepalived/check/ipwrapper.c:412:	 * | 0           | 1     | RS went up, add it to the pool
./keepalived/keepalived/check/ipwrapper.c:413:	 * | 1           | 0     | RS went down, remove it from the pool
./keepalived/keepalived/check/ipwrapper.c-414-	 * | 1           | 1     | first check succeeded w/o alpha mode, unreachable here
./keepalived/keepalived/check/ipwrapper.c-415-	 */
./keepalived/keepalived/check/ipwrapper.c-416-
./keepalived/keepalived/check/ipwrapper.c-417-	if (!ISALIVE(rs) && alive) { /** rs went up **/
./keepalived/keepalived/check/ipwrapper.c-418-
./keepalived/keepalived/check/ipwrapper.c-419-		SET_ALIVE(rs);
./keepalived/keepalived/check/ipwrapper.c-420-
./keepalived/keepalived/check/ipwrapper.c-421-		log_message( LOG_INFO, "%s %s [%s]:%d to VS [%s]:%d",
./keepalived/keepalived/check/ipwrapper.c-422-				(rs->inhibit) ? "Enabling" : "Adding",
./keepalived/keepalived/check/ipwrapper.c-423-				(rs->sorry_server_flag == IS_SORRY_SERVER) ? "sorry server" : "service",
--
./keepalived/keepalived/check/ipwrapper.c-495-				rs->weight, weight,
./keepalived/keepalived/check/ipwrapper.c-496-				ISALIVE(rs) ? "active" : "inactive",
./keepalived/keepalived/check/ipwrapper.c-497-				inet_sockaddrtos2(&rs->addr, rsip),
./keepalived/keepalived/check/ipwrapper.c-498-				ntohs(inet_sockaddrport(&rs->addr)),
./keepalived/keepalived/check/ipwrapper.c-499-				(vs->vsgname) ? vs->vsgname : inet_sockaddrtos(&vs->
./keepalived/keepalived/check/ipwrapper.c-500-					addr),
./keepalived/keepalived/check/ipwrapper.c-501-				ntohs(inet_sockaddrport(&vs->addr)));
./keepalived/keepalived/check/ipwrapper.c-502-		rs->weight = weight;
./keepalived/keepalived/check/ipwrapper.c-503-		/*
./keepalived/keepalived/check/ipwrapper.c-504-		 * Have weight change take effect now only if rs is in
./keepalived/keepalived/check/ipwrapper.c:505:		 * the pool and alive and the quorum is met (or if
./keepalived/keepalived/check/ipwrapper.c-506-		 * there is no sorry server). If not, it will take
./keepalived/keepalived/check/ipwrapper.c-507-		 * effect later when it becomes alive.
./keepalived/keepalived/check/ipwrapper.c-508-		 */
./keepalived/keepalived/check/ipwrapper.c-509-		if (rs->set && ISALIVE(rs) &&
./keepalived/keepalived/check/ipwrapper.c-510-				(vs->quorum_state == UP || LIST_ISEMPTY(vs->s_svr)
./keepalived/keepalived/check/ipwrapper.c-511-				 || !isalive))
./keepalived/keepalived/check/ipwrapper.c-512-			ipvs_nginx_cmd(LVS_CMD_EDIT_DEST, check_data->vs_group, vs,
./keepalived/keepalived/check/ipwrapper.c-513-					rs);
./keepalived/keepalived/check/ipwrapper.c-514-		update_quorum_state(vs);
./keepalived/keepalived/check/ipwrapper.c-515-	}
--
./keepalived/keepalived/check/ipwrapper.c-925-			/* Clear VS entry */
./keepalived/keepalived/check/ipwrapper.c-926-			if (!clear_service_vs(old_check_data->vs_group, vs)){
./keepalived/keepalived/check/ipwrapper.c-927-				continue;
./keepalived/keepalived/check/ipwrapper.c-928-			}
./keepalived/keepalived/check/ipwrapper.c-929-		}
./keepalived/keepalived/check/ipwrapper.c-930-		else
./keepalived/keepalived/check/ipwrapper.c-931-		{
./keepalived/keepalived/check/ipwrapper.c-932-			/** 检查vserver属性 **/
./keepalived/keepalived/check/ipwrapper.c-933-			vs_check_attr(vs);
./keepalived/keepalived/check/ipwrapper.c-934-
./keepalived/keepalived/check/ipwrapper.c:935:			/* If vs exist, perform rs pool diff */
./keepalived/keepalived/check/ipwrapper.c-936-			if (!clear_diff_rs(vs)){
./keepalived/keepalived/check/ipwrapper.c-937-				continue;
./keepalived/keepalived/check/ipwrapper.c-938-			}
./keepalived/keepalived/check/ipwrapper.c-939-
./keepalived/keepalived/check/ipwrapper.c-940-			if (vs->quorum_state == UP) {
./keepalived/keepalived/check/ipwrapper.c-941-				new_vs->quorum_state = UP;
./keepalived/keepalived/check/ipwrapper.c-942-			}
./keepalived/keepalived/check/ipwrapper.c-943-
./keepalived/keepalived/check/ipwrapper.c-944-			/** 删除 sorry_server **/
./keepalived/keepalived/check/ipwrapper.c-945-			if (!LIST_ISEMPTY(vs->s_svr)) {
--
./keepalived/keepalived/check/check_daemon.c-1-/*
./keepalived/keepalived/check/check_daemon.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_daemon.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_daemon.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_daemon.c-5- *
./keepalived/keepalived/check/check_daemon.c-6- * Part:        Healthcheckrs child process handling.
./keepalived/keepalived/check/check_daemon.c-7- *
./keepalived/keepalived/check/check_daemon.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_daemon.c-9- *
./keepalived/keepalived/check/check_daemon.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_daemon.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_daemon.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_daemon.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/check_daemon.c-14- *
--
./keepalived/keepalived/check/check_parser.c-1-/* 
./keepalived/keepalived/check/check_parser.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_parser.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_parser.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_parser.c-5- * 
./keepalived/keepalived/check/check_parser.c-6- * Part:        Configuration file parser/reader. Place into the dynamic
./keepalived/keepalived/check/check_parser.c-7- *              data structure representation the conf file representing
./keepalived/keepalived/check/check_parser.c:8: *              the loadbalanced server pool.
./keepalived/keepalived/check/check_parser.c-9- *  
./keepalived/keepalived/check/check_parser.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_parser.c-11- *              
./keepalived/keepalived/check/check_parser.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_parser.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_parser.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_parser.c-15- *              See the GNU General Public License for more details.
./keepalived/keepalived/check/check_parser.c-16- *
./keepalived/keepalived/check/check_parser.c-17- *              This program is free software; you can redistribute it and/or
./keepalived/keepalived/check/check_parser.c-18- *              modify it under the terms of the GNU General Public License
--
./keepalived/keepalived/check/check_ssl.c-1-/*
./keepalived/keepalived/check/check_ssl.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_ssl.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_ssl.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_ssl.c-5- *
./keepalived/keepalived/check/check_ssl.c-6- * Part:        SSL GET CHECK. Perform an ssl get query to a specified
./keepalived/keepalived/check/check_ssl.c-7- *              url, compute a MD5 over this result and match it to the
./keepalived/keepalived/check/check_ssl.c-8- *              expected value.
./keepalived/keepalived/check/check_ssl.c-9- *
./keepalived/keepalived/check/check_ssl.c-10- * Authors:     Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_ssl.c-11- *              Jan Holmberg, <jan@artech.net>
./keepalived/keepalived/check/check_ssl.c-12- *
./keepalived/keepalived/check/check_ssl.c-13- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_ssl.c-14- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
--
./keepalived/keepalived/check/ipvswrapper.c-1-/* 
./keepalived/keepalived/check/ipvswrapper.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/ipvswrapper.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/ipvswrapper.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/ipvswrapper.c-5- * 
./keepalived/keepalived/check/ipvswrapper.c-6- * Part:        IPVS Kernel wrapper. Use setsockopt call to add/remove
./keepalived/keepalived/check/ipvswrapper.c:7: *              server to/from the loadbalanced server pool.
./keepalived/keepalived/check/ipvswrapper.c-8- *  
./keepalived/keepalived/check/ipvswrapper.c-9- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/ipvswrapper.c-10- *              
./keepalived/keepalived/check/ipvswrapper.c-11- *               This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/ipvswrapper.c-12- *               but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/ipvswrapper.c-13- *               MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/ipvswrapper.c-14- *               See the GNU General Public License for more details.
./keepalived/keepalived/check/ipvswrapper.c-15- *
./keepalived/keepalived/check/ipvswrapper.c-16- *               This program is free software; you can redistribute it and/or
./keepalived/keepalived/check/ipvswrapper.c-17- *               modify it under the terms of the GNU General Public License
--
./keepalived/keepalived/check/check_misc.c-1-/*
./keepalived/keepalived/check/check_misc.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_misc.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_misc.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_misc.c-5- *
./keepalived/keepalived/check/check_misc.c-6- * Part:        MISC CHECK. Perform a system call to run an extra
./keepalived/keepalived/check/check_misc.c-7- *              system prog or script.
./keepalived/keepalived/check/check_misc.c-8- *
./keepalived/keepalived/check/check_misc.c-9- * Authors:     Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_misc.c-10- *              Eric Jarman, <ehj38230@cmsu2.cmsu.edu>
./keepalived/keepalived/check/check_misc.c-11- *		Bradley Baetz, <bradley.baetz@optusnet.com.au>
./keepalived/keepalived/check/check_misc.c-12- *
./keepalived/keepalived/check/check_misc.c-13- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_misc.c-14- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
--
./keepalived/keepalived/check/check_smtp.c-1-/*
./keepalived/keepalived/check/check_smtp.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/check/check_smtp.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/check/check_smtp.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/check/check_smtp.c-5- *
./keepalived/keepalived/check/check_smtp.c-6- * Part:        SMTP CHECK. Check an SMTP-server.
./keepalived/keepalived/check/check_smtp.c-7- *
./keepalived/keepalived/check/check_smtp.c-8- * Authors:     Jeremy Rumpf, <jrumpf@heavyload.net>
./keepalived/keepalived/check/check_smtp.c-9- *              Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/check/check_smtp.c-10- *
./keepalived/keepalived/check/check_smtp.c-11- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/check/check_smtp.c-12- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/check/check_smtp.c-13- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/check/check_smtp.c-14- *              See the GNU General Public License for more details.
--
./keepalived/keepalived/vrrp/vrrp_data.c-1-/*
./keepalived/keepalived/vrrp/vrrp_data.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_data.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_data.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_data.c-5- *
./keepalived/keepalived/vrrp/vrrp_data.c-6- * Part:        Dynamic data structure definition.
./keepalived/keepalived/vrrp/vrrp_data.c-7- *
./keepalived/keepalived/vrrp/vrrp_data.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_data.c-9- *
./keepalived/keepalived/vrrp/vrrp_data.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_data.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_data.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_data.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_data.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_data.c-128-		case VRRP_SCRIPT_STATUS_DISABLED:
./keepalived/keepalived/vrrp/vrrp_data.c-129-			str = "DISABLED";
./keepalived/keepalived/vrrp/vrrp_data.c-130-			break;
./keepalived/keepalived/vrrp/vrrp_data.c-131-		default:
./keepalived/keepalived/vrrp/vrrp_data.c-132-			str = (vscript->result >=
./keepalived/keepalived/vrrp/vrrp_data.c-133-			       vscript->rise) ? "GOOD" : "BAD";
./keepalived/keepalived/vrrp/vrrp_data.c-134-	}
./keepalived/keepalived/vrrp/vrrp_data.c-135-	log_message( LOG_INFO, "   Status = %s", str);
./keepalived/keepalived/vrrp/vrrp_data.c-136-}
./keepalived/keepalived/vrrp/vrrp_data.c-137-
./keepalived/keepalived/vrrp/vrrp_data.c:138:/* Socket pool functions */
./keepalived/keepalived/vrrp/vrrp_data.c-139-static void free_sock(void *sock_data)
./keepalived/keepalived/vrrp/vrrp_data.c-140-{
./keepalived/keepalived/vrrp/vrrp_data.c-141-	sock_t *sock = sock_data;
./keepalived/keepalived/vrrp/vrrp_data.c-142-	interface *ifp;
./keepalived/keepalived/vrrp/vrrp_data.c-143-	if (sock->fd_in > 0)
./keepalived/keepalived/vrrp/vrrp_data.c-144-	{
./keepalived/keepalived/vrrp/vrrp_data.c-145-		ifp = if_get_by_ifindex(sock->ifindex);
./keepalived/keepalived/vrrp/vrrp_data.c-146-		if_leave_vrrp_group(sock->family, sock->fd_in, ifp);
./keepalived/keepalived/vrrp/vrrp_data.c-147-	}
./keepalived/keepalived/vrrp/vrrp_data.c-148-	if (sock->fd_out > 0)
--
./keepalived/keepalived/vrrp/vrrp_ndisc.c-1-/*
./keepalived/keepalived/vrrp/vrrp_ndisc.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_ndisc.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_ndisc.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_ndisc.c-5- *
./keepalived/keepalived/vrrp/vrrp_ndisc.c-6- * Part:        IPv6 Neighbour Discovery part.
./keepalived/keepalived/vrrp/vrrp_ndisc.c-7- *
./keepalived/keepalived/vrrp/vrrp_ndisc.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_ndisc.c-9- *
./keepalived/keepalived/vrrp/vrrp_ndisc.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_ndisc.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_ndisc.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_ndisc.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_ndisc.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-1-/*
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_ipaddress.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-5- *
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-6- * Part:        NETLINK IPv4 address manipulation.
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-7- *
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-9- *
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_ipaddress.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_index.c-1-/*
./keepalived/keepalived/vrrp/vrrp_index.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_index.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_index.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_index.c-5- *
./keepalived/keepalived/vrrp/vrrp_index.c-6- * Part:        VRRP instance index table.
./keepalived/keepalived/vrrp/vrrp_index.c-7- *
./keepalived/keepalived/vrrp/vrrp_index.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_index.c-9- *
./keepalived/keepalived/vrrp/vrrp_index.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_index.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_index.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_index.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_index.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_daemon.c-1-/*
./keepalived/keepalived/vrrp/vrrp_daemon.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_daemon.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_daemon.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_daemon.c-5- *
./keepalived/keepalived/vrrp/vrrp_daemon.c-6- * Part:        VRRP child process handling.
./keepalived/keepalived/vrrp/vrrp_daemon.c-7- *
./keepalived/keepalived/vrrp/vrrp_daemon.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_daemon.c-9- *
./keepalived/keepalived/vrrp/vrrp_daemon.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_daemon.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_daemon.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_daemon.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_daemon.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_sync.c-1-/*
./keepalived/keepalived/vrrp/vrrp_sync.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_sync.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_sync.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_sync.c-5- *
./keepalived/keepalived/vrrp/vrrp_sync.c-6- * Part:        VRRP synchronization framework.
./keepalived/keepalived/vrrp/vrrp_sync.c-7- *
./keepalived/keepalived/vrrp/vrrp_sync.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_sync.c-9- *
./keepalived/keepalived/vrrp/vrrp_sync.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_sync.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_sync.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_sync.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_sync.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_if.c-1-/*
./keepalived/keepalived/vrrp/vrrp_if.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_if.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_if.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_if.c-5- *
./keepalived/keepalived/vrrp/vrrp_if.c-6- * Part:        Interfaces manipulation.
./keepalived/keepalived/vrrp/vrrp_if.c-7- *
./keepalived/keepalived/vrrp/vrrp_if.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_if.c-9- *
./keepalived/keepalived/vrrp/vrrp_if.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_if.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_if.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_if.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_if.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_parser.c-1-/* 
./keepalived/keepalived/vrrp/vrrp_parser.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_parser.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_parser.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_parser.c-5- * 
./keepalived/keepalived/vrrp/vrrp_parser.c-6- * Part:        Configuration file parser/reader. Place into the dynamic
./keepalived/keepalived/vrrp/vrrp_parser.c-7- *              data structure representation the conf file representing
./keepalived/keepalived/vrrp/vrrp_parser.c:8: *              the loadbalanced server pool.
./keepalived/keepalived/vrrp/vrrp_parser.c-9- *  
./keepalived/keepalived/vrrp/vrrp_parser.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_parser.c-11- *              
./keepalived/keepalived/vrrp/vrrp_parser.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_parser.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_parser.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_parser.c-15- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_parser.c-16- *
./keepalived/keepalived/vrrp/vrrp_parser.c-17- *              This program is free software; you can redistribute it and/or
./keepalived/keepalived/vrrp/vrrp_parser.c-18- *              modify it under the terms of the GNU General Public License
--
./keepalived/keepalived/vrrp/vrrp_track.c-1-/*
./keepalived/keepalived/vrrp/vrrp_track.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_track.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_track.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_track.c-5- *
./keepalived/keepalived/vrrp/vrrp_track.c-6- * Part:        Interface tracking framework.
./keepalived/keepalived/vrrp/vrrp_track.c-7- *
./keepalived/keepalived/vrrp/vrrp_track.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_track.c-9- *
./keepalived/keepalived/vrrp/vrrp_track.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_track.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_track.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_track.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_track.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-1-/*
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_ipsecah.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-5- *
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-6- * Part:        IPSEC AH implementation according to RFC 2402. Processing
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-7- *              authentication data encryption using HMAC MD5 according to
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-8- *              RFCs 2085 & 2104.
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-9- *
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-10- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-11- *
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-12- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-13- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_ipsecah.c-14- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
--
./keepalived/keepalived/vrrp/vrrp_arp.c-1-/*
./keepalived/keepalived/vrrp/vrrp_arp.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_arp.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_arp.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_arp.c-5- *
./keepalived/keepalived/vrrp/vrrp_arp.c-6- * Part:        ARP primitives.
./keepalived/keepalived/vrrp/vrrp_arp.c-7- *
./keepalived/keepalived/vrrp/vrrp_arp.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_arp.c-9- *
./keepalived/keepalived/vrrp/vrrp_arp.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_arp.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_arp.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_arp.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_arp.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_iproute.c-1-/*
./keepalived/keepalived/vrrp/vrrp_iproute.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_iproute.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_iproute.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_iproute.c-5- *
./keepalived/keepalived/vrrp/vrrp_iproute.c-6- * Part:        NETLINK IPv4 routes manipulation.
./keepalived/keepalived/vrrp/vrrp_iproute.c-7- *
./keepalived/keepalived/vrrp/vrrp_iproute.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_iproute.c-9- *
./keepalived/keepalived/vrrp/vrrp_iproute.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_iproute.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_iproute.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_iproute.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_iproute.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_netlink.c-1-/*
./keepalived/keepalived/vrrp/vrrp_netlink.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_netlink.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_netlink.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_netlink.c-5- *
./keepalived/keepalived/vrrp/vrrp_netlink.c-6- * Part:        NETLINK kernel command channel.
./keepalived/keepalived/vrrp/vrrp_netlink.c-7- *
./keepalived/keepalived/vrrp/vrrp_netlink.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_netlink.c-9- *
./keepalived/keepalived/vrrp/vrrp_netlink.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_netlink.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_netlink.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_netlink.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_netlink.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_scheduler.c-1-/*
./keepalived/keepalived/vrrp/vrrp_scheduler.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_scheduler.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_scheduler.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-5- *
./keepalived/keepalived/vrrp/vrrp_scheduler.c-6- * Part:        Sheduling framework for vrrp code.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-7- *
./keepalived/keepalived/vrrp/vrrp_scheduler.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_scheduler.c-9- *
./keepalived/keepalived/vrrp/vrrp_scheduler.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_scheduler.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_scheduler.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-14- *
--
./keepalived/keepalived/vrrp/vrrp_scheduler.c-531-				vrrp->fd_out = sock->fd_out;
./keepalived/keepalived/vrrp/vrrp_scheduler.c-532-
./keepalived/keepalived/vrrp/vrrp_scheduler.c-533-				/* append to hash index */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-534-				alloc_vrrp_fd_bucket(vrrp);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-535-			}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-536-		}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-537-	}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-538-}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-539-
./keepalived/keepalived/vrrp/vrrp_scheduler.c-540-/*
./keepalived/keepalived/vrrp/vrrp_scheduler.c:541: * We create & allocate a socket pool here. The soft design
./keepalived/keepalived/vrrp/vrrp_scheduler.c-542- * can be sum up by the following sketch :
./keepalived/keepalived/vrrp/vrrp_scheduler.c-543- *
./keepalived/keepalived/vrrp/vrrp_scheduler.c-544- *    fd1  fd2    fd3  fd4          fdi  fdi+1
./keepalived/keepalived/vrrp/vrrp_scheduler.c-545- * -----\__/--------\__/---........---\__/---
./keepalived/keepalived/vrrp/vrrp_scheduler.c-546- *    | ETH0 |    | ETH1 |          | ETHn |
./keepalived/keepalived/vrrp/vrrp_scheduler.c-547- *    +------+    +------+          +------+
./keepalived/keepalived/vrrp/vrrp_scheduler.c-548- *
./keepalived/keepalived/vrrp/vrrp_scheduler.c-549- * Here we have n physical NIC. Each NIC own a maximum of 2 fds.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-550- * (one for VRRP the other for IPSEC_AH). All our VRRP instances
./keepalived/keepalived/vrrp/vrrp_scheduler.c-551- * are multiplexed through this fds. So our design can handle 2*n
./keepalived/keepalived/vrrp/vrrp_scheduler.c-552- * multiplexing points.
./keepalived/keepalived/vrrp/vrrp_scheduler.c-553- */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-554-int vrrp_dispatcher_init(thread_t * thread)
./keepalived/keepalived/vrrp/vrrp_scheduler.c-555-{
./keepalived/keepalived/vrrp/vrrp_scheduler.c:556:	/* create the VRRP socket pool list */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-557-	vrrp_create_sockpool(vrrp_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-558-
./keepalived/keepalived/vrrp/vrrp_scheduler.c:559:	/* open the VRRP socket pool */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-560-	vrrp_open_sockpool(vrrp_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-561-
./keepalived/keepalived/vrrp/vrrp_scheduler.c-562-	/* set VRRP instance fds to sockpool */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-563-	vrrp_set_fds(vrrp_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-564-
./keepalived/keepalived/vrrp/vrrp_scheduler.c-565-	/* register read dispatcher worker thread */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-566-	vrrp_register_workers(vrrp_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-567-
./keepalived/keepalived/vrrp/vrrp_scheduler.c:568:	/* Dump socket pool */
./keepalived/keepalived/vrrp/vrrp_scheduler.c-569-	if (debug & 32)
./keepalived/keepalived/vrrp/vrrp_scheduler.c-570-		dump_list(vrrp_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-571-	return 1;
./keepalived/keepalived/vrrp/vrrp_scheduler.c-572-}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-573-
./keepalived/keepalived/vrrp/vrrp_scheduler.c-574-void vrrp_dispatcher_release(vrrp_conf_data * conf_data)
./keepalived/keepalived/vrrp/vrrp_scheduler.c-575-{
./keepalived/keepalived/vrrp/vrrp_scheduler.c-576-	free_list(conf_data->vrrp_socket_pool);
./keepalived/keepalived/vrrp/vrrp_scheduler.c-577-}
./keepalived/keepalived/vrrp/vrrp_scheduler.c-578-
--
./keepalived/keepalived/vrrp/vrrp.c-1-/*
./keepalived/keepalived/vrrp/vrrp.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp.c-5- *
./keepalived/keepalived/vrrp/vrrp.c-6- * Part:        VRRP implementation of VRRPv2 as specified in rfc2338.
./keepalived/keepalived/vrrp/vrrp.c-7- *              VRRP is a protocol which elect a master server on a LAN. If the
./keepalived/keepalived/vrrp/vrrp.c-8- *              master fails, a backup server takes over.
./keepalived/keepalived/vrrp/vrrp.c-9- *              The original implementation has been made by jerome etienne.
./keepalived/keepalived/vrrp/vrrp.c-10- *
./keepalived/keepalived/vrrp/vrrp.c-11- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp.c-12- *
./keepalived/keepalived/vrrp/vrrp.c-13- *              This program is distributed in the hope that it will be useful, 
./keepalived/keepalived/vrrp/vrrp.c-14- *              but WITHOUT ANY WARRANTY; without even the implied warranty of 
--
./keepalived/keepalived/vrrp/vrrp_notify.c-1-/*
./keepalived/keepalived/vrrp/vrrp_notify.c-2- * Soft:        Keepalived is a failover program for the LVS project
./keepalived/keepalived/vrrp/vrrp_notify.c-3- *              <www.linuxvirtualserver.org>. It monitor & manipulate
./keepalived/keepalived/vrrp/vrrp_notify.c:4: *              a loadbalanced server pool using multi-layer checks.
./keepalived/keepalived/vrrp/vrrp_notify.c-5- *
./keepalived/keepalived/vrrp/vrrp_notify.c-6- * Part:        VRRP state transition notification scripts handling.
./keepalived/keepalived/vrrp/vrrp_notify.c-7- *
./keepalived/keepalived/vrrp/vrrp_notify.c-8- * Author:      Alexandre Cassen, <acassen@linux-vs.org>
./keepalived/keepalived/vrrp/vrrp_notify.c-9- *
./keepalived/keepalived/vrrp/vrrp_notify.c-10- *              This program is distributed in the hope that it will be useful,
./keepalived/keepalived/vrrp/vrrp_notify.c-11- *              but WITHOUT ANY WARRANTY; without even the implied warranty of
./keepalived/keepalived/vrrp/vrrp_notify.c-12- *              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
./keepalived/keepalived/vrrp/vrrp_notify.c-13- *              See the GNU General Public License for more details.
./keepalived/keepalived/vrrp/vrrp_notify.c-14- *
--
./smartcommon/common/dependence.c-462-
./smartcommon/common/dependence.c-463-err:
./smartcommon/common/dependence.c-464-	module_purge_queue(&head, "apppool");
./smartcommon/common/dependence.c-465-	return -1;
./smartcommon/common/dependence.c-466-}
./smartcommon/common/dependence.c-467-
./smartcommon/common/dependence.c-468-static int check_llb_rserver_on_ipaddr(const char *ipaddr, const char *netmask)
./smartcommon/common/dependence.c-469-{
./smartcommon/common/dependence.c-470-	char ip[STR_IP_LEN];
./smartcommon/common/dependence.c-471-	struct llb_rserver *rserver;
./smartcommon/common/dependence.c:472:	struct llb_pool * pool;
./smartcommon/common/dependence.c-473-
./smartcommon/common/dependence.c-474-	LIST_HEAD(head);
./smartcommon/common/dependence.c-475-
./smartcommon/common/dependence.c-476-	module_get_queue(&head, "llb_pool", NULL);
./smartcommon/common/dependence.c:477:	list_for_each_entry(pool, &head, list) {
./smartcommon/common/dependence.c:478:		list_for_each_entry(rserver, &pool->rserver_head, list) {
./smartcommon/common/dependence.c-479-			//sscanf(rserver->address, "%[^:] :", ip);
./smartcommon/common/dependence.c-480-			inet_sockaddr2ip(&rserver->address, ip);
./smartcommon/common/dependence.c-481-			if (check_subnet(ip, netmask, ipaddr,netmask) == 0) {
./smartcommon/common/dependence.c-482-				goto err;
./smartcommon/common/dependence.c-483-			}
./smartcommon/common/dependence.c-484-		}
./smartcommon/common/dependence.c-485-	}
./smartcommon/common/dependence.c-486-
./smartcommon/common/dependence.c-487-
./smartcommon/common/dependence.c-488-	module_purge_queue(&head, "llb_pool");
--
./smartcommon/common/dependence.c-580-		}
./smartcommon/common/dependence.c-581-	}
./smartcommon/common/dependence.c-582-	module_purge_queue(&queue, "vserver");
./smartcommon/common/dependence.c-583-	return count;
./smartcommon/common/dependence.c-584-}
./smartcommon/common/dependence.c-585-
./smartcommon/common/dependence.c-586-int check_rserver_use_this_ipaddr(const char *ipaddr)
./smartcommon/common/dependence.c-587-{
./smartcommon/common/dependence.c-588-	char ip[STR_IP_LEN];
./smartcommon/common/dependence.c-589-	struct rserver *rserver;
./smartcommon/common/dependence.c:590:	struct apppool *pool;
./smartcommon/common/dependence.c-591-	LIST_HEAD(queue);
./smartcommon/common/dependence.c-592-
./smartcommon/common/dependence.c-593-	module_get_queue(&queue, "apppool", NULL);
./smartcommon/common/dependence.c:594:	list_for_each_entry(pool, &queue, list) {
./smartcommon/common/dependence.c:595:		list_for_each_entry(rserver, &pool->realserver_head, list){
./smartcommon/common/dependence.c-596-			//sscanf(rserver->address, "%[^:] :", ip);
./smartcommon/common/dependence.c-597-			inet_sockaddr2ip(&rserver->address, ip);
./smartcommon/common/dependence.c-598-			if (check_ipnetmask_equal(ip, ipaddr) == 0) {
./smartcommon/common/dependence.c-599-				goto err;
./smartcommon/common/dependence.c-600-			}
./smartcommon/common/dependence.c-601-		}
./smartcommon/common/dependence.c-602-	}
./smartcommon/common/dependence.c-603-	module_purge_queue(&queue, "apppool");
./smartcommon/common/dependence.c-604-	return 0;
./smartcommon/common/dependence.c-605-err:
--
./smartcommon/common/dependence.c-1628-			base64_decode((uint8_t *) statements, rule->statements, 4095);
./smartcommon/common/dependence.c-1629-			ptr = statements;
./smartcommon/common/dependence.c-1630-			while ((ptr = get_poolname_from_rule_raw(ptr, buff, BUFSIZ)) != NULL) {
./smartcommon/common/dependence.c-1631-				if (do_check_apppool_address_loops(buff, vs->protocol, vlist, plist, rlist, depth) != 0) {
./smartcommon/common/dependence.c-1632-					return -EINVAL;
./smartcommon/common/dependence.c-1633-				}
./smartcommon/common/dependence.c-1634-			}
./smartcommon/common/dependence.c-1635-		}
./smartcommon/common/dependence.c-1636-
./smartcommon/common/dependence.c-1637-	} else {
./smartcommon/common/dependence.c:1638:		if (vs->pool[0] == 0) {
./smartcommon/common/dependence.c-1639-			return 0;
./smartcommon/common/dependence.c-1640-		}
./smartcommon/common/dependence.c-1641-
./smartcommon/common/dependence.c:1642:		if (do_check_apppool_address_loops(vs->pool, vs->protocol, vlist, plist, rlist, depth) != 0) {
./smartcommon/common/dependence.c-1643-			return -EINVAL;
./smartcommon/common/dependence.c-1644-		}
./smartcommon/common/dependence.c-1645-	}
./smartcommon/common/dependence.c-1646-
./smartcommon/common/dependence.c-1647-
./smartcommon/common/dependence.c-1648-	return 0;
./smartcommon/common/dependence.c-1649-}
./smartcommon/common/dependence.c-1650-
./smartcommon/common/dependence.c-1651-int check_vserver_address_loops_pro(struct vserver *vserver, 
./smartcommon/common/dependence.c-1652-		const char *address,
--
./smartcommon/common/dependence.c-1662-	module_get_queue(&vhead, "vserver", NULL);
./smartcommon/common/dependence.c-1663-	module_get_queue(&phead, "apppool", NULL);
./smartcommon/common/dependence.c-1664-	module_get_queue(&rhead, "rule", NULL);
./smartcommon/common/dependence.c-1665-
./smartcommon/common/dependence.c-1666-
./smartcommon/common/dependence.c-1667-	if (address != NULL) {
./smartcommon/common/dependence.c-1668-		inet_address2sockaddr(address, &vserver->address);
./smartcommon/common/dependence.c-1669-	}
./smartcommon/common/dependence.c-1670-
./smartcommon/common/dependence.c-1671-	if (apppool != NULL) {
./smartcommon/common/dependence.c:1672:		strcpy(vserver->pool, apppool);
./smartcommon/common/dependence.c-1673-	}
./smartcommon/common/dependence.c-1674-	if (rulename != NULL) {
./smartcommon/common/dependence.c-1675-		struct rule_name *rule_name = malloc(sizeof(struct rule_name));
./smartcommon/common/dependence.c-1676-		if (rule_name == NULL) {
./smartcommon/common/dependence.c-1677-			ret = -ENOMEM;
./smartcommon/common/dependence.c-1678-			goto out;
./smartcommon/common/dependence.c-1679-		}
./smartcommon/common/dependence.c-1680-
./smartcommon/common/dependence.c-1681-		strcpy(rule_name->name, rulename);
./smartcommon/common/dependence.c-1682-		list_add_tail(&rule_name->list, &vserver->rule_head);
--
./smartcommon/common/dependence.c-1692-	vserver->list.next = tmp_next;
./smartcommon/common/dependence.c-1693-	vserver->list.prev = tmp_prev;
./smartcommon/common/dependence.c-1694-out:
./smartcommon/common/dependence.c-1695-	module_purge_queue(&rhead, "rule");
./smartcommon/common/dependence.c-1696-	module_purge_queue(&phead, "apppool");
./smartcommon/common/dependence.c-1697-	module_purge_queue(&vhead, "vserver");
./smartcommon/common/dependence.c-1698-	return ret;
./smartcommon/common/dependence.c-1699-}
./smartcommon/common/dependence.c-1700-
./smartcommon/common/dependence.c-1701-/**
./smartcommon/common/dependence.c:1702: * Vserver 设置 address 或 pool 或 添加rule
./smartcommon/common/dependence.c-1703- **/
./smartcommon/common/dependence.c-1704-int check_vserver_address_loops(const char *vsname, 
./smartcommon/common/dependence.c-1705-		const char *address,
./smartcommon/common/dependence.c-1706-		const char *apppool,
./smartcommon/common/dependence.c-1707-		const char *rulename)
./smartcommon/common/dependence.c-1708-{
./smartcommon/common/dependence.c-1709-	int ret = 0;
./smartcommon/common/dependence.c-1710-	struct list_head *list;
./smartcommon/common/dependence.c-1711-	struct vserver *vserver;
./smartcommon/common/dependence.c-1712-
--
./smartcommon/common/dependence.c-1723-		goto out;
./smartcommon/common/dependence.c-1724-	}
./smartcommon/common/dependence.c-1725-	vserver = list_entry(list, struct vserver, list);
./smartcommon/common/dependence.c-1726-
./smartcommon/common/dependence.c-1727-	if (address != NULL) {
./smartcommon/common/dependence.c-1728-		//strcpy(vserver->address, address);
./smartcommon/common/dependence.c-1729-		inet_address2sockaddr(address, &vserver->address);
./smartcommon/common/dependence.c-1730-	}
./smartcommon/common/dependence.c-1731-
./smartcommon/common/dependence.c-1732-	if (apppool != NULL) {
./smartcommon/common/dependence.c:1733:		strcpy(vserver->pool, apppool);
./smartcommon/common/dependence.c-1734-	}
./smartcommon/common/dependence.c-1735-	if (rulename != NULL) {
./smartcommon/common/dependence.c-1736-		struct rule_name *rule_name = malloc(sizeof(struct rule_name));
./smartcommon/common/dependence.c-1737-		if (rule_name == NULL) {
./smartcommon/common/dependence.c-1738-			ret = -ENOMEM;
./smartcommon/common/dependence.c-1739-			goto out;
./smartcommon/common/dependence.c-1740-		}
./smartcommon/common/dependence.c-1741-
./smartcommon/common/dependence.c-1742-		strcpy(rule_name->name, rulename);
./smartcommon/common/dependence.c-1743-		list_add_tail(&rule_name->list, &vserver->rule_head);
--
./smartcommon/llb/llb_pool.c-12-#include "strldef.h"
./smartcommon/llb/llb_pool.c-13-#include "common.h"
./smartcommon/llb/llb_pool.c-14-#include "common/dependence.h"
./smartcommon/llb/llb_pool.c-15-#include "module.h"
./smartcommon/llb/llb_pool.c-16-#include "llb_pool.h"
./smartcommon/llb/llb_pool.c-17-#include "common/base64.h"
./smartcommon/llb/llb_pool.c-18-#include "network/bandwidth.h"
./smartcommon/llb/llb_pool.c-19-#include "llb/llb_vserver.h"
./smartcommon/llb/llb_pool.c-20-
./smartcommon/llb/llb_pool.c-21-
./smartcommon/llb/llb_pool.c:22:int Is_llb_pool_busy(struct llb_pool *pool)
./smartcommon/llb/llb_pool.c-23-{
./smartcommon/llb/llb_pool.c-24-	struct llb_vserver *vs;
./smartcommon/llb/llb_pool.c-25-	LIST_HEAD(queue);
./smartcommon/llb/llb_pool.c-26-
./smartcommon/llb/llb_pool.c-27-	module_get_queue(&queue, "llb_vserver", NULL);
./smartcommon/llb/llb_pool.c-28-
./smartcommon/llb/llb_pool.c-29-	list_for_each_entry(vs, &queue, list) {
./smartcommon/llb/llb_pool.c:30:		if(strcmp(vs->poolname, pool->name) == 0) {
./smartcommon/llb/llb_pool.c-31-			return 1;
./smartcommon/llb/llb_pool.c-32-		}
./smartcommon/llb/llb_pool.c-33-	}
./smartcommon/llb/llb_pool.c-34-	module_purge_queue(&queue, "llb_vserver");
./smartcommon/llb/llb_pool.c-35-	return 0;
./smartcommon/llb/llb_pool.c-36-}
./smartcommon/llb/llb_pool.c-37-
./smartcommon/llb/llb_pool.c-38-static struct list_head *llb_rserver_malloc(void)
./smartcommon/llb/llb_pool.c-39-{
./smartcommon/llb/llb_pool.c-40-	struct llb_rserver *llb_rserver;
--
./smartcommon/llb/llb_pool.c-289-
./smartcommon/llb/llb_pool.c-290-	list_for_each_entry(llb_pool, head, list) {
./smartcommon/llb/llb_pool.c-291-		if (llb_pool_compare(&llb_pool->list, name) == 0)
./smartcommon/llb/llb_pool.c-292-			return llb_pool;
./smartcommon/llb/llb_pool.c-293-	}
./smartcommon/llb/llb_pool.c-294-
./smartcommon/llb/llb_pool.c-295-	return NULL;
./smartcommon/llb/llb_pool.c-296-}
./smartcommon/llb/llb_pool.c-297-static int llb_pool_execute(struct list_head *list, struct list_head *useless, int op)
./smartcommon/llb/llb_pool.c-298-{	
./smartcommon/llb/llb_pool.c:299:	struct llb_pool *pool;
./smartcommon/llb/llb_pool.c-300-
./smartcommon/llb/llb_pool.c:301:	pool = list_entry(list, struct llb_pool, list);
./smartcommon/llb/llb_pool.c-302-	if(op == MODULE_OP_DEL || op == MODULE_OP_SET_DEL) {
./smartcommon/llb/llb_pool.c:303:		if(Is_llb_pool_busy(pool) == 1) {
./smartcommon/llb/llb_pool.c-304-			return -EBUSY;
./smartcommon/llb/llb_pool.c-305-		}
./smartcommon/llb/llb_pool.c-306-	}
./smartcommon/llb/llb_pool.c-307-	return 0;
./smartcommon/llb/llb_pool.c-308-}
./smartcommon/llb/llb_pool.c-309-
./smartcommon/llb/llb_pool.c-310-
./smartcommon/llb/llb_pool.c-311-static int llb_pool_set(struct list_head *list, const char *name, 
./smartcommon/llb/llb_pool.c-312-		const char *attr, const char *value)
./smartcommon/llb/llb_pool.c-313-{
--
./smartcommon/network/bandwidth.c-382-
./smartcommon/network/bandwidth.c-383-	module_get_queue(&vlan_queue, "vlan", NULL);
./smartcommon/network/bandwidth.c-384-	module_get_queue(&rtable_queue, "rtable", NULL);
./smartcommon/network/bandwidth.c-385-
./smartcommon/network/bandwidth.c-386-	__rserver_set_bandwidth(rs, op, &vlan_queue, &rtable_queue);
./smartcommon/network/bandwidth.c-387-
./smartcommon/network/bandwidth.c-388-	module_purge_queue(&vlan_queue, "vlan");
./smartcommon/network/bandwidth.c-389-	module_purge_queue(&rtable_queue, "rtable");
./smartcommon/network/bandwidth.c-390-}
./smartcommon/network/bandwidth.c-391-
./smartcommon/network/bandwidth.c:392:void pool_delete_rserver_bandwidth(struct apppool *pool)
./smartcommon/network/bandwidth.c-393-{
./smartcommon/network/bandwidth.c-394-	struct rserver *rserver;
./smartcommon/network/bandwidth.c-395-
./smartcommon/network/bandwidth.c-396-	LIST_HEAD(rtable_queue);
./smartcommon/network/bandwidth.c-397-	LIST_HEAD(vlan_queue);
./smartcommon/network/bandwidth.c-398-
./smartcommon/network/bandwidth.c-399-	module_get_queue(&vlan_queue, "vlan", NULL);
./smartcommon/network/bandwidth.c-400-	module_get_queue(&rtable_queue, "rtable", NULL);
./smartcommon/network/bandwidth.c:401:	list_for_each_entry(rserver, &pool->realserver_head, list) {
./smartcommon/network/bandwidth.c-402-		__rserver_set_bandwidth(rserver, 1, 
./smartcommon/network/bandwidth.c-403-				&vlan_queue, &rtable_queue);
./smartcommon/network/bandwidth.c-404-	}
./smartcommon/network/bandwidth.c-405-	module_purge_queue(&vlan_queue, "vlan");
./smartcommon/network/bandwidth.c-406-	module_purge_queue(&rtable_queue, "rtable");
./smartcommon/network/bandwidth.c-407-}
./smartcommon/network/bandwidth.c-408-
./smartcommon/network/bandwidth.c-409-extern int module_init_bandwidth(void)
./smartcommon/network/bandwidth.c-410-{
./smartcommon/network/bandwidth.c-411-	struct vserver *vserver;
--
./smartcommon/network/bandwidth.c-452-		}
./smartcommon/network/bandwidth.c-453-	}
./smartcommon/network/bandwidth.c-454-	if (saveflag) {
./smartcommon/network/bandwidth.c-455-		module_save_queue(&queue, "vserver");
./smartcommon/network/bandwidth.c-456-	}
./smartcommon/network/bandwidth.c-457-
./smartcommon/network/bandwidth.c-458-	module_purge_queue(&queue, "vserver");
./smartcommon/network/bandwidth.c-459-
./smartcommon/network/bandwidth.c-460-
./smartcommon/network/bandwidth.c-461-	/*****************************************************
./smartcommon/network/bandwidth.c:462:	 * tirval the pool queue 
./smartcommon/network/bandwidth.c-463-	 *****************************************************/
./smartcommon/network/bandwidth.c-464-	saveflag = 0;
./smartcommon/network/bandwidth.c-465-	module_get_queue(&queue, "apppool", NULL);
./smartcommon/network/bandwidth.c-466-	list_for_each_entry(apppool, &queue, list) {
./smartcommon/network/bandwidth.c-467-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartcommon/network/bandwidth.c-468-			if (strlen(rserver->id)) {
./smartcommon/network/bandwidth.c-469-#ifdef DEBUG_BANDWIDTH
./smartcommon/network/bandwidth.c-470-				printf("get used rserver id %s, clear it\n",
./smartcommon/network/bandwidth.c-471-						rserver->id); 
./smartcommon/network/bandwidth.c-472-#endif
--
./smartcommon/loadbalance/vcenter.c-25-#include "loadbalance/vcenter.h"
./smartcommon/loadbalance/vcenter.c-26-
./smartcommon/loadbalance/vcenter.c-27-/*
./smartcommon/loadbalance/vcenter.c-28-	* 1: used
./smartcommon/loadbalance/vcenter.c-29-	* 0: not used
./smartcommon/loadbalance/vcenter.c-30-*/
./smartcommon/loadbalance/vcenter.c-31-
./smartcommon/loadbalance/vcenter.c-32-int vcenter_is_busy(const char *name)
./smartcommon/loadbalance/vcenter.c-33-{
./smartcommon/loadbalance/vcenter.c-34-	int ret = 0;
./smartcommon/loadbalance/vcenter.c:35:	struct apppool *pool;
./smartcommon/loadbalance/vcenter.c-36-	struct rserver *rserver;
./smartcommon/loadbalance/vcenter.c-37-
./smartcommon/loadbalance/vcenter.c-38-	LIST_HEAD(pool_queue);
./smartcommon/loadbalance/vcenter.c-39-	
./smartcommon/loadbalance/vcenter.c-40-	module_get_queue(&pool_queue, "apppool", NULL);
./smartcommon/loadbalance/vcenter.c-41-	
./smartcommon/loadbalance/vcenter.c:42:	list_for_each_entry(pool, &pool_queue, list){
./smartcommon/loadbalance/vcenter.c:43:		if(strcmp(pool->vmenable, "on") != 0){
./smartcommon/loadbalance/vcenter.c-44-			continue;
./smartcommon/loadbalance/vcenter.c-45-		}
./smartcommon/loadbalance/vcenter.c-46-		
./smartcommon/loadbalance/vcenter.c:47:		list_for_each_entry(rserver, &pool->realserver_head, list){
./smartcommon/loadbalance/vcenter.c-48-			if(strcmp(rserver->rscenter, name) == 0){
./smartcommon/loadbalance/vcenter.c-49-				ret = 1;
./smartcommon/loadbalance/vcenter.c-50-				return ret;
./smartcommon/loadbalance/vcenter.c-51-			}
./smartcommon/loadbalance/vcenter.c-52-		}
./smartcommon/loadbalance/vcenter.c-53-	}
./smartcommon/loadbalance/vcenter.c-54-	
./smartcommon/loadbalance/vcenter.c-55-	module_purge_queue(&pool_queue, "apppool");	
./smartcommon/loadbalance/vcenter.c-56-	return ret;
./smartcommon/loadbalance/vcenter.c-57-
--
./smartcommon/loadbalance/vcenter.c-559-		struct list_head *rs_list, int op)
./smartcommon/loadbalance/vcenter.c-560-{
./smartcommon/loadbalance/vcenter.c-561-	if (op == MODULE_OP_DEL || op == MODULE_OP_SET_DEL) { } 
./smartcommon/loadbalance/vcenter.c-562-	return 0;
./smartcommon/loadbalance/vcenter.c-563-}
./smartcommon/loadbalance/vcenter.c-564-
./smartcommon/loadbalance/vcenter.c-565-/* update server->vmstate */
./smartcommon/loadbalance/vcenter.c-566-static int vceneter_update_rs_vmstate()
./smartcommon/loadbalance/vcenter.c-567-{
./smartcommon/loadbalance/vcenter.c-568-	struct rserver *rs;
./smartcommon/loadbalance/vcenter.c:569:	struct apppool *pool;
./smartcommon/loadbalance/vcenter.c-570-	struct vcenter_vm vm;
./smartcommon/loadbalance/vcenter.c-571-	char address[512];
./smartcommon/loadbalance/vcenter.c-572-
./smartcommon/loadbalance/vcenter.c-573-	/* Sync new infomation to apppool */
./smartcommon/loadbalance/vcenter.c-574-	LIST_HEAD(pool_head);
./smartcommon/loadbalance/vcenter.c-575-	LIST_HEAD(vcenter_head);
./smartcommon/loadbalance/vcenter.c-576-
./smartcommon/loadbalance/vcenter.c-577-	module_get_queue(&pool_head, "apppool", NULL);
./smartcommon/loadbalance/vcenter.c-578-	if (list_empty(&pool_head)) {
./smartcommon/loadbalance/vcenter.c-579-		return -1;
./smartcommon/loadbalance/vcenter.c-580-	}
./smartcommon/loadbalance/vcenter.c-581-
./smartcommon/loadbalance/vcenter.c-582-	module_get_queue(&vcenter_head, "vcenter", NULL);
./smartcommon/loadbalance/vcenter.c-583-	if (list_empty(&vcenter_head)) {
./smartcommon/loadbalance/vcenter.c-584-		module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vcenter.c-585-		return -1;
./smartcommon/loadbalance/vcenter.c-586-	}
./smartcommon/loadbalance/vcenter.c-587-
./smartcommon/loadbalance/vcenter.c-588-	/* update rserver->vmstate */
./smartcommon/loadbalance/vcenter.c:589:	list_for_each_entry(pool, &pool_head, list) {
./smartcommon/loadbalance/vcenter.c:590:		if (strcmp (pool->vmtype, ELASTIC_POOL_TYPE_VCENTER) != 0) {
./smartcommon/loadbalance/vcenter.c-591-			continue;
./smartcommon/loadbalance/vcenter.c-592-		}
./smartcommon/loadbalance/vcenter.c-593-
./smartcommon/loadbalance/vcenter.c:594:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartcommon/loadbalance/vcenter.c-595-			if (rs->rscenter[0] == 0 || rs->vmdatacenter[0] == 0) {
./smartcommon/loadbalance/vcenter.c-596-				continue;
./smartcommon/loadbalance/vcenter.c-597-			}
./smartcommon/loadbalance/vcenter.c-598-			if (inet_sockaddr2address(&rs->address, address) != 0) {
./smartcommon/loadbalance/vcenter.c-599-				continue;
./smartcommon/loadbalance/vcenter.c-600-			}
./smartcommon/loadbalance/vcenter.c-601-			memset(&vm, 0, sizeof(vm));
./smartcommon/loadbalance/vcenter.c-602-			if (__vcenter_vm_search( rs->rscenter, rs->vmdatacenter, address, &vm) == NULL) {
./smartcommon/loadbalance/vcenter.c-603-				continue;
./smartcommon/loadbalance/vcenter.c-604-			}
--
./smartcommon/loadbalance/healthcheck.c-135-static int healthcheck_for_llb(struct healthcheck *hc)
./smartcommon/loadbalance/healthcheck.c-136-{
./smartcommon/loadbalance/healthcheck.c-137-	int ret = 0;
./smartcommon/loadbalance/healthcheck.c-138-	struct llb_pool *llb_pool;
./smartcommon/loadbalance/healthcheck.c-139-	struct llb_rserver *llb_rserver;
./smartcommon/loadbalance/healthcheck.c-140-
./smartcommon/loadbalance/healthcheck.c-141-
./smartcommon/loadbalance/healthcheck.c-142-	LIST_HEAD(llb_queue);
./smartcommon/loadbalance/healthcheck.c-143-	module_get_queue(&llb_queue, "llb_pool", NULL);
./smartcommon/loadbalance/healthcheck.c-144-
./smartcommon/loadbalance/healthcheck.c:145:	/* check pool use health check */
./smartcommon/loadbalance/healthcheck.c-146-
./smartcommon/loadbalance/healthcheck.c-147-	list_for_each_entry(llb_pool, &llb_queue, list) {
./smartcommon/loadbalance/healthcheck.c-148-		if(strcmp(llb_pool->healthcheck, hc->name) == 0) {
./smartcommon/loadbalance/healthcheck.c-149-			if(strcmp(hc->type, "icmp") != 0 && strcmp(hc->type, "icmp-gw") != 0) {
./smartcommon/loadbalance/healthcheck.c-150-				ret = 1;
./smartcommon/loadbalance/healthcheck.c-151-				goto out;
./smartcommon/loadbalance/healthcheck.c-152-			}
./smartcommon/loadbalance/healthcheck.c-153-		}
./smartcommon/loadbalance/healthcheck.c-154-		
./smartcommon/loadbalance/healthcheck.c-155-		list_for_each_entry(llb_rserver, &llb_pool->rserver_head, list) {
--
./smartcommon/loadbalance/healthcheck.c-165-
./smartcommon/loadbalance/healthcheck.c-166-out:
./smartcommon/loadbalance/healthcheck.c-167-	module_purge_queue(&llb_queue, "llb_pool");
./smartcommon/loadbalance/healthcheck.c-168-
./smartcommon/loadbalance/healthcheck.c-169-	return ret;
./smartcommon/loadbalance/healthcheck.c-170-}
./smartcommon/loadbalance/healthcheck.c-171-
./smartcommon/loadbalance/healthcheck.c-172-static int healthcheck_is_busy(struct healthcheck *hc)
./smartcommon/loadbalance/healthcheck.c-173-{
./smartcommon/loadbalance/healthcheck.c-174-	int ret = 0;
./smartcommon/loadbalance/healthcheck.c:175:	struct apppool *pool;
./smartcommon/loadbalance/healthcheck.c-176-	struct rserver *rserver;
./smartcommon/loadbalance/healthcheck.c-177-	struct llb_pool *llb_pool;
./smartcommon/loadbalance/healthcheck.c-178-	struct llb_rserver *llb_rserver;
./smartcommon/loadbalance/healthcheck.c-179-
./smartcommon/loadbalance/healthcheck.c-180-	struct gslb_pool *gslb_pool;
./smartcommon/loadbalance/healthcheck.c-181-	struct gslb_rserver *gslb_rserver;
./smartcommon/loadbalance/healthcheck.c-182-
./smartcommon/loadbalance/healthcheck.c-183-	LIST_HEAD(pool_head);
./smartcommon/loadbalance/healthcheck.c-184-	LIST_HEAD(llb_queue);
./smartcommon/loadbalance/healthcheck.c-185-	LIST_HEAD(gslb_queue);
./smartcommon/loadbalance/healthcheck.c-186-	module_get_queue(&pool_head, "apppool", NULL);
./smartcommon/loadbalance/healthcheck.c-187-	module_get_queue(&llb_queue, "llb_pool", NULL);
./smartcommon/loadbalance/healthcheck.c-188-	module_get_queue(&gslb_queue, "gslb_pool", NULL);
./smartcommon/loadbalance/healthcheck.c-189-
./smartcommon/loadbalance/healthcheck.c:190:	/* check pool use health check */
./smartcommon/loadbalance/healthcheck.c:191:	list_for_each_entry(pool, &pool_head, list) {
./smartcommon/loadbalance/healthcheck.c:192:		if (strcmp(pool->healthcheck, hc->name) == 0) {
./smartcommon/loadbalance/healthcheck.c-193-			ret = 1;
./smartcommon/loadbalance/healthcheck.c-194-			goto out;
./smartcommon/loadbalance/healthcheck.c-195-		}
./smartcommon/loadbalance/healthcheck.c-196-		/* check rserver use check */
./smartcommon/loadbalance/healthcheck.c:197:		list_for_each_entry(rserver, &pool->realserver_head, list) {
./smartcommon/loadbalance/healthcheck.c-198-			if (strcmp(rserver->healthcheck, hc->name) == 0) {
./smartcommon/loadbalance/healthcheck.c-199-				ret = 1;
./smartcommon/loadbalance/healthcheck.c-200-				goto out;
./smartcommon/loadbalance/healthcheck.c-201-			}
./smartcommon/loadbalance/healthcheck.c-202-		}
./smartcommon/loadbalance/healthcheck.c-203-	}
./smartcommon/loadbalance/healthcheck.c-204-
./smartcommon/loadbalance/healthcheck.c-205-	list_for_each_entry(llb_pool, &llb_queue, list) {
./smartcommon/loadbalance/healthcheck.c-206-		if(strcmp(llb_pool->healthcheck, hc->name) == 0) {
./smartcommon/loadbalance/healthcheck.c-207-			ret = 1;
--
./smartcommon/loadbalance/vserver.c-277-
./smartcommon/loadbalance/vserver.c-278-	if ((value = config_search_attr_value(pnode, "address")) != NULL) {
./smartcommon/loadbalance/vserver.c-279-		inet_address2sockaddr(value, &vserver->address);
./smartcommon/loadbalance/vserver.c-280-		xmlFree((void *)value);
./smartcommon/loadbalance/vserver.c-281-	}
./smartcommon/loadbalance/vserver.c-282-
./smartcommon/loadbalance/vserver.c-283-	m_analyse_common(pnode, vserver, enable);
./smartcommon/loadbalance/vserver.c-284-	m_analyse_common(pnode, vserver, protocol);
./smartcommon/loadbalance/vserver.c-285-	m_analyse_common(pnode, vserver, transparent);
./smartcommon/loadbalance/vserver.c-286-	m_analyse_common(pnode, vserver, contentswitch);
./smartcommon/loadbalance/vserver.c:287:	m_analyse_common(pnode, vserver, pool);
./smartcommon/loadbalance/vserver.c-288-	m_analyse_common(pnode, vserver, backpool);
./smartcommon/loadbalance/vserver.c-289-	m_analyse_common(pnode, vserver, waf_enable);
./smartcommon/loadbalance/vserver.c-290-	m_analyse_common(pnode, vserver, errpage);
./smartcommon/loadbalance/vserver.c-291-	m_analyse_common(pnode, vserver, persistent);
./smartcommon/loadbalance/vserver.c-292-	m_analyse_common(pnode, vserver, persistent_cookie);
./smartcommon/loadbalance/vserver.c-293-	m_analyse_common(pnode, vserver, persistent_header);
./smartcommon/loadbalance/vserver.c-294-	m_analyse_common(pnode, vserver, persistentgroup);
./smartcommon/loadbalance/vserver.c-295-	m_analyse_common(pnode, vserver, persistentnetmask);
./smartcommon/loadbalance/vserver.c-296-	m_analyse_common(pnode, vserver, gzip);
./smartcommon/loadbalance/vserver.c-297-	m_analyse_common(pnode, vserver, deflate);
--
./smartcommon/loadbalance/vserver.c-423-	m_restore_common(pnode, vserver, sched);
./smartcommon/loadbalance/vserver.c-424-	//m_restore_common(pnode, vserver, address);
./smartcommon/loadbalance/vserver.c-425-
./smartcommon/loadbalance/vserver.c-426-	if (inet_sockaddr2address(&vserver->address, address) == 0) {
./smartcommon/loadbalance/vserver.c-427-		config_set_attr_value(pnode, "address", address);
./smartcommon/loadbalance/vserver.c-428-	}
./smartcommon/loadbalance/vserver.c-429-	m_restore_common(pnode, vserver, enable);
./smartcommon/loadbalance/vserver.c-430-	m_restore_common(pnode, vserver, protocol);
./smartcommon/loadbalance/vserver.c-431-	m_restore_common(pnode, vserver, transparent);
./smartcommon/loadbalance/vserver.c-432-	m_restore_common(pnode, vserver, contentswitch);
./smartcommon/loadbalance/vserver.c:433:	m_restore_common(pnode, vserver, pool);
./smartcommon/loadbalance/vserver.c-434-	m_restore_common(pnode, vserver, backpool);
./smartcommon/loadbalance/vserver.c-435-	m_restore_common(pnode, vserver, waf_enable);
./smartcommon/loadbalance/vserver.c-436-	m_restore_common(pnode, vserver, errpage);
./smartcommon/loadbalance/vserver.c-437-	m_restore_common(pnode, vserver, persistent);
./smartcommon/loadbalance/vserver.c-438-	m_restore_common(pnode, vserver, persistent_cookie);
./smartcommon/loadbalance/vserver.c-439-	m_restore_common(pnode, vserver, persistent_header);
./smartcommon/loadbalance/vserver.c-440-	m_restore_common(pnode, vserver, persistentgroup);
./smartcommon/loadbalance/vserver.c-441-	m_restore_common(pnode, vserver, persistentnetmask);
./smartcommon/loadbalance/vserver.c-442-	m_restore_common(pnode, vserver, gzip);
./smartcommon/loadbalance/vserver.c-443-	m_restore_common(pnode, vserver, deflate);
--
./smartcommon/loadbalance/vserver.c-874-			module_purge_queue(&rule_head, "rule");
./smartcommon/loadbalance/vserver.c-875-			return -1;
./smartcommon/loadbalance/vserver.c-876-		}
./smartcommon/loadbalance/vserver.c-877-
./smartcommon/loadbalance/vserver.c-878-		if (strcmp(rule->type, RULE_TYPE_CONTENT_SWITCH) != 0) {
./smartcommon/loadbalance/vserver.c-879-			goto out;
./smartcommon/loadbalance/vserver.c-880-		}
./smartcommon/loadbalance/vserver.c-881-
./smartcommon/loadbalance/vserver.c-882-		ptr = r_stor.statements;
./smartcommon/loadbalance/vserver.c-883-		while ((ptr = get_poolname_from_rule_raw(ptr, pool_decode, 4096)) != NULL) {
./smartcommon/loadbalance/vserver.c:884:			/* check pool */
./smartcommon/loadbalance/vserver.c-885-			LIST_HEAD(pool_head);
./smartcommon/loadbalance/vserver.c-886-			module_get_queue(&pool_head, "apppool", pool_decode);
./smartcommon/loadbalance/vserver.c-887-			if (list_empty(&pool_head)) {
./smartcommon/loadbalance/vserver.c-888-				module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vserver.c-889-				module_purge_queue(&rule_head, "rule");
./smartcommon/loadbalance/vserver.c-890-				return -1;
./smartcommon/loadbalance/vserver.c-891-			}
./smartcommon/loadbalance/vserver.c-892-
./smartcommon/loadbalance/vserver.c-893-			module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vserver.c-894-		}
--
./smartcommon/loadbalance/vserver.c-943-
./smartcommon/loadbalance/vserver.c-944-	if (check_static_ipaddr_on_vlan(ip, NULL) != 0 &&
./smartcommon/loadbalance/vserver.c-945-			check_hb_enable() != 0) {
./smartcommon/loadbalance/vserver.c-946-		return -1;
./smartcommon/loadbalance/vserver.c-947-	}
./smartcommon/loadbalance/vserver.c-948-
./smartcommon/loadbalance/vserver.c-949-	if ((ret = vlan_ipaddr_should_be_added(name,netmask, ip)) == -1) {
./smartcommon/loadbalance/vserver.c-950-		return -1;
./smartcommon/loadbalance/vserver.c-951-	}
./smartcommon/loadbalance/vserver.c-952-
./smartcommon/loadbalance/vserver.c:953:	if (vserver->pool[0] != 0 && 
./smartcommon/loadbalance/vserver.c-954-			check_vserver_address_loops_pro(vserver, address, NULL, NULL) != 0) {
./smartcommon/loadbalance/vserver.c-955-		return -1;
./smartcommon/loadbalance/vserver.c-956-	}
./smartcommon/loadbalance/vserver.c-957-	return 0;
./smartcommon/loadbalance/vserver.c-958-}
./smartcommon/loadbalance/vserver.c-959-
./smartcommon/loadbalance/vserver.c-960-static int vserver_normal_set(struct vserver *vserver, const char *name,
./smartcommon/loadbalance/vserver.c-961-		const char *attr, const char *value)
./smartcommon/loadbalance/vserver.c-962-{
./smartcommon/loadbalance/vserver.c-963-
--
./smartcommon/loadbalance/vserver.c-968-	} else if (vserver->type[0] == 0) {
./smartcommon/loadbalance/vserver.c-969-		strcpy(vserver->type, "ipv4");
./smartcommon/loadbalance/vserver.c-970-	}
./smartcommon/loadbalance/vserver.c-971-
./smartcommon/loadbalance/vserver.c-972-	if (strcmp(attr, "address") == 0) {
./smartcommon/loadbalance/vserver.c-973-		if (check_vserver_address(vserver, value) < 0) {
./smartcommon/loadbalance/vserver.c-974-			return -EINVAL;
./smartcommon/loadbalance/vserver.c-975-		}
./smartcommon/loadbalance/vserver.c-976-	}
./smartcommon/loadbalance/vserver.c-977-
./smartcommon/loadbalance/vserver.c:978:	if (strcmp(attr, "pool") == 0) {
./smartcommon/loadbalance/vserver.c-979-		/** 检查该vserver所使用的应用池中是否有与vserver相同的IP 
./smartcommon/loadbalance/vserver.c-980-		 * 如果有此IP，则会造成环路
./smartcommon/loadbalance/vserver.c-981-		 **/
./smartcommon/loadbalance/vserver.c-982-		char address[BUFSIZ] = {0};
./smartcommon/loadbalance/vserver.c-983-		struct apppool *p;
./smartcommon/loadbalance/vserver.c-984-		inet_sockaddr2address(&vserver->address, address);
./smartcommon/loadbalance/vserver.c-985-
./smartcommon/loadbalance/vserver.c-986-		if (address[0] != 0 && 
./smartcommon/loadbalance/vserver.c-987-				check_vserver_address_loops(vserver->name, NULL, value, NULL) != 0) {
./smartcommon/loadbalance/vserver.c-988-			return -EINVAL;
--
./smartcommon/loadbalance/vserver.c-1009-			if (netmask < 1 || netmask > 32) {
./smartcommon/loadbalance/vserver.c-1010-				return -EINVAL;
./smartcommon/loadbalance/vserver.c-1011-			}
./smartcommon/loadbalance/vserver.c-1012-		} else {
./smartcommon/loadbalance/vserver.c-1013-			if (netmask < 1 || netmask > 128) {
./smartcommon/loadbalance/vserver.c-1014-				return -EINVAL;
./smartcommon/loadbalance/vserver.c-1015-			}
./smartcommon/loadbalance/vserver.c-1016-		}
./smartcommon/loadbalance/vserver.c-1017-	}
./smartcommon/loadbalance/vserver.c-1018-
./smartcommon/loadbalance/vserver.c:1019:	if(strcmp(attr, "back-pool") == 0) {
./smartcommon/loadbalance/vserver.c:1020:		struct apppool *pool;
./smartcommon/loadbalance/vserver.c-1021-		LIST_HEAD(queue);
./smartcommon/loadbalance/vserver.c-1022-		module_get_queue(&queue, "apppool", NULL);
./smartcommon/loadbalance/vserver.c:1023:		list_for_each_entry(pool, &queue, list) {
./smartcommon/loadbalance/vserver.c:1024:			if(strcmp(value, pool->name) !=0) {
./smartcommon/loadbalance/vserver.c-1025-				continue;	
./smartcommon/loadbalance/vserver.c-1026-			}
./smartcommon/loadbalance/vserver.c:1027:			if(strcmp(vserver->pool, pool->name) == 0) {
./smartcommon/loadbalance/vserver.c-1028-				return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1029-			}
./smartcommon/loadbalance/vserver.c:1030:			if(strcmp(vserver->type, pool->type) != 0) {
./smartcommon/loadbalance/vserver.c-1031-				return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1032-			}
./smartcommon/loadbalance/vserver.c-1033-		}
./smartcommon/loadbalance/vserver.c-1034-		module_purge_queue(&queue, "apppool");
./smartcommon/loadbalance/vserver.c-1035-	}
./smartcommon/loadbalance/vserver.c-1036-
./smartcommon/loadbalance/vserver.c-1037-	//m_set_common(vserver, address, attr, value);
./smartcommon/loadbalance/vserver.c-1038-
./smartcommon/loadbalance/vserver.c-1039-	if (strcmp(attr, "address") == 0 && value[0] != 0) {
./smartcommon/loadbalance/vserver.c-1040-		inet_address2sockaddr(value, &vserver->address);
./smartcommon/loadbalance/vserver.c-1041-	}
./smartcommon/loadbalance/vserver.c-1042-
./smartcommon/loadbalance/vserver.c-1043-	m_set_common(vserver, sched, attr, value);
./smartcommon/loadbalance/vserver.c-1044-	m_set_common(vserver, enable, attr, value);
./smartcommon/loadbalance/vserver.c-1045-	m_set_common(vserver, protocol, attr, value);
./smartcommon/loadbalance/vserver.c-1046-	m_set_common(vserver, transparent, attr, value);
./smartcommon/loadbalance/vserver.c-1047-	m_set_common(vserver, contentswitch, attr, value);
./smartcommon/loadbalance/vserver.c:1048:	m_set_common(vserver, pool, attr, value);
./smartcommon/loadbalance/vserver.c:1049:	m_set_common2(vserver, "back-pool", backpool, attr, value);
./smartcommon/loadbalance/vserver.c-1050-
./smartcommon/loadbalance/vserver.c-1051-	m_set_common(vserver, waf_enable, attr, value);
./smartcommon/loadbalance/vserver.c-1052-
./smartcommon/loadbalance/vserver.c-1053-	if (strcmp(attr, "errpage") == 0) {
./smartcommon/loadbalance/vserver.c-1054-		char buff[BUFSIZ];
./smartcommon/loadbalance/vserver.c-1055-		base64_decode((uint8_t*)buff, value, BUFSIZ);
./smartcommon/loadbalance/vserver.c-1056-		m_set_common(vserver, errpage, attr, buff);
./smartcommon/loadbalance/vserver.c-1057-	}
./smartcommon/loadbalance/vserver.c-1058-
./smartcommon/loadbalance/vserver.c-1059-	m_set_common(vserver, persistent, attr, value);
--
./smartcommon/loadbalance/vserver.c-1118-	/* used for elastic */
./smartcommon/loadbalance/vserver.c-1119-	m_set_common(vserver, vm_newconn_low, attr, value);
./smartcommon/loadbalance/vserver.c-1120-	m_set_common(vserver, vm_newconn_high, attr, value);
./smartcommon/loadbalance/vserver.c-1121-	m_set_common(vserver, vm_conn_low, attr, value);
./smartcommon/loadbalance/vserver.c-1122-	m_set_common(vserver, vm_conn_high, attr, value);
./smartcommon/loadbalance/vserver.c-1123-	m_set_common(vserver, vm_band_low, attr, value);
./smartcommon/loadbalance/vserver.c-1124-	m_set_common(vserver, vm_band_high, attr, value);
./smartcommon/loadbalance/vserver.c-1125-	m_set_common(vserver, vm_enable, attr, value);
./smartcommon/loadbalance/vserver.c-1126-
./smartcommon/loadbalance/vserver.c-1127-	if (strcmp(vserver->contentswitch, "on") == 0) {
./smartcommon/loadbalance/vserver.c:1128:		vserver->pool[0] = 0;
./smartcommon/loadbalance/vserver.c-1129-		vserver->persistentgroup[0] = 0;
./smartcommon/loadbalance/vserver.c-1130-	}
./smartcommon/loadbalance/vserver.c-1131-
./smartcommon/loadbalance/vserver.c-1132-	if (strcmp(vserver->persistent, "cookie") != 0) {
./smartcommon/loadbalance/vserver.c-1133-		vserver->persistent_cookie[0] = 0;
./smartcommon/loadbalance/vserver.c-1134-	} 
./smartcommon/loadbalance/vserver.c-1135-
./smartcommon/loadbalance/vserver.c-1136-	if (strcmp(vserver->persistent, "header") != 0) {
./smartcommon/loadbalance/vserver.c-1137-		vserver->persistent_header[0] = 0;
./smartcommon/loadbalance/vserver.c-1138-	}
./smartcommon/loadbalance/vserver.c-1139-
./smartcommon/loadbalance/vserver.c-1140-	if (strcmp(attr, "transparent") == 0 && strcmp(value, "on") == 0) {
./smartcommon/loadbalance/vserver.c-1141-		vserver->connreuse[0] = 0;
./smartcommon/loadbalance/vserver.c-1142-	} else if (strcmp(attr, "connreuse") == 0 && strcmp(value, "on") == 0) {
./smartcommon/loadbalance/vserver.c-1143-		vserver->transparent[0] = 0;
./smartcommon/loadbalance/vserver.c:1144:	} else if (strcmp(attr, "pool") == 0) {
./smartcommon/loadbalance/vserver.c-1145-		vserver->backpool[0] = 0;
./smartcommon/loadbalance/vserver.c-1146-		/*vserver->errpage[0] = 0;*/
./smartcommon/loadbalance/vserver.c-1147-		vserver->persistentgroup[0] = 0;
./smartcommon/loadbalance/vserver.c:1148:	} else if (strcmp(attr, "back-pool") == 0) {
./smartcommon/loadbalance/vserver.c-1149-		vserver->persistentgroup[0] = 0;
./smartcommon/loadbalance/vserver.c-1150-	} else if (strcmp(attr, "protocol") == 0) {
./smartcommon/loadbalance/vserver.c-1151-		init_when_vserver_set_protocol(vserver, value);
./smartcommon/loadbalance/vserver.c-1152-	} else if (strcmp(attr, "persistent-group") == 0) {
./smartcommon/loadbalance/vserver.c-1153-		/** layer7 not contentswitch **/
./smartcommon/loadbalance/vserver.c-1154-		if (vserver->contentswitch[0] == 0 || strcmp(vserver->contentswitch, "off") == 0) {
./smartcommon/loadbalance/vserver.c-1155-			struct vserver *tmp;
./smartcommon/loadbalance/vserver.c-1156-			LIST_HEAD(vs_head);
./smartcommon/loadbalance/vserver.c-1157-			module_get_queue(&vs_head, "vserver", value);
./smartcommon/loadbalance/vserver.c-1158-			list_for_each_entry(tmp, &vs_head, list) {
--
./smartcommon/loadbalance/vserver.c-1292-		VSERVER_PRO_SET_VALUE(vserver, sched, "sched=", token);
./smartcommon/loadbalance/vserver.c-1293-
./smartcommon/loadbalance/vserver.c-1294-		if (!strncasecmp(token, "persistent=", 11)) {
./smartcommon/loadbalance/vserver.c-1295-			set_value(token, vserver->persistent);
./smartcommon/loadbalance/vserver.c-1296-			if (strcmp(vserver->persistent, "ip") == 0) {
./smartcommon/loadbalance/vserver.c-1297-				strcpy(vserver->timeout, "900");
./smartcommon/loadbalance/vserver.c-1298-			}
./smartcommon/loadbalance/vserver.c-1299-		} else if (!strncasecmp(token, "contentswitch=", 14)) {
./smartcommon/loadbalance/vserver.c-1300-			set_value(token, vserver->contentswitch);
./smartcommon/loadbalance/vserver.c-1301-			if (strcmp(vserver->contentswitch, "on") == 0) {
./smartcommon/loadbalance/vserver.c:1302:				vserver->pool[0] = 0;
./smartcommon/loadbalance/vserver.c-1303-				vserver->persistentgroup[0] = 0;
./smartcommon/loadbalance/vserver.c-1304-			}
./smartcommon/loadbalance/vserver.c-1305-			if (strcmp(vserver->contentswitch, "off") == 0) { // just delete the cswitch rule
./smartcommon/loadbalance/vserver.c-1306-				remove_cswitch_rule(vserver);
./smartcommon/loadbalance/vserver.c-1307-			}
./smartcommon/loadbalance/vserver.c:1308:		} else if (!strncasecmp(token, "pool=", 5)) {
./smartcommon/loadbalance/vserver.c-1309-
./smartcommon/loadbalance/vserver.c:1310:			set_value(token, vserver->pool);
./smartcommon/loadbalance/vserver.c-1311-			LIST_HEAD(queue);	
./smartcommon/loadbalance/vserver.c:1312:			struct apppool *pool;
./smartcommon/loadbalance/vserver.c:1313:			module_get_queue(&queue, "apppool", vserver->pool);
./smartcommon/loadbalance/vserver.c-1314-	
./smartcommon/loadbalance/vserver.c-1315-			if(list_empty(&queue)){
./smartcommon/loadbalance/vserver.c-1316-				return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1317-			}
./smartcommon/loadbalance/vserver.c-1318-			
./smartcommon/loadbalance/vserver.c:1319:			pool = list_first_entry(&queue, struct apppool, list);
./smartcommon/loadbalance/vserver.c-1320-	
./smartcommon/loadbalance/vserver.c-1321-			if(strcmp(vserver->vm_enable, "on") == 0){
./smartcommon/loadbalance/vserver.c:1322:				if(strcmp(pool->vmenable, "on") != 0){
./smartcommon/loadbalance/vserver.c-1323-					return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1324-				}
./smartcommon/loadbalance/vserver.c-1325-			}else{
./smartcommon/loadbalance/vserver.c:1326:				if(strcmp(pool->vmenable, "on") == 0){
./smartcommon/loadbalance/vserver.c-1327-					return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1328-				}
./smartcommon/loadbalance/vserver.c-1329-			}
./smartcommon/loadbalance/vserver.c-1330-			
./smartcommon/loadbalance/vserver.c:1331:			if (vserver_check_pool(vserver, vserver->pool) != 0) {
./smartcommon/loadbalance/vserver.c-1332-				return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1333-			}
./smartcommon/loadbalance/vserver.c-1334-		} else if (!strncasecmp(token, "backpool=", 9)) {
./smartcommon/loadbalance/vserver.c-1335-			char buff[128] = {0};
./smartcommon/loadbalance/vserver.c-1336-			set_value(token, buff);
./smartcommon/loadbalance/vserver.c-1337-
./smartcommon/loadbalance/vserver.c-1338-			if(buff[0] == 0) {
./smartcommon/loadbalance/vserver.c-1339-				vserver->backpool[0] = 0;
./smartcommon/loadbalance/vserver.c-1340-				token = strtok(NULL, ",");
./smartcommon/loadbalance/vserver.c-1341-				continue;
./smartcommon/loadbalance/vserver.c-1342-			}
./smartcommon/loadbalance/vserver.c-1343-			set_value(token, vserver->backpool);
./smartcommon/loadbalance/vserver.c:1344:			struct apppool *pool;
./smartcommon/loadbalance/vserver.c-1345-			LIST_HEAD(queue);
./smartcommon/loadbalance/vserver.c-1346-			module_get_queue(&queue, "apppool", NULL);
./smartcommon/loadbalance/vserver.c:1347:			list_for_each_entry(pool, &queue, list) {
./smartcommon/loadbalance/vserver.c:1348:				if(strcmp(vserver->backpool, pool->name) !=0) {
./smartcommon/loadbalance/vserver.c-1349-					continue;	
./smartcommon/loadbalance/vserver.c-1350-				}
./smartcommon/loadbalance/vserver.c:1351:				if(strcmp(vserver->pool, pool->name) == 0) {
./smartcommon/loadbalance/vserver.c-1352-					return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1353-				}
./smartcommon/loadbalance/vserver.c:1354:				if(strcmp(vserver->type, pool->type) != 0) {
./smartcommon/loadbalance/vserver.c-1355-					return -SMARTGRID_POOL_ERROR;
./smartcommon/loadbalance/vserver.c-1356-				}
./smartcommon/loadbalance/vserver.c-1357-			}
./smartcommon/loadbalance/vserver.c-1358-			module_purge_queue(&queue, "apppool");
./smartcommon/loadbalance/vserver.c-1359-		} else if (!strncasecmp(token, "persistent-netmask=", 19)) {
./smartcommon/loadbalance/vserver.c-1360-			char buf[BUFSIZ];
./smartcommon/loadbalance/vserver.c-1361-			set_value(token, buf);
./smartcommon/loadbalance/vserver.c-1362-			int netmask = atoi(buf);
./smartcommon/loadbalance/vserver.c-1363-			if (strcmp(vserver->type, "ipv4") == 0) {
./smartcommon/loadbalance/vserver.c-1364-				if (netmask < 1 || netmask > 32) {
--
./smartcommon/loadbalance/vserver.c-1526-		VSERVER_PRO_SET_VALUE(vserver, log_format, "log_format=", token);
./smartcommon/loadbalance/vserver.c-1527-		VSERVER_PRO_SET_VALUE(vserver, timeout, "timeout=", token);
./smartcommon/loadbalance/vserver.c-1528-		token = strtok(NULL, ",");
./smartcommon/loadbalance/vserver.c-1529-	}
./smartcommon/loadbalance/vserver.c-1530-
./smartcommon/loadbalance/vserver.c-1531-	return 0;
./smartcommon/loadbalance/vserver.c-1532-}
./smartcommon/loadbalance/vserver.c-1533-
./smartcommon/loadbalance/vserver.c-1534-static int vserver_apppool_type_equal(struct vserver *vserver)
./smartcommon/loadbalance/vserver.c-1535-{
./smartcommon/loadbalance/vserver.c:1536:	struct apppool *pool;
./smartcommon/loadbalance/vserver.c-1537-	LIST_HEAD(pool_head);
./smartcommon/loadbalance/vserver.c-1538-	int rc = 1;
./smartcommon/loadbalance/vserver.c-1539-
./smartcommon/loadbalance/vserver.c:1540:	if (vserver->pool[0] != 0) {
./smartcommon/loadbalance/vserver.c:1541:		module_get_queue(&pool_head, "apppool", vserver->pool);
./smartcommon/loadbalance/vserver.c-1542-		if (!list_empty(&pool_head)) {
./smartcommon/loadbalance/vserver.c:1543:			pool = list_first_entry(&pool_head, struct apppool, list);
./smartcommon/loadbalance/vserver.c:1544:			if (strcasecmp(pool->vmenable, vserver->vm_enable) != 0) {
./smartcommon/loadbalance/vserver.c-1545-				rc = 0;
./smartcommon/loadbalance/vserver.c-1546-			}
./smartcommon/loadbalance/vserver.c-1547-		}
./smartcommon/loadbalance/vserver.c-1548-		module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vserver.c-1549-	}
./smartcommon/loadbalance/vserver.c-1550-
./smartcommon/loadbalance/vserver.c-1551-	return rc;
./smartcommon/loadbalance/vserver.c-1552-}
./smartcommon/loadbalance/vserver.c-1553-
./smartcommon/loadbalance/vserver.c-1554-static int vserver_set(struct list_head *list, const char *name,
--
./smartcommon/loadbalance/vserver.c-1716-			module_purge_queue(&rule_head, "rule");
./smartcommon/loadbalance/vserver.c-1717-			return -1;
./smartcommon/loadbalance/vserver.c-1718-		}
./smartcommon/loadbalance/vserver.c-1719-
./smartcommon/loadbalance/vserver.c-1720-		if (strcmp(rule->type, RULE_TYPE_CONTENT_SWITCH) != 0) {
./smartcommon/loadbalance/vserver.c-1721-			goto out;
./smartcommon/loadbalance/vserver.c-1722-		}
./smartcommon/loadbalance/vserver.c-1723-
./smartcommon/loadbalance/vserver.c-1724-		ptr = r_stor.statements;
./smartcommon/loadbalance/vserver.c-1725-		while ((ptr = get_poolname_from_rule_raw(ptr, pool_decode, 4096)) != NULL) {
./smartcommon/loadbalance/vserver.c:1726:			/* check pool */
./smartcommon/loadbalance/vserver.c-1727-			LIST_HEAD(pool_head);
./smartcommon/loadbalance/vserver.c-1728-			module_get_queue(&pool_head, "apppool", pool_decode);
./smartcommon/loadbalance/vserver.c-1729-			if (list_empty(&pool_head)) {
./smartcommon/loadbalance/vserver.c-1730-				module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vserver.c-1731-				module_purge_queue(&rule_head, "rule");
./smartcommon/loadbalance/vserver.c-1732-				return -1;
./smartcommon/loadbalance/vserver.c-1733-			}
./smartcommon/loadbalance/vserver.c-1734-
./smartcommon/loadbalance/vserver.c-1735-			module_purge_queue(&pool_head, "apppool");
./smartcommon/loadbalance/vserver.c-1736-		}
--
./smartcommon/loadbalance/vserver.c-1998-	struct list_head *list;
./smartcommon/loadbalance/vserver.c-1999-	struct rule_name *rule_name;
./smartcommon/loadbalance/vserver.c-2000-	struct rule *rule;
./smartcommon/loadbalance/vserver.c-2001-	struct apppool *pool1, *pos, *pool2;
./smartcommon/loadbalance/vserver.c-2002-
./smartcommon/loadbalance/vserver.c-2003-	char statements[BUFSIZ], name[1024];
./smartcommon/loadbalance/vserver.c-2004-	char *ptr;
./smartcommon/loadbalance/vserver.c-2005-	int num = 0;
./smartcommon/loadbalance/vserver.c-2006-
./smartcommon/loadbalance/vserver.c-2007-	if (strcmp(vs->contentswitch, "on") != 0) {
./smartcommon/loadbalance/vserver.c:2008:		/** TODO: use pool & backpool **/
./smartcommon/loadbalance/vserver.c:2009:		if (add_name_to_pool_list(out, vs->pool) == 0) {
./smartcommon/loadbalance/vserver.c-2010-			num ++;
./smartcommon/loadbalance/vserver.c-2011-		}
./smartcommon/loadbalance/vserver.c-2012-		if (add_name_to_pool_list(out, vs->backpool) == 0) {
./smartcommon/loadbalance/vserver.c-2013-			num ++;
./smartcommon/loadbalance/vserver.c-2014-		}
./smartcommon/loadbalance/vserver.c-2015-		return num;
./smartcommon/loadbalance/vserver.c-2016-	}
./smartcommon/loadbalance/vserver.c-2017-
./smartcommon/loadbalance/vserver.c-2018-	/** use contentswitch **/
./smartcommon/loadbalance/vserver.c-2019-	if (list_empty(&vs->rule_head)) {
--
./smartcommon/loadbalance/vserver.c-2509-	}
./smartcommon/loadbalance/vserver.c-2510-
./smartcommon/loadbalance/vserver.c-2511-	close(fd);
./smartcommon/loadbalance/vserver.c-2512-	return 0;
./smartcommon/loadbalance/vserver.c-2513-err:
./smartcommon/loadbalance/vserver.c-2514-	close(fd);
./smartcommon/loadbalance/vserver.c-2515-out:
./smartcommon/loadbalance/vserver.c-2516-	return -1;
./smartcommon/loadbalance/vserver.c-2517-}
./smartcommon/loadbalance/vserver.c-2518-
./smartcommon/loadbalance/vserver.c:2519:static int notify_vmware_daemon(struct apppool *pool, struct rserver *rs)
./smartcommon/loadbalance/vserver.c-2520-{
./smartcommon/loadbalance/vserver.c-2521-	char buff[2048] = {0}, address[512] = {0};
./smartcommon/loadbalance/vserver.c-2522-	int n;
./smartcommon/loadbalance/vserver.c-2523-
./smartcommon/loadbalance/vserver.c-2524-	inet_sockaddr2address(&rs->address, address);
./smartcommon/loadbalance/vserver.c:2525:	n = snprintf(buff, 2047, "stop %s %s", pool->name, address);
./smartcommon/loadbalance/vserver.c-2526-	tell_vmware_daemon(buff, n);
./smartcommon/loadbalance/vserver.c-2527-	return 0;
./smartcommon/loadbalance/vserver.c-2528-}
./smartcommon/loadbalance/vserver.c-2529-
./smartcommon/loadbalance/vserver.c-2530-
./smartcommon/loadbalance/vserver.c-2531-static int fix_running_state_to_apppool(struct list_head *vs_queue,
./smartcommon/loadbalance/vserver.c-2532-		struct list_head *pool_queue)
./smartcommon/loadbalance/vserver.c-2533-{
./smartcommon/loadbalance/vserver.c-2534-  struct rserver *rserver, *tmp;
./smartcommon/loadbalance/vserver.c-2535-  struct apppool *apppool;
--
./smartcommon/loadbalance/apppool.c-53-	}
./smartcommon/loadbalance/apppool.c-54-
./smartcommon/loadbalance/apppool.c-55-	return ret;
./smartcommon/loadbalance/apppool.c-56-}
./smartcommon/loadbalance/apppool.c-57-
./smartcommon/loadbalance/apppool.c-58-/* 弹性计算：设置realserver类型到apppool类型 */
./smartcommon/loadbalance/apppool.c-59-static int set_vmtype_to_apppool(const char *poolname)
./smartcommon/loadbalance/apppool.c-60-{
./smartcommon/loadbalance/apppool.c-61-	int found = 0;
./smartcommon/loadbalance/apppool.c-62-	char address[512] = {0};
./smartcommon/loadbalance/apppool.c:63:	struct apppool *pool;
./smartcommon/loadbalance/apppool.c-64-	struct rserver *rs;
./smartcommon/loadbalance/apppool.c-65-	struct vcenter *vc;
./smartcommon/loadbalance/apppool.c-66-
./smartcommon/loadbalance/apppool.c-67-	LIST_HEAD(pool_queue);
./smartcommon/loadbalance/apppool.c-68-	LIST_HEAD(vcenter_queue);
./smartcommon/loadbalance/apppool.c-69-	module_get_queue(&pool_queue, "apppool", NULL);
./smartcommon/loadbalance/apppool.c:70:	list_for_each_entry(pool, &pool_queue, list) {
./smartcommon/loadbalance/apppool.c:71:		if (strcmp(pool->name, poolname) != 0) {
./smartcommon/loadbalance/apppool.c-72-			continue;
./smartcommon/loadbalance/apppool.c-73-		}
./smartcommon/loadbalance/apppool.c:74:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartcommon/loadbalance/apppool.c-75-			if (inet_sockaddr2address(&rs->address, address) != 0) {
./smartcommon/loadbalance/apppool.c-76-				continue;
./smartcommon/loadbalance/apppool.c-77-			}
./smartcommon/loadbalance/apppool.c-78-			if ( address[0]== 0 || rs->rscenter[0] ==0 ) {
./smartcommon/loadbalance/apppool.c-79-				continue;
./smartcommon/loadbalance/apppool.c-80-			}
./smartcommon/loadbalance/apppool.c-81-			found = 1;
./smartcommon/loadbalance/apppool.c-82-			break;
./smartcommon/loadbalance/apppool.c-83-		}
./smartcommon/loadbalance/apppool.c-84-		if (found) {
./smartcommon/loadbalance/apppool.c-85-			break;
./smartcommon/loadbalance/apppool.c-86-		}
./smartcommon/loadbalance/apppool.c-87-	}
./smartcommon/loadbalance/apppool.c-88-
./smartcommon/loadbalance/apppool.c-89-	if (found) {
./smartcommon/loadbalance/apppool.c-90-		found = 0;
./smartcommon/loadbalance/apppool.c-91-		module_get_queue(&vcenter_queue, "vcenter", rs->rscenter);
./smartcommon/loadbalance/apppool.c-92-		list_for_each_entry(vc, &vcenter_queue, list) {
./smartcommon/loadbalance/apppool.c-93-			if (strcmp(vc->name, rs->rscenter) == 0) {
./smartcommon/loadbalance/apppool.c:94:				/* set pool vmtype */
./smartcommon/loadbalance/apppool.c:95:				strcpy(pool->vmtype, vc->type);
./smartcommon/loadbalance/apppool.c-96-				found = 1;
./smartcommon/loadbalance/apppool.c-97-				break;
./smartcommon/loadbalance/apppool.c-98-			}
./smartcommon/loadbalance/apppool.c-99-		}
./smartcommon/loadbalance/apppool.c-100-	}
./smartcommon/loadbalance/apppool.c-101-
./smartcommon/loadbalance/apppool.c-102-	if (found) {
./smartcommon/loadbalance/apppool.c-103-		module_save_queue(&pool_queue, "apppool");
./smartcommon/loadbalance/apppool.c-104-	}
./smartcommon/loadbalance/apppool.c-105-
--
./smartcommon/loadbalance/apppool.c-161-	if ((apppool = calloc(1, sizeof(*apppool))) == NULL) {
./smartcommon/loadbalance/apppool.c-162-		return NULL;
./smartcommon/loadbalance/apppool.c-163-	}
./smartcommon/loadbalance/apppool.c-164-	memset(apppool, 0, sizeof(*apppool));
./smartcommon/loadbalance/apppool.c-165-	strcpy(apppool->type, "ipv4");
./smartcommon/loadbalance/apppool.c-166-	strcpy(apppool->vmenable, "off");
./smartcommon/loadbalance/apppool.c-167-	INIT_LIST_HEAD(&apppool->realserver_head);
./smartcommon/loadbalance/apppool.c-168-	return &apppool->list;
./smartcommon/loadbalance/apppool.c-169-}
./smartcommon/loadbalance/apppool.c-170-
./smartcommon/loadbalance/apppool.c:171:static int apool_set_vm_enable_valid(struct apppool *pool)
./smartcommon/loadbalance/apppool.c-172-{
./smartcommon/loadbalance/apppool.c-173-	int rc = 1;
./smartcommon/loadbalance/apppool.c-174-	struct vserver *vs;
./smartcommon/loadbalance/apppool.c-175-
./smartcommon/loadbalance/apppool.c-176-	LIST_HEAD(vserver_head);
./smartcommon/loadbalance/apppool.c-177-
./smartcommon/loadbalance/apppool.c-178-#if 0
./smartcommon/loadbalance/apppool.c:179:	/* 1. check pool has rservers */
./smartcommon/loadbalance/apppool.c:180:	if (!list_empty(&pool->realserver_head)) {
./smartcommon/loadbalance/apppool.c-181-		rc = 0;
./smartcommon/loadbalance/apppool.c-182-	}
./smartcommon/loadbalance/apppool.c-183-#endif
./smartcommon/loadbalance/apppool.c-184-
./smartcommon/loadbalance/apppool.c:185:	/* 2. check vserver use this pool and vserver->vm_enable != pool->vm_enable */
./smartcommon/loadbalance/apppool.c-186-	if (rc) {
./smartcommon/loadbalance/apppool.c-187-		module_get_queue(&vserver_head, "vserver", NULL);
./smartcommon/loadbalance/apppool.c-188-		list_for_each_entry(vs, &vserver_head, list) {
./smartcommon/loadbalance/apppool.c:189:			if (strcasecmp(vs->pool, pool->name) == 0) {
./smartcommon/loadbalance/apppool.c:190:				if (strcasecmp(vs->vm_enable, pool->vmenable) != 0) {
./smartcommon/loadbalance/apppool.c-191-					rc = 0;
./smartcommon/loadbalance/apppool.c-192-					break;
./smartcommon/loadbalance/apppool.c-193-				}
./smartcommon/loadbalance/apppool.c-194-			}
./smartcommon/loadbalance/apppool.c-195-		}
./smartcommon/loadbalance/apppool.c-196-		module_purge_queue(&vserver_head, "vserver");
./smartcommon/loadbalance/apppool.c-197-	}
./smartcommon/loadbalance/apppool.c-198-
./smartcommon/loadbalance/apppool.c-199-	return rc;
./smartcommon/loadbalance/apppool.c-200-}
--
./smartcommon/loadbalance/apppool.c-653-	return 0;
./smartcommon/loadbalance/apppool.c-654-}
./smartcommon/loadbalance/apppool.c-655-
./smartcommon/loadbalance/apppool.c-656-
./smartcommon/loadbalance/apppool.c-657-static int apppool_set(struct list_head *list, const char *name,
./smartcommon/loadbalance/apppool.c-658-		const char *attr, const char *value)
./smartcommon/loadbalance/apppool.c-659-{
./smartcommon/loadbalance/apppool.c-660-	struct rserver *rs, *tmp;
./smartcommon/loadbalance/apppool.c-661-	struct apppool *apppool = list_entry(list, struct apppool, list);
./smartcommon/loadbalance/apppool.c-662-	struct rserver *rserver = NULL;
./smartcommon/loadbalance/apppool.c:663:	struct apppool *pool = NULL;
./smartcommon/loadbalance/apppool.c-664-
./smartcommon/loadbalance/apppool.c-665-	if (name[0] == 0) {
./smartcommon/loadbalance/apppool.c-666-		return -EINVAL;
./smartcommon/loadbalance/apppool.c-667-	}
./smartcommon/loadbalance/apppool.c-668-
./smartcommon/loadbalance/apppool.c-669-	if (apppool->name[0] == 0) {
./smartcommon/loadbalance/apppool.c-670-		LIST_HEAD(queue);
./smartcommon/loadbalance/apppool.c-671-
./smartcommon/loadbalance/apppool.c-672-		m_set_common(apppool, name, "name", name);
./smartcommon/loadbalance/apppool.c-673-
--
./smartcommon/loadbalance/apppool.c-708-			list_for_each_entry(rs, &apppool->realserver_head, list) {
./smartcommon/loadbalance/apppool.c-709-				memset(rs->vmxpath, 0, sizeof(rs->vmxpath));
./smartcommon/loadbalance/apppool.c-710-				memset(rs->uuid, 0, sizeof(rs->uuid));
./smartcommon/loadbalance/apppool.c-711-			}
./smartcommon/loadbalance/apppool.c-712-		}
./smartcommon/loadbalance/apppool.c-713-	}
./smartcommon/loadbalance/apppool.c-714-
./smartcommon/loadbalance/apppool.c-715-	if (!strcmp(attr, "healthcheck")) {
./smartcommon/loadbalance/apppool.c-716-		LIST_HEAD(queue);
./smartcommon/loadbalance/apppool.c-717-		module_get_queue(&queue, "apppool", name);
./smartcommon/loadbalance/apppool.c:718:		list_for_each_entry(pool, &queue, list) {
./smartcommon/loadbalance/apppool.c:719:			list_for_each_entry(rserver, &pool->realserver_head, list) {
./smartcommon/loadbalance/apppool.c-720-				char ip[STR_IP_LEN] = {'\0'};
./smartcommon/loadbalance/apppool.c-721-				char port[STR_PORT_LEN] = {'\0'};
./smartcommon/loadbalance/apppool.c-722-				inet_sockaddr2ipport(&rserver->address, ip, port);
./smartcommon/loadbalance/apppool.c-723-				if (atoi(port) == 0) {
./smartcommon/loadbalance/apppool.c-724-					if (strcmp(value, "ping") != 0 
./smartcommon/loadbalance/apppool.c-725-							&& strcmp(value, "pinggw") != 0)
./smartcommon/loadbalance/apppool.c-726-						return -EINVAL;
./smartcommon/loadbalance/apppool.c-727-				}
./smartcommon/loadbalance/apppool.c-728-			}
./smartcommon/loadbalance/apppool.c-729-		}
--
./smartcommon/loadbalance/apppool.c-848-	}
./smartcommon/loadbalance/apppool.c-849-	return NULL;
./smartcommon/loadbalance/apppool.c-850-}
./smartcommon/loadbalance/apppool.c-851-
./smartcommon/loadbalance/apppool.c-852-
./smartcommon/loadbalance/apppool.c-853-/**
./smartcommon/loadbalance/apppool.c-854- * 返回值:
./smartcommon/loadbalance/apppool.c-855- *	1:	busy
./smartcommon/loadbalance/apppool.c-856- *	0:	non-busy
./smartcommon/loadbalance/apppool.c-857- **/
./smartcommon/loadbalance/apppool.c:858:static int apppool_is_busy(struct apppool *pool)
./smartcommon/loadbalance/apppool.c-859-{
./smartcommon/loadbalance/apppool.c-860-	int ret = 1;
./smartcommon/loadbalance/apppool.c-861-	LIST_HEAD(queue);
./smartcommon/loadbalance/apppool.c-862-	struct vserver *vserver;
./smartcommon/loadbalance/apppool.c-863-	struct rule_name *rule_name;
./smartcommon/loadbalance/apppool.c-864-	struct rule *rule;
./smartcommon/loadbalance/apppool.c-865-	char *ptr, *end;
./smartcommon/loadbalance/apppool.c-866-	char buff[4096], poolname[4096], pool_encode[4096];
./smartcommon/loadbalance/apppool.c-867-
./smartcommon/loadbalance/apppool.c-868-	/** 删除时检查是否被使用 **/
--
./smartcommon/loadbalance/apppool.c-879-				module_get_queue(&head, "rule", rule_name->name);
./smartcommon/loadbalance/apppool.c-880-				rule = list_first_entry(&head, struct rule, list);
./smartcommon/loadbalance/apppool.c-881-
./smartcommon/loadbalance/apppool.c-882-				base64_decode((uint8_t *)buff, rule->statements, 4095);
./smartcommon/loadbalance/apppool.c-883-
./smartcommon/loadbalance/apppool.c-884-				if ((ptr = strstr(buff, "http.request.reroute")) != NULL) {
./smartcommon/loadbalance/apppool.c-885-					if (((ptr = strchr(ptr, '"')) != NULL) && ((end = strchr(ptr+1, '"')) != NULL)
./smartcommon/loadbalance/apppool.c-886-							&& (end-ptr>1)) { 
./smartcommon/loadbalance/apppool.c-887-						strncpy(poolname , ptr+1, end-ptr-2);
./smartcommon/loadbalance/apppool.c-888-						poolname[end-ptr-2] = '\0';
./smartcommon/loadbalance/apppool.c:889:						if (!strcmp(poolname, pool->name)) {
./smartcommon/loadbalance/apppool.c-890-							module_purge_queue(&head, "rule");
./smartcommon/loadbalance/apppool.c-891-							goto end;
./smartcommon/loadbalance/apppool.c-892-						}
./smartcommon/loadbalance/apppool.c-893-					}
./smartcommon/loadbalance/apppool.c-894-				}
./smartcommon/loadbalance/apppool.c-895-				module_purge_queue(&head, "rule");
./smartcommon/loadbalance/apppool.c-896-			}
./smartcommon/loadbalance/apppool.c:897:		} else if (strcmp(vserver->pool, pool->name) == 0 ||
./smartcommon/loadbalance/apppool.c:898:				strcmp(vserver->backpool, pool->name) == 0) {
./smartcommon/loadbalance/apppool.c-899-			goto end;
./smartcommon/loadbalance/apppool.c-900-		}
./smartcommon/loadbalance/apppool.c-901-	}
./smartcommon/loadbalance/apppool.c-902-	ret = 0;
./smartcommon/loadbalance/apppool.c-903-end:
./smartcommon/loadbalance/apppool.c-904-	module_purge_queue(&queue, "vserver");
./smartcommon/loadbalance/apppool.c-905-	return ret;
./smartcommon/loadbalance/apppool.c-906-}
./smartcommon/loadbalance/apppool.c-907-
./smartcommon/loadbalance/apppool.c-908-static int apppool_execute(struct list_head *list,
--
./smartcommon/gslb/gslb_pool.c-381-
./smartcommon/gslb/gslb_pool.c-382-	list_for_each_entry(gslb_pool, head, list) {
./smartcommon/gslb/gslb_pool.c-383-		if (gslb_pool_compare(&gslb_pool->list, name) == 0)
./smartcommon/gslb/gslb_pool.c-384-			return gslb_pool;
./smartcommon/gslb/gslb_pool.c-385-	}
./smartcommon/gslb/gslb_pool.c-386-
./smartcommon/gslb/gslb_pool.c-387-	return NULL;
./smartcommon/gslb/gslb_pool.c-388-}
./smartcommon/gslb/gslb_pool.c-389-static int gslb_pool_execute(struct list_head *list, struct list_head *useless, int op)
./smartcommon/gslb/gslb_pool.c-390-{
./smartcommon/gslb/gslb_pool.c:391:	struct gslb_pool *pool;
./smartcommon/gslb/gslb_pool.c:392:	pool = list_entry(list, struct gslb_pool, list);
./smartcommon/gslb/gslb_pool.c-393-
./smartcommon/gslb/gslb_pool.c-394-	if(op == MODULE_OP_DEL) {
./smartcommon/gslb/gslb_pool.c:395:		if(Is_pool_busy(pool->name) == 1) {
./smartcommon/gslb/gslb_pool.c-396-			return -EBUSY;
./smartcommon/gslb/gslb_pool.c-397-		}
./smartcommon/gslb/gslb_pool.c-398-	}
./smartcommon/gslb/gslb_pool.c-399-	return 0;
./smartcommon/gslb/gslb_pool.c-400-}
./smartcommon/gslb/gslb_pool.c-401-
./smartcommon/gslb/gslb_pool.c-402-
./smartcommon/gslb/gslb_pool.c-403-static int gslb_pool_set(struct list_head *list, const char *name, 
./smartcommon/gslb/gslb_pool.c-404-		const char *attr, const char *value)
./smartcommon/gslb/gslb_pool.c-405-{
--
./smartshell/walk4rs/walk4rs.c-33-	char ip[INET6_ADDRSTRLEN];
./smartshell/walk4rs/walk4rs.c-34-	int pfd[2];
./smartshell/walk4rs/walk4rs.c-35-	char weight[4];
./smartshell/walk4rs/walk4rs.c-36-};
./smartshell/walk4rs/walk4rs.c-37-
./smartshell/walk4rs/walk4rs.c-38-static int check_pool_uniq(struct vserver *vserver, struct list_head *head)
./smartshell/walk4rs/walk4rs.c-39-{
./smartshell/walk4rs/walk4rs.c-40-	struct appnode *tmpnode;
./smartshell/walk4rs/walk4rs.c-41-	list_for_each_entry(tmpnode, head, list) {
./smartshell/walk4rs/walk4rs.c-42-		/* repaet not add */
./smartshell/walk4rs/walk4rs.c:43:		if (memcmp(vserver->pool, tmpnode->appname, strlen(tmpnode->appname) + 1) == 0) {
./smartshell/walk4rs/walk4rs.c-44-			/* failrue return -1, call function coutinue current */
./smartshell/walk4rs/walk4rs.c-45-			return -1;
./smartshell/walk4rs/walk4rs.c-46-		}
./smartshell/walk4rs/walk4rs.c-47-	}
./smartshell/walk4rs/walk4rs.c-48-	/* success return 0, call function go on */
./smartshell/walk4rs/walk4rs.c-49-	return 0;
./smartshell/walk4rs/walk4rs.c-50-}
./smartshell/walk4rs/walk4rs.c-51-
./smartshell/walk4rs/walk4rs.c-52-static int check_rserver_uniq(char *ip, struct list_head *head)
./smartshell/walk4rs/walk4rs.c-53-{
--
./smartshell/walk4rs/walk4rs.c-58-			/* failrue return -1, call function coutinue current */
./smartshell/walk4rs/walk4rs.c-59-			return -1;
./smartshell/walk4rs/walk4rs.c-60-		}
./smartshell/walk4rs/walk4rs.c-61-	}
./smartshell/walk4rs/walk4rs.c-62-	/* success return 0, call function go on */
./smartshell/walk4rs/walk4rs.c-63-	return 0;
./smartshell/walk4rs/walk4rs.c-64-}
./smartshell/walk4rs/walk4rs.c-65-
./smartshell/walk4rs/walk4rs.c-66-/**
./smartshell/walk4rs/walk4rs.c-67- * copy name of apppool into appnode, and appnode add list
./smartshell/walk4rs/walk4rs.c:68: * vserver.pool-->appnode(init)-->list(head.list)
./smartshell/walk4rs/walk4rs.c-69- **/
./smartshell/walk4rs/walk4rs.c-70-static struct appnode*
./smartshell/walk4rs/walk4rs.c-71-apppoll_appnode_list(struct vserver *vserver, struct list_head *head)
./smartshell/walk4rs/walk4rs.c-72-{
./smartshell/walk4rs/walk4rs.c-73-	struct appnode *appnode;
./smartshell/walk4rs/walk4rs.c-74-	appnode = malloc(sizeof(*appnode));
./smartshell/walk4rs/walk4rs.c-75-	if (NULL == appnode) {
./smartshell/walk4rs/walk4rs.c-76-		syslog(LOG_INFO, "malloc failure %s: %s, %s %d\n",
./smartshell/walk4rs/walk4rs.c-77-				strerror(errno), __FILE__, __func__, __LINE__);
./smartshell/walk4rs/walk4rs.c-78-		goto err;
./smartshell/walk4rs/walk4rs.c-79-	}
./smartshell/walk4rs/walk4rs.c-80-
./smartshell/walk4rs/walk4rs.c:81:	memcpy(appnode->appname, vserver->pool, strlen(vserver->pool) + 1);
./smartshell/walk4rs/walk4rs.c-82-	INIT_LIST_HEAD(&appnode->list);
./smartshell/walk4rs/walk4rs.c-83-	INIT_LIST_HEAD(&appnode->child_list);
./smartshell/walk4rs/walk4rs.c-84-
./smartshell/walk4rs/walk4rs.c-85-	list_add(&appnode->list, head);
./smartshell/walk4rs/walk4rs.c-86-err:
./smartshell/walk4rs/walk4rs.c-87-	return appnode;
./smartshell/walk4rs/walk4rs.c-88-
./smartshell/walk4rs/walk4rs.c-89-}
./smartshell/walk4rs/walk4rs.c-90-
./smartshell/walk4rs/walk4rs.c-91-/**
--
./smartshell/walk4rs/walk4rs.c-161-		goto err;
./smartshell/walk4rs/walk4rs.c-162-	}
./smartshell/walk4rs/walk4rs.c-163-
./smartshell/walk4rs/walk4rs.c-164-	LIST_HEAD(pool_queue);
./smartshell/walk4rs/walk4rs.c-165-	LIST_HEAD(queue);
./smartshell/walk4rs/walk4rs.c-166-
./smartshell/walk4rs/walk4rs.c-167-	module_get_queue(&queue, "vserver", NULL);
./smartshell/walk4rs/walk4rs.c-168-
./smartshell/walk4rs/walk4rs.c-169-	list_for_each_entry(vserver, &queue, list) {
./smartshell/walk4rs/walk4rs.c-170-
./smartshell/walk4rs/walk4rs.c:171:		if (strlen(vserver->pool) == 0
./smartshell/walk4rs/walk4rs.c-172-#define NDEBUG	1
./smartshell/walk4rs/walk4rs.c-173-#if NDEBUG
./smartshell/walk4rs/walk4rs.c-174-			|| memcmp(vserver->alive_state, "up", sizeof("up")) != 0
./smartshell/walk4rs/walk4rs.c-175-#endif
./smartshell/walk4rs/walk4rs.c-176-			|| memcmp(vserver->sched, "snmp", sizeof("snmp")) != 0) {
./smartshell/walk4rs/walk4rs.c-177-			continue;
./smartshell/walk4rs/walk4rs.c-178-		}
./smartshell/walk4rs/walk4rs.c-179-
./smartshell/walk4rs/walk4rs.c:180:		/** jump repeat pool of vserver **/
./smartshell/walk4rs/walk4rs.c-181-		if (check_pool_uniq(vserver, head) < 0)
./smartshell/walk4rs/walk4rs.c-182-			continue;
./smartshell/walk4rs/walk4rs.c-183-
./smartshell/walk4rs/walk4rs.c:184:		/** vserver.pool-->appnode(init)-->list(head.list) **/
./smartshell/walk4rs/walk4rs.c-185-		if ((appnode = apppoll_appnode_list(vserver, head)) == NULL)
./smartshell/walk4rs/walk4rs.c-186-			goto err;
./smartshell/walk4rs/walk4rs.c-187-
./smartshell/walk4rs/walk4rs.c-188-		/** get apppool used snmp **/
./smartshell/walk4rs/walk4rs.c:189:		module_get_queue(&pool_queue, "apppool", vserver->pool);
./smartshell/walk4rs/walk4rs.c-190-		apppool = list_entry(pool_queue.next, struct apppool, list);
./smartshell/walk4rs/walk4rs.c-191-
./smartshell/walk4rs/walk4rs.c-192-		/** check apppool rserver empty **/
./smartshell/walk4rs/walk4rs.c-193-		if (list_empty(&apppool->realserver_head)) {
./smartshell/walk4rs/walk4rs.c-194-			continue;
./smartshell/walk4rs/walk4rs.c-195-		}
./smartshell/walk4rs/walk4rs.c-196-		/** get each address(ip:port) of apppool **/
./smartshell/walk4rs/walk4rs.c-197-		list_for_each_entry(rserver, &apppool->realserver_head, list) {
./smartshell/walk4rs/walk4rs.c-198-
./smartshell/walk4rs/walk4rs.c-199-			/** util close snmp enable **/
--
./smartshell/walk4rs/walk4rs.c-297-	return 0;
./smartshell/walk4rs/walk4rs.c-298-err:
./smartshell/walk4rs/walk4rs.c-299-	return -1;
./smartshell/walk4rs/walk4rs.c-300-}
./smartshell/walk4rs/walk4rs.c-301-
./smartshell/walk4rs/walk4rs.c-302-/**
./smartshell/walk4rs/walk4rs.c-303- * 对realserver进行修改操作
./smartshell/walk4rs/walk4rs.c-304- **/
./smartshell/walk4rs/walk4rs.c-305-static int do_realserver_config_modify(char *poolname, struct rserver *rserver)
./smartshell/walk4rs/walk4rs.c-306-{
./smartshell/walk4rs/walk4rs.c:307:	struct apppool *pool;
./smartshell/walk4rs/walk4rs.c-308-	FILE *fp;
./smartshell/walk4rs/walk4rs.c-309-	char buff[BUFSIZ];
./smartshell/walk4rs/walk4rs.c-310-
./smartshell/walk4rs/walk4rs.c-311-	char address[BUFSIZ];
./smartshell/walk4rs/walk4rs.c-312-	inet_sockaddr2address(&rserver->address, address);
./smartshell/walk4rs/walk4rs.c:313:	sprintf(buff, "script4 system pool %s add realserver %s", poolname, address);
./smartshell/walk4rs/walk4rs.c-314-
./smartshell/walk4rs/walk4rs.c-315-#define RSERVER_SET_VALUE(x, value)					\
./smartshell/walk4rs/walk4rs.c-316-	do {								\
./smartshell/walk4rs/walk4rs.c-317-		if (value[0] != 0) {					\
./smartshell/walk4rs/walk4rs.c-318-			sprintf(buff, "%s,%s=%s", buff, x, value);	\
./smartshell/walk4rs/walk4rs.c-319-		}							\
./smartshell/walk4rs/walk4rs.c-320-	} while (0)
./smartshell/walk4rs/walk4rs.c-321-
./smartshell/walk4rs/walk4rs.c-322-	RSERVER_SET_VALUE("weight", rserver->weight);
./smartshell/walk4rs/walk4rs.c-323-	RSERVER_SET_VALUE("maxconn", rserver->maxconn);
--
./smartshell/walk4rs/walk4rs.c-354-	RSERVER_SET_VALUE("trap_v3_privacy_protocol", rserver->trap_v3_privacy_protocol);
./smartshell/walk4rs/walk4rs.c-355-	/* privacy password */
./smartshell/walk4rs/walk4rs.c-356-	RSERVER_SET_VALUE("trap_v3_privacy_password", rserver->trap_v3_privacy_password);
./smartshell/walk4rs/walk4rs.c-357-	/* authencation usm_name */
./smartshell/walk4rs/walk4rs.c-358-	RSERVER_SET_VALUE("username", rserver->username);
./smartshell/walk4rs/walk4rs.c-359-	/* authencation password */
./smartshell/walk4rs/walk4rs.c-360-	RSERVER_SET_VALUE("password", rserver->password);
./smartshell/walk4rs/walk4rs.c-361-	RSERVER_SET_VALUE("cpu", rserver->cpu);
./smartshell/walk4rs/walk4rs.c-362-	RSERVER_SET_VALUE("memory", rserver->memory);
./smartshell/walk4rs/walk4rs.c-363-
./smartshell/walk4rs/walk4rs.c:364:	/* get pool */
./smartshell/walk4rs/walk4rs.c-365-	LIST_HEAD(pool_head);
./smartshell/walk4rs/walk4rs.c-366-	module_get_queue(&pool_head, "apppool", poolname);
./smartshell/walk4rs/walk4rs.c-367-	if (list_empty(&pool_head)) {
./smartshell/walk4rs/walk4rs.c-368-		return -1;
./smartshell/walk4rs/walk4rs.c-369-	}
./smartshell/walk4rs/walk4rs.c:370:	pool = list_first_entry(&pool_head, struct apppool, list);
./smartshell/walk4rs/walk4rs.c:371:	if( strcmp(pool->vmtype, "vmware")==0 && strlen(rserver->vmxpath)) {
./smartshell/walk4rs/walk4rs.c-372-		char tmp[1024];
./smartshell/walk4rs/walk4rs.c-373-		memset(tmp, 0, 1024);
./smartshell/walk4rs/walk4rs.c-374-		base64_encode(tmp, 1023, (uint8_t *)rserver->vmxpath,
./smartshell/walk4rs/walk4rs.c-375-							strlen(rserver->vmxpath));
./smartshell/walk4rs/walk4rs.c-376-		RSERVER_SET_VALUE("vmxpath", tmp);
./smartshell/walk4rs/walk4rs.c:377:	} else if(strcmp(pool->vmtype, "xenserver")==0 && strlen(rserver->uuid)) {
./smartshell/walk4rs/walk4rs.c-378-		char tmp[1024];
./smartshell/walk4rs/walk4rs.c-379-		memset(tmp, 0, 1024);
./smartshell/walk4rs/walk4rs.c-380-		base64_encode(tmp, 1023, (uint8_t *)rserver->uuid, 
./smartshell/walk4rs/walk4rs.c-381-					strlen(rserver->uuid));
./smartshell/walk4rs/walk4rs.c-382-		RSERVER_SET_VALUE("uuid", tmp);
./smartshell/walk4rs/walk4rs.c-383-	}
./smartshell/walk4rs/walk4rs.c-384-
./smartshell/walk4rs/walk4rs.c-385-	if (rserver->rscenter[0] != 0) {
./smartshell/walk4rs/walk4rs.c-386-		RSERVER_SET_VALUE("rscenter", rserver->rscenter);
./smartshell/walk4rs/walk4rs.c-387-	}
--
./smartshell/vmware_daemon/vmware_daemon.c-51-static LIST_HEAD(pool_queue);
./smartshell/vmware_daemon/vmware_daemon.c-52-static LIST_HEAD(rule_queue);
./smartshell/vmware_daemon/vmware_daemon.c-53-
./smartshell/vmware_daemon/vmware_daemon.c-54-static struct vs_stat *vs_stat_search(char *name);
./smartshell/vmware_daemon/vmware_daemon.c-55-static void pool_stat_clear(struct vs_stat *stat);
./smartshell/vmware_daemon/vmware_daemon.c-56-static void __pool_stat_remove(struct pool_stat *stat);
./smartshell/vmware_daemon/vmware_daemon.c-57-static void __vs_stat_remove(struct vs_stat *vs_stat);
./smartshell/vmware_daemon/vmware_daemon.c-58-static void sync_vs_stat(struct list_head *vs_queue, struct list_head *pool_queue);
./smartshell/vmware_daemon/vmware_daemon.c-59-static void sync_pool_stat(struct vs_stat *stat, struct vserver *vs,
./smartshell/vmware_daemon/vmware_daemon.c-60-		struct list_head *pool_queue);
./smartshell/vmware_daemon/vmware_daemon.c:61://static int vm_stop(struct pool_stat *stat, struct apppool *pool, struct rserver *rs);
./smartshell/vmware_daemon/vmware_daemon.c-62-static void * vm_stop(void *data);
./smartshell/vmware_daemon/vmware_daemon.c:63:static int apppool_all_down_check(struct apppool *pool);
./smartshell/vmware_daemon/vmware_daemon.c-64-//static int apppool_stat_switch_check(struct pool_stat *stat);
./smartshell/vmware_daemon/vmware_daemon.c-65-static void * start_vm(void *vdata /* vm_start_data_t */);
./smartshell/vmware_daemon/vmware_daemon.c-66-//static void * start_vm_for_master_pool(void *vdata /* vm_start_data_t */);
./smartshell/vmware_daemon/vmware_daemon.c:67:static int stop_realserver(struct pool_stat *stat, struct apppool *pool, struct vserver *vs);
./smartshell/vmware_daemon/vmware_daemon.c-68-static unsigned short elastic_value_valid_check( unsigned long vm_conn_low, unsigned long vm_conn_high, 
./smartshell/vmware_daemon/vmware_daemon.c-69-		unsigned long vm_newconn_low, unsigned long vm_newconn_high, unsigned long vm_band_low, unsigned long vm_band_high);
./smartshell/vmware_daemon/vmware_daemon.c-70-static int notify_daemon4(char *poolname, struct rserver *rs, int action);
./smartshell/vmware_daemon/vmware_daemon.c-71-
./smartshell/vmware_daemon/vmware_daemon.c-72-
./smartshell/vmware_daemon/vmware_daemon.c-73-static void vs_stat_print()
./smartshell/vmware_daemon/vmware_daemon.c-74-{
./smartshell/vmware_daemon/vmware_daemon.c-75-	DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-76-	struct vs_stat *vs_stat;
./smartshell/vmware_daemon/vmware_daemon.c-77-	struct pool_stat *pool_stat;
--
./smartshell/vmware_daemon/vmware_daemon.c-112-			__vs_stat_remove(vs_stat);
./smartshell/vmware_daemon/vmware_daemon.c-113-		}
./smartshell/vmware_daemon/vmware_daemon.c-114-	}
./smartshell/vmware_daemon/vmware_daemon.c-115-
./smartshell/vmware_daemon/vmware_daemon.c-116-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-117-}
./smartshell/vmware_daemon/vmware_daemon.c-118-
./smartshell/vmware_daemon/vmware_daemon.c-119-#if 0
./smartshell/vmware_daemon/vmware_daemon.c-120-int get_balance_rserver(
./smartshell/vmware_daemon/vmware_daemon.c-121-		struct pool_stat *stat, 
./smartshell/vmware_daemon/vmware_daemon.c:122:		struct apppool *pool , 
./smartshell/vmware_daemon/vmware_daemon.c-123-		struct vmx_stat *vmx_out, 
./smartshell/vmware_daemon/vmware_daemon.c-124-		struct rserver *rs_out, 
./smartshell/vmware_daemon/vmware_daemon.c-125-		int mode)
./smartshell/vmware_daemon/vmware_daemon.c-126-{
./smartshell/vmware_daemon/vmware_daemon.c-127-	struct vmx_stat *vmx;
./smartshell/vmware_daemon/vmware_daemon.c-128-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c-129-
./smartshell/vmware_daemon/vmware_daemon.c-130-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-131-		if (vmx_stat->mode != mode) {
./smartshell/vmware_daemon/vmware_daemon.c-132-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-133-		}
./smartshell/vmware_daemon/vmware_daemon.c-134-
./smartshell/vmware_daemon/vmware_daemon.c:135:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-136-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-137-			if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/vmware_daemon.c-138-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-139-			}
./smartshell/vmware_daemon/vmware_daemon.c-140-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-141-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-142-			}
./smartshell/vmware_daemon/vmware_daemon.c-143-			if (strcmp(address, vmx_stat->address) != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-144-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-145-			}
--
./smartshell/vmware_daemon/vmware_daemon.c-165-
./smartshell/vmware_daemon/vmware_daemon.c-166-static int apppool_suspend(struct list_head *pool_queue, struct vs_stat *vs_stat, struct vserver *vs) 
./smartshell/vmware_daemon/vmware_daemon.c-167-{
./smartshell/vmware_daemon/vmware_daemon.c-168-	DP ("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-169-
./smartshell/vmware_daemon/vmware_daemon.c-170-	int alive = 0, found = 0;
./smartshell/vmware_daemon/vmware_daemon.c-171-	char address[BUFSIZ];
./smartshell/vmware_daemon/vmware_daemon.c-172-	struct pool_stat *stat;
./smartshell/vmware_daemon/vmware_daemon.c-173-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vmware_daemon.c-174-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c:175:	struct apppool *pool;
./smartshell/vmware_daemon/vmware_daemon.c-176-
./smartshell/vmware_daemon/vmware_daemon.c:177:	if ((pool = apppool_search(pool_queue, vs->backpool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:178:		DP("func:%s line:%d search pool fail!\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-179-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-180-	}
./smartshell/vmware_daemon/vmware_daemon.c-181-
./smartshell/vmware_daemon/vmware_daemon.c-182-	if (!(stat = pool_stat_search(vs_stat, vs->backpool))) {
./smartshell/vmware_daemon/vmware_daemon.c-183-		DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-184-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-185-	}
./smartshell/vmware_daemon/vmware_daemon.c-186-
./smartshell/vmware_daemon/vmware_daemon.c-187-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-188-		if (vmx_stat->mode == MODE_UP) {
--
./smartshell/vmware_daemon/vmware_daemon.c-195-		DP("func:%s line:%d alive=%d return\n", __func__, __LINE__, alive);
./smartshell/vmware_daemon/vmware_daemon.c-196-		return 0;
./smartshell/vmware_daemon/vmware_daemon.c-197-	}
./smartshell/vmware_daemon/vmware_daemon.c-198-
./smartshell/vmware_daemon/vmware_daemon.c-199-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-200-		found = 0;
./smartshell/vmware_daemon/vmware_daemon.c-201-		if (vmx_stat->mode != MODE_UP) {
./smartshell/vmware_daemon/vmware_daemon.c-202-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-203-		}
./smartshell/vmware_daemon/vmware_daemon.c-204-
./smartshell/vmware_daemon/vmware_daemon.c:205:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-206-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-207-			if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/vmware_daemon.c-208-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-209-			}
./smartshell/vmware_daemon/vmware_daemon.c-210-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-211-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-212-			}
./smartshell/vmware_daemon/vmware_daemon.c-213-			if (strcmp(address, vmx_stat->address) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-214-				found = 1;
./smartshell/vmware_daemon/vmware_daemon.c-215-				break;
--
./smartshell/vmware_daemon/vmware_daemon.c-364-	}
./smartshell/vmware_daemon/vmware_daemon.c-365-}
./smartshell/vmware_daemon/vmware_daemon.c-366-
./smartshell/vmware_daemon/vmware_daemon.c-367-static void sync_pool_stat(struct vs_stat *vs_stat, struct vserver *vs,
./smartshell/vmware_daemon/vmware_daemon.c-368-		struct list_head *pool_queue)
./smartshell/vmware_daemon/vmware_daemon.c-369-{
./smartshell/vmware_daemon/vmware_daemon.c-370-	DP("===func:%s line:%d",__func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-371-	struct pool_stat *stat, *tmp;
./smartshell/vmware_daemon/vmware_daemon.c-372-	struct apppool_desc *pool_desc;
./smartshell/vmware_daemon/vmware_daemon.c-373-	struct list_head *list;
./smartshell/vmware_daemon/vmware_daemon.c:374:	struct apppool *pool;
./smartshell/vmware_daemon/vmware_daemon.c-375-	int got = 0;
./smartshell/vmware_daemon/vmware_daemon.c-376-
./smartshell/vmware_daemon/vmware_daemon.c-377-	list_for_each_entry_safe(stat, tmp, &vs_stat->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-378-		got = 0;
./smartshell/vmware_daemon/vmware_daemon.c-379-		list_for_each_entry(pool_desc, &vs->apppool_desc_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-380-			if (!strcmp(pool_desc->name, stat->name)) {
./smartshell/vmware_daemon/vmware_daemon.c-381-				list = module_queue_search("apppool",
./smartshell/vmware_daemon/vmware_daemon.c-382-						pool_queue, pool_desc->name);
./smartshell/vmware_daemon/vmware_daemon.c-383-				if (list) {
./smartshell/vmware_daemon/vmware_daemon.c:384:					pool = list_entry(list, struct apppool, list);
./smartshell/vmware_daemon/vmware_daemon.c:385:					if (!strcmp(pool->vmenable, "on")) {
./smartshell/vmware_daemon/vmware_daemon.c-386-						got = 1;
./smartshell/vmware_daemon/vmware_daemon.c-387-						break;
./smartshell/vmware_daemon/vmware_daemon.c-388-					}
./smartshell/vmware_daemon/vmware_daemon.c-389-				}
./smartshell/vmware_daemon/vmware_daemon.c-390-			}
./smartshell/vmware_daemon/vmware_daemon.c-391-		}
./smartshell/vmware_daemon/vmware_daemon.c-392-		if (!got) {
./smartshell/vmware_daemon/vmware_daemon.c-393-			list_del(&stat->list);
./smartshell/vmware_daemon/vmware_daemon.c-394-			__pool_stat_remove(stat);
./smartshell/vmware_daemon/vmware_daemon.c-395-		}
--
./smartshell/vmware_daemon/vmware_daemon.c-422-			return stat;
./smartshell/vmware_daemon/vmware_daemon.c-423-	}
./smartshell/vmware_daemon/vmware_daemon.c-424-	return NULL;
./smartshell/vmware_daemon/vmware_daemon.c-425-}
./smartshell/vmware_daemon/vmware_daemon.c-426-
./smartshell/vmware_daemon/vmware_daemon.c-427-static void __vs_stat_remove(struct vs_stat *vs_stat) {
./smartshell/vmware_daemon/vmware_daemon.c-428-	pool_stat_clear(vs_stat);
./smartshell/vmware_daemon/vmware_daemon.c-429-	free(vs_stat);
./smartshell/vmware_daemon/vmware_daemon.c-430-}
./smartshell/vmware_daemon/vmware_daemon.c-431-
./smartshell/vmware_daemon/vmware_daemon.c:432:static struct pool_stat *pool_stat_add(struct vs_stat *vs_stat , struct apppool *pool)
./smartshell/vmware_daemon/vmware_daemon.c-433-{
./smartshell/vmware_daemon/vmware_daemon.c-434-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-435-
./smartshell/vmware_daemon/vmware_daemon.c-436-	stat = calloc(sizeof(struct pool_stat), 1);
./smartshell/vmware_daemon/vmware_daemon.c-437-	if (!stat)
./smartshell/vmware_daemon/vmware_daemon.c-438-		goto end;
./smartshell/vmware_daemon/vmware_daemon.c-439-
./smartshell/vmware_daemon/vmware_daemon.c-440-	INIT_LIST_HEAD(&stat->list);
./smartshell/vmware_daemon/vmware_daemon.c-441-	INIT_LIST_HEAD(&stat->vmx_head);
./smartshell/vmware_daemon/vmware_daemon.c-442-	memset(stat->name, 0, 64);
./smartshell/vmware_daemon/vmware_daemon.c:443:	strcpy(stat->name, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c:444:	strcpy(stat->vmtype, pool->vmtype);
./smartshell/vmware_daemon/vmware_daemon.c-445-	stat->mode = MODE_NOMORE;
./smartshell/vmware_daemon/vmware_daemon.c-446-	reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-447-	stat->sample = stat->start;
./smartshell/vmware_daemon/vmware_daemon.c-448-	pthread_mutex_init(&stat->mutex, NULL);
./smartshell/vmware_daemon/vmware_daemon.c-449-	list_add_tail(&stat->list, &vs_stat->pool_head);
./smartshell/vmware_daemon/vmware_daemon.c-450-
./smartshell/vmware_daemon/vmware_daemon.c-451-#if 0
./smartshell/vmware_daemon/vmware_daemon.c:452:	strncpy(stat->conn.vmaddress, pool->vmaddress, 
./smartshell/vmware_daemon/vmware_daemon.c-453-			sizeof(stat->conn.vmaddress) - 1);
./smartshell/vmware_daemon/vmware_daemon.c:454:	strncpy(stat->conn.vmusername, pool->vmusername, 
./smartshell/vmware_daemon/vmware_daemon.c-455-			sizeof(stat->conn.vmusername) - 1);
./smartshell/vmware_daemon/vmware_daemon.c:456:	strncpy(stat->conn.vmpassword, pool->vmpassword, 
./smartshell/vmware_daemon/vmware_daemon.c-457-			sizeof(stat->conn.vmpassword) - 1);
./smartshell/vmware_daemon/vmware_daemon.c-458-#endif
./smartshell/vmware_daemon/vmware_daemon.c-459-
./smartshell/vmware_daemon/vmware_daemon.c-460-end:
./smartshell/vmware_daemon/vmware_daemon.c-461-	return stat;
./smartshell/vmware_daemon/vmware_daemon.c-462-}
./smartshell/vmware_daemon/vmware_daemon.c-463-
./smartshell/vmware_daemon/vmware_daemon.c-464-struct pool_stat *pool_stat_search(struct vs_stat *vs_stat, char *name)
./smartshell/vmware_daemon/vmware_daemon.c-465-{
./smartshell/vmware_daemon/vmware_daemon.c-466-	struct pool_stat *stat = NULL;
--
./smartshell/vmware_daemon/vmware_daemon.c-652-		stat->mode = MODE_NOMORE;
./smartshell/vmware_daemon/vmware_daemon.c-653-		DP("func:%s line:%d set mode=MODE_NOMORE!", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-654-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-655-		stat->mode = MODE_NONE;
./smartshell/vmware_daemon/vmware_daemon.c-656-	}
./smartshell/vmware_daemon/vmware_daemon.c-657-}
./smartshell/vmware_daemon/vmware_daemon.c-658-
./smartshell/vmware_daemon/vmware_daemon.c-659-static void * vm_stat_init(void *data)
./smartshell/vmware_daemon/vmware_daemon.c-660-{
./smartshell/vmware_daemon/vmware_daemon.c-661-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c:662:	struct apppool *pool, *tmp;
./smartshell/vmware_daemon/vmware_daemon.c-663-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c-664-	vm_init_data_t *vid;
./smartshell/vmware_daemon/vmware_daemon.c-665-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-666-
./smartshell/vmware_daemon/vmware_daemon.c-667-	if ((vid = (vm_init_data_t *)data) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-668-		return (void *)-1;
./smartshell/vmware_daemon/vmware_daemon.c-669-	}
./smartshell/vmware_daemon/vmware_daemon.c-670-
./smartshell/vmware_daemon/vmware_daemon.c:671:	list_for_each_entry(pool, &vid->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c:672:		DP("func:%s line:%d pool:%s\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c:673:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-674-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-675-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-676-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-677-			}
./smartshell/vmware_daemon/vmware_daemon.c-678-			DP("func:%s line:%d rs:%s\n", __func__, __LINE__, address);
./smartshell/vmware_daemon/vmware_daemon.c-679-		}
./smartshell/vmware_daemon/vmware_daemon.c-680-	}
./smartshell/vmware_daemon/vmware_daemon.c-681-
./smartshell/vmware_daemon/vmware_daemon.c:682:	pool = list_first_entry(&vid->pool_head, struct apppool, list);
./smartshell/vmware_daemon/vmware_daemon.c:683:	DP("func:%s line:%d pool:%s vs:%s\n", __func__, __LINE__, pool->name, vid->vs_stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-684-
./smartshell/vmware_daemon/vmware_daemon.c:685:	if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-686-#if 0
./smartshell/vmware_daemon/vmware_daemon.c:687:		ret = vmware_stat_init(vs_stat, pool);
./smartshell/vmware_daemon/vmware_daemon.c-688-#endif
./smartshell/vmware_daemon/vmware_daemon.c:689:	} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-690-		ret = xenserver_stat_init(vid->vs_stat, &vid->pool_head, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c:691:	} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-692-		ret = vcenter_stat_init(vid->vs_stat, &vid->pool_head, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c-693-	}
./smartshell/vmware_daemon/vmware_daemon.c-694-
./smartshell/vmware_daemon/vmware_daemon.c-695-	if (!ret) {
./smartshell/vmware_daemon/vmware_daemon.c-696-		/* 初始化成功 */
./smartshell/vmware_daemon/vmware_daemon.c-697-		vid->vs_stat->init = STAT_INITED;
./smartshell/vmware_daemon/vmware_daemon.c-698-		vid->vs_stat->init_times = 0;
./smartshell/vmware_daemon/vmware_daemon.c-699-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-700-		vid->vs_stat->init = STAT_INIT_FAIL;
./smartshell/vmware_daemon/vmware_daemon.c-701-		vid->vs_stat->init_times++;
./smartshell/vmware_daemon/vmware_daemon.c-702-	}
./smartshell/vmware_daemon/vmware_daemon.c-703-
./smartshell/vmware_daemon/vmware_daemon.c-704-	DP("初始化完成, 接锁! init:%d\n", vid->vs_stat->init);
./smartshell/vmware_daemon/vmware_daemon.c-705-	pthread_mutex_unlock(&vid->vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-706-
./smartshell/vmware_daemon/vmware_daemon.c:707:	list_for_each_entry_safe(pool, tmp, &vid->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c:708:		list_del(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c:709:		apppool_free(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c-710-	}
./smartshell/vmware_daemon/vmware_daemon.c-711-
./smartshell/vmware_daemon/vmware_daemon.c-712-#if 0
./smartshell/vmware_daemon/vmware_daemon.c-713-	if (ret) {
./smartshell/vmware_daemon/vmware_daemon.c:714:		apppool_free(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c-715-		return (void *)(-1);
./smartshell/vmware_daemon/vmware_daemon.c-716-	} else {
./smartshell/vmware_daemon/vmware_daemon.c:717:		apppool_free(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c-718-		return (void *)0;
./smartshell/vmware_daemon/vmware_daemon.c-719-	}
./smartshell/vmware_daemon/vmware_daemon.c-720-#endif
./smartshell/vmware_daemon/vmware_daemon.c-721-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-722-}
./smartshell/vmware_daemon/vmware_daemon.c-723-
./smartshell/vmware_daemon/vmware_daemon.c-724-static inline int cal_load(struct pool_stat *stat)
./smartshell/vmware_daemon/vmware_daemon.c-725-{
./smartshell/vmware_daemon/vmware_daemon.c-726-	DP("===func:%s===\n", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-727-
--
./smartshell/vmware_daemon/vmware_daemon.c-882-		vmware_update_private_data(vmx_stat, rs);
./smartshell/vmware_daemon/vmware_daemon.c-883-	} else if (strcmp(stat->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-884-		xenserver_update_private_data(vmx_stat, rs);
./smartshell/vmware_daemon/vmware_daemon.c-885-	} else if (strcmp(stat->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-886-		vcenter_update_private_data(vmx_stat, rs);
./smartshell/vmware_daemon/vmware_daemon.c-887-	}
./smartshell/vmware_daemon/vmware_daemon.c-888-
./smartshell/vmware_daemon/vmware_daemon.c-889-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-890-}
./smartshell/vmware_daemon/vmware_daemon.c-891-
./smartshell/vmware_daemon/vmware_daemon.c:892:static int vm_check_pool_stat_need_update (struct apppool *pool, struct pool_stat * stat)
./smartshell/vmware_daemon/vmware_daemon.c-893-{
./smartshell/vmware_daemon/vmware_daemon.c-894-	DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-895-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-896-
./smartshell/vmware_daemon/vmware_daemon.c:897:	if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0) {
./smartshell/vmware_daemon/vmware_daemon.c:898:		ret = vmware_check_pool_stat_need_update(pool, stat);
./smartshell/vmware_daemon/vmware_daemon.c:899:	} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c:900:		ret = xenserver_check_pool_stat_need_update(pool, stat);
./smartshell/vmware_daemon/vmware_daemon.c:901:	} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c:902:		ret = vcenter_check_pool_stat_need_update(pool, stat);
./smartshell/vmware_daemon/vmware_daemon.c-903-	}
./smartshell/vmware_daemon/vmware_daemon.c-904-
./smartshell/vmware_daemon/vmware_daemon.c-905-	DP("func:%s line:%d ret:%d\n", __func__, __LINE__, ret);
./smartshell/vmware_daemon/vmware_daemon.c-906-
./smartshell/vmware_daemon/vmware_daemon.c-907-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-908-}
./smartshell/vmware_daemon/vmware_daemon.c-909-
./smartshell/vmware_daemon/vmware_daemon.c-910-/** 1. process_request接收请求，关闭vmx_stat对应的vm, 之后将mode=MODE_DOWN
./smartshell/vmware_daemon/vmware_daemon.c-911- *  2. 删除vcenter中vmx_stat mode=MODE_DOWN 的vmx_stat, 以进行同步  */
./smartshell/vmware_daemon/vmware_daemon.c-912-	__attribute__((unused))
--
./smartshell/vmware_daemon/vmware_daemon.c-931- * 2. 更新pool中rs数据到vmx_stat
./smartshell/vmware_daemon/vmware_daemon.c-932- * 3. 删除pool中没有但pool_stat有的vmx 
./smartshell/vmware_daemon/vmware_daemon.c-933- * */
./smartshell/vmware_daemon/vmware_daemon.c-934-static int sync_pool_to_stat(struct vs_stat *vs_stat, struct list_head  *pool_queue)
./smartshell/vmware_daemon/vmware_daemon.c-935-{
./smartshell/vmware_daemon/vmware_daemon.c-936-	DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-937-	int found;
./smartshell/vmware_daemon/vmware_daemon.c-938-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-939-	struct vmx_stat *vmx_stat, *tmp;
./smartshell/vmware_daemon/vmware_daemon.c-940-	struct pool_stat *stat;
./smartshell/vmware_daemon/vmware_daemon.c:941:	struct apppool *pool;
./smartshell/vmware_daemon/vmware_daemon.c-942-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c-943-
./smartshell/vmware_daemon/vmware_daemon.c-944-	/* 更新pool中的最新数据到pool_stat  */
./smartshell/vmware_daemon/vmware_daemon.c-945-	list_for_each_entry(stat, &vs_stat->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-946-		list_for_each_entry_safe(vmx_stat, tmp, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-947-			found = 0;
./smartshell/vmware_daemon/vmware_daemon.c:948:			/* search pool */
./smartshell/vmware_daemon/vmware_daemon.c:949:			if ((pool = apppool_search(pool_queue, stat->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-950-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-951-			}
./smartshell/vmware_daemon/vmware_daemon.c:952:			list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-953-				memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-954-				if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-955-					continue;
./smartshell/vmware_daemon/vmware_daemon.c-956-				}
./smartshell/vmware_daemon/vmware_daemon.c-957-				if (!strcmp(vmx_stat->address, address)) {
./smartshell/vmware_daemon/vmware_daemon.c-958-					found = 1;
./smartshell/vmware_daemon/vmware_daemon.c-959-					vm_update_private_data(vmx_stat, stat, rs);
./smartshell/vmware_daemon/vmware_daemon.c-960-					/* 更新rs健康检查状态到vmx */
./smartshell/vmware_daemon/vmware_daemon.c-961-					if (strcmp(rs->state, "down") == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-962-						vmx_stat->mode = MODE_DOWN;
--
./smartshell/vmware_daemon/vmware_daemon.c-1016-		ret = 1;
./smartshell/vmware_daemon/vmware_daemon.c-1017-	}
./smartshell/vmware_daemon/vmware_daemon.c-1018-
./smartshell/vmware_daemon/vmware_daemon.c-1019-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-1020-}
./smartshell/vmware_daemon/vmware_daemon.c-1021-
./smartshell/vmware_daemon/vmware_daemon.c-1022-
./smartshell/vmware_daemon/vmware_daemon.c-1023-static int pool_stat_update( 
./smartshell/vmware_daemon/vmware_daemon.c-1024-		struct vserver *vs, 
./smartshell/vmware_daemon/vmware_daemon.c-1025-		struct vs_stat * vs_stat, 
./smartshell/vmware_daemon/vmware_daemon.c:1026:		struct apppool *pool, 
./smartshell/vmware_daemon/vmware_daemon.c-1027-		struct pool_stat *stat) 
./smartshell/vmware_daemon/vmware_daemon.c-1028-{
./smartshell/vmware_daemon/vmware_daemon.c-1029-	DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1030-
./smartshell/vmware_daemon/vmware_daemon.c-1031-	char address[512] = {0};
./smartshell/vmware_daemon/vmware_daemon.c-1032-	int ret = 0, alive = 0, need_up = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1033-	uint64_t connection = 0, bandwidth = 0, new_connection = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1034-	struct apppool_desc *pool_desc = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1035-	struct rserver_desc *rs_desc = NULL;
./smartshell/vmware_daemon/vmware_daemon.c:1036:	DP(" func:%s line:%d pool:%s stat:%s\n", __func__, __LINE__, pool->name, stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-1037-
./smartshell/vmware_daemon/vmware_daemon.c-1038-	/* TODO: 修改验证 */
./smartshell/vmware_daemon/vmware_daemon.c:1039:	if ((need_up=vm_check_pool_stat_need_update(pool, stat)) == 1) {
./smartshell/vmware_daemon/vmware_daemon.c:1040:		DP("func:%s line:%d pool:%s stat:%s NEED_UPDATE=1\n", __func__, __LINE__, pool->name, stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-1041-		reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1042-		adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1043-		return 1;
./smartshell/vmware_daemon/vmware_daemon.c-1044-	}
./smartshell/vmware_daemon/vmware_daemon.c-1045-
./smartshell/vmware_daemon/vmware_daemon.c-1046-	/****add by zhangjie ****************/
./smartshell/vmware_daemon/vmware_daemon.c-1047-	if(update_pool_stat_threshold(vs, stat) == 1) {
./smartshell/vmware_daemon/vmware_daemon.c:1048:		DP("func:%s line:%d pool:%s stat:%s NEED_UPDATE=1\n", __func__, __LINE__, pool->name, stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-1049-		//reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1050-		adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1051-		return 1;
./smartshell/vmware_daemon/vmware_daemon.c-1052-	}
./smartshell/vmware_daemon/vmware_daemon.c-1053-	/********************/
./smartshell/vmware_daemon/vmware_daemon.c-1054-
./smartshell/vmware_daemon/vmware_daemon.c:1055:	DP(" func:%s line:%d pool:%s stat:%s\n", __func__, __LINE__, pool->name, stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-1056-	/* 获取统计信息 */
./smartshell/vmware_daemon/vmware_daemon.c:1057:	if ((pool_desc = apppool_desc_search(&vs->apppool_desc_head, pool->name))) {
./smartshell/vmware_daemon/vmware_daemon.c-1058-		if (!list_empty(&pool_desc->rserver_desc_head)) {
./smartshell/vmware_daemon/vmware_daemon.c-1059-			list_for_each_entry(rs_desc, &pool_desc->rserver_desc_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1060-				if (strcmp(rs_desc->alive_state, "up")) {
./smartshell/vmware_daemon/vmware_daemon.c-1061-					continue;
./smartshell/vmware_daemon/vmware_daemon.c-1062-				}
./smartshell/vmware_daemon/vmware_daemon.c-1063-				++alive;
./smartshell/vmware_daemon/vmware_daemon.c-1064-				memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-1065-				if (inet_sockaddr2address(&rs_desc->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1066-					continue;
./smartshell/vmware_daemon/vmware_daemon.c-1067-				}
--
./smartshell/vmware_daemon/vmware_daemon.c-1070-				connection       += atol(rs_desc->connections);
./smartshell/vmware_daemon/vmware_daemon.c-1071-				new_connection   += atol(rs_desc->new_connections);
./smartshell/vmware_daemon/vmware_daemon.c-1072-				bandwidth        += atol(rs_desc->flowin);
./smartshell/vmware_daemon/vmware_daemon.c-1073-				bandwidth				 += atol(rs_desc->flowout);
./smartshell/vmware_daemon/vmware_daemon.c-1074-			}
./smartshell/vmware_daemon/vmware_daemon.c-1075-		}
./smartshell/vmware_daemon/vmware_daemon.c-1076-	}
./smartshell/vmware_daemon/vmware_daemon.c-1077-
./smartshell/vmware_daemon/vmware_daemon.c-1078-	DP("alive:%d EC:%d NC:%d Band:%d\n", alive, connection, new_connection, bandwidth);
./smartshell/vmware_daemon/vmware_daemon.c-1079-
./smartshell/vmware_daemon/vmware_daemon.c:1080:	if (!alive || alive < atoi(pool->alive_vm) ) {
./smartshell/vmware_daemon/vmware_daemon.c:1081:		DP("=====================>> (char)alive=%s, (int)alive=%d", pool->alive_vm, atoi(pool->alive_vm));
./smartshell/vmware_daemon/vmware_daemon.c-1082-		if (!timer_expired(stat)) {
./smartshell/vmware_daemon/vmware_daemon.c-1083-			return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1084-		}
./smartshell/vmware_daemon/vmware_daemon.c-1085-		reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1086-		if ((ret=try_start_server(stat)) > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1087-			goto start_vm;
./smartshell/vmware_daemon/vmware_daemon.c-1088-		}
./smartshell/vmware_daemon/vmware_daemon.c-1089-	}
./smartshell/vmware_daemon/vmware_daemon.c-1090-
./smartshell/vmware_daemon/vmware_daemon.c-1091-	if ( alive != stat->nr_server) {
--
./smartshell/vmware_daemon/vmware_daemon.c-1123-	if (vs_stat->init == STAT_INITED && timer_expired(stat)) {
./smartshell/vmware_daemon/vmware_daemon.c-1124-		ret = cal_load(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1125-		DP("=== OVER decision over === ret:[%d]\n", ret);
./smartshell/vmware_daemon/vmware_daemon.c-1126-		if (ret == VMWARE_VM_DO_START ) {
./smartshell/vmware_daemon/vmware_daemon.c-1127-			ret = try_start_server(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1128-		} else if (ret == VMWARE_VM_DO_STOP ) {
./smartshell/vmware_daemon/vmware_daemon.c-1129-			ret = try_stop_server(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1130-		}
./smartshell/vmware_daemon/vmware_daemon.c-1131-
./smartshell/vmware_daemon/vmware_daemon.c-1132-		/* 如果当前使用主池，备份池只留一个活动的VM */
./smartshell/vmware_daemon/vmware_daemon.c:1133:		if (strcmp(vs_stat->pool_cur, vs->pool) == 0 && vs->backpool[0] != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1134-			if (apppool_suspend(&pool_queue, vs_stat, vs) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1135-				DP("func:%s line:%d apppool_suspend fail!\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1136-			}
./smartshell/vmware_daemon/vmware_daemon.c-1137-		}
./smartshell/vmware_daemon/vmware_daemon.c-1138-		reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1139-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-1140-		DP("=== NOT OVER decision init:%d===\n", vs_stat->init);
./smartshell/vmware_daemon/vmware_daemon.c-1141-		update_sample_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1142-	}
./smartshell/vmware_daemon/vmware_daemon.c-1143-
--
./smartshell/vmware_daemon/vmware_daemon.c-1157-		}
./smartshell/vmware_daemon/vmware_daemon.c-1158-		if ((th = calloc(1, sizeof(pthread_data_t))) == NULL ||
./smartshell/vmware_daemon/vmware_daemon.c-1159-				(vsd = calloc(1, sizeof(vm_start_data_t)))== NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-1160-			pthread_mutex_unlock(&stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1161-			DP("Error: func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1162-			return -1;
./smartshell/vmware_daemon/vmware_daemon.c-1163-		}
./smartshell/vmware_daemon/vmware_daemon.c-1164-		th->data = vsd;
./smartshell/vmware_daemon/vmware_daemon.c-1165-		th->handler = start_vm;
./smartshell/vmware_daemon/vmware_daemon.c-1166-		vsd->pool_stat = stat;
./smartshell/vmware_daemon/vmware_daemon.c:1167:		apppool_copy(pool, &vsd->pool);
./smartshell/vmware_daemon/vmware_daemon.c-1168-
./smartshell/vmware_daemon/vmware_daemon.c:1169:		DP("func:%s line:%d pool:%s\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1170-
./smartshell/vmware_daemon/vmware_daemon.c-1171-		pthread_execute(th);
./smartshell/vmware_daemon/vmware_daemon.c-1172-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-1173-		DP("overload low ================== %d\n", ret);
./smartshell/vmware_daemon/vmware_daemon.c:1174:		ret =stop_realserver(stat, pool, vs);
./smartshell/vmware_daemon/vmware_daemon.c-1175-	}
./smartshell/vmware_daemon/vmware_daemon.c-1176-
./smartshell/vmware_daemon/vmware_daemon.c-1177-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-1178-}
./smartshell/vmware_daemon/vmware_daemon.c-1179-
./smartshell/vmware_daemon/vmware_daemon.c-1180-
./smartshell/vmware_daemon/vmware_daemon.c-1181-/* 完成pool中的每个pool_stat的初始化 */
./smartshell/vmware_daemon/vmware_daemon.c-1182-static int vs_stat_update(struct vs_stat *vs_stat, struct vserver *vs) 
./smartshell/vmware_daemon/vmware_daemon.c-1183-{
./smartshell/vmware_daemon/vmware_daemon.c-1184-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1185-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c:1186:	struct apppool *pool = NULL, *ap = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1187-
./smartshell/vmware_daemon/vmware_daemon.c-1188-	DP("==function:%s \n", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-1189-
./smartshell/vmware_daemon/vmware_daemon.c-1190-	if (pthread_mutex_trylock(&vs_stat->mutex) != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1191-		/* 正在初始化，返回 */
./smartshell/vmware_daemon/vmware_daemon.c-1192-		DP("正在初始化，返回!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1193-		return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1194-	}
./smartshell/vmware_daemon/vmware_daemon.c-1195-
./smartshell/vmware_daemon/vmware_daemon.c-1196-	if ( vs_stat->init == STAT_UNINIT || 
./smartshell/vmware_daemon/vmware_daemon.c-1197-			(vs_stat->init != STAT_INITED  && 
./smartshell/vmware_daemon/vmware_daemon.c-1198-			 vs_stat->init_times < VMWARE_MAX_INIT_TIMES ) ) {
./smartshell/vmware_daemon/vmware_daemon.c-1199-		/* 首次初始化, 当前使用池为主池 */
./smartshell/vmware_daemon/vmware_daemon.c-1200-		DP("首次初始化, init:%d\n", vs_stat->init);
./smartshell/vmware_daemon/vmware_daemon.c:1201:		strcpy(vs_stat->pool_cur, vs->pool);
./smartshell/vmware_daemon/vmware_daemon.c-1202-
./smartshell/vmware_daemon/vmware_daemon.c-1203-		/* 线程处理 */
./smartshell/vmware_daemon/vmware_daemon.c-1204-		pthread_data_t *pd = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1205-		vm_init_data_t *vid = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1206-		if ((pd = calloc(1, sizeof(pthread_data_t))) == NULL ||
./smartshell/vmware_daemon/vmware_daemon.c-1207-				(vid = calloc(1, sizeof(vm_init_data_t))) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-1208-		}
./smartshell/vmware_daemon/vmware_daemon.c-1209-
./smartshell/vmware_daemon/vmware_daemon.c-1210-		INIT_LIST_HEAD(&vid->pool_head);
./smartshell/vmware_daemon/vmware_daemon.c-1211-		list_for_each_entry(stat, &vs_stat->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c:1212:			if ((pool = apppool_search(&pool_queue, stat->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1213-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1214-			}
./smartshell/vmware_daemon/vmware_daemon.c:1215:			apppool_copy(pool, &ap);
./smartshell/vmware_daemon/vmware_daemon.c-1216-			list_add_tail(&ap->list, &vid->pool_head);
./smartshell/vmware_daemon/vmware_daemon.c-1217-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-1218-		}
./smartshell/vmware_daemon/vmware_daemon.c-1219-		vid->vs_stat = vs_stat;
./smartshell/vmware_daemon/vmware_daemon.c-1220-		pd->handler = vm_stat_init;
./smartshell/vmware_daemon/vmware_daemon.c-1221-		pd->data = vid;
./smartshell/vmware_daemon/vmware_daemon.c-1222-		pthread_execute(pd);
./smartshell/vmware_daemon/vmware_daemon.c-1223-
./smartshell/vmware_daemon/vmware_daemon.c-1224-		return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1225-	}
./smartshell/vmware_daemon/vmware_daemon.c-1226-
./smartshell/vmware_daemon/vmware_daemon.c-1227-	if ( vs_stat->init != STAT_INITED ) {
./smartshell/vmware_daemon/vmware_daemon.c-1228-		DP("Error: func:%s line:%d vs_stat init:%d\n", __func__, __LINE__, vs_stat->init);
./smartshell/vmware_daemon/vmware_daemon.c-1229-	}
./smartshell/vmware_daemon/vmware_daemon.c-1230-
./smartshell/vmware_daemon/vmware_daemon.c:1231:	if (vs->pool[0] != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1232-		/* Not contentswitch */
./smartshell/vmware_daemon/vmware_daemon.c-1233-		stat = list_first_entry(&vs_stat->pool_head, struct pool_stat, list);
./smartshell/vmware_daemon/vmware_daemon.c-1234-
./smartshell/vmware_daemon/vmware_daemon.c-1235-#if 0
./smartshell/vmware_daemon/vmware_daemon.c-1236-		if (strcmp(stat->vmtype, ELASTIC_POOL_TYPE_VCENTER) == 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-1237-			vcenter_stat_adjust(vs_stat);
./smartshell/vmware_daemon/vmware_daemon.c-1238-		}
./smartshell/vmware_daemon/vmware_daemon.c-1239-#endif
./smartshell/vmware_daemon/vmware_daemon.c-1240-
./smartshell/vmware_daemon/vmware_daemon.c:1241:		if ((pool = apppool_search(&pool_queue, vs->pool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:1242:			DP("Error: current pool:%s find fail!\n", vs_stat->pool_cur);
./smartshell/vmware_daemon/vmware_daemon.c-1243-			pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1244-			return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1245-		}
./smartshell/vmware_daemon/vmware_daemon.c-1246-
./smartshell/vmware_daemon/vmware_daemon.c-1247-
./smartshell/vmware_daemon/vmware_daemon.c:1248:		if ( vs->backpool[0] != 0 && apppool_all_down_check(pool)) {
./smartshell/vmware_daemon/vmware_daemon.c-1249-			/* 主池全down使用备份池 */
./smartshell/vmware_daemon/vmware_daemon.c-1250-			/** 使用备份池 **/
./smartshell/vmware_daemon/vmware_daemon.c:1251:			if ((pool = apppool_search(&pool_queue, vs->backpool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1252-				pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1253-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1254-			}
./smartshell/vmware_daemon/vmware_daemon.c-1255-			if ((stat = pool_stat_search(vs_stat, vs->backpool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1256-				pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1257-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1258-			}
./smartshell/vmware_daemon/vmware_daemon.c-1259-
./smartshell/vmware_daemon/vmware_daemon.c-1260-			if (strcmp(vs_stat->pool_cur, vs->backpool) != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1261-				/* 当前池非备份池, 切换，重置timer */
./smartshell/vmware_daemon/vmware_daemon.c-1262-				strcpy(vs_stat->pool_cur, vs->backpool);
./smartshell/vmware_daemon/vmware_daemon.c-1263-				DP("XXXXXXXXXXXXXXXXXXXXXX 进行 主->备 切换\n");
./smartshell/vmware_daemon/vmware_daemon.c-1264-				reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1265-				pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1266-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1267-			}
./smartshell/vmware_daemon/vmware_daemon.c-1268-		} else {
./smartshell/vmware_daemon/vmware_daemon.c-1269-			/* 使用主池 */
./smartshell/vmware_daemon/vmware_daemon.c:1270:			if ((pool = apppool_search(&pool_queue, vs->pool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1271-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1272-			}
./smartshell/vmware_daemon/vmware_daemon.c:1273:			if ((stat = pool_stat_search(vs_stat, vs->pool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1274-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1275-			}
./smartshell/vmware_daemon/vmware_daemon.c:1276:			if (strcmp(vs_stat->pool_cur, vs->pool) != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1277-				/* 当前池非主池，切换，重置timer */
./smartshell/vmware_daemon/vmware_daemon.c:1278:				strcpy(vs_stat->pool_cur, vs->pool);
./smartshell/vmware_daemon/vmware_daemon.c-1279-				DP("XXXXXXXXXXXXXXXXXXXXXX 进行 备->主 切换\n");
./smartshell/vmware_daemon/vmware_daemon.c-1280-				reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1281-				pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1282-				return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1283-			}
./smartshell/vmware_daemon/vmware_daemon.c-1284-		}
./smartshell/vmware_daemon/vmware_daemon.c-1285-		DP("func:%s line:%d 当前使用应用池:%s\n", __func__, __LINE__, vs_stat->pool_cur);
./smartshell/vmware_daemon/vmware_daemon.c-1286-		sync_pool_to_stat(vs_stat, &pool_queue);
./smartshell/vmware_daemon/vmware_daemon.c:1287:		ret = pool_stat_update(vs, vs_stat, pool, stat);
./smartshell/vmware_daemon/vmware_daemon.c-1288-#if 0
./smartshell/vmware_daemon/vmware_daemon.c:1289:		if (strcmp(vs_stat->pool_cur, vs->pool) == 0 && vs->backpool[0] != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1290-			/* 如果当前使用主池，备份池只留一个活动的VM */
./smartshell/vmware_daemon/vmware_daemon.c-1291-			if (apppool_suspend(&pool_queue, vs_stat, vs) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1292-				DP("apppool_suspend return -1\n");
./smartshell/vmware_daemon/vmware_daemon.c-1293-			}
./smartshell/vmware_daemon/vmware_daemon.c-1294-		}
./smartshell/vmware_daemon/vmware_daemon.c-1295-#endif
./smartshell/vmware_daemon/vmware_daemon.c-1296-		pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c:1297:	} else if (vs->pool[0] == 0 && strcmp(vs->contentswitch, "on") == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1298-		/* 内容交换 */
./smartshell/vmware_daemon/vmware_daemon.c-1299-		list_for_each_entry(stat, &vs_stat->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c:1300:			if ((pool = apppool_search(&pool_queue, stat->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1301-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1302-			}
./smartshell/vmware_daemon/vmware_daemon.c-1303-			DP("func:%s line:%d 当前使用应用池:%s\n", __func__, __LINE__, vs_stat->pool_cur);
./smartshell/vmware_daemon/vmware_daemon.c-1304-			sync_pool_to_stat(vs_stat, &pool_queue);
./smartshell/vmware_daemon/vmware_daemon.c:1305:			ret = pool_stat_update(vs, vs_stat, pool, stat);
./smartshell/vmware_daemon/vmware_daemon.c-1306-		}
./smartshell/vmware_daemon/vmware_daemon.c-1307-		pthread_mutex_unlock(&vs_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1308-	}
./smartshell/vmware_daemon/vmware_daemon.c-1309-	
./smartshell/vmware_daemon/vmware_daemon.c-1310-	/**************************
./smartshell/vmware_daemon/vmware_daemon.c-1311-	add by zhangjie;
./smartshell/vmware_daemon/vmware_daemon.c-1312-	循环判断主池是否位全Down,兵尝试开启主池中的vm
./smartshell/vmware_daemon/vmware_daemon.c-1313-	***************************/
./smartshell/vmware_daemon/vmware_daemon.c:1314:		if ((pool = apppool_search(&pool_queue, vs->pool)) != NULL && vs->backpool[0] != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1315-			static time_t now;
./smartshell/vmware_daemon/vmware_daemon.c-1316-			static time_t start;
./smartshell/vmware_daemon/vmware_daemon.c-1317-			static time_t i = 0;
./smartshell/vmware_daemon/vmware_daemon.c:1318:			if(apppool_all_down_check(pool) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1319-				goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1320-			}
./smartshell/vmware_daemon/vmware_daemon.c:1321:			if ((stat = pool_stat_search(vs_stat, vs->pool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1322-				goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1323-			}
./smartshell/vmware_daemon/vmware_daemon.c-1324-			
./smartshell/vmware_daemon/vmware_daemon.c-1325-			time(&now);
./smartshell/vmware_daemon/vmware_daemon.c-1326-			
./smartshell/vmware_daemon/vmware_daemon.c-1327-			if(i ==0) {
./smartshell/vmware_daemon/vmware_daemon.c-1328-				start = now;
./smartshell/vmware_daemon/vmware_daemon.c-1329-				i++;
./smartshell/vmware_daemon/vmware_daemon.c-1330-			}
./smartshell/vmware_daemon/vmware_daemon.c-1331-			
--
./smartshell/vmware_daemon/vmware_daemon.c-1344-			pthread_data_t *th;
./smartshell/vmware_daemon/vmware_daemon.c-1345-			vm_start_data_t *vsd;
./smartshell/vmware_daemon/vmware_daemon.c-1346-			if ((th = calloc(1, sizeof(pthread_data_t))) == NULL ||
./smartshell/vmware_daemon/vmware_daemon.c-1347-				(vsd = calloc(1, sizeof(vm_start_data_t)))== NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-1348-				pthread_mutex_unlock(&stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1349-				goto out;	
./smartshell/vmware_daemon/vmware_daemon.c-1350-			}
./smartshell/vmware_daemon/vmware_daemon.c-1351-			th->data = vsd;
./smartshell/vmware_daemon/vmware_daemon.c-1352-			th->handler = start_vm;
./smartshell/vmware_daemon/vmware_daemon.c-1353-			vsd->pool_stat = stat;
./smartshell/vmware_daemon/vmware_daemon.c:1354:			apppool_copy(pool, &vsd->pool);
./smartshell/vmware_daemon/vmware_daemon.c-1355-
./smartshell/vmware_daemon/vmware_daemon.c:1356:			DP("func:%s line:%d pool:%s\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1357-
./smartshell/vmware_daemon/vmware_daemon.c-1358-			pthread_execute(th);
./smartshell/vmware_daemon/vmware_daemon.c-1359-			}
./smartshell/vmware_daemon/vmware_daemon.c-1360-out:
./smartshell/vmware_daemon/vmware_daemon.c-1361-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-1362-}
./smartshell/vmware_daemon/vmware_daemon.c-1363-
./smartshell/vmware_daemon/vmware_daemon.c-1364-static int vm_set_private_data(struct rserver * rs, char *poolname, char *buff)
./smartshell/vmware_daemon/vmware_daemon.c-1365-{
./smartshell/vmware_daemon/vmware_daemon.c-1366-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1367-	struct apppool *apppool;
./smartshell/vmware_daemon/vmware_daemon.c:1368:	/** get pool **/
./smartshell/vmware_daemon/vmware_daemon.c-1369-	LIST_HEAD(pool_head);
./smartshell/vmware_daemon/vmware_daemon.c-1370-	module_get_queue(&pool_head, "apppool", poolname);
./smartshell/vmware_daemon/vmware_daemon.c-1371-	if (list_empty(&pool_head)) {
./smartshell/vmware_daemon/vmware_daemon.c-1372-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-1373-	}
./smartshell/vmware_daemon/vmware_daemon.c-1374-	apppool = list_first_entry(&pool_head, struct apppool, list);
./smartshell/vmware_daemon/vmware_daemon.c-1375-
./smartshell/vmware_daemon/vmware_daemon.c-1376-	if (strcmp(apppool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-1377-		vmware_set_private_data(rs, buff);
./smartshell/vmware_daemon/vmware_daemon.c-1378-
--
./smartshell/vmware_daemon/vmware_daemon.c-1427-	FILE *fp = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1428-	char buff[1024] = {0}, address[512] = {0};
./smartshell/vmware_daemon/vmware_daemon.c-1429-
./smartshell/vmware_daemon/vmware_daemon.c-1430-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1431-	if (inet_sockaddr2address(&rs->address, address) ==-1) {
./smartshell/vmware_daemon/vmware_daemon.c-1432-		DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1433-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-1434-	}
./smartshell/vmware_daemon/vmware_daemon.c-1435-
./smartshell/vmware_daemon/vmware_daemon.c-1436-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c:1437:	snprintf(buff, 1023, "script4 system pool %s add realserver %s", poolname, address);
./smartshell/vmware_daemon/vmware_daemon.c-1438-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1439-	vm_set_common_data(rs, action, buff);
./smartshell/vmware_daemon/vmware_daemon.c-1440-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1441-	vm_set_private_data(rs, poolname, buff);
./smartshell/vmware_daemon/vmware_daemon.c-1442-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1443-	DP("private data ?  BUFF:%s\n", buff);
./smartshell/vmware_daemon/vmware_daemon.c-1444-
./smartshell/vmware_daemon/vmware_daemon.c-1445-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1446-	fp = popen(buff, "r");
./smartshell/vmware_daemon/vmware_daemon.c-1447-	if (fp == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1448-		DP("Internal Error.\r\n");
./smartshell/vmware_daemon/vmware_daemon.c-1449-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-1450-	}
./smartshell/vmware_daemon/vmware_daemon.c-1451-	while (fgets(buff, BUFSIZ, fp) != NULL) {}
./smartshell/vmware_daemon/vmware_daemon.c-1452-	pclose(fp);
./smartshell/vmware_daemon/vmware_daemon.c-1453-
./smartshell/vmware_daemon/vmware_daemon.c-1454-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1455-}
./smartshell/vmware_daemon/vmware_daemon.c-1456-
./smartshell/vmware_daemon/vmware_daemon.c:1457:static int vm_on_off(struct apppool *pool,  void *data, int op, struct vcenter *vcenter)
./smartshell/vmware_daemon/vmware_daemon.c-1458-{
./smartshell/vmware_daemon/vmware_daemon.c-1459-	int ret = -1;
./smartshell/vmware_daemon/vmware_daemon.c-1460-	int count = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1461-
./smartshell/vmware_daemon/vmware_daemon.c-1462-	while(count < 3) {
./smartshell/vmware_daemon/vmware_daemon.c:1463:		DP("==func:%s line:%d 第[%d]次 pool[%s]\n", __func__, __LINE__, count + 1, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1464-		if (count > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1465-			usleep(count*VMWARE_MIN_RETRY_INTERVAL);
./smartshell/vmware_daemon/vmware_daemon.c-1466-		}
./smartshell/vmware_daemon/vmware_daemon.c:1467:		if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-1468-			/* data -> vmxpath */
./smartshell/vmware_daemon/vmware_daemon.c:1469:			ret = vmware_on_off(pool, (char *)data, op);
./smartshell/vmware_daemon/vmware_daemon.c:1470:		} else if(strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-1471-			/* data -> uuid */
./smartshell/vmware_daemon/vmware_daemon.c:1472:			ret = xenserver_on_off(pool, (char *)data, op, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c:1473:		} else if(strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-1474-			/* data -> vmname */
./smartshell/vmware_daemon/vmware_daemon.c:1475:			ret = vcenter_on_off(pool, (char *)data, op, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c-1476-		}
./smartshell/vmware_daemon/vmware_daemon.c-1477-		if (!ret) {
./smartshell/vmware_daemon/vmware_daemon.c-1478-			break;
./smartshell/vmware_daemon/vmware_daemon.c-1479-		}
./smartshell/vmware_daemon/vmware_daemon.c-1480-		count++;
./smartshell/vmware_daemon/vmware_daemon.c-1481-	}
./smartshell/vmware_daemon/vmware_daemon.c-1482-
./smartshell/vmware_daemon/vmware_daemon.c-1483-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-1484-}	
./smartshell/vmware_daemon/vmware_daemon.c-1485-static int Is_vm_powerOn(const char *vcenter_name, const char *vmdatacenter, const char *vmname)
--
./smartshell/vmware_daemon/vmware_daemon.c-1516-
./smartshell/vmware_daemon/vmware_daemon.c-1517-/* 此函数返回结果暂时没用 */
./smartshell/vmware_daemon/vmware_daemon.c-1518-static void * start_vm(void *vdata /* vm_start_data_t */)
./smartshell/vmware_daemon/vmware_daemon.c-1519-{
./smartshell/vmware_daemon/vmware_daemon.c-1520-	DP("== func:%s", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-1521-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1522-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-1523-	struct vmx_stat *vmx_stat = NULL, *vmx_stat_tmp = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1524-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1525-	struct rserver *rs = NULL;
./smartshell/vmware_daemon/vmware_daemon.c:1526:	struct apppool *pool = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1527-	struct vcenter *vcenter;
./smartshell/vmware_daemon/vmware_daemon.c-1528-	vm_start_data_t *vsd = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1529-
./smartshell/vmware_daemon/vmware_daemon.c-1530-	vsd = ( vm_start_data_t *)vdata;
./smartshell/vmware_daemon/vmware_daemon.c-1531-	stat = vsd->pool_stat;
./smartshell/vmware_daemon/vmware_daemon.c:1532:	pool = vsd->pool;
./smartshell/vmware_daemon/vmware_daemon.c-1533-
./smartshell/vmware_daemon/vmware_daemon.c-1534-	DP("func:%s line:%d stat:%s mode:%d\n", __func__, __LINE__, stat->name, stat->mode); 
./smartshell/vmware_daemon/vmware_daemon.c-1535-	if (stat->mode == MODE_NOMORE && strcmp(stat->vmtype, ELASTIC_POOL_TYPE_VCENTER)!= 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-1536-		DP("%s =========================, no more server  stat:%s mode:%d\n", 
./smartshell/vmware_daemon/vmware_daemon.c-1537-				__func__, stat->name, stat->mode); 
./smartshell/vmware_daemon/vmware_daemon.c-1538-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1539-	}
./smartshell/vmware_daemon/vmware_daemon.c-1540-
./smartshell/vmware_daemon/vmware_daemon.c-1541-	if (stat->silence > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1542-		DP("%s =========================, silence time %lu \n",
./smartshell/vmware_daemon/vmware_daemon.c-1543-				__func__, stat->silence); 
./smartshell/vmware_daemon/vmware_daemon.c-1544-		--stat->silence;
./smartshell/vmware_daemon/vmware_daemon.c-1545-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1546-	}
./smartshell/vmware_daemon/vmware_daemon.c-1547-
./smartshell/vmware_daemon/vmware_daemon.c-1548-	/* 以前根据pool类型启动VM, 修改之后根据RS类型启动VM */
./smartshell/vmware_daemon/vmware_daemon.c-1549-	DP("func:%s line:%d pooltype:%s\n", __func__, __LINE__, stat->vmtype);
./smartshell/vmware_daemon/vmware_daemon.c-1550-
./smartshell/vmware_daemon/vmware_daemon.c-1551-	/* vmware && xenserver */
./smartshell/vmware_daemon/vmware_daemon.c:1552:	if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0 || 
./smartshell/vmware_daemon/vmware_daemon.c:1553:			strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1554-		list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1555-			DP("func:%s line:%d vmx_stat:%s\n", __func__, __LINE__, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1556-			if ( vmx_stat->mode == MODE_UP ) {
./smartshell/vmware_daemon/vmware_daemon.c-1557-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1558-			}
./smartshell/vmware_daemon/vmware_daemon.c-1559-			if (vmx_stat->silence > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1560-				if (vmx_stat->silence-- == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1561-					/* 解除沉默 */
./smartshell/vmware_daemon/vmware_daemon.c-1562-					vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1563-				}
--
./smartshell/vmware_daemon/vmware_daemon.c-1566-
./smartshell/vmware_daemon/vmware_daemon.c-1567-			DP("func:%s line:%d rscenter:%s\n", __func__, __LINE__, vmx_stat->rscenter);
./smartshell/vmware_daemon/vmware_daemon.c-1568-			/* get login info */
./smartshell/vmware_daemon/vmware_daemon.c-1569-			if ((vcenter = vcenter_search(&vcenter_queue, vmx_stat->rscenter)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1570-				DP("func:%s line:%d vmx_stat:%s\n", __func__, __LINE__, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1571-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1572-			}
./smartshell/vmware_daemon/vmware_daemon.c-1573-
./smartshell/vmware_daemon/vmware_daemon.c-1574-			DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1575-			/* start vm */
./smartshell/vmware_daemon/vmware_daemon.c:1576:			ret = vm_on_off(pool, vmx_stat->data, 1, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c-1577-			if (ret < 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1578-				DP("启动VM失败!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1579-				if (++vmx_stat->retry > VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1580-					vmx_stat->silence = VMWARE_MAX_SILENCE;
./smartshell/vmware_daemon/vmware_daemon.c-1581-				}
./smartshell/vmware_daemon/vmware_daemon.c-1582-			} else {
./smartshell/vmware_daemon/vmware_daemon.c-1583-				DP("启动VM成功!\n");
./smartshell/vmware_daemon/vmware_daemon.c:1584:				list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1585-					memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-1586-					if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1587-						continue;
./smartshell/vmware_daemon/vmware_daemon.c-1588-					}
./smartshell/vmware_daemon/vmware_daemon.c-1589-					if (!strcmp(vmx_stat->address, address)) {
./smartshell/vmware_daemon/vmware_daemon.c-1590-						vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vmware_daemon.c-1591-						vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1592-						vmx_stat->silence = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1593-						stat->silence = 2;
./smartshell/vmware_daemon/vmware_daemon.c-1594-						goto adjust;
./smartshell/vmware_daemon/vmware_daemon.c-1595-					}
./smartshell/vmware_daemon/vmware_daemon.c-1596-				}
./smartshell/vmware_daemon/vmware_daemon.c-1597-			} 		
./smartshell/vmware_daemon/vmware_daemon.c-1598-		}
./smartshell/vmware_daemon/vmware_daemon.c-1599-	} 
./smartshell/vmware_daemon/vmware_daemon.c-1600-	/* vcenter */
./smartshell/vmware_daemon/vmware_daemon.c:1601:	else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1602-		struct vcenter *vcenter = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1603-
./smartshell/vmware_daemon/vmware_daemon.c-1604-		/* 查找重试次数最少的VM */
./smartshell/vmware_daemon/vmware_daemon.c-1605-		list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1606-			if (vmx_stat->mode == MODE_UP) {
./smartshell/vmware_daemon/vmware_daemon.c-1607-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1608-			}
./smartshell/vmware_daemon/vmware_daemon.c-1609-			/*当vm映射的rs的状态为down的时候且vm为up的时候，此时这个vm因健康检查失败而不参与决策*/
./smartshell/vmware_daemon/vmware_daemon.c-1610-			if(Is_vm_powerOn(vmx_stat->rscenter, vmx_stat->datacenter, ((struct vcenter_stat *)vmx_stat->data)->vmname)) {
./smartshell/vmware_daemon/vmware_daemon.c-1611-				continue;
--
./smartshell/vmware_daemon/vmware_daemon.c-1625-			} else if (vmx_stat->retry < VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1626-				if (vmx_stat_tmp == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1627-					vmx_stat_tmp = vmx_stat;
./smartshell/vmware_daemon/vmware_daemon.c-1628-				} else if ( vmx_stat_tmp != NULL && (vmx_stat->retry < vmx_stat_tmp->retry)) {
./smartshell/vmware_daemon/vmware_daemon.c-1629-					vmx_stat_tmp = vmx_stat;	
./smartshell/vmware_daemon/vmware_daemon.c-1630-				}
./smartshell/vmware_daemon/vmware_daemon.c-1631-			}
./smartshell/vmware_daemon/vmware_daemon.c-1632-		} 
./smartshell/vmware_daemon/vmware_daemon.c-1633-
./smartshell/vmware_daemon/vmware_daemon.c-1634-		if (vmx_stat_tmp == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:1635:			DP("func:%s line:%d pool:%s find vmx fail!\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1636-			goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1637-		}
./smartshell/vmware_daemon/vmware_daemon.c-1638-
./smartshell/vmware_daemon/vmware_daemon.c-1639-
./smartshell/vmware_daemon/vmware_daemon.c:1640:		DP("func:%s line:%d pool:%s found vmx :%s !\n", __func__, __LINE__, pool->name, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1641-
./smartshell/vmware_daemon/vmware_daemon.c-1642-		if ((vcenter = vcenter_search(&vcenter_queue, vmx_stat->rscenter)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:1643:			DP("func:%s line:%d pool:%s \n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1644-			goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1645-		}
./smartshell/vmware_daemon/vmware_daemon.c-1646-
./smartshell/vmware_daemon/vmware_daemon.c-1647-		DP("func:%s line:%d start_vm %s\n", __func__, __LINE__, ((struct vcenter_stat *)vmx_stat->data)->vmname);
./smartshell/vmware_daemon/vmware_daemon.c-1648-		/* start vm */
./smartshell/vmware_daemon/vmware_daemon.c:1649:		if ((ret = vm_on_off(pool, vmx_stat->data, 1, vcenter)) < 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1650-			DP("启动VM失败!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1651-			if (++vmx_stat->retry > VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1652-				vmx_stat->silence = VMWARE_MAX_SILENCE;
./smartshell/vmware_daemon/vmware_daemon.c-1653-			}
./smartshell/vmware_daemon/vmware_daemon.c-1654-		} else {
./smartshell/vmware_daemon/vmware_daemon.c-1655-			DP("启动VM成功!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1656-			vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1657-			vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vmware_daemon.c-1658-			vmx_stat->silence = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1659-			stat->silence = 2;
--
./smartshell/vmware_daemon/vmware_daemon.c-1663-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1664-	}
./smartshell/vmware_daemon/vmware_daemon.c-1665-
./smartshell/vmware_daemon/vmware_daemon.c-1666-	ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1667-
./smartshell/vmware_daemon/vmware_daemon.c-1668-adjust:
./smartshell/vmware_daemon/vmware_daemon.c-1669-	adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1670-
./smartshell/vmware_daemon/vmware_daemon.c-1671-out:
./smartshell/vmware_daemon/vmware_daemon.c-1672-
./smartshell/vmware_daemon/vmware_daemon.c:1673:	if (!pool) {
./smartshell/vmware_daemon/vmware_daemon.c:1674:		apppool_free(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c-1675-	}
./smartshell/vmware_daemon/vmware_daemon.c-1676-
./smartshell/vmware_daemon/vmware_daemon.c-1677-	if ( stat != NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-1678-		pthread_mutex_unlock(&stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-1679-	}
./smartshell/vmware_daemon/vmware_daemon.c-1680-
./smartshell/vmware_daemon/vmware_daemon.c-1681-	if (!ret) {
./smartshell/vmware_daemon/vmware_daemon.c-1682-		return (void *)0;
./smartshell/vmware_daemon/vmware_daemon.c-1683-	}
./smartshell/vmware_daemon/vmware_daemon.c-1684-
--
./smartshell/vmware_daemon/vmware_daemon.c-1686-}
./smartshell/vmware_daemon/vmware_daemon.c-1687-__attribute__((unused))
./smartshell/vmware_daemon/vmware_daemon.c-1688-static void * start_vm_for_master_pool(void *vdata /* vm_start_data_t */)
./smartshell/vmware_daemon/vmware_daemon.c-1689-{
./smartshell/vmware_daemon/vmware_daemon.c-1690-//	DP("== func:%s", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-1691-	int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1692-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-1693-	struct vmx_stat *vmx_stat = NULL, *vmx_stat_tmp = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1694-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1695-	struct rserver *rs = NULL;
./smartshell/vmware_daemon/vmware_daemon.c:1696:	struct apppool *pool = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1697-	struct vcenter *vcenter;
./smartshell/vmware_daemon/vmware_daemon.c-1698-	vm_start_data_t *vsd = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1699-
./smartshell/vmware_daemon/vmware_daemon.c-1700-	vsd = ( vm_start_data_t *)vdata;
./smartshell/vmware_daemon/vmware_daemon.c-1701-	stat = vsd->pool_stat;
./smartshell/vmware_daemon/vmware_daemon.c:1702:	pool = vsd->pool;
./smartshell/vmware_daemon/vmware_daemon.c-1703-	
./smartshell/vmware_daemon/vmware_daemon.c-1704-	usleep(10*VMWARE_MIN_RETRY_INTERVAL);
./smartshell/vmware_daemon/vmware_daemon.c-1705-	
./smartshell/vmware_daemon/vmware_daemon.c-1706-	//DP("func:%s line:%d stat:%s mode:%d\n", __func__, __LINE__, stat->name, stat->mode); 
./smartshell/vmware_daemon/vmware_daemon.c-1707-	if (stat->mode == MODE_NOMORE && strcmp(stat->vmtype, ELASTIC_POOL_TYPE_VCENTER)!= 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-1708-		//DP("%s =========================, no more server  stat:%s mode:%d\n", 
./smartshell/vmware_daemon/vmware_daemon.c-1709-			//	__func__, stat->name, stat->mode); 
./smartshell/vmware_daemon/vmware_daemon.c-1710-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1711-	}
./smartshell/vmware_daemon/vmware_daemon.c-1712-
--
./smartshell/vmware_daemon/vmware_daemon.c-1714-		DP("%s =========================, silence time %lu \n",
./smartshell/vmware_daemon/vmware_daemon.c-1715-				__func__, stat->silence); 
./smartshell/vmware_daemon/vmware_daemon.c-1716-		--stat->silence;
./smartshell/vmware_daemon/vmware_daemon.c-1717-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1718-	}
./smartshell/vmware_daemon/vmware_daemon.c-1719-
./smartshell/vmware_daemon/vmware_daemon.c-1720-	/* 以前根据pool类型启动VM, 修改之后根据RS类型启动VM */
./smartshell/vmware_daemon/vmware_daemon.c-1721-	//DP("func:%s line:%d pooltype:%s\n", __func__, __LINE__, stat->vmtype);
./smartshell/vmware_daemon/vmware_daemon.c-1722-
./smartshell/vmware_daemon/vmware_daemon.c-1723-	/* vmware && xenserver */
./smartshell/vmware_daemon/vmware_daemon.c:1724:	if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0 || 
./smartshell/vmware_daemon/vmware_daemon.c:1725:			strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1726-		list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1727-		//	DP("func:%s line:%d vmx_stat:%s\n", __func__, __LINE__, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1728-			if ( vmx_stat->mode == MODE_UP ) {
./smartshell/vmware_daemon/vmware_daemon.c-1729-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1730-			}
./smartshell/vmware_daemon/vmware_daemon.c-1731-			if (vmx_stat->silence > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1732-				if (vmx_stat->silence-- == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1733-					/* 解除沉默 */
./smartshell/vmware_daemon/vmware_daemon.c-1734-					vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1735-				}
--
./smartshell/vmware_daemon/vmware_daemon.c-1738-
./smartshell/vmware_daemon/vmware_daemon.c-1739-			//DP("func:%s line:%d rscenter:%s\n", __func__, __LINE__, vmx_stat->rscenter);
./smartshell/vmware_daemon/vmware_daemon.c-1740-			/* get login info */
./smartshell/vmware_daemon/vmware_daemon.c-1741-			if ((vcenter = vcenter_search(&vcenter_queue, vmx_stat->rscenter)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1742-				//DP("func:%s line:%d vmx_stat:%s\n", __func__, __LINE__, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1743-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1744-			}
./smartshell/vmware_daemon/vmware_daemon.c-1745-
./smartshell/vmware_daemon/vmware_daemon.c-1746-			//DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1747-			/* start vm */
./smartshell/vmware_daemon/vmware_daemon.c:1748:			ret = vm_on_off(pool, vmx_stat->data, 1, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c-1749-			if (ret < 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1750-				//DP("启动VM失败!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1751-				if (++vmx_stat->retry > VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1752-					vmx_stat->silence = VMWARE_MAX_SILENCE;
./smartshell/vmware_daemon/vmware_daemon.c-1753-				}
./smartshell/vmware_daemon/vmware_daemon.c-1754-			} else {
./smartshell/vmware_daemon/vmware_daemon.c-1755-				//DP("启动VM成功!\n");
./smartshell/vmware_daemon/vmware_daemon.c:1756:				list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1757-					memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-1758-					if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1759-						continue;
./smartshell/vmware_daemon/vmware_daemon.c-1760-					}
./smartshell/vmware_daemon/vmware_daemon.c-1761-					if (!strcmp(vmx_stat->address, address)) {
./smartshell/vmware_daemon/vmware_daemon.c-1762-						vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vmware_daemon.c-1763-						vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1764-						vmx_stat->silence = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1765-						stat->silence = 2;
./smartshell/vmware_daemon/vmware_daemon.c-1766-						goto adjust;
./smartshell/vmware_daemon/vmware_daemon.c-1767-					}
./smartshell/vmware_daemon/vmware_daemon.c-1768-				}
./smartshell/vmware_daemon/vmware_daemon.c-1769-			} 		
./smartshell/vmware_daemon/vmware_daemon.c-1770-		}
./smartshell/vmware_daemon/vmware_daemon.c-1771-	} 
./smartshell/vmware_daemon/vmware_daemon.c-1772-	/* vcenter */
./smartshell/vmware_daemon/vmware_daemon.c:1773:	else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER) == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1774-		struct vcenter *vcenter = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1775-
./smartshell/vmware_daemon/vmware_daemon.c-1776-		/* 查找重试次数最少的VM */
./smartshell/vmware_daemon/vmware_daemon.c-1777-		list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1778-			if (vmx_stat->mode == MODE_UP) {
./smartshell/vmware_daemon/vmware_daemon.c-1779-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1780-			}
./smartshell/vmware_daemon/vmware_daemon.c-1781-			/*当vm映射的rs的状态为down的时候且vm为up的时候，此时这个vm因健康检查失败而不参与决策*/
./smartshell/vmware_daemon/vmware_daemon.c-1782-			if(Is_vm_powerOn(vmx_stat->rscenter, vmx_stat->datacenter, ((struct vcenter_stat *)vmx_stat->data)->vmname)) {
./smartshell/vmware_daemon/vmware_daemon.c-1783-				continue;
--
./smartshell/vmware_daemon/vmware_daemon.c-1797-			} else if (vmx_stat->retry < VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1798-				if (vmx_stat_tmp == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-1799-					vmx_stat_tmp = vmx_stat;
./smartshell/vmware_daemon/vmware_daemon.c-1800-				} else if ( vmx_stat_tmp != NULL && (vmx_stat->retry < vmx_stat_tmp->retry)) {
./smartshell/vmware_daemon/vmware_daemon.c-1801-					vmx_stat_tmp = vmx_stat;	
./smartshell/vmware_daemon/vmware_daemon.c-1802-				}
./smartshell/vmware_daemon/vmware_daemon.c-1803-			}
./smartshell/vmware_daemon/vmware_daemon.c-1804-		} 
./smartshell/vmware_daemon/vmware_daemon.c-1805-
./smartshell/vmware_daemon/vmware_daemon.c-1806-		if (vmx_stat_tmp == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:1807:			//DP("func:%s line:%d pool:%s find vmx fail!\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1808-			goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1809-		}
./smartshell/vmware_daemon/vmware_daemon.c-1810-
./smartshell/vmware_daemon/vmware_daemon.c-1811-
./smartshell/vmware_daemon/vmware_daemon.c:1812:		//DP("func:%s line:%d pool:%s found vmx :%s !\n", __func__, __LINE__, pool->name, vmx_stat->address);
./smartshell/vmware_daemon/vmware_daemon.c-1813-
./smartshell/vmware_daemon/vmware_daemon.c-1814-		if ((vcenter = vcenter_search(&vcenter_queue, vmx_stat->rscenter)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:1815:			//DP("func:%s line:%d pool:%s \n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-1816-			goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1817-		}
./smartshell/vmware_daemon/vmware_daemon.c-1818-
./smartshell/vmware_daemon/vmware_daemon.c-1819-		//DP("func:%s line:%d start_vm %s\n", __func__, __LINE__, ((struct vcenter_stat *)vmx_stat->data)->vmname);
./smartshell/vmware_daemon/vmware_daemon.c-1820-		/* start vm */
./smartshell/vmware_daemon/vmware_daemon.c:1821:		if ((ret = vm_on_off(pool, vmx_stat->data, 1, vcenter)) < 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1822-			//DP("启动VM失败!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1823-			if (++vmx_stat->retry > VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-1824-				vmx_stat->silence = VMWARE_MAX_SILENCE;
./smartshell/vmware_daemon/vmware_daemon.c-1825-			}
./smartshell/vmware_daemon/vmware_daemon.c-1826-		} else {
./smartshell/vmware_daemon/vmware_daemon.c-1827-			//DP("启动VM成功!\n");
./smartshell/vmware_daemon/vmware_daemon.c-1828-			vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1829-			vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vmware_daemon.c-1830-			vmx_stat->silence = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1831-			stat->silence = 2;
--
./smartshell/vmware_daemon/vmware_daemon.c-1835-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-1836-	}
./smartshell/vmware_daemon/vmware_daemon.c-1837-
./smartshell/vmware_daemon/vmware_daemon.c-1838-	ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1839-
./smartshell/vmware_daemon/vmware_daemon.c-1840-adjust:
./smartshell/vmware_daemon/vmware_daemon.c-1841-	adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vmware_daemon.c-1842-
./smartshell/vmware_daemon/vmware_daemon.c-1843-out:
./smartshell/vmware_daemon/vmware_daemon.c-1844-
./smartshell/vmware_daemon/vmware_daemon.c:1845:	if (!pool) {
./smartshell/vmware_daemon/vmware_daemon.c:1846:		apppool_free(&pool->list);
./smartshell/vmware_daemon/vmware_daemon.c-1847-	}
./smartshell/vmware_daemon/vmware_daemon.c-1848-
./smartshell/vmware_daemon/vmware_daemon.c-1849-
./smartshell/vmware_daemon/vmware_daemon.c-1850-	if (!ret) {
./smartshell/vmware_daemon/vmware_daemon.c-1851-		return (void *)0;
./smartshell/vmware_daemon/vmware_daemon.c-1852-	}
./smartshell/vmware_daemon/vmware_daemon.c-1853-
./smartshell/vmware_daemon/vmware_daemon.c-1854-	return (void *) -1;
./smartshell/vmware_daemon/vmware_daemon.c-1855-}
./smartshell/vmware_daemon/vmware_daemon.c-1856-
./smartshell/vmware_daemon/vmware_daemon.c-1857-/* 返回值 ： -1:失败  0-未操作  1-成功停止 */
./smartshell/vmware_daemon/vmware_daemon.c:1858:static int stop_realserver(struct pool_stat *stat, struct apppool *pool, struct vserver *vs)
./smartshell/vmware_daemon/vmware_daemon.c-1859-{
./smartshell/vmware_daemon/vmware_daemon.c-1860-	int total = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1861-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-1862-	struct rserver *rs = NULL, *rs_last = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1863-	struct apppool_desc *pool_desc = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1864-	struct rserver_desc *rs_desc = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1865-	struct vmx_stat *vmx_stat = NULL, *vmx_stat_last = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-1866-
./smartshell/vmware_daemon/vmware_daemon.c:1867:	if (!(pool_desc = apppool_desc_search(&vs->apppool_desc_head, pool->name))) {
./smartshell/vmware_daemon/vmware_daemon.c-1868-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-1869-	}
./smartshell/vmware_daemon/vmware_daemon.c-1870-
./smartshell/vmware_daemon/vmware_daemon.c-1871-	DP("=========%s", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-1872-	if (stat->silence > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1873-		DP("=========%s ======= silence time %lu \n", __func__, stat->silence);
./smartshell/vmware_daemon/vmware_daemon.c-1874-		--stat->silence;
./smartshell/vmware_daemon/vmware_daemon.c-1875-		return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1876-	}
./smartshell/vmware_daemon/vmware_daemon.c-1877-
./smartshell/vmware_daemon/vmware_daemon.c-1878-	/* estimate the number of alive realservers.
./smartshell/vmware_daemon/vmware_daemon.c:1879:	 * if only one realserver in this pool, we do nothing. */
./smartshell/vmware_daemon/vmware_daemon.c-1880-	list_for_each_entry(rs_desc, &pool_desc->rserver_desc_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1881-		if (!strcmp(rs_desc->alive_state, "up")) {
./smartshell/vmware_daemon/vmware_daemon.c-1882-			++total;
./smartshell/vmware_daemon/vmware_daemon.c-1883-			if (total > 2)
./smartshell/vmware_daemon/vmware_daemon.c-1884-				break;
./smartshell/vmware_daemon/vmware_daemon.c-1885-		}
./smartshell/vmware_daemon/vmware_daemon.c-1886-	}
./smartshell/vmware_daemon/vmware_daemon.c-1887-
./smartshell/vmware_daemon/vmware_daemon.c:1888:	if (total <= atoi(pool->alive_vm)) {
./smartshell/vmware_daemon/vmware_daemon.c-1889-		return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1890-	}
./smartshell/vmware_daemon/vmware_daemon.c-1891-
./smartshell/vmware_daemon/vmware_daemon.c-1892-	total = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1893-
./smartshell/vmware_daemon/vmware_daemon.c-1894-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1895-		DP(" mode = %d\n", vmx_stat->mode);
./smartshell/vmware_daemon/vmware_daemon.c-1896-		if (vmx_stat->mode != MODE_UP) {
./smartshell/vmware_daemon/vmware_daemon.c-1897-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-1898-		}
./smartshell/vmware_daemon/vmware_daemon.c-1899-
./smartshell/vmware_daemon/vmware_daemon.c-1900-		if (vmx_stat->silence > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1901-			if (vmx_stat->silence-- == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-1902-				/* 下一轮解除沉默 */
./smartshell/vmware_daemon/vmware_daemon.c-1903-				vmx_stat->retry = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1904-			}
./smartshell/vmware_daemon/vmware_daemon.c-1905-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-1906-		}
./smartshell/vmware_daemon/vmware_daemon.c-1907-
./smartshell/vmware_daemon/vmware_daemon.c:1908:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-1909-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-1910-			/* 手动关闭的不参与停止决策 */
./smartshell/vmware_daemon/vmware_daemon.c-1911-			if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/vmware_daemon.c-1912-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1913-			}
./smartshell/vmware_daemon/vmware_daemon.c-1914-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-1915-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-1916-			}
./smartshell/vmware_daemon/vmware_daemon.c-1917-			if (!strcmp(address, vmx_stat->address)) {
./smartshell/vmware_daemon/vmware_daemon.c-1918-				/* find least retry rserver */
--
./smartshell/vmware_daemon/vmware_daemon.c-1954-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-1955-		DP("func:%s line:%d find rs fail!\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-1956-	}
./smartshell/vmware_daemon/vmware_daemon.c-1957-
./smartshell/vmware_daemon/vmware_daemon.c-1958-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-1959-}
./smartshell/vmware_daemon/vmware_daemon.c-1960-
./smartshell/vmware_daemon/vmware_daemon.c-1961-
./smartshell/vmware_daemon/vmware_daemon.c-1962-static int pool_stat_init(
./smartshell/vmware_daemon/vmware_daemon.c-1963-		struct pool_stat *pool_stat, 
./smartshell/vmware_daemon/vmware_daemon.c:1964:		struct apppool *pool, 
./smartshell/vmware_daemon/vmware_daemon.c-1965-		struct vserver *vs
./smartshell/vmware_daemon/vmware_daemon.c-1966-		)
./smartshell/vmware_daemon/vmware_daemon.c-1967-{
./smartshell/vmware_daemon/vmware_daemon.c-1968-	int val, count;
./smartshell/vmware_daemon/vmware_daemon.c-1969-	time_t now;
./smartshell/vmware_daemon/vmware_daemon.c-1970-
./smartshell/vmware_daemon/vmware_daemon.c:1971:	DP("func:%s line:%d pool:%s vs:%s pool_stat:%s\n", __func__, __LINE__, pool->name, vs->name, pool_stat->name);
./smartshell/vmware_daemon/vmware_daemon.c-1972-
./smartshell/vmware_daemon/vmware_daemon.c-1973-	/* set new limits */
./smartshell/vmware_daemon/vmware_daemon.c-1974-	pool_stat->vm_conn_high     = atol(vs->vm_conn_high);
./smartshell/vmware_daemon/vmware_daemon.c-1975-	pool_stat->vm_conn_low      = atol(vs->vm_conn_low);
./smartshell/vmware_daemon/vmware_daemon.c-1976-
./smartshell/vmware_daemon/vmware_daemon.c-1977-	if (!pool_stat->vm_conn_high || 
./smartshell/vmware_daemon/vmware_daemon.c-1978-			!pool_stat->vm_conn_low || 
./smartshell/vmware_daemon/vmware_daemon.c-1979-			pool_stat->vm_conn_high <= pool_stat->vm_conn_low) {
./smartshell/vmware_daemon/vmware_daemon.c-1980-		pool_stat->vm_conn_high = pool_stat->vm_conn_low = 0;
./smartshell/vmware_daemon/vmware_daemon.c-1981-	}
--
./smartshell/vmware_daemon/vmware_daemon.c-1999-	}
./smartshell/vmware_daemon/vmware_daemon.c-2000-
./smartshell/vmware_daemon/vmware_daemon.c-2001-	if (!pool_stat->vm_conn_high && 
./smartshell/vmware_daemon/vmware_daemon.c-2002-			!pool_stat->vm_band_high && 
./smartshell/vmware_daemon/vmware_daemon.c-2003-			!pool_stat->vm_newconn_high) {
./smartshell/vmware_daemon/vmware_daemon.c-2004-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2005-	}
./smartshell/vmware_daemon/vmware_daemon.c-2006-
./smartshell/vmware_daemon/vmware_daemon.c-2007-	val = DEFAULT_INTERVAL;
./smartshell/vmware_daemon/vmware_daemon.c-2008-
./smartshell/vmware_daemon/vmware_daemon.c:2009:	if (strlen(pool->vminterval)) {
./smartshell/vmware_daemon/vmware_daemon.c:2010:		val = atol(pool->vminterval);
./smartshell/vmware_daemon/vmware_daemon.c-2011-		if (val < 2)
./smartshell/vmware_daemon/vmware_daemon.c-2012-			val = DEFAULT_INTERVAL;
./smartshell/vmware_daemon/vmware_daemon.c-2013-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-2014-		pool_stat->vm_interval = val;
./smartshell/vmware_daemon/vmware_daemon.c-2015-	}
./smartshell/vmware_daemon/vmware_daemon.c-2016-	/** Here: vm_interval(default) or val(set) **/
./smartshell/vmware_daemon/vmware_daemon.c-2017-	count = DEFAULT_COUNT;
./smartshell/vmware_daemon/vmware_daemon.c:2018:	if (strlen(pool->vmcount)) {
./smartshell/vmware_daemon/vmware_daemon.c:2019:		count = atol(pool->vmcount);
./smartshell/vmware_daemon/vmware_daemon.c-2020-		if (count < 1)
./smartshell/vmware_daemon/vmware_daemon.c-2021-			count = DEFAULT_COUNT;
./smartshell/vmware_daemon/vmware_daemon.c-2022-	} else {
./smartshell/vmware_daemon/vmware_daemon.c-2023-		pool_stat->vm_count = count;
./smartshell/vmware_daemon/vmware_daemon.c-2024-	}
./smartshell/vmware_daemon/vmware_daemon.c-2025-
./smartshell/vmware_daemon/vmware_daemon.c-2026-	if ((pool_stat->vm_interval && pool_stat->vm_interval != val) || 
./smartshell/vmware_daemon/vmware_daemon.c-2027-			(pool_stat->vm_count && pool_stat->vm_count != count)) {
./smartshell/vmware_daemon/vmware_daemon.c-2028-		pool_stat->vm_interval = val; 
./smartshell/vmware_daemon/vmware_daemon.c-2029-		pool_stat->vm_count = count;
--
./smartshell/vmware_daemon/vmware_daemon.c-2036-
./smartshell/vmware_daemon/vmware_daemon.c-2037-	now = time(NULL);
./smartshell/vmware_daemon/vmware_daemon.c-2038-	if (pool_stat->sample > now) {
./smartshell/vmware_daemon/vmware_daemon.c-2039-		/* 未到取样时间返回 -1 */
./smartshell/vmware_daemon/vmware_daemon.c-2040-		return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2041-	}
./smartshell/vmware_daemon/vmware_daemon.c-2042-
./smartshell/vmware_daemon/vmware_daemon.c-2043-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-2044-}
./smartshell/vmware_daemon/vmware_daemon.c-2045-
./smartshell/vmware_daemon/vmware_daemon.c:2046:static int apppool_all_down_check(struct apppool *pool)
./smartshell/vmware_daemon/vmware_daemon.c-2047-{
./smartshell/vmware_daemon/vmware_daemon.c-2048-	int ret = 1;
./smartshell/vmware_daemon/vmware_daemon.c-2049-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c-2050-
./smartshell/vmware_daemon/vmware_daemon.c:2051:	DP("func:%s line:%d pool:%s\n", __func__, __LINE__, pool->name);
./smartshell/vmware_daemon/vmware_daemon.c-2052-
./smartshell/vmware_daemon/vmware_daemon.c:2053:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2054-		if (strcmp(rs->state, "up") == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-2055-			ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-2056-			break;
./smartshell/vmware_daemon/vmware_daemon.c-2057-		}
./smartshell/vmware_daemon/vmware_daemon.c-2058-	}
./smartshell/vmware_daemon/vmware_daemon.c-2059-
./smartshell/vmware_daemon/vmware_daemon.c-2060-	DP("func:%s line:%d ret:%d\n", __func__, __LINE__, ret);
./smartshell/vmware_daemon/vmware_daemon.c-2061-
./smartshell/vmware_daemon/vmware_daemon.c-2062-	return ret;
./smartshell/vmware_daemon/vmware_daemon.c-2063-}
./smartshell/vmware_daemon/vmware_daemon.c-2064-
./smartshell/vmware_daemon/vmware_daemon.c-2065-static int handle_vserver ( struct vserver *vs)
./smartshell/vmware_daemon/vmware_daemon.c-2066-{
./smartshell/vmware_daemon/vmware_daemon.c-2067-	DP("====func:%s vserver:%s\n", __func__, vs->name);
./smartshell/vmware_daemon/vmware_daemon.c-2068-
./smartshell/vmware_daemon/vmware_daemon.c:2069:	struct apppool *pool = NULL, *backpool = NULL, *rulepool = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2070-	struct vs_stat *vs_stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2071-	struct pool_stat *pool_stat = NULL, *pool_stat_back = NULL, *pool_stat_rule = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2072-	struct rule *rule;
./smartshell/vmware_daemon/vmware_daemon.c-2073-	struct rule_name *rule_name;
./smartshell/vmware_daemon/vmware_daemon.c-2074-	char poolname[512];
./smartshell/vmware_daemon/vmware_daemon.c-2075-
./smartshell/vmware_daemon/vmware_daemon.c-2076-	if ((vs_stat = vs_stat_search(vs->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2077-		if ((vs_stat = vs_stat_add(vs->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2078-			DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2079-			return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2080-		}
./smartshell/vmware_daemon/vmware_daemon.c-2081-	}
./smartshell/vmware_daemon/vmware_daemon.c-2082-
./smartshell/vmware_daemon/vmware_daemon.c-2083-	/* 初始化pool参数 */
./smartshell/vmware_daemon/vmware_daemon.c:2084:	if (vs->pool[0] != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-2085-		/* 非内容交换 */
./smartshell/vmware_daemon/vmware_daemon.c:2086:		/* main pool */
./smartshell/vmware_daemon/vmware_daemon.c:2087:		if ((pool = apppool_search(&pool_queue, vs->pool)) == NULL ||
./smartshell/vmware_daemon/vmware_daemon.c:2088:				strcmp(pool->vmenable, "on") != 0 ||
./smartshell/vmware_daemon/vmware_daemon.c:2089:				(strcmp(pool->vmtype, "vcenter") != 0 && 
./smartshell/vmware_daemon/vmware_daemon.c:2090:				 list_empty(&pool->realserver_head))) {
./smartshell/vmware_daemon/vmware_daemon.c-2091-			DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2092-			return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2093-		}
./smartshell/vmware_daemon/vmware_daemon.c-2094-
./smartshell/vmware_daemon/vmware_daemon.c:2095:		if ((pool_stat = pool_stat_search(vs_stat, pool->name)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c:2096:			if ((pool_stat = pool_stat_add(vs_stat, pool)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-2097-				DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2098-				return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2099-			}
./smartshell/vmware_daemon/vmware_daemon.c:2100:			if ( pool_stat_init(pool_stat, pool, vs) != 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-2101-				DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2102-				return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2103-			}
./smartshell/vmware_daemon/vmware_daemon.c-2104-			/**************************/
./smartshell/vmware_daemon/vmware_daemon.c-2105-			if(vs_stat->init != STAT_UNINIT) {
./smartshell/vmware_daemon/vmware_daemon.c-2106-				int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c:2107:				if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c:2108:					ret = xenserver_stat_init_for_one(vs_stat, pool, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c:2109:				} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c:2110:					ret = vcenter_stat_init_for_one(vs_stat, pool, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c-2111-				}
./smartshell/vmware_daemon/vmware_daemon.c-2112-				if(ret == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-2113-					DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2114-					return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2115-				}
./smartshell/vmware_daemon/vmware_daemon.c-2116-			}
./smartshell/vmware_daemon/vmware_daemon.c-2117-			/***************************/
./smartshell/vmware_daemon/vmware_daemon.c-2118-		}
./smartshell/vmware_daemon/vmware_daemon.c-2119-
./smartshell/vmware_daemon/vmware_daemon.c-2120-		/* backpool */
./smartshell/vmware_daemon/vmware_daemon.c:2121:		if ( pool != NULL && vs->backpool[0] != 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-2122-			DP("func:%s line:%d add backpool\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2123-			if ((backpool = apppool_search(&pool_queue, vs->backpool)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2124-				DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2125-				return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2126-			}
./smartshell/vmware_daemon/vmware_daemon.c-2127-
./smartshell/vmware_daemon/vmware_daemon.c-2128-			if ((pool_stat_back = pool_stat_search(vs_stat, backpool->name)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-2129-				DP("func:%s line:%d add backpool\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2130-				if ( (pool_stat_back = pool_stat_add(vs_stat, backpool)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-2131-					DP("Error func:%s line:%d\n", __func__, __LINE__);
--
./smartshell/vmware_daemon/vmware_daemon.c-2133-				} 
./smartshell/vmware_daemon/vmware_daemon.c-2134-				if ( pool_stat_init(pool_stat_back, backpool, vs) != 0 ) {
./smartshell/vmware_daemon/vmware_daemon.c-2135-					DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2136-					return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2137-				}
./smartshell/vmware_daemon/vmware_daemon.c-2138-				/**************************/
./smartshell/vmware_daemon/vmware_daemon.c-2139-				if(vs_stat->init != STAT_UNINIT){
./smartshell/vmware_daemon/vmware_daemon.c-2140-					int ret = 0;
./smartshell/vmware_daemon/vmware_daemon.c-2141-					if (strcmp(backpool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2142-						ret = xenserver_stat_init_for_one(vs_stat, backpool, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c:2143:					} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2144-						ret = vcenter_stat_init_for_one(vs_stat, backpool, &vcenter_queue);
./smartshell/vmware_daemon/vmware_daemon.c-2145-					}
./smartshell/vmware_daemon/vmware_daemon.c-2146-					if(ret == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-2147-						DP("Error func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2148-						return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2149-					}
./smartshell/vmware_daemon/vmware_daemon.c-2150-				}
./smartshell/vmware_daemon/vmware_daemon.c-2151-				/***************************/
./smartshell/vmware_daemon/vmware_daemon.c-2152-			}
./smartshell/vmware_daemon/vmware_daemon.c-2153-			DP("func:%s line:%d add backpool\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2154-		}
./smartshell/vmware_daemon/vmware_daemon.c:2155:	} else if (vs->pool[0] == 0 && strcmp(vs->contentswitch, "on") == 0) {
./smartshell/vmware_daemon/vmware_daemon.c-2156-		/* 内容交换 */
./smartshell/vmware_daemon/vmware_daemon.c-2157-		list_for_each_entry(rule_name, &vs->rule_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2158-			memset(poolname, 0, sizeof(poolname));
./smartshell/vmware_daemon/vmware_daemon.c-2159-			if ((rule = rule_search(&rule_queue, rule_name->name)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2160-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2161-			}
./smartshell/vmware_daemon/vmware_daemon.c-2162-
./smartshell/vmware_daemon/vmware_daemon.c-2163-			if(strcmp(rule->type, "cswitch") != 0) { //过滤掉不是内容交换的
./smartshell/vmware_daemon/vmware_daemon.c-2164-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2165-			}
./smartshell/vmware_daemon/vmware_daemon.c-2166-
./smartshell/vmware_daemon/vmware_daemon.c-2167-			if ((get_poolname_from_rule(rule, poolname, sizeof(poolname) - 1 )) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2168-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2169-			}
./smartshell/vmware_daemon/vmware_daemon.c:2170:			DP("Contentswitch: init rule pool:%s\n", poolname);
./smartshell/vmware_daemon/vmware_daemon.c-2171-
./smartshell/vmware_daemon/vmware_daemon.c-2172-			if ((rulepool = apppool_search(&pool_queue, poolname)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2173-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2174-			}
./smartshell/vmware_daemon/vmware_daemon.c-2175-
./smartshell/vmware_daemon/vmware_daemon.c-2176-			if ((pool_stat_rule = pool_stat_search(vs_stat, poolname)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-2177-				if ( (pool_stat_rule = pool_stat_add(vs_stat, rulepool)) == NULL ) {
./smartshell/vmware_daemon/vmware_daemon.c-2178-					continue;
./smartshell/vmware_daemon/vmware_daemon.c-2179-				} 
./smartshell/vmware_daemon/vmware_daemon.c-2180-				if ( pool_stat_init(pool_stat_rule, rulepool, vs) != 0 ) {
--
./smartshell/vmware_daemon/vmware_daemon.c-2193-
./smartshell/vmware_daemon/vmware_daemon.c-2194-static void * vm_stop(void *data)
./smartshell/vmware_daemon/vmware_daemon.c-2195-{
./smartshell/vmware_daemon/vmware_daemon.c-2196-	int count = 0;
./smartshell/vmware_daemon/vmware_daemon.c-2197-	char address[512];
./smartshell/vmware_daemon/vmware_daemon.c-2198-	int ret = 0, found = 0;
./smartshell/vmware_daemon/vmware_daemon.c-2199-	vm_stop_data_t *vsd;
./smartshell/vmware_daemon/vmware_daemon.c-2200-	vsd = (vm_stop_data_t *)data;
./smartshell/vmware_daemon/vmware_daemon.c-2201-
./smartshell/vmware_daemon/vmware_daemon.c-2202-	struct pool_stat *stat;
./smartshell/vmware_daemon/vmware_daemon.c:2203:	struct apppool *pool;
./smartshell/vmware_daemon/vmware_daemon.c-2204-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_daemon.c-2205-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2206-	struct vcenter *vcenter;
./smartshell/vmware_daemon/vmware_daemon.c-2207-
./smartshell/vmware_daemon/vmware_daemon.c-2208-	DP("==func:%s\n", __func__);
./smartshell/vmware_daemon/vmware_daemon.c-2209-
./smartshell/vmware_daemon/vmware_daemon.c-2210-	stat = vsd->pool_stat;
./smartshell/vmware_daemon/vmware_daemon.c:2211:	if ((pool = vsd->pool) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:2212:		DP("ERROR: func:%s line:%d pool is NULL!\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2213-		ret = -1;
./smartshell/vmware_daemon/vmware_daemon.c-2214-		goto out;
./smartshell/vmware_daemon/vmware_daemon.c-2215-	}
./smartshell/vmware_daemon/vmware_daemon.c-2216-
./smartshell/vmware_daemon/vmware_daemon.c-2217-	/* find rserver */
./smartshell/vmware_daemon/vmware_daemon.c:2218:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2219-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-2220-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-2221-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-2222-		}	
./smartshell/vmware_daemon/vmware_daemon.c-2223-		if (strcmp(address, vsd->rsname) != 0) {
./smartshell/vmware_daemon/vmware_daemon.c-2224-			continue;
./smartshell/vmware_daemon/vmware_daemon.c-2225-		}
./smartshell/vmware_daemon/vmware_daemon.c-2226-		found = 1;
./smartshell/vmware_daemon/vmware_daemon.c-2227-		break;
./smartshell/vmware_daemon/vmware_daemon.c-2228-	}
--
./smartshell/vmware_daemon/vmware_daemon.c-2246-			break;
./smartshell/vmware_daemon/vmware_daemon.c-2247-		}
./smartshell/vmware_daemon/vmware_daemon.c-2248-	}
./smartshell/vmware_daemon/vmware_daemon.c-2249-
./smartshell/vmware_daemon/vmware_daemon.c-2250-	DP("func:%s line:%d found:%d\n", __func__, __LINE__, found);
./smartshell/vmware_daemon/vmware_daemon.c-2251-	while(count < 3) {
./smartshell/vmware_daemon/vmware_daemon.c-2252-		DP("func:%s line:%d 第[%d]次停止 rs:[%s]\n", __func__, __LINE__, count + 1, address);
./smartshell/vmware_daemon/vmware_daemon.c-2253-		if (count > 0) {
./smartshell/vmware_daemon/vmware_daemon.c-2254-			usleep(count*VMWARE_MIN_RETRY_INTERVAL);
./smartshell/vmware_daemon/vmware_daemon.c-2255-		}
./smartshell/vmware_daemon/vmware_daemon.c:2256:		if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VMWARE)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2257-			/* vmware */
./smartshell/vmware_daemon/vmware_daemon.c:2258:			ret =  vmware_stop(vsd->pool_stat, pool, rs);
./smartshell/vmware_daemon/vmware_daemon.c:2259:		} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_XENSERVER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2260-			/* xenserver */
./smartshell/vmware_daemon/vmware_daemon.c:2261:			ret = xenserver_stop(vsd->pool_stat, pool, rs, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c:2262:		} else if (strcmp(pool->vmtype, ELASTIC_POOL_TYPE_VCENTER)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2263-			/* vcenter */
./smartshell/vmware_daemon/vmware_daemon.c:2264:			ret = vcenter_stop(vsd->pool_stat, pool, rs, vcenter);
./smartshell/vmware_daemon/vmware_daemon.c-2265-		}
./smartshell/vmware_daemon/vmware_daemon.c-2266-		if (!ret) {
./smartshell/vmware_daemon/vmware_daemon.c-2267-			/* stop ok! */
./smartshell/vmware_daemon/vmware_daemon.c-2268-			break;
./smartshell/vmware_daemon/vmware_daemon.c-2269-		}
./smartshell/vmware_daemon/vmware_daemon.c-2270-		count++;
./smartshell/vmware_daemon/vmware_daemon.c-2271-	}
./smartshell/vmware_daemon/vmware_daemon.c-2272-
./smartshell/vmware_daemon/vmware_daemon.c-2273-	reset_timer(stat);
./smartshell/vmware_daemon/vmware_daemon.c-2274-	if (!ret) {
--
./smartshell/vmware_daemon/vmware_daemon.c-2284-		if (++vmx_stat->retry > VMWARE_MAX_RETRY) {
./smartshell/vmware_daemon/vmware_daemon.c-2285-			vmx_stat->silence = VMWARE_MAX_SILENCE;
./smartshell/vmware_daemon/vmware_daemon.c-2286-		}
./smartshell/vmware_daemon/vmware_daemon.c-2287-	}
./smartshell/vmware_daemon/vmware_daemon.c-2288-
./smartshell/vmware_daemon/vmware_daemon.c-2289-
./smartshell/vmware_daemon/vmware_daemon.c-2290-out:
./smartshell/vmware_daemon/vmware_daemon.c-2291-	//pthread_mutex_unlock(&vsd->pool_stat->mutex);
./smartshell/vmware_daemon/vmware_daemon.c-2292-
./smartshell/vmware_daemon/vmware_daemon.c-2293-	/** 释放apppool_copy的内存 */
./smartshell/vmware_daemon/vmware_daemon.c:2294:	if (vsd->pool != NULL) {
./smartshell/vmware_daemon/vmware_daemon.c:2295:		apppool_free(&vsd->pool->list);
./smartshell/vmware_daemon/vmware_daemon.c:2296:		vsd->pool = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2297-	}
./smartshell/vmware_daemon/vmware_daemon.c-2298-
./smartshell/vmware_daemon/vmware_daemon.c-2299-	return NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2300-}
./smartshell/vmware_daemon/vmware_daemon.c-2301-
./smartshell/vmware_daemon/vmware_daemon.c-2302-static int process_request(char *buff)
./smartshell/vmware_daemon/vmware_daemon.c-2303-{
./smartshell/vmware_daemon/vmware_daemon.c-2304-	char poolname[1024] = {0}, op[1024] = {0}, tmp[1024] = {};
./smartshell/vmware_daemon/vmware_daemon.c-2305-	struct vs_stat *vs_stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2306-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vmware_daemon.c:2307:	struct apppool *pool = NULL;
./smartshell/vmware_daemon/vmware_daemon.c-2308-	int found  = 0;
./smartshell/vmware_daemon/vmware_daemon.c-2309-
./smartshell/vmware_daemon/vmware_daemon.c:2310:	/** buff: stop pool vmxpath **/
./smartshell/vmware_daemon/vmware_daemon.c:2311:	/** changed to stop pool rs->address **/
./smartshell/vmware_daemon/vmware_daemon.c-2312-	DP("%s : buff = %s\n", __func__, buff);
./smartshell/vmware_daemon/vmware_daemon.c-2313-
./smartshell/vmware_daemon/vmware_daemon.c-2314-	sscanf(buff, "%s %s %s", op, poolname, tmp); /** tmp rs->address **/
./smartshell/vmware_daemon/vmware_daemon.c-2315-
./smartshell/vmware_daemon/vmware_daemon.c-2316-	/** get stat **/
./smartshell/vmware_daemon/vmware_daemon.c-2317-	list_for_each_entry(vs_stat, &statistics, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2318-		list_for_each_entry(stat, &vs_stat->pool_head, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2319-			if (strcmp(stat->name, poolname)==0) {
./smartshell/vmware_daemon/vmware_daemon.c-2320-				found =1; 
./smartshell/vmware_daemon/vmware_daemon.c-2321-				break;
--
./smartshell/vmware_daemon/vmware_daemon.c-2339-		}
./smartshell/vmware_daemon/vmware_daemon.c-2340-
./smartshell/vmware_daemon/vmware_daemon.c-2341-		strcpy(vdata->poolname, poolname);
./smartshell/vmware_daemon/vmware_daemon.c-2342-		strcpy(vdata->rsname, tmp);
./smartshell/vmware_daemon/vmware_daemon.c-2343-		vdata->pool_stat = stat;
./smartshell/vmware_daemon/vmware_daemon.c-2344-
./smartshell/vmware_daemon/vmware_daemon.c-2345-		if (list_empty(&pool_queue)) {
./smartshell/vmware_daemon/vmware_daemon.c-2346-			DP("@@@@@@@@@@@@@@@@ERROR: func:%s line:%d pool_queue is NULL!\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2347-		}
./smartshell/vmware_daemon/vmware_daemon.c-2348-
./smartshell/vmware_daemon/vmware_daemon.c:2349:		if ((pool = apppool_search(&pool_queue, poolname)) == NULL) {
./smartshell/vmware_daemon/vmware_daemon.c-2350-			free(vdata);
./smartshell/vmware_daemon/vmware_daemon.c-2351-			free(th);
./smartshell/vmware_daemon/vmware_daemon.c-2352-			return -1;
./smartshell/vmware_daemon/vmware_daemon.c-2353-		}
./smartshell/vmware_daemon/vmware_daemon.c:2354:		apppool_copy(pool, &vdata->pool);
./smartshell/vmware_daemon/vmware_daemon.c-2355-
./smartshell/vmware_daemon/vmware_daemon.c-2356-		th->data = vdata;
./smartshell/vmware_daemon/vmware_daemon.c-2357-		th->handler = vm_stop;
./smartshell/vmware_daemon/vmware_daemon.c-2358-		pthread_execute((void *)th);
./smartshell/vmware_daemon/vmware_daemon.c-2359-	}
./smartshell/vmware_daemon/vmware_daemon.c-2360-
./smartshell/vmware_daemon/vmware_daemon.c-2361-	DP("func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vmware_daemon.c-2362-	return 0;
./smartshell/vmware_daemon/vmware_daemon.c-2363-}
./smartshell/vmware_daemon/vmware_daemon.c-2364-
--
./smartshell/vmware_daemon/vmware_daemon.c-2571-		DP("刷新结束!\n");
./smartshell/vmware_daemon/vmware_daemon.c-2572-
./smartshell/vmware_daemon/vmware_daemon.c-2573-
./smartshell/vmware_daemon/vmware_daemon.c-2574-		//DP("\n=%ld==========%s loop===\n", i,  __func__);
./smartshell/vmware_daemon/vmware_daemon.c-2575-
./smartshell/vmware_daemon/vmware_daemon.c-2576-		time_t t0  = time((time_t *)NULL);
./smartshell/vmware_daemon/vmware_daemon.c-2577-		cli_send_flush_state_command("vserver");
./smartshell/vmware_daemon/vmware_daemon.c-2578-		DP("flush vserver use :%d\n", (int)time((time_t *)NULL) - (int)t0);
./smartshell/vmware_daemon/vmware_daemon.c-2579-		t0 = time((time_t *)NULL);
./smartshell/vmware_daemon/vmware_daemon.c-2580-		cli_send_flush_state_command("apppool");
./smartshell/vmware_daemon/vmware_daemon.c:2581:		DP("flush pool use :%d\n", (int)time((time_t *)NULL) - (int)t0);
./smartshell/vmware_daemon/vmware_daemon.c-2582-		cli_send_flush_state_command("rule");
./smartshell/vmware_daemon/vmware_daemon.c-2583-		DP("flush rule use: %d\n", (int)time((time_t *)NULL) - (int)t0);
./smartshell/vmware_daemon/vmware_daemon.c-2584-
./smartshell/vmware_daemon/vmware_daemon.c-2585-
./smartshell/vmware_daemon/vmware_daemon.c-2586-
./smartshell/vmware_daemon/vmware_daemon.c-2587-		//cli_send_flush_state_command("vcenter");
./smartshell/vmware_daemon/vmware_daemon.c-2588-
./smartshell/vmware_daemon/vmware_daemon.c-2589-
./smartshell/vmware_daemon/vmware_daemon.c-2590-		/* free old */
./smartshell/vmware_daemon/vmware_daemon.c-2591-		if (!list_empty(&vs_queue)) {
--
./smartshell/vmware_daemon/vmware_daemon.c-2613-
./smartshell/vmware_daemon/vmware_daemon.c-2614-		/* FOR Debug: printf vs_stat */
./smartshell/vmware_daemon/vmware_daemon.c-2615-		vs_stat_print();
./smartshell/vmware_daemon/vmware_daemon.c-2616-
./smartshell/vmware_daemon/vmware_daemon.c-2617-		list_for_each_entry(vs, &vs_queue, list) {
./smartshell/vmware_daemon/vmware_daemon.c-2618-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_daemon.c-2619-			if (inet_sockaddr2address(&vs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_daemon.c-2620-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2621-			}
./smartshell/vmware_daemon/vmware_daemon.c-2622-			if ((address[0] == '\0') ||
./smartshell/vmware_daemon/vmware_daemon.c:2623:					(vs->pool[0] == 0 && strcmp(vs->contentswitch, "on")!=0) ||
./smartshell/vmware_daemon/vmware_daemon.c-2624-					strcmp(vs->enable, "off") == 0 ||
./smartshell/vmware_daemon/vmware_daemon.c-2625-					strcmp(vs->vm_enable, "off") == 0 )
./smartshell/vmware_daemon/vmware_daemon.c-2626-				continue;
./smartshell/vmware_daemon/vmware_daemon.c-2627-
./smartshell/vmware_daemon/vmware_daemon.c-2628-			/* 阀值检测 */
./smartshell/vmware_daemon/vmware_daemon.c-2629-			if ( elastic_value_valid_check(atol(vs->vm_conn_low), 
./smartshell/vmware_daemon/vmware_daemon.c-2630-						atol(vs->vm_conn_high), atol(vs->vm_newconn_low), 
./smartshell/vmware_daemon/vmware_daemon.c-2631-						atol(vs->vm_newconn_high), atol(vs->vm_band_low), 
./smartshell/vmware_daemon/vmware_daemon.c-2632-						atol(vs->vm_band_high)) == VMWARE_VALUE_INVALID) {
./smartshell/vmware_daemon/vmware_daemon.c-2633-				DP("Error: vs:%s 阀值检测无效!\n", vs->name);
--
./smartshell/vmware_daemon/vmware_if.c-19-extern void vmware_stat_data_free(void *data)
./smartshell/vmware_daemon/vmware_if.c-20-{
./smartshell/vmware_daemon/vmware_if.c-21-	struct vmware_stat *p;
./smartshell/vmware_daemon/vmware_if.c-22-	p = (struct vmware_stat *)data;	
./smartshell/vmware_daemon/vmware_if.c-23-	if (p != NULL) {
./smartshell/vmware_daemon/vmware_if.c-24-		free(p);
./smartshell/vmware_daemon/vmware_if.c-25-		data = NULL;
./smartshell/vmware_daemon/vmware_if.c-26-	}
./smartshell/vmware_daemon/vmware_if.c-27-}
./smartshell/vmware_daemon/vmware_if.c-28-
./smartshell/vmware_daemon/vmware_if.c:29:extern int vmware_check_pool_stat_need_update(struct apppool  *pool, struct pool_stat *stat) 
./smartshell/vmware_daemon/vmware_if.c-30-{
./smartshell/vmware_daemon/vmware_if.c-31-	char address[512];
./smartshell/vmware_daemon/vmware_if.c-32-	int ret = 0;
./smartshell/vmware_daemon/vmware_if.c-33-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_if.c-34-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vmware_if.c-35-
./smartshell/vmware_daemon/vmware_if.c:36:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_if.c-37-		if (strlen(rs->vmxpath)) {
./smartshell/vmware_daemon/vmware_if.c-38-			DP("func:%s LINE:%d vmxpath:%s\n", __func__, __LINE__, rs->vmxpath);
./smartshell/vmware_daemon/vmware_if.c-39-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_if.c-40-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_if.c-41-				continue;
./smartshell/vmware_daemon/vmware_if.c-42-			}
./smartshell/vmware_daemon/vmware_if.c-43-			vmx_stat = vmx_stat_search(stat, address);
./smartshell/vmware_daemon/vmware_if.c-44-			if (vmx_stat== NULL) {
./smartshell/vmware_daemon/vmware_if.c-45-				if (vmx_stat_add(stat, rs) == NULL) {
./smartshell/vmware_daemon/vmware_if.c-46-					ret = -1;
--
./smartshell/vmware_daemon/vmware_if.c-131-		Vix_FreeBuffer(loc);
./smartshell/vmware_daemon/vmware_if.c-132-		return;
./smartshell/vmware_daemon/vmware_if.c-133-
./smartshell/vmware_daemon/vmware_if.c-134-	} else {
./smartshell/vmware_daemon/vmware_if.c-135-		DP("GetProperties failed (%s)\n",
./smartshell/vmware_daemon/vmware_if.c-136-					Vix_GetErrorText(err, NULL));
./smartshell/vmware_daemon/vmware_if.c-137-	}
./smartshell/vmware_daemon/vmware_if.c-138-}
./smartshell/vmware_daemon/vmware_if.c-139-
./smartshell/vmware_daemon/vmware_if.c-140-/** on > 0 start , on <= 0 down **/
./smartshell/vmware_daemon/vmware_if.c:141:extern int vmware_on_off(struct apppool *pool, char *path, int on)
./smartshell/vmware_daemon/vmware_if.c-142-{
./smartshell/vmware_daemon/vmware_if.c-143-	int ret;
./smartshell/vmware_daemon/vmware_if.c-144-	VixHandle hostHandle = VIX_INVALID_HANDLE;
./smartshell/vmware_daemon/vmware_if.c-145-
./smartshell/vmware_daemon/vmware_if.c:146:	hostHandle = vmware_connect(pool->vmaddress, 
./smartshell/vmware_daemon/vmware_if.c:147:				pool->vmusername, pool->vmpassword);
./smartshell/vmware_daemon/vmware_if.c-148-	if (hostHandle == VIX_INVALID_HANDLE) {
./smartshell/vmware_daemon/vmware_if.c-149-		DP("vmware server connect failed\n");
./smartshell/vmware_daemon/vmware_if.c-150-		return -1;
./smartshell/vmware_daemon/vmware_if.c-151-	}
./smartshell/vmware_daemon/vmware_if.c-152-	if (on > 0) {
./smartshell/vmware_daemon/vmware_if.c-153-		ret = vmware_poweron_vmx(hostHandle, path);
./smartshell/vmware_daemon/vmware_if.c-154-		if (ret < 0)
./smartshell/vmware_daemon/vmware_if.c-155-		  DP("poweron vmware machine %s failed\n", path);
./smartshell/vmware_daemon/vmware_if.c-156-		else 
./smartshell/vmware_daemon/vmware_if.c-157-		  DP("poweron vmware machine %s ok\n", path);
--
./smartshell/vmware_daemon/vmware_if.c-160-		if (ret < 0)
./smartshell/vmware_daemon/vmware_if.c-161-		  DP("poweroff vmware machine %s failed\n", path);
./smartshell/vmware_daemon/vmware_if.c-162-		else
./smartshell/vmware_daemon/vmware_if.c-163-		  DP("poweroff vmware machine %s ok\n", path);
./smartshell/vmware_daemon/vmware_if.c-164-	}
./smartshell/vmware_daemon/vmware_if.c-165-
./smartshell/vmware_daemon/vmware_if.c-166-	vmware_disconnect(hostHandle);
./smartshell/vmware_daemon/vmware_if.c-167-	return ret;
./smartshell/vmware_daemon/vmware_if.c-168-}
./smartshell/vmware_daemon/vmware_if.c-169-
./smartshell/vmware_daemon/vmware_if.c:170:extern int vmware_stop(struct pool_stat *stat, struct apppool *pool, struct rserver *rs)
./smartshell/vmware_daemon/vmware_if.c-171-{
./smartshell/vmware_daemon/vmware_if.c-172-	int ret = 0;
./smartshell/vmware_daemon/vmware_if.c-173-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vmware_if.c-174-
./smartshell/vmware_daemon/vmware_if.c-175-	DP("enter =================%s\n", __func__);
./smartshell/vmware_daemon/vmware_if.c-176-
./smartshell/vmware_daemon/vmware_if.c:177:	ret = vmware_on_off(pool, rs->vmxpath, 0);
./smartshell/vmware_daemon/vmware_if.c-178-	reset_timer(stat);
./smartshell/vmware_daemon/vmware_if.c-179-	if (ret < 0) {
./smartshell/vmware_daemon/vmware_if.c-180-		/*TODO log messge here */
./smartshell/vmware_daemon/vmware_if.c-181-		return -1;
./smartshell/vmware_daemon/vmware_if.c-182-	} else {
./smartshell/vmware_daemon/vmware_if.c-183-		vmx_stat = vmx_stat_search_path(stat, rs->vmxpath);
./smartshell/vmware_daemon/vmware_if.c-184-		if (vmx_stat) {
./smartshell/vmware_daemon/vmware_if.c-185-			vmx_stat->mode = MODE_DOWN;
./smartshell/vmware_daemon/vmware_if.c-186-		}
./smartshell/vmware_daemon/vmware_if.c-187-		stat->mode = MODE_NONE;
--
./smartshell/vmware_daemon/vmware_if.c-227-		vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vmware_if.c-228-		return -1;
./smartshell/vmware_daemon/vmware_if.c-229-	}
./smartshell/vmware_daemon/vmware_if.c-230-
./smartshell/vmware_daemon/vmware_if.c-231-	DP("poweroff vmware machine %s ok\n", vmware_stat->path);
./smartshell/vmware_daemon/vmware_if.c-232-	vmx_stat->mode = MODE_DOWN;
./smartshell/vmware_daemon/vmware_if.c-233-	stat->mode = MODE_NONE;
./smartshell/vmware_daemon/vmware_if.c-234-	return 0;
./smartshell/vmware_daemon/vmware_if.c-235-}
./smartshell/vmware_daemon/vmware_if.c-236-
./smartshell/vmware_daemon/vmware_if.c:237:extern int vmware_init_all_vms_state(struct pool_stat *stat, struct apppool *pool, void *cb)
./smartshell/vmware_daemon/vmware_if.c-238-{
./smartshell/vmware_daemon/vmware_if.c-239-	int ret;
./smartshell/vmware_daemon/vmware_if.c-240-	VixHandle hostHandle;
./smartshell/vmware_daemon/vmware_if.c-241-	struct find_cb_s *cb_data;
./smartshell/vmware_daemon/vmware_if.c-242-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_if.c-243-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vmware_if.c-244-	char address[512];
./smartshell/vmware_daemon/vmware_if.c-245-
./smartshell/vmware_daemon/vmware_if.c-246-	cb_data = (struct find_cb_s *)cb;
./smartshell/vmware_daemon/vmware_if.c-247-
./smartshell/vmware_daemon/vmware_if.c-248-	DP("==func:%s address:%s user:%s pwd:%s\n", 
./smartshell/vmware_daemon/vmware_if.c:249:				__func__, pool->vmaddress, pool->vmusername, pool->vmpassword);
./smartshell/vmware_daemon/vmware_if.c-250-
./smartshell/vmware_daemon/vmware_if.c-251-	DP("will connect!\n");
./smartshell/vmware_daemon/vmware_if.c:252:	hostHandle = vmware_connect(pool->vmaddress, pool->vmusername, pool->vmpassword);
./smartshell/vmware_daemon/vmware_if.c-253-	DP("connect ok!\n");
./smartshell/vmware_daemon/vmware_if.c:254:	hostHandle = vmware_connect(pool->vmaddress, pool->vmusername, pool->vmpassword);
./smartshell/vmware_daemon/vmware_if.c-255-	if (hostHandle==VIX_INVALID_HANDLE) {
./smartshell/vmware_daemon/vmware_if.c-256-		DP("vmware connect failed!\n");
./smartshell/vmware_daemon/vmware_if.c-257-		return -1;
./smartshell/vmware_daemon/vmware_if.c-258-	}
./smartshell/vmware_daemon/vmware_if.c-259-
./smartshell/vmware_daemon/vmware_if.c-260-	ret = vmware_get_running_vms(hostHandle, find_cb/**callback**/,
./smartshell/vmware_daemon/vmware_if.c-261-				(void *)cb_data/**user data**/, &cb_data->done);
./smartshell/vmware_daemon/vmware_if.c-262-
./smartshell/vmware_daemon/vmware_if.c-263-	if (ret < 0 || cb_data->fail) {
./smartshell/vmware_daemon/vmware_if.c-264-		DP("\nmware running failed\n");
./smartshell/vmware_daemon/vmware_if.c-265-		goto end; 
./smartshell/vmware_daemon/vmware_if.c-266-	}    
./smartshell/vmware_daemon/vmware_if.c-267-
./smartshell/vmware_daemon/vmware_if.c:268:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_if.c-269-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_if.c-270-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_if.c-271-			continue;
./smartshell/vmware_daemon/vmware_if.c-272-		}
./smartshell/vmware_daemon/vmware_if.c-273-		if (strlen(rs->vmxpath) && strlen(address)) {
./smartshell/vmware_daemon/vmware_if.c-274-			/** stat <==> pol_stat **/
./smartshell/vmware_daemon/vmware_if.c-275-			vmx_stat = vmx_stat_search(stat, address);
./smartshell/vmware_daemon/vmware_if.c-276-			if (!vmx_stat) {
./smartshell/vmware_daemon/vmware_if.c-277-				DP("vmx_stat_search rs:%s failed\n", vmx_stat->address);
./smartshell/vmware_daemon/vmware_if.c-278-				goto end; 
--
./smartshell/vmware_daemon/vmware_if.c-301-	}
./smartshell/vmware_daemon/vmware_if.c-302-
./smartshell/vmware_daemon/vmware_if.c-303-	vmware_stat = (struct vmware_stat *)(*data);
./smartshell/vmware_daemon/vmware_if.c-304-	if ( strlen(rs->vmxpath)) {
./smartshell/vmware_daemon/vmware_if.c-305-		strcpy(vmware_stat->path, rs->vmxpath);
./smartshell/vmware_daemon/vmware_if.c-306-	}
./smartshell/vmware_daemon/vmware_if.c-307-
./smartshell/vmware_daemon/vmware_if.c-308-	return 0;
./smartshell/vmware_daemon/vmware_if.c-309-}
./smartshell/vmware_daemon/vmware_if.c-310-
./smartshell/vmware_daemon/vmware_if.c:311:extern int vmware_stat_init(struct pool_stat *stat, struct apppool *pool)
./smartshell/vmware_daemon/vmware_if.c-312-{
./smartshell/vmware_daemon/vmware_if.c-313-	struct rserver *rs;
./smartshell/vmware_daemon/vmware_if.c-314-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/vmware_if.c-315-	int ret = 0, num = 0;
./smartshell/vmware_daemon/vmware_if.c-316-	char address[512]; 
./smartshell/vmware_daemon/vmware_if.c-317-
./smartshell/vmware_daemon/vmware_if.c:318:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vmware_if.c-319-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vmware_if.c-320-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vmware_if.c-321-			continue;;
./smartshell/vmware_daemon/vmware_if.c-322-		}
./smartshell/vmware_daemon/vmware_if.c-323-		if (strlen(rs->vmxpath) && strlen(address) && strcmp(rs->enable, "off")!= 0) {
./smartshell/vmware_daemon/vmware_if.c-324-			vmx_stat = vmx_stat_add(stat, rs);
./smartshell/vmware_daemon/vmware_if.c-325-			if (!vmx_stat) {
./smartshell/vmware_daemon/vmware_if.c-326-				vmx_stat_clear(stat);
./smartshell/vmware_daemon/vmware_if.c-327-				DP("vmware_stat_init over!\n");
./smartshell/vmware_daemon/vmware_if.c-328-				ret = -1;
--
./smartshell/vmware_daemon/vmware_if.c-333-		}
./smartshell/vmware_daemon/vmware_if.c-334-	}
./smartshell/vmware_daemon/vmware_if.c-335-
./smartshell/vmware_daemon/vmware_if.c-336-	if (!num) {
./smartshell/vmware_daemon/vmware_if.c-337-		ret = 0;
./smartshell/vmware_daemon/vmware_if.c-338-		goto end;
./smartshell/vmware_daemon/vmware_if.c-339-	}
./smartshell/vmware_daemon/vmware_if.c-340-
./smartshell/vmware_daemon/vmware_if.c-341-	struct find_cb_s cb_data;
./smartshell/vmware_daemon/vmware_if.c-342-	cb_data.stat = stat; /** stat <==> pool_stat **/
./smartshell/vmware_daemon/vmware_if.c:343:	cb_data.pool = pool;
./smartshell/vmware_daemon/vmware_if.c-344-	cb_data.fail = 0; /** don't use **/
./smartshell/vmware_daemon/vmware_if.c-345-	cb_data.done = 0; /** don't use **/
./smartshell/vmware_daemon/vmware_if.c-346-	
./smartshell/vmware_daemon/vmware_if.c:347:	ret = vmware_init_all_vms_state(stat, pool, &cb_data);
./smartshell/vmware_daemon/vmware_if.c-348-	adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vmware_if.c-349-end:
./smartshell/vmware_daemon/vmware_if.c-350-	return ret;
./smartshell/vmware_daemon/vmware_if.c-351-}
./smartshell/vmware_daemon/vmware_if.c-352-
./smartshell/vmware_daemon/vmware_if.c-353-
--
./smartshell/vmware_daemon/xenserver_if.c-26-	p = (struct xenserver_stat *)data;	
./smartshell/vmware_daemon/xenserver_if.c-27-	if (p != NULL) {
./smartshell/vmware_daemon/xenserver_if.c-28-		free(p);
./smartshell/vmware_daemon/xenserver_if.c-29-		data = NULL;
./smartshell/vmware_daemon/xenserver_if.c-30-	}
./smartshell/vmware_daemon/xenserver_if.c-31-}
./smartshell/vmware_daemon/xenserver_if.c-32-
./smartshell/vmware_daemon/xenserver_if.c-33-/* 添加pool中有, pool_stat中没有的rs, 手动停止的不添加;
./smartshell/vmware_daemon/xenserver_if.c-34- * 删除手动停止的vmx;
./smartshell/vmware_daemon/xenserver_if.c-35- **/
./smartshell/vmware_daemon/xenserver_if.c:36:extern int xenserver_check_pool_stat_need_update(struct apppool *pool, struct pool_stat *stat)
./smartshell/vmware_daemon/xenserver_if.c-37-{
./smartshell/vmware_daemon/xenserver_if.c-38-	struct rserver *rs;
./smartshell/vmware_daemon/xenserver_if.c-39-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/xenserver_if.c-40-	char address[512];
./smartshell/vmware_daemon/xenserver_if.c-41-	int ret = -1;
./smartshell/vmware_daemon/xenserver_if.c-42-
./smartshell/vmware_daemon/xenserver_if.c-43-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/xenserver_if.c:44:	if (atol(pool->vminterval) != stat->vm_interval) {
./smartshell/vmware_daemon/xenserver_if.c:45:		stat->vm_interval = atol(pool->vminterval);
./smartshell/vmware_daemon/xenserver_if.c-46-		ret = 1;
./smartshell/vmware_daemon/xenserver_if.c-47-	}
./smartshell/vmware_daemon/xenserver_if.c-48-
./smartshell/vmware_daemon/xenserver_if.c:49:	if (atol(pool->vmcount) != stat->vm_count) {
./smartshell/vmware_daemon/xenserver_if.c:50:		stat->vm_count = atol(pool->vmcount);
./smartshell/vmware_daemon/xenserver_if.c-51-		ret = 1;
./smartshell/vmware_daemon/xenserver_if.c-52-
./smartshell/vmware_daemon/xenserver_if.c-53-	}
./smartshell/vmware_daemon/xenserver_if.c-54-
./smartshell/vmware_daemon/xenserver_if.c:55:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-56-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-57-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-58-			continue;
./smartshell/vmware_daemon/xenserver_if.c-59-		}
./smartshell/vmware_daemon/xenserver_if.c-60-		if (rs->uuid[0] != 0) {
./smartshell/vmware_daemon/xenserver_if.c-61-			if (strcmp(rs->enable, "on") == 0) {
./smartshell/vmware_daemon/xenserver_if.c-62-				if ((vmx_stat = vmx_stat_search(stat, address)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-63-					if (vmx_stat_add(stat, rs) != NULL) {
./smartshell/vmware_daemon/xenserver_if.c-64-						ret = 1;
./smartshell/vmware_daemon/xenserver_if.c-65-					}
--
./smartshell/vmware_daemon/xenserver_if.c-92-	DP("==func:%s uuid:%s\n", __func__, uuid);
./smartshell/vmware_daemon/xenserver_if.c-93-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-94-		xenserver_stat = (struct xenserver_stat *)vmx_stat->data;
./smartshell/vmware_daemon/xenserver_if.c-95-		if (!strcmp(uuid, xenserver_stat->uuid))
./smartshell/vmware_daemon/xenserver_if.c-96-			return vmx_stat;
./smartshell/vmware_daemon/xenserver_if.c-97-	}
./smartshell/vmware_daemon/xenserver_if.c-98-	return NULL;
./smartshell/vmware_daemon/xenserver_if.c-99-}
./smartshell/vmware_daemon/xenserver_if.c-100-
./smartshell/vmware_daemon/xenserver_if.c-101-/** on > 0 start , on <= 0 down **/
./smartshell/vmware_daemon/xenserver_if.c:102:extern int xenserver_on_off(struct apppool *pool, char *uuid, int on, struct vcenter *vcenter)
./smartshell/vmware_daemon/xenserver_if.c-103-{
./smartshell/vmware_daemon/xenserver_if.c-104-	int ret = 0;
./smartshell/vmware_daemon/xenserver_if.c-105-	char url[512] = {0};
./smartshell/vmware_daemon/xenserver_if.c-106-	char tmp[BUFSIZ] = {0};
./smartshell/vmware_daemon/xenserver_if.c-107-
./smartshell/vmware_daemon/xenserver_if.c-108-	base64_decode((uint8_t*)tmp, vcenter->password, BUFSIZ);
./smartshell/vmware_daemon/xenserver_if.c-109-
./smartshell/vmware_daemon/xenserver_if.c-110-	snprintf(url, sizeof(url) - 1, "https://%s",vcenter->server);
./smartshell/vmware_daemon/xenserver_if.c-111-	DP("### func:%s line:%d url:%s user:%s pwd:%s uuid:%s", 
./smartshell/vmware_daemon/xenserver_if.c-112-			__func__, __LINE__, url, vcenter->username, /*vcenter->password*/tmp, uuid);
--
./smartshell/vmware_daemon/xenserver_if.c-132-		else {
./smartshell/vmware_daemon/xenserver_if.c-133-			DP("poweroff xenserver machine %s ok\n", uuid);
./smartshell/vmware_daemon/xenserver_if.c-134-		}
./smartshell/vmware_daemon/xenserver_if.c-135-	}
./smartshell/vmware_daemon/xenserver_if.c-136-
./smartshell/vmware_daemon/xenserver_if.c-137-	return ret;
./smartshell/vmware_daemon/xenserver_if.c-138-}
./smartshell/vmware_daemon/xenserver_if.c-139-
./smartshell/vmware_daemon/xenserver_if.c-140-extern int xenserver_stop (
./smartshell/vmware_daemon/xenserver_if.c-141-		struct pool_stat *stat, 
./smartshell/vmware_daemon/xenserver_if.c:142:		struct apppool *pool, 
./smartshell/vmware_daemon/xenserver_if.c-143-		struct rserver *rs, 
./smartshell/vmware_daemon/xenserver_if.c-144-		struct vcenter *vcenter )
./smartshell/vmware_daemon/xenserver_if.c-145-{
./smartshell/vmware_daemon/xenserver_if.c-146-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/xenserver_if.c-147-	DP("enter =================%s\n", __func__);
./smartshell/vmware_daemon/xenserver_if.c-148-	if ((vmx_stat = vmx_stat_search_uuid(stat, rs->uuid)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-149-		return -1;
./smartshell/vmware_daemon/xenserver_if.c-150-	}
./smartshell/vmware_daemon/xenserver_if.c-151-
./smartshell/vmware_daemon/xenserver_if.c:152:	return xenserver_on_off(pool, rs->uuid, 0, vcenter);
./smartshell/vmware_daemon/xenserver_if.c-153-}
./smartshell/vmware_daemon/xenserver_if.c-154-
./smartshell/vmware_daemon/xenserver_if.c-155-extern int xenserver_update_private_data(struct vmx_stat *vmx_stat, struct rserver *rs)
./smartshell/vmware_daemon/xenserver_if.c-156-{
./smartshell/vmware_daemon/xenserver_if.c-157-	struct xenserver_stat *xenserver_stat;
./smartshell/vmware_daemon/xenserver_if.c-158-	xenserver_stat = (struct xenserver_stat *)vmx_stat->data;
./smartshell/vmware_daemon/xenserver_if.c-159-	if ( strcmp(xenserver_stat->uuid, rs->uuid) != 0 ) {
./smartshell/vmware_daemon/xenserver_if.c-160-		strcpy(xenserver_stat->uuid, rs->uuid);
./smartshell/vmware_daemon/xenserver_if.c-161-		return 1;
./smartshell/vmware_daemon/xenserver_if.c-162-	}
--
./smartshell/vmware_daemon/xenserver_if.c-206-	for (vm=vms_head; vm!= NULL; vm=vm->next) {
./smartshell/vmware_daemon/xenserver_if.c-207-		DP("vm-uuid:%s state:%d\n", vm->uuid, vm->power_state);
./smartshell/vmware_daemon/xenserver_if.c-208-	}
./smartshell/vmware_daemon/xenserver_if.c-209-	DP("==============end==================\n");
./smartshell/vmware_daemon/xenserver_if.c-210-}
./smartshell/vmware_daemon/xenserver_if.c-211-
./smartshell/vmware_daemon/xenserver_if.c-212-
./smartshell/vmware_daemon/xenserver_if.c-213-/** TODO: now **/
./smartshell/vmware_daemon/xenserver_if.c-214-extern int xenserver_init_all_vms_state(
./smartshell/vmware_daemon/xenserver_if.c-215-		struct pool_stat *stat, 
./smartshell/vmware_daemon/xenserver_if.c:216:		struct apppool *pool, 
./smartshell/vmware_daemon/xenserver_if.c-217-		struct list_head *vcenter_queue)
./smartshell/vmware_daemon/xenserver_if.c-218-{
./smartshell/vmware_daemon/xenserver_if.c-219-	char address[512];
./smartshell/vmware_daemon/xenserver_if.c-220-	struct rserver *rs;
./smartshell/vmware_daemon/xenserver_if.c-221-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/xenserver_if.c-222-	struct vcenter *vcenter;
./smartshell/vmware_daemon/xenserver_if.c-223-	vm_record_t *vm = NULL;
./smartshell/vmware_daemon/xenserver_if.c-224-	vm_record_t *vmp = NULL;
./smartshell/vmware_daemon/xenserver_if.c-225-
./smartshell/vmware_daemon/xenserver_if.c-226-	LIST_HEAD(result_queue);
--
./smartshell/vmware_daemon/xenserver_if.c-235-
./smartshell/vmware_daemon/xenserver_if.c-236-	struct result_node *node, *result;
./smartshell/vmware_daemon/xenserver_if.c-237-	struct result_node *node_tmp;
./smartshell/vmware_daemon/xenserver_if.c-238-	struct xenserver_stat *xenserver_stat;
./smartshell/vmware_daemon/xenserver_if.c-239-	int found = 0;
./smartshell/vmware_daemon/xenserver_if.c-240-	char url[512] = {0};
./smartshell/vmware_daemon/xenserver_if.c-241-
./smartshell/vmware_daemon/xenserver_if.c-242-	syslog(LOG_INFO, "####XXXXXXXXXXXXXXfunc:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/xenserver_if.c-243-
./smartshell/vmware_daemon/xenserver_if.c-244-	/* 1. 获取需要获取的vcenter列表 */
./smartshell/vmware_daemon/xenserver_if.c:245:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-246-		found = 0;
./smartshell/vmware_daemon/xenserver_if.c-247-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-248-			continue;
./smartshell/vmware_daemon/xenserver_if.c-249-		}
./smartshell/vmware_daemon/xenserver_if.c-250-		if ( rs->uuid[0] == 0 || address[0] == 0 || rs->rscenter[0] == 0) {
./smartshell/vmware_daemon/xenserver_if.c-251-			continue;
./smartshell/vmware_daemon/xenserver_if.c-252-		}
./smartshell/vmware_daemon/xenserver_if.c-253-		if ((vcenter = vcenter_search(vcenter_queue, rs->rscenter)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-254-			continue;
./smartshell/vmware_daemon/xenserver_if.c-255-		}
--
./smartshell/vmware_daemon/xenserver_if.c-310-					syslog(LOG_INFO, "####XXXXXXXXXXXXXXfunc:%s line:%d update vmx_stat:%s mode to %d\n", __func__, __LINE__, xenserver_stat->uuid, MODE_NONE);
./smartshell/vmware_daemon/xenserver_if.c-311-				}
./smartshell/vmware_daemon/xenserver_if.c-312-			}
./smartshell/vmware_daemon/xenserver_if.c-313-			break;
./smartshell/vmware_daemon/xenserver_if.c-314-		}
./smartshell/vmware_daemon/xenserver_if.c-315-	}
./smartshell/vmware_daemon/xenserver_if.c-316-
./smartshell/vmware_daemon/xenserver_if.c-317-	syslog(LOG_INFO, "####XXXXXXXXXXXXXXfunc:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/xenserver_if.c-318-
./smartshell/vmware_daemon/xenserver_if.c-319-	/* 关闭 enable=off的vm */
./smartshell/vmware_daemon/xenserver_if.c:320:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-321-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-322-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-323-			continue;
./smartshell/vmware_daemon/xenserver_if.c-324-		}
./smartshell/vmware_daemon/xenserver_if.c-325-		if (rs->uuid[0]!=0 && address[0]!=0) {
./smartshell/vmware_daemon/xenserver_if.c-326-			/** stat <==> pol_stat **/
./smartshell/vmware_daemon/xenserver_if.c-327-			if ((vmx_stat = vmx_stat_search(stat, address)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-328-				DP("vmx_stat_search rs:%s failed\n", address);
./smartshell/vmware_daemon/xenserver_if.c-329-				syslog(LOG_INFO, "vmx_stat_search rs:%s failed\n", address);
./smartshell/vmware_daemon/xenserver_if.c-330-				continue;
--
./smartshell/vmware_daemon/xenserver_if.c-377-}
./smartshell/vmware_daemon/xenserver_if.c-378-
./smartshell/vmware_daemon/xenserver_if.c-379-int xenserver_stat_init(
./smartshell/vmware_daemon/xenserver_if.c-380-		struct vs_stat *vs_stat, 
./smartshell/vmware_daemon/xenserver_if.c-381-		struct list_head *pool_head, 
./smartshell/vmware_daemon/xenserver_if.c-382-		struct list_head *vcenter_queue)
./smartshell/vmware_daemon/xenserver_if.c-383-{
./smartshell/vmware_daemon/xenserver_if.c-384-	char address[512];
./smartshell/vmware_daemon/xenserver_if.c-385-	int ret = 0, num = 0;
./smartshell/vmware_daemon/xenserver_if.c-386-	struct rserver *rs;
./smartshell/vmware_daemon/xenserver_if.c:387:	struct apppool *pool;
./smartshell/vmware_daemon/xenserver_if.c-388-	struct pool_stat *pool_stat;
./smartshell/vmware_daemon/xenserver_if.c-389-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/xenserver_if.c-390-
./smartshell/vmware_daemon/xenserver_if.c-391-	DP("func:%s vs_stat:%s\n", __func__, vs_stat->name);
./smartshell/vmware_daemon/xenserver_if.c:392:	list_for_each_entry(pool, pool_head, list) {
./smartshell/vmware_daemon/xenserver_if.c:393:		DP("func:%s pool:%s\n", __func__, pool->name);
./smartshell/vmware_daemon/xenserver_if.c:394:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-395-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-396-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-397-				continue;
./smartshell/vmware_daemon/xenserver_if.c-398-			}
./smartshell/vmware_daemon/xenserver_if.c:399:			DP("func:%s pool:%s rs:%s\n", __func__, pool->name, address);
./smartshell/vmware_daemon/xenserver_if.c-400-		}
./smartshell/vmware_daemon/xenserver_if.c-401-	}
./smartshell/vmware_daemon/xenserver_if.c-402-
./smartshell/vmware_daemon/xenserver_if.c:403:	list_for_each_entry(pool, pool_head, list) {
./smartshell/vmware_daemon/xenserver_if.c:404:		DP("loop pool:%s\n", pool->name);
./smartshell/vmware_daemon/xenserver_if.c-405-		/* search pool_stat */
./smartshell/vmware_daemon/xenserver_if.c:406:		if ((pool_stat = pool_stat_search(vs_stat, pool->name)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-407-			DP("func:%s line:%d pool_stat:%s NULL\n", __func__, __LINE__, pool_stat->name);
./smartshell/vmware_daemon/xenserver_if.c-408-			continue;
./smartshell/vmware_daemon/xenserver_if.c-409-		}
./smartshell/vmware_daemon/xenserver_if.c-410-
./smartshell/vmware_daemon/xenserver_if.c:411:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-412-			if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/xenserver_if.c-413-				continue;
./smartshell/vmware_daemon/xenserver_if.c-414-			}
./smartshell/vmware_daemon/xenserver_if.c-415-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-416-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-417-				continue;
./smartshell/vmware_daemon/xenserver_if.c-418-			}
./smartshell/vmware_daemon/xenserver_if.c-419-			if (rs->uuid[0] != 0 && strlen(address) && strcmp(rs->enable,"off")!=0 ) {
./smartshell/vmware_daemon/xenserver_if.c-420-				if ((vmx_stat = vmx_stat_search(pool_stat, address)) != NULL) {
./smartshell/vmware_daemon/xenserver_if.c-421-					continue;
./smartshell/vmware_daemon/xenserver_if.c-422-				}
./smartshell/vmware_daemon/xenserver_if.c-423-
./smartshell/vmware_daemon/xenserver_if.c-424-				if ((vmx_stat = vmx_stat_add(pool_stat, rs)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-425-					vmx_stat_clear(pool_stat);
./smartshell/vmware_daemon/xenserver_if.c-426-					ret = -1;
./smartshell/vmware_daemon/xenserver_if.c-427-					goto end;
./smartshell/vmware_daemon/xenserver_if.c-428-				}
./smartshell/vmware_daemon/xenserver_if.c-429-				DP("add vmx:%s\n", address);
./smartshell/vmware_daemon/xenserver_if.c-430-				++num;
./smartshell/vmware_daemon/xenserver_if.c:431:				DP("func:%s line:%d set pool:%s MODE=%d\n", __func__, __LINE__, pool_stat->name, pool_stat->mode);
./smartshell/vmware_daemon/xenserver_if.c-432-				pool_stat->mode = MODE_NONE; /* clear pool_stat MODE_NOMORE */
./smartshell/vmware_daemon/xenserver_if.c:433:				DP("func:%s line:%d set pool:%s MODE=%d\n", __func__, __LINE__, pool_stat->name, pool_stat->mode);
./smartshell/vmware_daemon/xenserver_if.c-434-			}
./smartshell/vmware_daemon/xenserver_if.c-435-		}
./smartshell/vmware_daemon/xenserver_if.c-436-
./smartshell/vmware_daemon/xenserver_if.c-437-		if (!num) {
./smartshell/vmware_daemon/xenserver_if.c-438-			ret = 0;
./smartshell/vmware_daemon/xenserver_if.c-439-			goto end;
./smartshell/vmware_daemon/xenserver_if.c-440-		}
./smartshell/vmware_daemon/xenserver_if.c-441-
./smartshell/vmware_daemon/xenserver_if.c:442:		if ((ret = xenserver_init_all_vms_state(pool_stat, pool, vcenter_queue)) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-443-			continue;
./smartshell/vmware_daemon/xenserver_if.c-444-		}
./smartshell/vmware_daemon/xenserver_if.c-445-
./smartshell/vmware_daemon/xenserver_if.c-446-		adjust_pool_stat_mode(pool_stat);
./smartshell/vmware_daemon/xenserver_if.c:447:		DP("loop %s over!\n", pool->name);
./smartshell/vmware_daemon/xenserver_if.c-448-	}
./smartshell/vmware_daemon/xenserver_if.c-449-
./smartshell/vmware_daemon/xenserver_if.c-450-end:
./smartshell/vmware_daemon/xenserver_if.c-451-
./smartshell/vmware_daemon/xenserver_if.c-452-	DP("func:%s line:%d ret:%d\n", __func__, __LINE__, ret);
./smartshell/vmware_daemon/xenserver_if.c-453-	return ret;
./smartshell/vmware_daemon/xenserver_if.c-454-}
./smartshell/vmware_daemon/xenserver_if.c-455-
./smartshell/vmware_daemon/xenserver_if.c-456-// add by zhangjie
./smartshell/vmware_daemon/xenserver_if.c-457-int xenserver_stat_init_for_one(
./smartshell/vmware_daemon/xenserver_if.c-458-		struct vs_stat *vs_stat, 
./smartshell/vmware_daemon/xenserver_if.c:459:		struct apppool *pool, 
./smartshell/vmware_daemon/xenserver_if.c-460-		struct list_head *vcenter_queue)
./smartshell/vmware_daemon/xenserver_if.c-461-{
./smartshell/vmware_daemon/xenserver_if.c-462-	char address[512];
./smartshell/vmware_daemon/xenserver_if.c-463-	int ret = 0, num = 0;
./smartshell/vmware_daemon/xenserver_if.c-464-	struct rserver *rs;
./smartshell/vmware_daemon/xenserver_if.c-465-	struct pool_stat *pool_stat;
./smartshell/vmware_daemon/xenserver_if.c-466-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/xenserver_if.c-467-
./smartshell/vmware_daemon/xenserver_if.c-468-	DP("func:%s vs_stat:%s\n", __func__, vs_stat->name);
./smartshell/vmware_daemon/xenserver_if.c:469:	DP("func:%s pool:%s\n", __func__, pool->name);
./smartshell/vmware_daemon/xenserver_if.c:470:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-471-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-472-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-473-			continue;
./smartshell/vmware_daemon/xenserver_if.c-474-		}
./smartshell/vmware_daemon/xenserver_if.c:475:		DP("func:%s pool:%s rs:%s\n", __func__, pool->name, address);
./smartshell/vmware_daemon/xenserver_if.c-476-	}
./smartshell/vmware_daemon/xenserver_if.c-477-
./smartshell/vmware_daemon/xenserver_if.c:478:	DP("loop pool:%s\n", pool->name);
./smartshell/vmware_daemon/xenserver_if.c-479-	/* search pool_stat */
./smartshell/vmware_daemon/xenserver_if.c:480:	if ((pool_stat = pool_stat_search(vs_stat, pool->name)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-481-		DP("func:%s line:%d pool_stat:%s NULL\n", __func__, __LINE__, pool_stat->name);
./smartshell/vmware_daemon/xenserver_if.c-482-		return -1;
./smartshell/vmware_daemon/xenserver_if.c-483-	}
./smartshell/vmware_daemon/xenserver_if.c-484-
./smartshell/vmware_daemon/xenserver_if.c:485:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/xenserver_if.c-486-		if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/xenserver_if.c-487-			continue;
./smartshell/vmware_daemon/xenserver_if.c-488-		}
./smartshell/vmware_daemon/xenserver_if.c-489-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/xenserver_if.c-490-		if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-491-			continue;
./smartshell/vmware_daemon/xenserver_if.c-492-		}
./smartshell/vmware_daemon/xenserver_if.c-493-		if (rs->uuid[0] != 0 && strlen(address) && strcmp(rs->enable,"off")!=0 ) {
./smartshell/vmware_daemon/xenserver_if.c-494-			if ((vmx_stat = vmx_stat_search(pool_stat, address)) != NULL) {
./smartshell/vmware_daemon/xenserver_if.c-495-				continue;
./smartshell/vmware_daemon/xenserver_if.c-496-			}
./smartshell/vmware_daemon/xenserver_if.c-497-
./smartshell/vmware_daemon/xenserver_if.c-498-			if ((vmx_stat = vmx_stat_add(pool_stat, rs)) == NULL) {
./smartshell/vmware_daemon/xenserver_if.c-499-				vmx_stat_clear(pool_stat);
./smartshell/vmware_daemon/xenserver_if.c-500-				ret = -1;
./smartshell/vmware_daemon/xenserver_if.c-501-				goto end;
./smartshell/vmware_daemon/xenserver_if.c-502-			}
./smartshell/vmware_daemon/xenserver_if.c-503-			DP("add vmx:%s\n", address);
./smartshell/vmware_daemon/xenserver_if.c-504-			++num;
./smartshell/vmware_daemon/xenserver_if.c:505:			DP("func:%s line:%d set pool:%s MODE=%d\n", __func__, __LINE__, pool_stat->name, pool_stat->mode);
./smartshell/vmware_daemon/xenserver_if.c-506-			pool_stat->mode = MODE_NONE; /* clear pool_stat MODE_NOMORE */
./smartshell/vmware_daemon/xenserver_if.c:507:			DP("func:%s line:%d set pool:%s MODE=%d\n", __func__, __LINE__, pool_stat->name, pool_stat->mode);
./smartshell/vmware_daemon/xenserver_if.c-508-		}
./smartshell/vmware_daemon/xenserver_if.c-509-	}
./smartshell/vmware_daemon/xenserver_if.c-510-
./smartshell/vmware_daemon/xenserver_if.c-511-	if (!num) {
./smartshell/vmware_daemon/xenserver_if.c-512-		ret = 0;
./smartshell/vmware_daemon/xenserver_if.c-513-		goto end;
./smartshell/vmware_daemon/xenserver_if.c-514-	}
./smartshell/vmware_daemon/xenserver_if.c-515-
./smartshell/vmware_daemon/xenserver_if.c:516:	if ((ret = xenserver_init_all_vms_state(pool_stat, pool, vcenter_queue)) == -1) {
./smartshell/vmware_daemon/xenserver_if.c-517-		return -1;	
./smartshell/vmware_daemon/xenserver_if.c-518-	}
./smartshell/vmware_daemon/xenserver_if.c-519-
./smartshell/vmware_daemon/xenserver_if.c-520-	adjust_pool_stat_mode(pool_stat);
./smartshell/vmware_daemon/xenserver_if.c:521:	DP("loop %s over!\n", pool->name);
./smartshell/vmware_daemon/xenserver_if.c-522-
./smartshell/vmware_daemon/xenserver_if.c-523-end:
./smartshell/vmware_daemon/xenserver_if.c-524-
./smartshell/vmware_daemon/xenserver_if.c-525-	DP("func:%s line:%d ret:%d\n", __func__, __LINE__, ret);
./smartshell/vmware_daemon/xenserver_if.c-526-	return ret;
./smartshell/vmware_daemon/xenserver_if.c-527-}
./smartshell/vmware_daemon/xenserver_if.c-528-
--
./smartshell/vmware_daemon/vcenter_if.c-31-{
./smartshell/vmware_daemon/vcenter_if.c-32-	struct vcenter_stat *p;
./smartshell/vmware_daemon/vcenter_if.c-33-	p = (struct vcenter_stat *)data;	
./smartshell/vmware_daemon/vcenter_if.c-34-	if (p != NULL) {
./smartshell/vmware_daemon/vcenter_if.c-35-		free(p);
./smartshell/vmware_daemon/vcenter_if.c-36-		data = NULL;
./smartshell/vmware_daemon/vcenter_if.c-37-	}
./smartshell/vmware_daemon/vcenter_if.c-38-}
./smartshell/vmware_daemon/vcenter_if.c-39-
./smartshell/vmware_daemon/vcenter_if.c-40-/* 返回-1不需要更新， 返回1需要更新 */
./smartshell/vmware_daemon/vcenter_if.c:41:extern int vcenter_check_pool_stat_need_update(struct apppool *pool, struct pool_stat *stat)
./smartshell/vmware_daemon/vcenter_if.c-42-{
./smartshell/vmware_daemon/vcenter_if.c-43-	struct rserver *rs;
./smartshell/vmware_daemon/vcenter_if.c-44-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vcenter_if.c-45-	char address[512];
./smartshell/vmware_daemon/vcenter_if.c-46-	int ret = -1;
./smartshell/vmware_daemon/vcenter_if.c-47-
./smartshell/vmware_daemon/vcenter_if.c-48-	DP("===func:%s line:%d\n", __func__, __LINE__);
./smartshell/vmware_daemon/vcenter_if.c-49-
./smartshell/vmware_daemon/vcenter_if.c:50:	/* 1. check pool value changed */
./smartshell/vmware_daemon/vcenter_if.c-51-#if 0
./smartshell/vmware_daemon/vcenter_if.c-52-	/* 使用中的池不允许修改类型  */
./smartshell/vmware_daemon/vcenter_if.c:53:	if (strcmp(pool->vmtype, stat->vmtype) != 0) {
./smartshell/vmware_daemon/vcenter_if.c:54:		strcpy(stat->vmtype, pool->vmtype);
./smartshell/vmware_daemon/vcenter_if.c-55-		ret = 1;
./smartshell/vmware_daemon/vcenter_if.c-56-	}
./smartshell/vmware_daemon/vcenter_if.c-57-#endif
./smartshell/vmware_daemon/vcenter_if.c-58-
./smartshell/vmware_daemon/vcenter_if.c:59:	if (atol(pool->vminterval) != stat->vm_interval) {
./smartshell/vmware_daemon/vcenter_if.c:60:		stat->vm_interval = atol(pool->vminterval);
./smartshell/vmware_daemon/vcenter_if.c:61:		DP("func:%s line:%d vm_interval由%d修改为%s\n",__func__, __LINE__, stat->vm_interval, pool->vminterval);
./smartshell/vmware_daemon/vcenter_if.c-62-		ret = 1;
./smartshell/vmware_daemon/vcenter_if.c-63-	}
./smartshell/vmware_daemon/vcenter_if.c:64:	if (atol(pool->vmcount) != stat->vm_count) {
./smartshell/vmware_daemon/vcenter_if.c:65:		DP("func:%s line:%d vm_count由%d修改为%s\n", __func__, __LINE__, stat->vm_count, pool->vmcount);
./smartshell/vmware_daemon/vcenter_if.c:66:		stat->vm_count = atol(pool->vmcount);
./smartshell/vmware_daemon/vcenter_if.c-67-		ret = 1;
./smartshell/vmware_daemon/vcenter_if.c-68-	}
./smartshell/vmware_daemon/vcenter_if.c-69-
./smartshell/vmware_daemon/vcenter_if.c-70-	/* 2. check rserver changed */
./smartshell/vmware_daemon/vcenter_if.c:71:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-72-		if (rs->vmname[0] != 0) {
./smartshell/vmware_daemon/vcenter_if.c-73-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vcenter_if.c-74-			if (inet_sockaddr2address(&rs->address, address) == -1) {
./smartshell/vmware_daemon/vcenter_if.c-75-				continue;
./smartshell/vmware_daemon/vcenter_if.c-76-			}
./smartshell/vmware_daemon/vcenter_if.c-77-			if (address[0] == 0 || rs->rscenter[0]==0 || rs->vmdatacenter[0] == 0) {
./smartshell/vmware_daemon/vcenter_if.c-78-				continue;
./smartshell/vmware_daemon/vcenter_if.c-79-			}
./smartshell/vmware_daemon/vcenter_if.c-80-			if (rserver_enable(rs)) {
./smartshell/vmware_daemon/vcenter_if.c-81-				if ((vmx_stat = vmx_stat_search(stat, address)) == NULL) {
--
./smartshell/vmware_daemon/vcenter_if.c-108-
./smartshell/vmware_daemon/vcenter_if.c-109-	list_for_each_entry(vmx_stat, &stat->vmx_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-110-		vcenter_stat = (struct vcenter_stat *)vmx_stat->data;
./smartshell/vmware_daemon/vcenter_if.c-111-		if (!strcmp(vmname, vcenter_stat->vmname)) {
./smartshell/vmware_daemon/vcenter_if.c-112-			return vmx_stat;
./smartshell/vmware_daemon/vcenter_if.c-113-		}
./smartshell/vmware_daemon/vcenter_if.c-114-	}
./smartshell/vmware_daemon/vcenter_if.c-115-	return NULL;
./smartshell/vmware_daemon/vcenter_if.c-116-}
./smartshell/vmware_daemon/vcenter_if.c-117-
./smartshell/vmware_daemon/vcenter_if.c:118:static int vcenter_info_get(vm_vcenter_t *vcenter, struct apppool *pool, const char *vmname, struct vcenter *vc)
./smartshell/vmware_daemon/vcenter_if.c-119-{
./smartshell/vmware_daemon/vcenter_if.c-120-	int found = 0;
./smartshell/vmware_daemon/vcenter_if.c-121-	char tmp[BUFSIZ] = {0};
./smartshell/vmware_daemon/vcenter_if.c-122-	struct rserver *rs;
./smartshell/vmware_daemon/vcenter_if.c-123-
./smartshell/vmware_daemon/vcenter_if.c:124:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-125-		if (rs->rscenter[0] == 0) {
./smartshell/vmware_daemon/vcenter_if.c-126-			continue;
./smartshell/vmware_daemon/vcenter_if.c-127-		}
./smartshell/vmware_daemon/vcenter_if.c-128-		if (strcmp(rs->vmname, vmname) == 0) {
./smartshell/vmware_daemon/vcenter_if.c-129-			found =1 ;
./smartshell/vmware_daemon/vcenter_if.c-130-			break;
./smartshell/vmware_daemon/vcenter_if.c-131-		}
./smartshell/vmware_daemon/vcenter_if.c-132-	}
./smartshell/vmware_daemon/vcenter_if.c-133-	if (!found) {
./smartshell/vmware_daemon/vcenter_if.c-134-		return -1;
--
./smartshell/vmware_daemon/vcenter_if.c-138-	strcpy(vcenter->conn.username, vc->username);
./smartshell/vmware_daemon/vcenter_if.c-139-	base64_decode((uint8_t *)tmp, vc->password, BUFSIZ);
./smartshell/vmware_daemon/vcenter_if.c-140-	strcpy(vcenter->conn.password, /*vc->password*/tmp);
./smartshell/vmware_daemon/vcenter_if.c-141-	strcpy(vcenter->datacenter, rs->vmdatacenter);
./smartshell/vmware_daemon/vcenter_if.c-142-	strcpy(vcenter->vmname, vmname);
./smartshell/vmware_daemon/vcenter_if.c-143-
./smartshell/vmware_daemon/vcenter_if.c-144-	return 0;
./smartshell/vmware_daemon/vcenter_if.c-145-}
./smartshell/vmware_daemon/vcenter_if.c-146-
./smartshell/vmware_daemon/vcenter_if.c-147-/** on > 0 start , on <= 0 down **/
./smartshell/vmware_daemon/vcenter_if.c:148:extern int vcenter_on_off(struct apppool *pool, char *vmname /* vmname */, int on, struct vcenter *vc)
./smartshell/vmware_daemon/vcenter_if.c-149-{
./smartshell/vmware_daemon/vcenter_if.c:150:	DP("func:%s line:%d vmname:%s vcenter:%s pool:%s\n", __func__, __LINE__, vmname, vc->name, pool->name);
./smartshell/vmware_daemon/vcenter_if.c-151-	int ret = 0;
./smartshell/vmware_daemon/vcenter_if.c-152-	vm_vcenter_t *vcenter;
./smartshell/vmware_daemon/vcenter_if.c-153-	if ( vmname== NULL || vmname[0] == 0) {
./smartshell/vmware_daemon/vcenter_if.c-154-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-155-	}
./smartshell/vmware_daemon/vcenter_if.c-156-
./smartshell/vmware_daemon/vcenter_if.c-157-	if ((vcenter = vm_vcenter_malloc()) == NULL) {
./smartshell/vmware_daemon/vcenter_if.c-158-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-159-	}
./smartshell/vmware_daemon/vcenter_if.c-160-
./smartshell/vmware_daemon/vcenter_if.c:161:	if (vcenter_info_get(vcenter, pool, vmname, vc) == -1) {
./smartshell/vmware_daemon/vcenter_if.c-162-		vm_vcenter_free(&vcenter->list);
./smartshell/vmware_daemon/vcenter_if.c-163-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-164-	}
./smartshell/vmware_daemon/vcenter_if.c-165-
./smartshell/vmware_daemon/vcenter_if.c-166-	if (on > 0) {
./smartshell/vmware_daemon/vcenter_if.c-167-		ret = vm_vcenter_poweron(vcenter);
./smartshell/vmware_daemon/vcenter_if.c-168-	} else {
./smartshell/vmware_daemon/vcenter_if.c-169-		ret = vm_vcenter_poweroff(vcenter);
./smartshell/vmware_daemon/vcenter_if.c-170-	}
./smartshell/vmware_daemon/vcenter_if.c-171-
./smartshell/vmware_daemon/vcenter_if.c-172-	if (vcenter != NULL) {
./smartshell/vmware_daemon/vcenter_if.c-173-		vm_vcenter_free(&vcenter->list);
./smartshell/vmware_daemon/vcenter_if.c-174-	}
./smartshell/vmware_daemon/vcenter_if.c-175-
./smartshell/vmware_daemon/vcenter_if.c-176-	return ret;
./smartshell/vmware_daemon/vcenter_if.c-177-}
./smartshell/vmware_daemon/vcenter_if.c-178-
./smartshell/vmware_daemon/vcenter_if.c-179-
./smartshell/vmware_daemon/vcenter_if.c:180:extern int vcenter_stop(struct pool_stat *stat, struct apppool *pool, struct rserver *rs, struct vcenter *vcenter)
./smartshell/vmware_daemon/vcenter_if.c-181-{
./smartshell/vmware_daemon/vcenter_if.c-182-	int ret = 0;
./smartshell/vmware_daemon/vcenter_if.c-183-	struct vmx_stat *vmx_stat;
./smartshell/vmware_daemon/vcenter_if.c-184-
./smartshell/vmware_daemon/vcenter_if.c-185-	char address[512];
./smartshell/vmware_daemon/vcenter_if.c-186-
./smartshell/vmware_daemon/vcenter_if.c-187-	inet_sockaddr2address(&rs->address, address);
./smartshell/vmware_daemon/vcenter_if.c-188-	DP("func:%s line:%d stat:%s rs:%s\n", __func__, __LINE__, stat->name, address);
./smartshell/vmware_daemon/vcenter_if.c-189-
./smartshell/vmware_daemon/vcenter_if.c-190-	if ((vmx_stat = vmx_stat_search_vmname(stat, rs->vmname))== NULL) {
./smartshell/vmware_daemon/vcenter_if.c-191-		DP("func:%s line:%d stat:%s\n", __func__, __LINE__, stat->name);
./smartshell/vmware_daemon/vcenter_if.c-192-		return 0;
./smartshell/vmware_daemon/vcenter_if.c-193-	}
./smartshell/vmware_daemon/vcenter_if.c-194-
./smartshell/vmware_daemon/vcenter_if.c:195:	ret = vcenter_on_off(pool, rs->vmname, 0, vcenter);
./smartshell/vmware_daemon/vcenter_if.c-196-
./smartshell/vmware_daemon/vcenter_if.c-197-	return ret;
./smartshell/vmware_daemon/vcenter_if.c-198-}
./smartshell/vmware_daemon/vcenter_if.c-199-
./smartshell/vmware_daemon/vcenter_if.c-200-extern int vcenter_update_private_data(struct vmx_stat *vmx_stat, struct rserver *rs)
./smartshell/vmware_daemon/vcenter_if.c-201-{
./smartshell/vmware_daemon/vcenter_if.c-202-	struct vcenter_stat *vcenter_stat;
./smartshell/vmware_daemon/vcenter_if.c-203-	vcenter_stat = (struct vcenter_stat *)vmx_stat->data;
./smartshell/vmware_daemon/vcenter_if.c-204-	if (strcmp(vcenter_stat->vmname, rs->vmname)) {
./smartshell/vmware_daemon/vcenter_if.c-205-		strcpy(vcenter_stat->vmname, rs->vmname);
--
./smartshell/vmware_daemon/vcenter_if.c-212-{	
./smartshell/vmware_daemon/vcenter_if.c-213-	char tmp[1024];
./smartshell/vmware_daemon/vcenter_if.c-214-	base64_encode(tmp, 1023, (uint8_t *)rs->vmname, strlen(rs->vmname));
./smartshell/vmware_daemon/vcenter_if.c-215-	RSERVER_SET_VALUE("vmname", tmp);
./smartshell/vmware_daemon/vcenter_if.c-216-	return 0;
./smartshell/vmware_daemon/vcenter_if.c-217-}
./smartshell/vmware_daemon/vcenter_if.c-218-
./smartshell/vmware_daemon/vcenter_if.c-219-static int __vcenter_stop(struct pool_stat *stat, struct vmx_stat *vmx_stat, struct vcenter *vc)
./smartshell/vmware_daemon/vcenter_if.c-220-{
./smartshell/vmware_daemon/vcenter_if.c-221-	int ret = 0;
./smartshell/vmware_daemon/vcenter_if.c:222:	struct apppool *pool;
./smartshell/vmware_daemon/vcenter_if.c-223-	struct vcenter_stat *vcenter_stat;
./smartshell/vmware_daemon/vcenter_if.c-224-	vm_vcenter_t *vcenter;
./smartshell/vmware_daemon/vcenter_if.c-225-
./smartshell/vmware_daemon/vcenter_if.c-226-	if ((vcenter = vm_vcenter_malloc()) == NULL) {
./smartshell/vmware_daemon/vcenter_if.c-227-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-228-	}
./smartshell/vmware_daemon/vcenter_if.c-229-	vcenter_stat = (struct vcenter_stat *)vmx_stat->data; /* vmname */
./smartshell/vmware_daemon/vcenter_if.c-230-
./smartshell/vmware_daemon/vcenter_if.c:231:	/* get pool */
./smartshell/vmware_daemon/vcenter_if.c-232-	LIST_HEAD(pool_head);
./smartshell/vmware_daemon/vcenter_if.c-233-	module_get_queue(&pool_head, "apppool", stat->name);
./smartshell/vmware_daemon/vcenter_if.c-234-	if (list_empty(&pool_head)) {
./smartshell/vmware_daemon/vcenter_if.c-235-		module_purge_queue(&pool_head, "apppool");
./smartshell/vmware_daemon/vcenter_if.c-236-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-237-	}
./smartshell/vmware_daemon/vcenter_if.c:238:	if ((pool = list_first_entry(&pool_head, struct apppool, list)) == NULL) {
./smartshell/vmware_daemon/vcenter_if.c-239-		module_purge_queue(&pool_head, "apppool");
./smartshell/vmware_daemon/vcenter_if.c-240-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-241-	}
./smartshell/vmware_daemon/vcenter_if.c-242-
./smartshell/vmware_daemon/vcenter_if.c:243:	if (vcenter_info_get(vcenter, pool, vcenter_stat->vmname, vc) == -1) {
./smartshell/vmware_daemon/vcenter_if.c-244-		vm_vcenter_free(&vcenter->list);
./smartshell/vmware_daemon/vcenter_if.c-245-		module_purge_queue(&pool_head, "apppool");
./smartshell/vmware_daemon/vcenter_if.c-246-		return -1;
./smartshell/vmware_daemon/vcenter_if.c-247-	}
./smartshell/vmware_daemon/vcenter_if.c-248-	module_purge_queue(&pool_head, "apppool");
./smartshell/vmware_daemon/vcenter_if.c-249-
./smartshell/vmware_daemon/vcenter_if.c-250-	ret = vm_vcenter_poweroff(vcenter);
./smartshell/vmware_daemon/vcenter_if.c-251-	if (ret < 0) {
./smartshell/vmware_daemon/vcenter_if.c-252-		vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vcenter_if.c-253-		vm_vcenter_free(&vcenter->list);
--
./smartshell/vmware_daemon/vcenter_if.c-258-	stat->mode = MODE_NONE;
./smartshell/vmware_daemon/vcenter_if.c-259-
./smartshell/vmware_daemon/vcenter_if.c-260-	if (vcenter != NULL) {
./smartshell/vmware_daemon/vcenter_if.c-261-		vm_vcenter_free(&vcenter->list);
./smartshell/vmware_daemon/vcenter_if.c-262-	}
./smartshell/vmware_daemon/vcenter_if.c-263-	return 0;
./smartshell/vmware_daemon/vcenter_if.c-264-}
./smartshell/vmware_daemon/vcenter_if.c-265-
./smartshell/vmware_daemon/vcenter_if.c-266-/* TODO: vcenter状态非实时，可能有问题 ？ */
./smartshell/vmware_daemon/vcenter_if.c-267-/* 获取所有VM，初始化stat中的状态 */
./smartshell/vmware_daemon/vcenter_if.c:268:extern int vcenter_init_all_vms_state(struct pool_stat *stat, struct apppool *pool, struct list_head *vcenter_queue)
./smartshell/vmware_daemon/vcenter_if.c-269-{
./smartshell/vmware_daemon/vcenter_if.c-270-	struct rserver *rs = NULL;
./smartshell/vmware_daemon/vcenter_if.c-271-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/vcenter_if.c-272-	struct vcenter *vcenter = NULL;
./smartshell/vmware_daemon/vcenter_if.c-273-
./smartshell/vmware_daemon/vcenter_if.c:274:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-275-		if ((vmx_stat = vmx_stat_search_vmname(stat, rs->vmname)) == NULL) {
./smartshell/vmware_daemon/vcenter_if.c-276-			continue;
./smartshell/vmware_daemon/vcenter_if.c-277-		}
./smartshell/vmware_daemon/vcenter_if.c-278-		if (strcmp(rs->vmstate, "poweredOn") == 0) {
./smartshell/vmware_daemon/vcenter_if.c-279-			vmx_stat->mode = MODE_UP;
./smartshell/vmware_daemon/vcenter_if.c-280-			if (vmx_stat->mode == MODE_UP && !rserver_enable(rs)) {
./smartshell/vmware_daemon/vcenter_if.c-281-				/* find vcenter */
./smartshell/vmware_daemon/vcenter_if.c-282-				if (__vcenter_stop(stat, vmx_stat, vcenter) < 0) { 
./smartshell/vmware_daemon/vcenter_if.c-283-					continue;
./smartshell/vmware_daemon/vcenter_if.c-284-				}    
--
./smartshell/vmware_daemon/vcenter_if.c-306-		strcpy(vcenter_stat->vmname, rs->vmname);
./smartshell/vmware_daemon/vcenter_if.c-307-	}
./smartshell/vmware_daemon/vcenter_if.c-308-
./smartshell/vmware_daemon/vcenter_if.c-309-	return 0;
./smartshell/vmware_daemon/vcenter_if.c-310-}
./smartshell/vmware_daemon/vcenter_if.c-311-
./smartshell/vmware_daemon/vcenter_if.c-312-/* 入口函数 */
./smartshell/vmware_daemon/vcenter_if.c-313-int vcenter_stat_init(struct vs_stat *vs_stat, struct list_head *pool_head, struct list_head *vcenter_queue)
./smartshell/vmware_daemon/vcenter_if.c-314-{
./smartshell/vmware_daemon/vcenter_if.c-315-	struct rserver *rs = NULL;
./smartshell/vmware_daemon/vcenter_if.c:316:	struct apppool *pool = NULL;
./smartshell/vmware_daemon/vcenter_if.c-317-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vcenter_if.c-318-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/vcenter_if.c-319-	int ret = 0, num = 0;
./smartshell/vmware_daemon/vcenter_if.c-320-	char address[512];
./smartshell/vmware_daemon/vcenter_if.c-321-
./smartshell/vmware_daemon/vcenter_if.c:322:	list_for_each_entry(pool, pool_head, list) {
./smartshell/vmware_daemon/vcenter_if.c:323:		list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-324-			if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/vcenter_if.c-325-				continue;
./smartshell/vmware_daemon/vcenter_if.c-326-			}
./smartshell/vmware_daemon/vcenter_if.c:327:			if ((stat = pool_stat_search(vs_stat, pool->name)) == NULL ) {
./smartshell/vmware_daemon/vcenter_if.c-328-				continue;
./smartshell/vmware_daemon/vcenter_if.c-329-			}
./smartshell/vmware_daemon/vcenter_if.c-330-
./smartshell/vmware_daemon/vcenter_if.c-331-			memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vcenter_if.c-332-			if (inet_sockaddr2address(&rs->address, address) ==-1) {
./smartshell/vmware_daemon/vcenter_if.c-333-				continue;
./smartshell/vmware_daemon/vcenter_if.c-334-			}
./smartshell/vmware_daemon/vcenter_if.c-335-			if ((vmx_stat = vmx_stat_search(stat, address)) != NULL) {
./smartshell/vmware_daemon/vcenter_if.c-336-				continue;
./smartshell/vmware_daemon/vcenter_if.c-337-			}
--
./smartshell/vmware_daemon/vcenter_if.c-346-				++num;
./smartshell/vmware_daemon/vcenter_if.c-347-				stat->mode = MODE_NONE; /* clear pool_stat MODE_NOMORE */
./smartshell/vmware_daemon/vcenter_if.c-348-			}
./smartshell/vmware_daemon/vcenter_if.c-349-		}
./smartshell/vmware_daemon/vcenter_if.c-350-
./smartshell/vmware_daemon/vcenter_if.c-351-		if (!num) {
./smartshell/vmware_daemon/vcenter_if.c-352-			ret = 0;
./smartshell/vmware_daemon/vcenter_if.c-353-			goto end;
./smartshell/vmware_daemon/vcenter_if.c-354-		}
./smartshell/vmware_daemon/vcenter_if.c-355-
./smartshell/vmware_daemon/vcenter_if.c:356:		ret = vcenter_init_all_vms_state(stat, pool, vcenter_queue);
./smartshell/vmware_daemon/vcenter_if.c-357-		adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vcenter_if.c-358-	}
./smartshell/vmware_daemon/vcenter_if.c-359-
./smartshell/vmware_daemon/vcenter_if.c-360-end:
./smartshell/vmware_daemon/vcenter_if.c-361-	return ret;
./smartshell/vmware_daemon/vcenter_if.c-362-}
./smartshell/vmware_daemon/vcenter_if.c-363-
./smartshell/vmware_daemon/vcenter_if.c:364:int vcenter_stat_init_for_one(struct vs_stat *vs_stat, struct apppool *pool, struct list_head *vcenter_queue)
./smartshell/vmware_daemon/vcenter_if.c-365-{
./smartshell/vmware_daemon/vcenter_if.c-366-	struct rserver *rs = NULL;
./smartshell/vmware_daemon/vcenter_if.c-367-	struct pool_stat *stat = NULL;
./smartshell/vmware_daemon/vcenter_if.c-368-	struct vmx_stat *vmx_stat = NULL;
./smartshell/vmware_daemon/vcenter_if.c-369-	int ret = 0, num = 0;
./smartshell/vmware_daemon/vcenter_if.c-370-	char address[512];
./smartshell/vmware_daemon/vcenter_if.c-371-
./smartshell/vmware_daemon/vcenter_if.c:372:	list_for_each_entry(rs, &pool->realserver_head, list) {
./smartshell/vmware_daemon/vcenter_if.c-373-		if (!rserver_enable(rs)) {
./smartshell/vmware_daemon/vcenter_if.c-374-			continue;
./smartshell/vmware_daemon/vcenter_if.c-375-		}
./smartshell/vmware_daemon/vcenter_if.c:376:		if ((stat = pool_stat_search(vs_stat, pool->name)) == NULL ) {
./smartshell/vmware_daemon/vcenter_if.c-377-			continue;
./smartshell/vmware_daemon/vcenter_if.c-378-		}
./smartshell/vmware_daemon/vcenter_if.c-379-
./smartshell/vmware_daemon/vcenter_if.c-380-		memset(address, 0, sizeof(address));
./smartshell/vmware_daemon/vcenter_if.c-381-		if (inet_sockaddr2address(&rs->address, address) ==-1) {
./smartshell/vmware_daemon/vcenter_if.c-382-			continue;
./smartshell/vmware_daemon/vcenter_if.c-383-		}
./smartshell/vmware_daemon/vcenter_if.c-384-		if ((vmx_stat = vmx_stat_search(stat, address)) != NULL) {
./smartshell/vmware_daemon/vcenter_if.c-385-			continue;
./smartshell/vmware_daemon/vcenter_if.c-386-		}
--
./smartshell/vmware_daemon/vcenter_if.c-395-			++num;
./smartshell/vmware_daemon/vcenter_if.c-396-			stat->mode = MODE_NONE; /* clear pool_stat MODE_NOMORE */
./smartshell/vmware_daemon/vcenter_if.c-397-		}
./smartshell/vmware_daemon/vcenter_if.c-398-	}
./smartshell/vmware_daemon/vcenter_if.c-399-
./smartshell/vmware_daemon/vcenter_if.c-400-	if (!num) {
./smartshell/vmware_daemon/vcenter_if.c-401-		ret = 0;
./smartshell/vmware_daemon/vcenter_if.c-402-		goto end;
./smartshell/vmware_daemon/vcenter_if.c-403-	}
./smartshell/vmware_daemon/vcenter_if.c-404-
./smartshell/vmware_daemon/vcenter_if.c:405:	ret = vcenter_init_all_vms_state(stat, pool, vcenter_queue);
./smartshell/vmware_daemon/vcenter_if.c-406-	adjust_pool_stat_mode(stat);
./smartshell/vmware_daemon/vcenter_if.c-407-
./smartshell/vmware_daemon/vcenter_if.c-408-end:
./smartshell/vmware_daemon/vcenter_if.c-409-	return ret;
./smartshell/vmware_daemon/vcenter_if.c-410-}
./smartshell/vmware_daemon/vcenter_if.c-411-
--
./smartshell/daemon4/gslb.c-294-		fprintf(fp, "\t\t\tmisc_path \"%s\"\n", buff);
./smartshell/daemon4/gslb.c-295-
./smartshell/daemon4/gslb.c-296-		__gslb_write_healthcheck_policy(fp, healthcheck);
./smartshell/daemon4/gslb.c-297-		fprintf(fp, "\t\t}\n");
./smartshell/daemon4/gslb.c-298-	}
./smartshell/daemon4/gslb.c-299-
./smartshell/daemon4/gslb.c-300-	return 0;
./smartshell/daemon4/gslb.c-301-}
./smartshell/daemon4/gslb.c-302-
./smartshell/daemon4/gslb.c-303-static int gslb_write_healthcheck(struct gslb_rserver *rserver, 
./smartshell/daemon4/gslb.c:304:					struct gslb_pool *pool,
./smartshell/daemon4/gslb.c-305-					FILE *fp)
./smartshell/daemon4/gslb.c-306-{
./smartshell/daemon4/gslb.c-307-	struct list_head *list = NULL;
./smartshell/daemon4/gslb.c-308-	struct healthcheck *healthcheck = NULL;
./smartshell/daemon4/gslb.c-309-	char *check = strlen(rserver->healthcheck) 
./smartshell/daemon4/gslb.c:310:				? rserver->healthcheck : pool->healthcheck;
./smartshell/daemon4/gslb.c-311-	LIST_HEAD(healthqueue);
./smartshell/daemon4/gslb.c-312-
./smartshell/daemon4/gslb.c-313-	if (!check) {
./smartshell/daemon4/gslb.c-314-		gslb_err("FYF: gslb_write_healthcheck=>check is zero");
./smartshell/daemon4/gslb.c-315-		goto out;
./smartshell/daemon4/gslb.c-316-	}
./smartshell/daemon4/gslb.c-317-
./smartshell/daemon4/gslb.c-318-	module_get_queue(&healthqueue, "healthcheck", NULL);
./smartshell/daemon4/gslb.c-319-
./smartshell/daemon4/gslb.c-320-	if ((list = module_queue_search("healthcheck", &healthqueue, check)) == NULL) {
--
./smartshell/daemon4/gslb.c-324-	healthcheck = list_entry(list, struct healthcheck, list);
./smartshell/daemon4/gslb.c-325-
./smartshell/daemon4/gslb.c-326-	__gslb_write_healthcheck(rserver, healthcheck, fp);
./smartshell/daemon4/gslb.c-327-out1:
./smartshell/daemon4/gslb.c-328-	module_purge_queue(&healthqueue, "healthcheck");
./smartshell/daemon4/gslb.c-329-out:
./smartshell/daemon4/gslb.c-330-	return 0;
./smartshell/daemon4/gslb.c-331-}
./smartshell/daemon4/gslb.c-332-
./smartshell/daemon4/gslb.c-333-static int __gslb_config_create(struct gslb_vserver *vserver,
./smartshell/daemon4/gslb.c:334:				struct gslb_pool *pool,
./smartshell/daemon4/gslb.c-335-				FILE *fp)
./smartshell/daemon4/gslb.c-336-{
./smartshell/daemon4/gslb.c-337-	struct gslb_rserver *rserver = NULL;
./smartshell/daemon4/gslb.c-338-	char ip[64] = {0}, port[10] = {0};
./smartshell/daemon4/gslb.c-339-
./smartshell/daemon4/gslb.c-340-	fprintf(fp, "virtual_server 0.0.0.0 0 {\n");
./smartshell/daemon4/gslb.c-341-	fprintf(fp, "\tdelay_loop 3\n");
./smartshell/daemon4/gslb.c-342-	fprintf(fp, "\tlb_algo %s\n", "rr");
./smartshell/daemon4/gslb.c-343-	fprintf(fp, "\tvsname %s\n", vserver->name);
./smartshell/daemon4/gslb.c-344-	fprintf(fp, "\tprotocol DNS\n");
./smartshell/daemon4/gslb.c:345:	list_for_each_entry(rserver, &pool->gslb_rserver_head, list) {
./smartshell/daemon4/gslb.c-346-		if (strcasecmp(rserver->enable, "on"))
./smartshell/daemon4/gslb.c-347-			continue;
./smartshell/daemon4/gslb.c-348-
./smartshell/daemon4/gslb.c-349-		gslb_sockaddr2stripport(&rserver->ip, ip, sizeof(ip), port, sizeof(port));
./smartshell/daemon4/gslb.c-350-		if (rserver->ip.ss_family == AF_INET)
./smartshell/daemon4/gslb.c-351-			fprintf(fp, "\treal_server %s %s {\n", ip, port);
./smartshell/daemon4/gslb.c-352-		else
./smartshell/daemon4/gslb.c-353-			fprintf(fp, "\treal_server [%s] %s {\n", ip, port);
./smartshell/daemon4/gslb.c:354:		fprintf(fp, "\t\tpoolname %s\n", pool->name);
./smartshell/daemon4/gslb.c-355-		if (strlen(rserver->weight))
./smartshell/daemon4/gslb.c-356-			fprintf(fp, "\t\tweight %s\n", rserver->weight);
./smartshell/daemon4/gslb.c:357:		gslb_write_healthcheck(rserver, pool, fp);
./smartshell/daemon4/gslb.c-358-
./smartshell/daemon4/gslb.c-359-		fprintf(fp, "\t}\n");
./smartshell/daemon4/gslb.c-360-
./smartshell/daemon4/gslb.c-361-	}
./smartshell/daemon4/gslb.c-362-	fprintf(fp, "}\n");
./smartshell/daemon4/gslb.c-363-
./smartshell/daemon4/gslb.c-364-	return 0;
./smartshell/daemon4/gslb.c-365-}
./smartshell/daemon4/gslb.c-366-
./smartshell/daemon4/gslb.c-367-static int gslb_config_create(struct list_head *vserver_head,
./smartshell/daemon4/gslb.c-368-				struct list_head *pool_head, 
./smartshell/daemon4/gslb.c-369-				FILE *fp)
./smartshell/daemon4/gslb.c-370-{	
./smartshell/daemon4/gslb.c-371-	struct gslb_vserver *vserver = NULL;
./smartshell/daemon4/gslb.c:372:	struct gslb_pool *pool = NULL;
./smartshell/daemon4/gslb.c-373-
./smartshell/daemon4/gslb.c-374-	list_for_each_entry(vserver, vserver_head, list) {
./smartshell/daemon4/gslb.c:375:		list_for_each_entry(pool, pool_head, list) {
./smartshell/daemon4/gslb.c:376:			if (!strcasecmp(vserver->poolname, pool->name)) {
./smartshell/daemon4/gslb.c:377:				__gslb_config_create(vserver, pool, fp);
./smartshell/daemon4/gslb.c-378-				break;
./smartshell/daemon4/gslb.c-379-			}
./smartshell/daemon4/gslb.c-380-		}
./smartshell/daemon4/gslb.c-381-	}
./smartshell/daemon4/gslb.c-382-
./smartshell/daemon4/gslb.c-383-	return 0;
./smartshell/daemon4/gslb.c-384-}
./smartshell/daemon4/gslb.c-385-
./smartshell/daemon4/gslb.c-386-int gslb_healthcheck_register(char *config_file)
./smartshell/daemon4/gslb.c-387-{
--
./smartshell/daemon4/gslb.c-410- * \t192.168.10.102:80 up pa normal
./smartshell/daemon4/gslb.c-411- * \t192.168.10.103:80 down pa normal
./smartshell/daemon4/gslb.c-412- **/
./smartshell/daemon4/gslb.c-413-static int gslb_reset_state_according_keepalived(struct list_head *vs_queue, 
./smartshell/daemon4/gslb.c-414-						struct list_head *pool_queue)
./smartshell/daemon4/gslb.c-415-{
./smartshell/daemon4/gslb.c-416-	FILE *fp = NULL;
./smartshell/daemon4/gslb.c-417-	char buff[BUFSIZ] = {0};
./smartshell/daemon4/gslb.c-418-	struct list_head *list = NULL;
./smartshell/daemon4/gslb.c-419-	struct gslb_vserver *vserver = NULL;
./smartshell/daemon4/gslb.c:420:	struct gslb_pool *pool = NULL;
./smartshell/daemon4/gslb.c-421-	struct gslb_rserver *rserver = NULL;
./smartshell/daemon4/gslb.c-422-
./smartshell/daemon4/gslb.c-423-#define KEEPALIVED_ALIVE_FILE "/dev/shm/keepalived_healthcheck_status"
./smartshell/daemon4/gslb.c-424-	if ((fp = fopen(KEEPALIVED_ALIVE_FILE, "r")) == NULL)
./smartshell/daemon4/gslb.c-425-		goto out;
./smartshell/daemon4/gslb.c-426-
./smartshell/daemon4/gslb.c-427-	while (fgets(buff, BUFSIZ-1, fp) != NULL) {
./smartshell/daemon4/gslb.c-428-		char name[512], address[512], state[512], type[512];
./smartshell/daemon4/gslb.c-429-
./smartshell/daemon4/gslb.c-430-		if (isalnum(buff[0])) { // gslb vserver line
--
./smartshell/daemon4/gslb.c-437-
./smartshell/daemon4/gslb.c-438-			continue;
./smartshell/daemon4/gslb.c-439-		}
./smartshell/daemon4/gslb.c-440-
./smartshell/daemon4/gslb.c-441-		if (vserver == NULL)
./smartshell/daemon4/gslb.c-442-			continue;
./smartshell/daemon4/gslb.c-443-
./smartshell/daemon4/gslb.c-444-		// get rserver state
./smartshell/daemon4/gslb.c-445-		sscanf(buff, "%s %s %s %s", address, state, name, type);
./smartshell/daemon4/gslb.c-446-
./smartshell/daemon4/gslb.c:447:		list_for_each_entry(pool, pool_queue, list) {
./smartshell/daemon4/gslb.c:448:			if (strcasecmp(vserver->poolname, pool->name))
./smartshell/daemon4/gslb.c-449-				continue;
./smartshell/daemon4/gslb.c-450-				
./smartshell/daemon4/gslb.c:451:			list_for_each_entry(rserver, &pool->gslb_rserver_head, list) {
./smartshell/daemon4/gslb.c-452-				char tmp[BUFSIZ];
./smartshell/daemon4/gslb.c-453-
./smartshell/daemon4/gslb.c-454-				if (strcasecmp(rserver->enable, "off") == 0)
./smartshell/daemon4/gslb.c-455-					continue;
./smartshell/daemon4/gslb.c-456-
./smartshell/daemon4/gslb.c-457-				memset(tmp, 0, sizeof(tmp));
./smartshell/daemon4/gslb.c-458-				inet_sockaddr2address(&rserver->ip, tmp);
./smartshell/daemon4/gslb.c-459-				if (strcasecmp(address, tmp))
./smartshell/daemon4/gslb.c-460-					continue;
./smartshell/daemon4/gslb.c-461-
--
./smartshell/daemon4/analyzer.c-298-
./smartshell/daemon4/analyzer.c-299-	strtolower(name);
./smartshell/daemon4/analyzer.c-300-
./smartshell/daemon4/analyzer.c-301-	if (strcmp(type, "healthcheck") == 0) {
./smartshell/daemon4/analyzer.c-302-		ret = module_delete("healthcheck", name);
./smartshell/daemon4/analyzer.c-303-	} else if (strcmp(type, "errpages") == 0) {
./smartshell/daemon4/analyzer.c-304-		char file[BUFSIZ];
./smartshell/daemon4/analyzer.c-305-		sscanf(cmdarg, "%*s %s", name);
./smartshell/daemon4/analyzer.c-306-		base64_decode((uint8_t *)file, name, sizeof(file));
./smartshell/daemon4/analyzer.c-307-		ret = module_delete("errpages", file);
./smartshell/daemon4/analyzer.c:308:	} else if (strcmp(type, "pool") == 0) {
./smartshell/daemon4/analyzer.c-309-		ret = module_delete("apppool", name);
./smartshell/daemon4/analyzer.c-310-	} else if (strcmp(type, "vserver") == 0) {
./smartshell/daemon4/analyzer.c-311-		unconfig_apache();
./smartshell/daemon4/analyzer.c-312-		module_delete("vserver", name);
./smartshell/daemon4/analyzer.c-313-		config_apache(0, 0);
./smartshell/daemon4/analyzer.c-314-	} else if (strcmp(type, "rule") == 0) {
./smartshell/daemon4/analyzer.c-315-		/* if (lic_module.rule ) { */
./smartshell/daemon4/analyzer.c-316-		ret = module_delete("rule", name);
./smartshell/daemon4/analyzer.c-317-		/* } */
./smartshell/daemon4/analyzer.c-318-	} else if (strcmp(type, "interface") == 0) {
--
./smartshell/daemon4/analyzer.c-2442-		int (*analyzer)(char *, struct event *);
./smartshell/daemon4/analyzer.c-2443-	} smart_command[] = {
./smartshell/daemon4/analyzer.c-2444-		{"log", analyzer_system_log},
./smartshell/daemon4/analyzer.c-2445-		{"license", analyzer_system_license},
./smartshell/daemon4/analyzer.c-2446-		{"delete", analyzer_system_delete},
./smartshell/daemon4/analyzer.c-2447-		{"authentication", analyzer_system_authentication},
./smartshell/daemon4/analyzer.c-2448-		{"flush_state", analyzer_system_flush_state},
./smartshell/daemon4/analyzer.c-2449-		{"certificate", analyzer_system_certificate},
./smartshell/daemon4/analyzer.c-2450-		{"vserver", analyzer_system_vserver},
./smartshell/daemon4/analyzer.c-2451-		{"pro_vserver", analyzer_system_pro_vserver},
./smartshell/daemon4/analyzer.c:2452:		{"pool", analyzer_system_pool},
./smartshell/daemon4/analyzer.c-2453-		{"vcenter", analyzer_system_vcenter},
./smartshell/daemon4/analyzer.c-2454-		{"healthcheck", analyzer_system_healthcheck},
./smartshell/daemon4/analyzer.c-2455-		{"errpages", analyzer_system_errpages},
./smartshell/daemon4/analyzer.c-2456-		{"topologyfiles", analyzer_system_topologyfiles},
./smartshell/daemon4/analyzer.c-2457-		{"rule", analyzer_system_rule},
./smartshell/daemon4/analyzer.c-2458-		{"interface", analyzer_system_interface},
./smartshell/daemon4/analyzer.c-2459-		{"vlan", analyzer_system_vlan},
./smartshell/daemon4/analyzer.c-2460-		{"snat", analyzer_system_snat},
./smartshell/daemon4/analyzer.c-2461-		{"dnat", analyzer_system_dnat},
./smartshell/daemon4/analyzer.c-2462-		{"rtable", analyzer_system_rtable},
--
./smartshell/daemon4/generator.c-277-	__write_healthcheck(fp, rs, apppool, healthcheck);
./smartshell/daemon4/generator.c-278-out:
./smartshell/daemon4/generator.c-279-	return;
./smartshell/daemon4/generator.c-280-}
./smartshell/daemon4/generator.c-281-
./smartshell/daemon4/generator.c-282-
./smartshell/daemon4/generator.c-283-#define SORRY_SERVER		0
./smartshell/daemon4/generator.c-284-#define WORK_SERVER		1
./smartshell/daemon4/generator.c-285-
./smartshell/daemon4/generator.c-286-static int print_rserver_parameter(FILE *fp, struct rserver *rserver,
./smartshell/daemon4/generator.c:287:		struct apppool *pool,
./smartshell/daemon4/generator.c-288-		struct list_head *healthqueue,
./smartshell/daemon4/generator.c-289-		const char *str,const int n)
./smartshell/daemon4/generator.c-290-{
./smartshell/daemon4/generator.c-291-	char ip[STR_IP_LEN], port[STR_PORT_LEN];
./smartshell/daemon4/generator.c-292-
./smartshell/daemon4/generator.c-293-	get_ip_port(str, ip, port);
./smartshell/daemon4/generator.c-294-
./smartshell/daemon4/generator.c-295-	if (check_ip_version(ip) == IPV6) {
./smartshell/daemon4/generator.c-296-		fprintf(fp, "\t%s [%s] %s {\n", n == SORRY_SERVER ? "sorry_server" : "real_server", 
./smartshell/daemon4/generator.c-297-				ip, port);
./smartshell/daemon4/generator.c-298-	} else {
./smartshell/daemon4/generator.c-299-		fprintf(fp, "\t%s %s %s {\n", n == SORRY_SERVER ? "sorry_server" : "real_server", 
./smartshell/daemon4/generator.c-300-				ip, port);
./smartshell/daemon4/generator.c-301-	}
./smartshell/daemon4/generator.c:302:	fprintf(fp, "\t\tpoolname %s\n", pool->name);
./smartshell/daemon4/generator.c-303-	if (strlen(rserver->weight))
./smartshell/daemon4/generator.c-304-		fprintf(fp, "\t\tweight %s\n", rserver->weight);
./smartshell/daemon4/generator.c-305-	if (strlen(rserver->maxconn))
./smartshell/daemon4/generator.c-306-		fprintf(fp, "\t\tconnmax %s\n", rserver->maxconn);
./smartshell/daemon4/generator.c-307-	if (strlen(rserver->bandwidth))
./smartshell/daemon4/generator.c-308-		fprintf(fp, "\t\tbandwidth %lu\n", ((uint64_t)atol(rserver->bandwidth)) >> 3);
./smartshell/daemon4/generator.c:309:	write_healthcheck(fp, rserver, pool, healthqueue);
./smartshell/daemon4/generator.c-310-	fprintf(fp, "\t}\n");
./smartshell/daemon4/generator.c-311-	return 0;
./smartshell/daemon4/generator.c-312-}
./smartshell/daemon4/generator.c-313-
./smartshell/daemon4/generator.c-314-
./smartshell/daemon4/generator.c-315-static int print_rserver(FILE *fp, struct rserver *rserver,
./smartshell/daemon4/generator.c:316:		struct apppool *pool, struct list_head *healthqueue,
./smartshell/daemon4/generator.c-317-		const int n)
./smartshell/daemon4/generator.c-318-{
./smartshell/daemon4/generator.c-319-	if (rserver_draining_or_disabling(rserver)) {
./smartshell/daemon4/generator.c-320-		return 0;
./smartshell/daemon4/generator.c-321-	}
./smartshell/daemon4/generator.c-322-	char address[BUFSIZ];
./smartshell/daemon4/generator.c-323-	inet_sockaddr2address(&rserver->address, address);
./smartshell/daemon4/generator.c-324-
./smartshell/daemon4/generator.c:325:	print_rserver_parameter(fp, rserver, pool, healthqueue, address, n);
./smartshell/daemon4/generator.c-326-	return 0;
./smartshell/daemon4/generator.c-327-}
./smartshell/daemon4/generator.c-328-
./smartshell/daemon4/generator.c-329-static void write_work_server(FILE *fp, 
./smartshell/daemon4/generator.c-330-		struct list_head *queue, 
./smartshell/daemon4/generator.c-331-		struct apppool *apppool,
./smartshell/daemon4/generator.c-332-		struct list_head *healthqueue)
./smartshell/daemon4/generator.c-333-{
./smartshell/daemon4/generator.c-334-	struct rserver *rserver;
./smartshell/daemon4/generator.c-335-
--
./smartshell/daemon4/generator.c-393-		struct list_head *healthqueue,
./smartshell/daemon4/generator.c-394-		struct list_head *rulequeue) 
./smartshell/daemon4/generator.c-395-{
./smartshell/daemon4/generator.c-396-	struct rule *rule;
./smartshell/daemon4/generator.c-397-	struct rule_name *rule_name;
./smartshell/daemon4/generator.c-398-	char pool_name[1024]={0};
./smartshell/daemon4/generator.c-399-	struct apppool *apppool;
./smartshell/daemon4/generator.c-400-	struct list_head *list;
./smartshell/daemon4/generator.c-401-
./smartshell/daemon4/generator.c-402-	if (strcasecmp(vserver->contentswitch, "on") == 0) {
./smartshell/daemon4/generator.c:403:		/**//** 打开了contentswitch，忽略掉 vserver->pool **/
./smartshell/daemon4/generator.c-404-		list_for_each_entry(rule_name, &vserver->rule_head, list) {
./smartshell/daemon4/generator.c-405-			if ((list = module_queue_search("rule", rulequeue, 
./smartshell/daemon4/generator.c-406-							rule_name->name)) == NULL) {
./smartshell/daemon4/generator.c-407-				continue;
./smartshell/daemon4/generator.c-408-			}
./smartshell/daemon4/generator.c-409-			rule = list_entry(list, struct rule, list);
./smartshell/daemon4/generator.c-410-
./smartshell/daemon4/generator.c-411-			/*memset(buff, 0, BUFSIZ);*/
./smartshell/daemon4/generator.c-412-			if (get_poolname_from_rule(rule, pool_name, 1024) == NULL) {
./smartshell/daemon4/generator.c-413-				continue;
--
./smartshell/daemon4/generator.c-417-							appqueue, 
./smartshell/daemon4/generator.c-418-							pool_name)) == NULL) {
./smartshell/daemon4/generator.c-419-				continue;
./smartshell/daemon4/generator.c-420-			}
./smartshell/daemon4/generator.c-421-			apppool = list_entry(list, struct apppool, list);
./smartshell/daemon4/generator.c-422-			write_work_server(fp, &apppool->realserver_head, apppool, healthqueue);
./smartshell/daemon4/generator.c-423-		}
./smartshell/daemon4/generator.c-424-	} else {
./smartshell/daemon4/generator.c-425-		if ((list = module_queue_search("apppool", 
./smartshell/daemon4/generator.c-426-						appqueue, 
./smartshell/daemon4/generator.c:427:						vserver->pool)) != NULL) {
./smartshell/daemon4/generator.c-428-			apppool = list_entry(list, struct apppool, list);
./smartshell/daemon4/generator.c-429-			write_work_server(fp, &apppool->realserver_head, apppool, healthqueue);
./smartshell/daemon4/generator.c-430-		}
./smartshell/daemon4/generator.c-431-		/* write sorry */
./smartshell/daemon4/generator.c-432-		if ((list = module_queue_search("apppool", 
./smartshell/daemon4/generator.c-433-						appqueue, 
./smartshell/daemon4/generator.c-434-						vserver->backpool)) != NULL) {
./smartshell/daemon4/generator.c-435-			apppool = list_entry(list, struct apppool, list);
./smartshell/daemon4/generator.c-436-			write_sorry_server(fp, &apppool->realserver_head, apppool, healthqueue);
./smartshell/daemon4/generator.c-437-		}
--
./smartshell/daemon4/layer7.c-211-
./smartshell/daemon4/layer7.c-212-	return 0;
./smartshell/daemon4/layer7.c-213-}
./smartshell/daemon4/layer7.c-214-
./smartshell/daemon4/layer7.c-215-
./smartshell/daemon4/layer7.c-216-
./smartshell/daemon4/layer7.c-217-
./smartshell/daemon4/layer7.c-218-
./smartshell/daemon4/layer7.c-219-
./smartshell/daemon4/layer7.c-220-static int print_upstream_block(FILE *fp, struct vserver *vs,
./smartshell/daemon4/layer7.c:221:		struct apppool *pool, struct apppool *backpool, 
./smartshell/daemon4/layer7.c-222-		int connreuse)
./smartshell/daemon4/layer7.c-223-{
./smartshell/daemon4/layer7.c-224-	struct rserver *rserver;
./smartshell/daemon4/layer7.c-225-
./smartshell/daemon4/layer7.c-226-	int rserver_num = 0;	/** Rserver计数 **/
./smartshell/daemon4/layer7.c-227-
./smartshell/daemon4/layer7.c:228:	if (vs == NULL || (pool == NULL && backpool == NULL)) {
./smartshell/daemon4/layer7.c-229-		return 0;
./smartshell/daemon4/layer7.c-230-	}
./smartshell/daemon4/layer7.c-231-
./smartshell/daemon4/layer7.c-232-	fprintf(fp, "\tupstream %s-%s {\n", vs->name, 
./smartshell/daemon4/layer7.c:233:			pool == NULL ? backpool -> name : pool->name);
./smartshell/daemon4/layer7.c-234-
./smartshell/daemon4/layer7.c-235-
./smartshell/daemon4/layer7.c:236:	if (pool == NULL) {
./smartshell/daemon4/layer7.c-237-		goto process_backpool;
./smartshell/daemon4/layer7.c-238-	}
./smartshell/daemon4/layer7.c-239-
./smartshell/daemon4/layer7.c:240:	list_for_each_entry(rserver, &pool->realserver_head, list) {
./smartshell/daemon4/layer7.c-241-		if (strcmp(rserver->state, "down") == 0) {
./smartshell/daemon4/layer7.c-242-			continue;
./smartshell/daemon4/layer7.c-243-		}
./smartshell/daemon4/layer7.c-244-		rserver_num ++;
./smartshell/daemon4/layer7.c-245-		print_rserver(fp, rserver, 1);
./smartshell/daemon4/layer7.c-246-	}
./smartshell/daemon4/layer7.c-247-
./smartshell/daemon4/layer7.c-248-process_backpool:
./smartshell/daemon4/layer7.c-249-
./smartshell/daemon4/layer7.c-250-	if (rserver_num == 0) {
--
./smartshell/daemon4/layer7.c-338-/* add by fanpf for content switch */
./smartshell/daemon4/layer7.c-339-static int print_rule_upstream_block(FILE *fp, struct vserver *vs, char *pool_name, int connreuse)
./smartshell/daemon4/layer7.c-340-{
./smartshell/daemon4/layer7.c-341-	struct rserver *rserver;
./smartshell/daemon4/layer7.c-342-	int found = 0;
./smartshell/daemon4/layer7.c-343-
./smartshell/daemon4/layer7.c-344-	if (vs == NULL) {
./smartshell/daemon4/layer7.c-345-		return 0;
./smartshell/daemon4/layer7.c-346-	}
./smartshell/daemon4/layer7.c-347-
./smartshell/daemon4/layer7.c:348:	/* find pool */
./smartshell/daemon4/layer7.c-349-	struct apppool *apppool;
./smartshell/daemon4/layer7.c-350-	LIST_HEAD(app_head);
./smartshell/daemon4/layer7.c-351-
./smartshell/daemon4/layer7.c-352-	int rserver_num = 0;
./smartshell/daemon4/layer7.c-353-
./smartshell/daemon4/layer7.c-354-	module_get_queue(&app_head, "apppool", NULL);
./smartshell/daemon4/layer7.c-355-
./smartshell/daemon4/layer7.c-356-	list_for_each_entry(apppool, &app_head, list) {
./smartshell/daemon4/layer7.c-357-		if( !strcmp( pool_name, apppool->name)){
./smartshell/daemon4/layer7.c-358-			found = 1;
--
./smartshell/daemon4/layer7.c-478-
./smartshell/daemon4/layer7.c-479-	return pools;
./smartshell/daemon4/layer7.c-480-}
./smartshell/daemon4/layer7.c-481-
./smartshell/daemon4/layer7.c-482-static int print_rule_pools(
./smartshell/daemon4/layer7.c-483-		FILE *fp, 
./smartshell/daemon4/layer7.c-484-		struct vserver *vs, 
./smartshell/daemon4/layer7.c-485-		struct list_head *rule_head, 
./smartshell/daemon4/layer7.c-486-		int connreuse)
./smartshell/daemon4/layer7.c-487-{
./smartshell/daemon4/layer7.c:488:	struct apppool *pool, *pos;
./smartshell/daemon4/layer7.c-489-	int num = 0;
./smartshell/daemon4/layer7.c-490-
./smartshell/daemon4/layer7.c-491-	if (list_empty(&vs->rule_head))
./smartshell/daemon4/layer7.c-492-		return 0;
./smartshell/daemon4/layer7.c-493-
./smartshell/daemon4/layer7.c-494-	LIST_HEAD(pool_head);
./smartshell/daemon4/layer7.c-495-	num = get_all_pools_from_vserver(&pool_head, vs);
./smartshell/daemon4/layer7.c-496-
./smartshell/daemon4/layer7.c-497-	/* print upstream block */
./smartshell/daemon4/layer7.c:498:	list_for_each_entry_safe(pool, pos, &pool_head, list){
./smartshell/daemon4/layer7.c:499:		print_rule_upstream_block(fp, vs, pool->name, connreuse);
./smartshell/daemon4/layer7.c:500:		list_del(&pool->list);
./smartshell/daemon4/layer7.c:501:		free(pool);
./smartshell/daemon4/layer7.c-502-	}
./smartshell/daemon4/layer7.c-503-	return num;
./smartshell/daemon4/layer7.c-504-}
./smartshell/daemon4/layer7.c-505-
./smartshell/daemon4/layer7.c-506-static int signal_smartl7( char *signal, char *filename)
./smartshell/daemon4/layer7.c-507-{
./smartshell/daemon4/layer7.c-508-	char command[BUFSIZ];
./smartshell/daemon4/layer7.c-509-	int ret;
./smartshell/daemon4/layer7.c-510-
./smartshell/daemon4/layer7.c-511-	ret = system("ps -Lf -C smartl7 > /dev/null 2>&1");
--
./smartshell/daemon4/layer7.c-748-
./smartshell/daemon4/layer7.c-749-		if (strcmp(vserver->connreuse, "on") == 0) {
./smartshell/daemon4/layer7.c-750-			connreuse = 1;
./smartshell/daemon4/layer7.c-751-		}
./smartshell/daemon4/layer7.c-752-
./smartshell/daemon4/layer7.c-753-		if (!strcmp(vserver->contentswitch, "on")) {
./smartshell/daemon4/layer7.c-754-			if( (ret = vserver_rule_pools_num(vserver, rulequeue)) <= 0 ){
./smartshell/daemon4/layer7.c-755-				/** 该虚拟服务器中没有应用池 **/
./smartshell/daemon4/layer7.c-756-				continue;
./smartshell/daemon4/layer7.c-757-			} 
./smartshell/daemon4/layer7.c:758:		} else if (vserver->pool[0] == 0 && vserver->backpool[0] == 0) {
./smartshell/daemon4/layer7.c-759-			/** 没有配置应用池和备份池 **/
./smartshell/daemon4/layer7.c-760-			continue;
./smartshell/daemon4/layer7.c-761-		}
./smartshell/daemon4/layer7.c-762-
./smartshell/daemon4/layer7.c-763-
./smartshell/daemon4/layer7.c-764-		/** 如果是第一个vserver，需要填写 "http {" **/
./smartshell/daemon4/layer7.c-765-		if ((++ valid_layer7_vserver) == 1) {
./smartshell/daemon4/layer7.c-766-			fprintf(fp, "http {\n");
./smartshell/daemon4/layer7.c-767-			fprintf(fp, "\taccess_log off;\n");
./smartshell/daemon4/layer7.c-768-		}
--
./smartshell/daemon4/layer7.c-774-		} else {
./smartshell/daemon4/layer7.c-775-			struct apppool *apppool, *backpool;
./smartshell/daemon4/layer7.c-776-			struct list_head *list;
./smartshell/daemon4/layer7.c-777-
./smartshell/daemon4/layer7.c-778-			apppool = backpool = NULL;
./smartshell/daemon4/layer7.c-779-			if ((list = module_queue_search("apppool", pool_head, 
./smartshell/daemon4/layer7.c-780-							vserver->backpool)) != NULL) {
./smartshell/daemon4/layer7.c-781-				backpool = list_entry(list, struct apppool, list);
./smartshell/daemon4/layer7.c-782-			}
./smartshell/daemon4/layer7.c-783-			if ((list = module_queue_search("apppool", pool_head, 
./smartshell/daemon4/layer7.c:784:							vserver->pool)) != NULL) {
./smartshell/daemon4/layer7.c-785-				apppool = list_entry(list, struct apppool, list);
./smartshell/daemon4/layer7.c-786-			}
./smartshell/daemon4/layer7.c-787-			if (!apppool && !backpool) {
./smartshell/daemon4/layer7.c-788-				/** FIXME: won't reach here **/
./smartshell/daemon4/layer7.c-789-				fprintf(fp, "\tserver {\n\t}\n}");
./smartshell/daemon4/layer7.c-790-				continue;
./smartshell/daemon4/layer7.c-791-			}
./smartshell/daemon4/layer7.c-792-			print_upstream_block(fp, vserver, apppool, backpool, connreuse);
./smartshell/daemon4/layer7.c-793-		}
./smartshell/daemon4/layer7.c-794-
--
./smartshell/daemon4/layer7.c-922-
./smartshell/daemon4/layer7.c-923-		if (strlen(vserver->cipheader) != 0) {
./smartshell/daemon4/layer7.c-924-			fprintf(fp, "\t\t\tproxy_set_header %s $remote_addr;\n", vserver->cipheader);
./smartshell/daemon4/layer7.c-925-		}
./smartshell/daemon4/layer7.c-926-
./smartshell/daemon4/layer7.c-927-		/** 
./smartshell/daemon4/layer7.c-928-		 * Note: 添加proxy_set_header Host $host的时机，满足其一即可
./smartshell/daemon4/layer7.c-929-		 * 1. 当vserver->pool不为空的时候
./smartshell/daemon4/layer7.c-930-		 * 2. 当rule中没有对Host字段进行重写
./smartshell/daemon4/layer7.c-931-		 **/
./smartshell/daemon4/layer7.c:932:		if (vserver->pool[0] != 0) {
./smartshell/daemon4/layer7.c-933-			fprintf(fp, "\t\t\tproxy_set_header Host $http_host;\n");
./smartshell/daemon4/layer7.c-934-		} else if (vserver_rule_check_if_Host_Modified(vserver, rulequeue) == 0) {
./smartshell/daemon4/layer7.c-935-			fprintf(fp, "\t\t\tproxy_set_header Host $http_host;\n");
./smartshell/daemon4/layer7.c-936-		}
./smartshell/daemon4/layer7.c-937-
./smartshell/daemon4/layer7.c-938-		/** location - rule **/
./smartshell/daemon4/layer7.c-939-		if (!list_empty(&vserver->rule_head)) {
./smartshell/daemon4/layer7.c-940-			if (!strcmp(vserver->contentswitch, "on") )
./smartshell/daemon4/layer7.c-941-				print_rewrite_rules(fp, vserver, rulequeue, 3, 1);
./smartshell/daemon4/layer7.c-942-			else
./smartshell/daemon4/layer7.c-943-				print_rewrite_rules(fp, vserver, rulequeue, 3, 0);
./smartshell/daemon4/layer7.c-944-		}
./smartshell/daemon4/layer7.c-945-
./smartshell/daemon4/layer7.c-946-		/** location - normal proxy_pass **/
./smartshell/daemon4/layer7.c:947:		if (strlen(vserver->pool)) {
./smartshell/daemon4/layer7.c-948-			if (!strcmp(vserver->protocol, "https")) {
./smartshell/daemon4/layer7.c-949-				if (!strcmp(vserver->ssl_offloading, "on"))
./smartshell/daemon4/layer7.c:950:					fprintf(fp, "\t\t\tproxy_pass http://%s-%s;\n", vserver->name, vserver->pool);
./smartshell/daemon4/layer7.c-951-				else
./smartshell/daemon4/layer7.c:952:					fprintf(fp, "\t\t\tproxy_pass https://%s-%s;\n", vserver->name, vserver->pool);
./smartshell/daemon4/layer7.c-953-			} else {
./smartshell/daemon4/layer7.c:954:				fprintf(fp, "\t\t\tproxy_pass http://%s-%s;\n", vserver->name, vserver->pool);
./smartshell/daemon4/layer7.c-955-			}
./smartshell/daemon4/layer7.c-956-		}
./smartshell/daemon4/layer7.c-957-
./smartshell/daemon4/layer7.c-958-#if 0
./smartshell/daemon4/layer7.c-959-only_return_404:
./smartshell/daemon4/layer7.c-960-		if (rserver_num <= 0) {
./smartshell/daemon4/layer7.c-961-			fprintf(fp, "\t\t\treturn 404;\n");
./smartshell/daemon4/layer7.c-962-		}
./smartshell/daemon4/layer7.c-963-#endif
./smartshell/daemon4/layer7.c-964-
--
./smartshell/daemon4/llb.c-193-		fprintf(fp, "\t\tMISC_CHECK {\n");
./smartshell/daemon4/llb.c-194-		fprintf(fp, "\t\t\tmisc_path \"%s\"\n", buff);
./smartshell/daemon4/llb.c-195-
./smartshell/daemon4/llb.c-196-		__llb_write_healthcheck_policy(fp, healthcheck);
./smartshell/daemon4/llb.c-197-		fprintf(fp, "\t\t}\n");
./smartshell/daemon4/llb.c-198-	} 
./smartshell/daemon4/llb.c-199-
./smartshell/daemon4/llb.c-200-	return 0;
./smartshell/daemon4/llb.c-201-}
./smartshell/daemon4/llb.c-202-
./smartshell/daemon4/llb.c:203:static int llb_write_healthcheck(struct llb_rserver *rserver, struct llb_pool *pool, FILE *fp)
./smartshell/daemon4/llb.c-204-{
./smartshell/daemon4/llb.c-205-	struct list_head *list = NULL;
./smartshell/daemon4/llb.c-206-	struct healthcheck *healthcheck = NULL;
./smartshell/daemon4/llb.c-207-	char *check = strlen(rserver->healthcheck) 
./smartshell/daemon4/llb.c:208:				? rserver->healthcheck : pool->healthcheck;
./smartshell/daemon4/llb.c-209-	LIST_HEAD(healthqueue);
./smartshell/daemon4/llb.c-210-
./smartshell/daemon4/llb.c-211-	if (!check) 
./smartshell/daemon4/llb.c-212-		goto out;
./smartshell/daemon4/llb.c-213-
./smartshell/daemon4/llb.c-214-	module_get_queue(&healthqueue, "healthcheck", NULL);
./smartshell/daemon4/llb.c-215-
./smartshell/daemon4/llb.c-216-	if ((list = module_queue_search("healthcheck", &healthqueue, check)) == NULL) {
./smartshell/daemon4/llb.c-217-		goto out1;
./smartshell/daemon4/llb.c-218-	}
--
./smartshell/daemon4/llb.c-220-
./smartshell/daemon4/llb.c-221-	__llb_write_healthcheck(rserver, healthcheck, fp);
./smartshell/daemon4/llb.c-222-
./smartshell/daemon4/llb.c-223-out1:
./smartshell/daemon4/llb.c-224-	module_purge_queue(&healthqueue, "healthcheck");
./smartshell/daemon4/llb.c-225-out:
./smartshell/daemon4/llb.c-226-	return 0;
./smartshell/daemon4/llb.c-227-}
./smartshell/daemon4/llb.c-228-
./smartshell/daemon4/llb.c-229-static int __llb_config_create(struct llb_vserver *vserver,
./smartshell/daemon4/llb.c:230:				struct llb_pool *pool,
./smartshell/daemon4/llb.c-231-				FILE *fp)
./smartshell/daemon4/llb.c-232-{
./smartshell/daemon4/llb.c-233-	struct llb_rserver *rserver = NULL;
./smartshell/daemon4/llb.c-234-	char ip[64] = {0}, port[10] = {0};
./smartshell/daemon4/llb.c-235-
./smartshell/daemon4/llb.c-236-	fprintf(fp, "virtual_server 0.0.0.0 0 {\n");
./smartshell/daemon4/llb.c-237-	fprintf(fp, "\tdelay_loop 3\n");
./smartshell/daemon4/llb.c-238-	fprintf(fp, "\tlb_algo %s\n", "rr");
./smartshell/daemon4/llb.c-239-	fprintf(fp, "\tvsname %s\n", vserver->name);
./smartshell/daemon4/llb.c-240-	fprintf(fp, "\tprotocol DNS\n");
./smartshell/daemon4/llb.c:241:	list_for_each_entry(rserver, &pool->rserver_head, list) {
./smartshell/daemon4/llb.c-242-		if (strcasecmp(rserver->enable, "on"))
./smartshell/daemon4/llb.c-243-			continue;
./smartshell/daemon4/llb.c-244-
./smartshell/daemon4/llb.c-245-		llb_sockaddr2stripport(&rserver->address, 
./smartshell/daemon4/llb.c-246-						ip, sizeof(ip), port, sizeof(port));
./smartshell/daemon4/llb.c-247-		if (rserver->address.ss_family == AF_INET)
./smartshell/daemon4/llb.c-248-			fprintf(fp, "\treal_server %s %s {\n", ip, port);
./smartshell/daemon4/llb.c-249-		else
./smartshell/daemon4/llb.c-250-			fprintf(fp, "\treal_server [%s] %s {\n", ip, port);
./smartshell/daemon4/llb.c:251:		fprintf(fp, "\t\tpoolname %s\n", pool->name);
./smartshell/daemon4/llb.c-252-		if (strlen(rserver->weight))
./smartshell/daemon4/llb.c-253-			fprintf(fp, "\t\tweight %s\n", rserver->weight);
./smartshell/daemon4/llb.c:254:		llb_write_healthcheck(rserver, pool, fp);
./smartshell/daemon4/llb.c-255-
./smartshell/daemon4/llb.c-256-		fprintf(fp, "\t}\n");
./smartshell/daemon4/llb.c-257-
./smartshell/daemon4/llb.c-258-	}
./smartshell/daemon4/llb.c-259-	fprintf(fp, "}\n");
./smartshell/daemon4/llb.c-260-
./smartshell/daemon4/llb.c-261-	return 0;
./smartshell/daemon4/llb.c-262-}
./smartshell/daemon4/llb.c-263-
./smartshell/daemon4/llb.c-264-static int llb_config_create(struct list_head *vserver_head,
./smartshell/daemon4/llb.c-265-				struct list_head *pool_head,
./smartshell/daemon4/llb.c-266-				FILE *fp)
./smartshell/daemon4/llb.c-267-{
./smartshell/daemon4/llb.c-268-	struct llb_vserver *vserver = NULL;
./smartshell/daemon4/llb.c:269:	struct llb_pool *pool = NULL;
./smartshell/daemon4/llb.c-270-
./smartshell/daemon4/llb.c-271-	list_for_each_entry(vserver, vserver_head, list) {
./smartshell/daemon4/llb.c:272:		list_for_each_entry(pool, pool_head, list) {
./smartshell/daemon4/llb.c:273:			if (!strcasecmp(vserver->poolname, pool->name)) {
./smartshell/daemon4/llb.c:274:				__llb_config_create(vserver, pool, fp);
./smartshell/daemon4/llb.c-275-				break;
./smartshell/daemon4/llb.c-276-			}
./smartshell/daemon4/llb.c-277-		}
./smartshell/daemon4/llb.c-278-	}
./smartshell/daemon4/llb.c-279-
./smartshell/daemon4/llb.c-280-	return 0;
./smartshell/daemon4/llb.c-281-}
./smartshell/daemon4/llb.c-282-
./smartshell/daemon4/llb.c-283-int llb_healthcheck_register(char *config_file)
./smartshell/daemon4/llb.c-284-{
--
./smartshell/daemon4/llb.c-307- * \t192.168.10.102:80 up pa normal
./smartshell/daemon4/llb.c-308- * \t192.168.10.103:80 down pa normal
./smartshell/daemon4/llb.c-309- **/
./smartshell/daemon4/llb.c-310-static int llb_reset_state_according_keepalived(struct list_head *vs_queue, 
./smartshell/daemon4/llb.c-311-						struct list_head *pool_queue)
./smartshell/daemon4/llb.c-312-{
./smartshell/daemon4/llb.c-313-	FILE *fp = NULL;
./smartshell/daemon4/llb.c-314-	char buff[BUFSIZ] = {0};
./smartshell/daemon4/llb.c-315-	struct list_head *list = NULL;
./smartshell/daemon4/llb.c-316-	struct llb_vserver *vserver = NULL;
./smartshell/daemon4/llb.c:317:	struct llb_pool *pool = NULL;
./smartshell/daemon4/llb.c-318-	struct llb_rserver *rserver = NULL;
./smartshell/daemon4/llb.c-319-
./smartshell/daemon4/llb.c-320-#define KEEPALIVED_ALIVE_FILE "/dev/shm/keepalived_healthcheck_status"
./smartshell/daemon4/llb.c-321-	if ((fp = fopen(KEEPALIVED_ALIVE_FILE, "r")) == NULL)
./smartshell/daemon4/llb.c-322-		goto out;
./smartshell/daemon4/llb.c-323-
./smartshell/daemon4/llb.c-324-	while (fgets(buff, BUFSIZ-1, fp) != NULL) {
./smartshell/daemon4/llb.c-325-		char name[512], address[512], state[512], type[512];
./smartshell/daemon4/llb.c-326-
./smartshell/daemon4/llb.c-327-		if (isalnum(buff[0])) { // llb vserver line
--
./smartshell/daemon4/llb.c-334-
./smartshell/daemon4/llb.c-335-			continue;
./smartshell/daemon4/llb.c-336-		}
./smartshell/daemon4/llb.c-337-
./smartshell/daemon4/llb.c-338-		if (vserver == NULL)
./smartshell/daemon4/llb.c-339-			continue;
./smartshell/daemon4/llb.c-340-
./smartshell/daemon4/llb.c-341-		// get rserver state
./smartshell/daemon4/llb.c-342-		sscanf(buff, "%s %s %s %s", address, state, name, type);
./smartshell/daemon4/llb.c-343-
./smartshell/daemon4/llb.c:344:		list_for_each_entry(pool, pool_queue, list) {
./smartshell/daemon4/llb.c:345:			if (strcasecmp(vserver->poolname, pool->name))
./smartshell/daemon4/llb.c-346-				continue;
./smartshell/daemon4/llb.c-347-				
./smartshell/daemon4/llb.c:348:			list_for_each_entry(rserver, &pool->rserver_head, list) {
./smartshell/daemon4/llb.c-349-				char tmp[BUFSIZ];
./smartshell/daemon4/llb.c-350-				memset(tmp, 0, sizeof(tmp));
./smartshell/daemon4/llb.c-351-				inet_sockaddr2address(&rserver->address, tmp);
./smartshell/daemon4/llb.c-352-				if (strcasecmp(address, tmp))
./smartshell/daemon4/llb.c-353-					continue;
./smartshell/daemon4/llb.c-354-
./smartshell/daemon4/llb.c-355-				if (strcasecmp(rserver->enable, "off") == 0) {
./smartshell/daemon4/llb.c-356-					continue;
./smartshell/daemon4/llb.c-357-				}
./smartshell/daemon4/llb.c-358-				strncpy(rserver->state, state, sizeof(rserver->state) - 1);
--
./smartshell/daemon4/llb.c-360-		}
./smartshell/daemon4/llb.c-361-	} // while
./smartshell/daemon4/llb.c-362-
./smartshell/daemon4/llb.c-363-	fclose(fp);
./smartshell/daemon4/llb.c-364-out:
./smartshell/daemon4/llb.c-365-	return 0;
./smartshell/daemon4/llb.c-366-}
./smartshell/daemon4/llb.c-367-
./smartshell/daemon4/llb.c-368-static int llb_vserver_running_state_fix(void)
./smartshell/daemon4/llb.c-369-{
./smartshell/daemon4/llb.c:370:	struct llb_pool *pool = NULL;
./smartshell/daemon4/llb.c-371-	struct llb_rserver *rs = NULL;
./smartshell/daemon4/llb.c-372-	struct llb_vserver *vs = NULL;
./smartshell/daemon4/llb.c-373-	int alive = 0;
./smartshell/daemon4/llb.c-374-	LIST_HEAD(queue);
./smartshell/daemon4/llb.c-375-	LIST_HEAD(vs_queue);
./smartshell/daemon4/llb.c-376-	
./smartshell/daemon4/llb.c-377-	module_get_queue(&vs_queue, "llb_vserver", NULL);
./smartshell/daemon4/llb.c-378-	module_get_queue(&queue, "llb_pool", NULL);	
./smartshell/daemon4/llb.c-379-	list_for_each_entry(vs, &vs_queue, list) {
./smartshell/daemon4/llb.c-380-		alive = 0;
./smartshell/daemon4/llb.c:381:		list_for_each_entry(pool, &queue, list) {
./smartshell/daemon4/llb.c:382:			if(strcasecmp(vs->poolname, pool->name) != 0)
./smartshell/daemon4/llb.c-383-				continue;
./smartshell/daemon4/llb.c-384-
./smartshell/daemon4/llb.c:385:			list_for_each_entry(rs, &pool->rserver_head, list){
./smartshell/daemon4/llb.c-386-				if(strcasecmp(rs->state, "up") == 0) {
./smartshell/daemon4/llb.c-387-					alive = 1;
./smartshell/daemon4/llb.c-388-					goto out;
./smartshell/daemon4/llb.c-389-				}
./smartshell/daemon4/llb.c-390-			}
./smartshell/daemon4/llb.c-391-		}
./smartshell/daemon4/llb.c-392-out:
./smartshell/daemon4/llb.c-393-		if (alive == 1)
./smartshell/daemon4/llb.c-394-			strcpy(vs->alive_state, "up");
./smartshell/daemon4/llb.c-395-		else
--
./smartshell/daemon4/event_log.c-209-			record_admin_log( address, details, SMARTLOG_GSLB_POOL_DELETE);
./smartshell/daemon4/event_log.c-210-		} else if (strcmp(objname, "bind9_domain") == 0) {
./smartshell/daemon4/event_log.c-211-			sprintf(details, "删除标准DNS【%s】", op);
./smartshell/daemon4/event_log.c-212-			record_admin_log( address, details, SMARTLOG_BIND9_DOMAIN_DELETE);
./smartshell/daemon4/event_log.c-213-		} else if (strcmp(objname, "llb_vserver") == 0) {
./smartshell/daemon4/event_log.c-214-			sprintf(details, "删除虚拟服务器【%s】", op);
./smartshell/daemon4/event_log.c-215-			record_admin_log( address, details, SMARTLOG_LLB_VSERVER_DELETE);
./smartshell/daemon4/event_log.c-216-		} else if (strcmp(objname, "llb_pool") == 0) {
./smartshell/daemon4/event_log.c-217-			sprintf(details, "删除应用池【%s】", op);
./smartshell/daemon4/event_log.c-218-			record_admin_log( address, details, SMARTLOG_LLB_POOL_DELETE);
./smartshell/daemon4/event_log.c:219:		} else if (strcmp(objname, "pool") == 0) {
./smartshell/daemon4/event_log.c-220-			sprintf(details, "删除应用池【%s】", op);
./smartshell/daemon4/event_log.c-221-			record_admin_log( address, details, SMARTLOG_DELETE_POOL);
./smartshell/daemon4/event_log.c-222-		} else if (strcmp(objname, "vserver") == 0) {
./smartshell/daemon4/event_log.c-223-#if 0
./smartshell/daemon4/event_log.c-224-			struct vserver v;
./smartshell/daemon4/event_log.c-225-			memset(&v, 0, sizeof(v));
./smartshell/daemon4/event_log.c-226-			strcpy(v.name, op);
./smartshell/daemon4/event_log.c-227-			vserver_entry(&v);
./smartshell/daemon4/event_log.c-228-#endif
./smartshell/daemon4/event_log.c-229-			sprintf(details, "删除虚拟服务器【%s】", op);
--
./smartshell/daemon4/event_log.c-358-				snprintf(tmpobjname, sizeof(tmpobjname)-1, "%s", objname);
./smartshell/daemon4/event_log.c-359-			} else if (strcmp(op, "set") == 0 && strcmp(key, "rule") == 0) {
./smartshell/daemon4/event_log.c-360-				sprintf(details, "设置虚拟服务器【%s】属性【rule order】为【%s %s】", objname, value, extention);
./smartshell/daemon4/event_log.c-361-			} else {
./smartshell/daemon4/event_log.c-362-				sprintf(details, "设置虚拟服务器【%s】属性【%s】为【%s】", objname, op, key[0] == 0 ? "NULL" : key);
./smartshell/daemon4/event_log.c-363-			}
./smartshell/daemon4/event_log.c-364-			record_admin_log( address, details,  SMARTLOG_VSERVER_SET);
./smartshell/daemon4/event_log.c-365-		}
./smartshell/daemon4/event_log.c-366-	}
./smartshell/daemon4/event_log.c-367-
./smartshell/daemon4/event_log.c:368:	/* pool */
./smartshell/daemon4/event_log.c:369:	else if(!strcmp(obj, "pool")){
./smartshell/daemon4/event_log.c-370-		if (!strcmp(op, "add") && !strcmp(key, "realserver")) {
./smartshell/daemon4/event_log.c-371-			char rserver[BUFSIZ];
./smartshell/daemon4/event_log.c-372-			sscanf(value, "%[^,]", rserver);
./smartshell/daemon4/event_log.c-373-			sprintf(details, "应用池【%s】中添加真实服务器【%s】", objname, rserver);
./smartshell/daemon4/event_log.c-374-			record_admin_log( address, details,  SMARTLOG_POOL_ADD_REALSERVER);
./smartshell/daemon4/event_log.c-375-		} else if (!strcmp(op, "delete") && !strcmp(key, "realserver")) {
./smartshell/daemon4/event_log.c-376-			sprintf(details, "应用池【%s】中删除真实服务器【%s】", objname, value);
./smartshell/daemon4/event_log.c-377-			record_admin_log( address, details,  SMARTLOG_POOL_DEL_REALSERVER);
./smartshell/daemon4/event_log.c-378-		} else {
./smartshell/daemon4/event_log.c-379-			if (strlen(op) == 0 && strlen(key) == 0) {
--
./smartshell/daemon4/event_log.c-440-		} else {
./smartshell/daemon4/event_log.c-441-			if (strlen(op) == 0 && strlen(key) == 0) {
./smartshell/daemon4/event_log.c-442-				sprintf(details, "添加虚拟服务器【%s】", objname);
./smartshell/daemon4/event_log.c-443-			} else {
./smartshell/daemon4/event_log.c-444-				sprintf(details, "设置虚拟服务器【%s】属性【%s】为【%s】", objname, op, key[0] == 0 ? "NULL" : key);
./smartshell/daemon4/event_log.c-445-			}
./smartshell/daemon4/event_log.c-446-			record_admin_log( address, details,  SMARTLOG_GSLB_VSERVER_SET);
./smartshell/daemon4/event_log.c-447-		}
./smartshell/daemon4/event_log.c-448-	}
./smartshell/daemon4/event_log.c-449-
./smartshell/daemon4/event_log.c:450:	/* GSLB pool */
./smartshell/daemon4/event_log.c-451-	else if(!strcmp(obj, "gslb_pool")){
./smartshell/daemon4/event_log.c-452-		if (strcmp(op, "add") == 0 && strcmp(key, "gslb_rserver") == 0 && strstr(value, "host") != NULL) {
./smartshell/daemon4/event_log.c-453-			char gslb_rs[BUFSIZ];
./smartshell/daemon4/event_log.c-454-			sscanf(value, "%[^,]", gslb_rs);
./smartshell/daemon4/event_log.c-455-			sprintf(details, "应用池【%s】中设置真实服务器【%s】", objname, gslb_rs);
./smartshell/daemon4/event_log.c-456-			record_admin_log( address, details,  SMARTLOG_GSLB_POOL_ADD);
./smartshell/daemon4/event_log.c-457-		} else if (strcmp(op, "add") == 0 && strcmp(key, "gslb_rserver") == 0 && strstr(value, "site") != NULL) {
./smartshell/daemon4/event_log.c-458-			sprintf(details, "应用池【%s】中设置规则【%s】", objname, value);
./smartshell/daemon4/event_log.c-459-			record_admin_log( address, details,  SMARTLOG_GSLB_POOL_ADD);
./smartshell/daemon4/event_log.c-460-		} else if (strcmp(op, "delete") == 0 && strcmp(key, "gslb_rserver") == 0) {
--
./smartshell/daemon4/event_log.c-518-			if (strlen(op) == 0 && strlen(key) == 0) {
./smartshell/daemon4/event_log.c-519-				sprintf(details, "添加标准DNS【%s】", objname);
./smartshell/daemon4/event_log.c-520-			} else {
./smartshell/daemon4/event_log.c-521-				sprintf(details, "设置标准DNS【%s】属性为【%s %s】", 
./smartshell/daemon4/event_log.c-522-						objname, key[0] == 0 ? "NULL" : key, value);
./smartshell/daemon4/event_log.c-523-			}
./smartshell/daemon4/event_log.c-524-			record_admin_log( address, details,  SMARTLOG_BIND9_DOMAIN_SET);
./smartshell/daemon4/event_log.c-525-		}
./smartshell/daemon4/event_log.c-526-	}
./smartshell/daemon4/event_log.c-527-
./smartshell/daemon4/event_log.c:528:	/* LLB pool */
./smartshell/daemon4/event_log.c-529-	else if(!strcmp(obj, "llb_pool")){
./smartshell/daemon4/event_log.c-530-		if (strcmp(op, "add") == 0 && strcmp(key, "llb_rserver") == 0) {
./smartshell/daemon4/event_log.c-531-			char llb_rs[BUFSIZ];
./smartshell/daemon4/event_log.c-532-			sscanf(value, "%[^,]", llb_rs);
./smartshell/daemon4/event_log.c-533-			sprintf(details, "应用池【%s】中设置真实服务器【%s】", objname, llb_rs);
./smartshell/daemon4/event_log.c-534-			record_admin_log( address, details,  SMARTLOG_LLB_POOL_ADD);
./smartshell/daemon4/event_log.c-535-#if 0
./smartshell/daemon4/event_log.c-536-		} else if (strcmp(op, "delete") == 0 && strcmp(key, "llb_rserver") == 0) {
./smartshell/daemon4/event_log.c-537-			sprintf(details, "应用池【%s】中删除真实服务器【%s】", objname, value);
./smartshell/daemon4/event_log.c-538-			record_admin_log( address, details,  SMARTLOG_LLB_POOL_DELETE);
--
./xenserver/src/xen_pool.c-168-    free(record->wlb_username);
./xenserver/src/xen_pool.c-169-    xen_vdi_record_opt_free(record->redo_log_vdi);
./xenserver/src/xen_pool.c-170-    free(record->vswitch_controller);
./xenserver/src/xen_pool.c-171-    xen_string_string_map_free(record->restrictions);
./xenserver/src/xen_pool.c-172-    xen_vdi_record_opt_set_free(record->metadata_vdis);
./xenserver/src/xen_pool.c-173-    free(record);
./xenserver/src/xen_pool.c-174-}
./xenserver/src/xen_pool.c-175-
./xenserver/src/xen_pool.c-176-
./xenserver/src/xen_pool.c-177-bool
./xenserver/src/xen_pool.c:178:xen_pool_get_record(xen_session *session, xen_pool_record **result, xen_pool pool)
./xenserver/src/xen_pool.c-179-{
./xenserver/src/xen_pool.c-180-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-181-        {
./xenserver/src/xen_pool.c-182-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:183:              .u.string_val = pool }
./xenserver/src/xen_pool.c-184-        };
./xenserver/src/xen_pool.c-185-
./xenserver/src/xen_pool.c-186-    abstract_type result_type = xen_pool_record_abstract_type_;
./xenserver/src/xen_pool.c-187-
./xenserver/src/xen_pool.c-188-    *result = NULL;
./xenserver/src/xen_pool.c:189:    XEN_CALL_("pool.get_record");
./xenserver/src/xen_pool.c-190-
./xenserver/src/xen_pool.c-191-    if (session->ok)
./xenserver/src/xen_pool.c-192-    {
./xenserver/src/xen_pool.c-193-       (*result)->handle = xen_strdup_((*result)->uuid);
./xenserver/src/xen_pool.c-194-    }
./xenserver/src/xen_pool.c-195-
./xenserver/src/xen_pool.c-196-    return session->ok;
./xenserver/src/xen_pool.c-197-}
./xenserver/src/xen_pool.c-198-
./xenserver/src/xen_pool.c-199-
--
./xenserver/src/xen_pool.c-202-{
./xenserver/src/xen_pool.c-203-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-204-        {
./xenserver/src/xen_pool.c-205-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-206-              .u.string_val = uuid }
./xenserver/src/xen_pool.c-207-        };
./xenserver/src/xen_pool.c-208-
./xenserver/src/xen_pool.c-209-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-210-
./xenserver/src/xen_pool.c-211-    *result = NULL;
./xenserver/src/xen_pool.c:212:    XEN_CALL_("pool.get_by_uuid");
./xenserver/src/xen_pool.c-213-    return session->ok;
./xenserver/src/xen_pool.c-214-}
./xenserver/src/xen_pool.c-215-
./xenserver/src/xen_pool.c-216-
./xenserver/src/xen_pool.c-217-bool
./xenserver/src/xen_pool.c:218:xen_pool_get_name_label(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-219-{
./xenserver/src/xen_pool.c-220-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-221-        {
./xenserver/src/xen_pool.c-222-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:223:              .u.string_val = pool }
./xenserver/src/xen_pool.c-224-        };
./xenserver/src/xen_pool.c-225-
./xenserver/src/xen_pool.c-226-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-227-
./xenserver/src/xen_pool.c-228-    *result = NULL;
./xenserver/src/xen_pool.c:229:    XEN_CALL_("pool.get_name_label");
./xenserver/src/xen_pool.c-230-    return session->ok;
./xenserver/src/xen_pool.c-231-}
./xenserver/src/xen_pool.c-232-
./xenserver/src/xen_pool.c-233-
./xenserver/src/xen_pool.c-234-bool
./xenserver/src/xen_pool.c:235:xen_pool_get_name_description(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-236-{
./xenserver/src/xen_pool.c-237-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-238-        {
./xenserver/src/xen_pool.c-239-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:240:              .u.string_val = pool }
./xenserver/src/xen_pool.c-241-        };
./xenserver/src/xen_pool.c-242-
./xenserver/src/xen_pool.c-243-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-244-
./xenserver/src/xen_pool.c-245-    *result = NULL;
./xenserver/src/xen_pool.c:246:    XEN_CALL_("pool.get_name_description");
./xenserver/src/xen_pool.c-247-    return session->ok;
./xenserver/src/xen_pool.c-248-}
./xenserver/src/xen_pool.c-249-
./xenserver/src/xen_pool.c-250-
./xenserver/src/xen_pool.c-251-bool
./xenserver/src/xen_pool.c:252:xen_pool_get_master(xen_session *session, xen_host *result, xen_pool pool)
./xenserver/src/xen_pool.c-253-{
./xenserver/src/xen_pool.c-254-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-255-        {
./xenserver/src/xen_pool.c-256-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:257:              .u.string_val = pool }
./xenserver/src/xen_pool.c-258-        };
./xenserver/src/xen_pool.c-259-
./xenserver/src/xen_pool.c-260-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-261-
./xenserver/src/xen_pool.c-262-    *result = NULL;
./xenserver/src/xen_pool.c:263:    XEN_CALL_("pool.get_master");
./xenserver/src/xen_pool.c-264-    return session->ok;
./xenserver/src/xen_pool.c-265-}
./xenserver/src/xen_pool.c-266-
./xenserver/src/xen_pool.c-267-
./xenserver/src/xen_pool.c-268-bool
./xenserver/src/xen_pool.c:269:xen_pool_get_default_sr(xen_session *session, xen_sr *result, xen_pool pool)
./xenserver/src/xen_pool.c-270-{
./xenserver/src/xen_pool.c-271-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-272-        {
./xenserver/src/xen_pool.c-273-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:274:              .u.string_val = pool }
./xenserver/src/xen_pool.c-275-        };
./xenserver/src/xen_pool.c-276-
./xenserver/src/xen_pool.c-277-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-278-
./xenserver/src/xen_pool.c-279-    *result = NULL;
./xenserver/src/xen_pool.c:280:    XEN_CALL_("pool.get_default_SR");
./xenserver/src/xen_pool.c-281-    return session->ok;
./xenserver/src/xen_pool.c-282-}
./xenserver/src/xen_pool.c-283-
./xenserver/src/xen_pool.c-284-
./xenserver/src/xen_pool.c-285-bool
./xenserver/src/xen_pool.c:286:xen_pool_get_suspend_image_sr(xen_session *session, xen_sr *result, xen_pool pool)
./xenserver/src/xen_pool.c-287-{
./xenserver/src/xen_pool.c-288-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-289-        {
./xenserver/src/xen_pool.c-290-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:291:              .u.string_val = pool }
./xenserver/src/xen_pool.c-292-        };
./xenserver/src/xen_pool.c-293-
./xenserver/src/xen_pool.c-294-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-295-
./xenserver/src/xen_pool.c-296-    *result = NULL;
./xenserver/src/xen_pool.c:297:    XEN_CALL_("pool.get_suspend_image_SR");
./xenserver/src/xen_pool.c-298-    return session->ok;
./xenserver/src/xen_pool.c-299-}
./xenserver/src/xen_pool.c-300-
./xenserver/src/xen_pool.c-301-
./xenserver/src/xen_pool.c-302-bool
./xenserver/src/xen_pool.c:303:xen_pool_get_crash_dump_sr(xen_session *session, xen_sr *result, xen_pool pool)
./xenserver/src/xen_pool.c-304-{
./xenserver/src/xen_pool.c-305-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-306-        {
./xenserver/src/xen_pool.c-307-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:308:              .u.string_val = pool }
./xenserver/src/xen_pool.c-309-        };
./xenserver/src/xen_pool.c-310-
./xenserver/src/xen_pool.c-311-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-312-
./xenserver/src/xen_pool.c-313-    *result = NULL;
./xenserver/src/xen_pool.c:314:    XEN_CALL_("pool.get_crash_dump_SR");
./xenserver/src/xen_pool.c-315-    return session->ok;
./xenserver/src/xen_pool.c-316-}
./xenserver/src/xen_pool.c-317-
./xenserver/src/xen_pool.c-318-
./xenserver/src/xen_pool.c-319-bool
./xenserver/src/xen_pool.c:320:xen_pool_get_other_config(xen_session *session, xen_string_string_map **result, xen_pool pool)
./xenserver/src/xen_pool.c-321-{
./xenserver/src/xen_pool.c-322-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-323-        {
./xenserver/src/xen_pool.c-324-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:325:              .u.string_val = pool }
./xenserver/src/xen_pool.c-326-        };
./xenserver/src/xen_pool.c-327-
./xenserver/src/xen_pool.c-328-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-329-
./xenserver/src/xen_pool.c-330-    *result = NULL;
./xenserver/src/xen_pool.c:331:    XEN_CALL_("pool.get_other_config");
./xenserver/src/xen_pool.c-332-    return session->ok;
./xenserver/src/xen_pool.c-333-}
./xenserver/src/xen_pool.c-334-
./xenserver/src/xen_pool.c-335-
./xenserver/src/xen_pool.c-336-bool
./xenserver/src/xen_pool.c:337:xen_pool_get_ha_enabled(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-338-{
./xenserver/src/xen_pool.c-339-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-340-        {
./xenserver/src/xen_pool.c-341-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:342:              .u.string_val = pool }
./xenserver/src/xen_pool.c-343-        };
./xenserver/src/xen_pool.c-344-
./xenserver/src/xen_pool.c-345-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-346-
./xenserver/src/xen_pool.c:347:    XEN_CALL_("pool.get_ha_enabled");
./xenserver/src/xen_pool.c-348-    return session->ok;
./xenserver/src/xen_pool.c-349-}
./xenserver/src/xen_pool.c-350-
./xenserver/src/xen_pool.c-351-
./xenserver/src/xen_pool.c-352-bool
./xenserver/src/xen_pool.c:353:xen_pool_get_ha_configuration(xen_session *session, xen_string_string_map **result, xen_pool pool)
./xenserver/src/xen_pool.c-354-{
./xenserver/src/xen_pool.c-355-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-356-        {
./xenserver/src/xen_pool.c-357-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:358:              .u.string_val = pool }
./xenserver/src/xen_pool.c-359-        };
./xenserver/src/xen_pool.c-360-
./xenserver/src/xen_pool.c-361-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-362-
./xenserver/src/xen_pool.c-363-    *result = NULL;
./xenserver/src/xen_pool.c:364:    XEN_CALL_("pool.get_ha_configuration");
./xenserver/src/xen_pool.c-365-    return session->ok;
./xenserver/src/xen_pool.c-366-}
./xenserver/src/xen_pool.c-367-
./xenserver/src/xen_pool.c-368-
./xenserver/src/xen_pool.c-369-bool
./xenserver/src/xen_pool.c:370:xen_pool_get_ha_statefiles(xen_session *session, struct xen_string_set **result, xen_pool pool)
./xenserver/src/xen_pool.c-371-{
./xenserver/src/xen_pool.c-372-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-373-        {
./xenserver/src/xen_pool.c-374-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:375:              .u.string_val = pool }
./xenserver/src/xen_pool.c-376-        };
./xenserver/src/xen_pool.c-377-
./xenserver/src/xen_pool.c-378-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-379-
./xenserver/src/xen_pool.c-380-    *result = NULL;
./xenserver/src/xen_pool.c:381:    XEN_CALL_("pool.get_ha_statefiles");
./xenserver/src/xen_pool.c-382-    return session->ok;
./xenserver/src/xen_pool.c-383-}
./xenserver/src/xen_pool.c-384-
./xenserver/src/xen_pool.c-385-
./xenserver/src/xen_pool.c-386-bool
./xenserver/src/xen_pool.c:387:xen_pool_get_ha_host_failures_to_tolerate(xen_session *session, int64_t *result, xen_pool pool)
./xenserver/src/xen_pool.c-388-{
./xenserver/src/xen_pool.c-389-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-390-        {
./xenserver/src/xen_pool.c-391-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:392:              .u.string_val = pool }
./xenserver/src/xen_pool.c-393-        };
./xenserver/src/xen_pool.c-394-
./xenserver/src/xen_pool.c-395-    abstract_type result_type = abstract_type_int;
./xenserver/src/xen_pool.c-396-
./xenserver/src/xen_pool.c:397:    XEN_CALL_("pool.get_ha_host_failures_to_tolerate");
./xenserver/src/xen_pool.c-398-    return session->ok;
./xenserver/src/xen_pool.c-399-}
./xenserver/src/xen_pool.c-400-
./xenserver/src/xen_pool.c-401-
./xenserver/src/xen_pool.c-402-bool
./xenserver/src/xen_pool.c:403:xen_pool_get_ha_plan_exists_for(xen_session *session, int64_t *result, xen_pool pool)
./xenserver/src/xen_pool.c-404-{
./xenserver/src/xen_pool.c-405-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-406-        {
./xenserver/src/xen_pool.c-407-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:408:              .u.string_val = pool }
./xenserver/src/xen_pool.c-409-        };
./xenserver/src/xen_pool.c-410-
./xenserver/src/xen_pool.c-411-    abstract_type result_type = abstract_type_int;
./xenserver/src/xen_pool.c-412-
./xenserver/src/xen_pool.c:413:    XEN_CALL_("pool.get_ha_plan_exists_for");
./xenserver/src/xen_pool.c-414-    return session->ok;
./xenserver/src/xen_pool.c-415-}
./xenserver/src/xen_pool.c-416-
./xenserver/src/xen_pool.c-417-
./xenserver/src/xen_pool.c-418-bool
./xenserver/src/xen_pool.c:419:xen_pool_get_ha_allow_overcommit(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-420-{
./xenserver/src/xen_pool.c-421-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-422-        {
./xenserver/src/xen_pool.c-423-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:424:              .u.string_val = pool }
./xenserver/src/xen_pool.c-425-        };
./xenserver/src/xen_pool.c-426-
./xenserver/src/xen_pool.c-427-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-428-
./xenserver/src/xen_pool.c:429:    XEN_CALL_("pool.get_ha_allow_overcommit");
./xenserver/src/xen_pool.c-430-    return session->ok;
./xenserver/src/xen_pool.c-431-}
./xenserver/src/xen_pool.c-432-
./xenserver/src/xen_pool.c-433-
./xenserver/src/xen_pool.c-434-bool
./xenserver/src/xen_pool.c:435:xen_pool_get_ha_overcommitted(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-436-{
./xenserver/src/xen_pool.c-437-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-438-        {
./xenserver/src/xen_pool.c-439-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:440:              .u.string_val = pool }
./xenserver/src/xen_pool.c-441-        };
./xenserver/src/xen_pool.c-442-
./xenserver/src/xen_pool.c-443-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-444-
./xenserver/src/xen_pool.c:445:    XEN_CALL_("pool.get_ha_overcommitted");
./xenserver/src/xen_pool.c-446-    return session->ok;
./xenserver/src/xen_pool.c-447-}
./xenserver/src/xen_pool.c-448-
./xenserver/src/xen_pool.c-449-
./xenserver/src/xen_pool.c-450-bool
./xenserver/src/xen_pool.c:451:xen_pool_get_blobs(xen_session *session, xen_string_blob_map **result, xen_pool pool)
./xenserver/src/xen_pool.c-452-{
./xenserver/src/xen_pool.c-453-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-454-        {
./xenserver/src/xen_pool.c-455-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:456:              .u.string_val = pool }
./xenserver/src/xen_pool.c-457-        };
./xenserver/src/xen_pool.c-458-
./xenserver/src/xen_pool.c-459-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-460-
./xenserver/src/xen_pool.c-461-    *result = NULL;
./xenserver/src/xen_pool.c:462:    XEN_CALL_("pool.get_blobs");
./xenserver/src/xen_pool.c-463-    return session->ok;
./xenserver/src/xen_pool.c-464-}
./xenserver/src/xen_pool.c-465-
./xenserver/src/xen_pool.c-466-
./xenserver/src/xen_pool.c-467-bool
./xenserver/src/xen_pool.c:468:xen_pool_get_tags(xen_session *session, struct xen_string_set **result, xen_pool pool)
./xenserver/src/xen_pool.c-469-{
./xenserver/src/xen_pool.c-470-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-471-        {
./xenserver/src/xen_pool.c-472-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:473:              .u.string_val = pool }
./xenserver/src/xen_pool.c-474-        };
./xenserver/src/xen_pool.c-475-
./xenserver/src/xen_pool.c-476-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-477-
./xenserver/src/xen_pool.c-478-    *result = NULL;
./xenserver/src/xen_pool.c:479:    XEN_CALL_("pool.get_tags");
./xenserver/src/xen_pool.c-480-    return session->ok;
./xenserver/src/xen_pool.c-481-}
./xenserver/src/xen_pool.c-482-
./xenserver/src/xen_pool.c-483-
./xenserver/src/xen_pool.c-484-bool
./xenserver/src/xen_pool.c:485:xen_pool_get_gui_config(xen_session *session, xen_string_string_map **result, xen_pool pool)
./xenserver/src/xen_pool.c-486-{
./xenserver/src/xen_pool.c-487-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-488-        {
./xenserver/src/xen_pool.c-489-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:490:              .u.string_val = pool }
./xenserver/src/xen_pool.c-491-        };
./xenserver/src/xen_pool.c-492-
./xenserver/src/xen_pool.c-493-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-494-
./xenserver/src/xen_pool.c-495-    *result = NULL;
./xenserver/src/xen_pool.c:496:    XEN_CALL_("pool.get_gui_config");
./xenserver/src/xen_pool.c-497-    return session->ok;
./xenserver/src/xen_pool.c-498-}
./xenserver/src/xen_pool.c-499-
./xenserver/src/xen_pool.c-500-
./xenserver/src/xen_pool.c-501-bool
./xenserver/src/xen_pool.c:502:xen_pool_get_wlb_url(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-503-{
./xenserver/src/xen_pool.c-504-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-505-        {
./xenserver/src/xen_pool.c-506-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:507:              .u.string_val = pool }
./xenserver/src/xen_pool.c-508-        };
./xenserver/src/xen_pool.c-509-
./xenserver/src/xen_pool.c-510-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-511-
./xenserver/src/xen_pool.c-512-    *result = NULL;
./xenserver/src/xen_pool.c:513:    XEN_CALL_("pool.get_wlb_url");
./xenserver/src/xen_pool.c-514-    return session->ok;
./xenserver/src/xen_pool.c-515-}
./xenserver/src/xen_pool.c-516-
./xenserver/src/xen_pool.c-517-
./xenserver/src/xen_pool.c-518-bool
./xenserver/src/xen_pool.c:519:xen_pool_get_wlb_username(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-520-{
./xenserver/src/xen_pool.c-521-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-522-        {
./xenserver/src/xen_pool.c-523-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:524:              .u.string_val = pool }
./xenserver/src/xen_pool.c-525-        };
./xenserver/src/xen_pool.c-526-
./xenserver/src/xen_pool.c-527-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-528-
./xenserver/src/xen_pool.c-529-    *result = NULL;
./xenserver/src/xen_pool.c:530:    XEN_CALL_("pool.get_wlb_username");
./xenserver/src/xen_pool.c-531-    return session->ok;
./xenserver/src/xen_pool.c-532-}
./xenserver/src/xen_pool.c-533-
./xenserver/src/xen_pool.c-534-
./xenserver/src/xen_pool.c-535-bool
./xenserver/src/xen_pool.c:536:xen_pool_get_wlb_enabled(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-537-{
./xenserver/src/xen_pool.c-538-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-539-        {
./xenserver/src/xen_pool.c-540-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:541:              .u.string_val = pool }
./xenserver/src/xen_pool.c-542-        };
./xenserver/src/xen_pool.c-543-
./xenserver/src/xen_pool.c-544-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-545-
./xenserver/src/xen_pool.c:546:    XEN_CALL_("pool.get_wlb_enabled");
./xenserver/src/xen_pool.c-547-    return session->ok;
./xenserver/src/xen_pool.c-548-}
./xenserver/src/xen_pool.c-549-
./xenserver/src/xen_pool.c-550-
./xenserver/src/xen_pool.c-551-bool
./xenserver/src/xen_pool.c:552:xen_pool_get_wlb_verify_cert(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-553-{
./xenserver/src/xen_pool.c-554-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-555-        {
./xenserver/src/xen_pool.c-556-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:557:              .u.string_val = pool }
./xenserver/src/xen_pool.c-558-        };
./xenserver/src/xen_pool.c-559-
./xenserver/src/xen_pool.c-560-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-561-
./xenserver/src/xen_pool.c:562:    XEN_CALL_("pool.get_wlb_verify_cert");
./xenserver/src/xen_pool.c-563-    return session->ok;
./xenserver/src/xen_pool.c-564-}
./xenserver/src/xen_pool.c-565-
./xenserver/src/xen_pool.c-566-
./xenserver/src/xen_pool.c-567-bool
./xenserver/src/xen_pool.c:568:xen_pool_get_redo_log_enabled(xen_session *session, bool *result, xen_pool pool)
./xenserver/src/xen_pool.c-569-{
./xenserver/src/xen_pool.c-570-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-571-        {
./xenserver/src/xen_pool.c-572-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:573:              .u.string_val = pool }
./xenserver/src/xen_pool.c-574-        };
./xenserver/src/xen_pool.c-575-
./xenserver/src/xen_pool.c-576-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-577-
./xenserver/src/xen_pool.c:578:    XEN_CALL_("pool.get_redo_log_enabled");
./xenserver/src/xen_pool.c-579-    return session->ok;
./xenserver/src/xen_pool.c-580-}
./xenserver/src/xen_pool.c-581-
./xenserver/src/xen_pool.c-582-
./xenserver/src/xen_pool.c-583-bool
./xenserver/src/xen_pool.c:584:xen_pool_get_redo_log_vdi(xen_session *session, xen_vdi *result, xen_pool pool)
./xenserver/src/xen_pool.c-585-{
./xenserver/src/xen_pool.c-586-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-587-        {
./xenserver/src/xen_pool.c-588-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:589:              .u.string_val = pool }
./xenserver/src/xen_pool.c-590-        };
./xenserver/src/xen_pool.c-591-
./xenserver/src/xen_pool.c-592-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-593-
./xenserver/src/xen_pool.c-594-    *result = NULL;
./xenserver/src/xen_pool.c:595:    XEN_CALL_("pool.get_redo_log_vdi");
./xenserver/src/xen_pool.c-596-    return session->ok;
./xenserver/src/xen_pool.c-597-}
./xenserver/src/xen_pool.c-598-
./xenserver/src/xen_pool.c-599-
./xenserver/src/xen_pool.c-600-bool
./xenserver/src/xen_pool.c:601:xen_pool_get_vswitch_controller(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-602-{
./xenserver/src/xen_pool.c-603-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-604-        {
./xenserver/src/xen_pool.c-605-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:606:              .u.string_val = pool }
./xenserver/src/xen_pool.c-607-        };
./xenserver/src/xen_pool.c-608-
./xenserver/src/xen_pool.c-609-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-610-
./xenserver/src/xen_pool.c-611-    *result = NULL;
./xenserver/src/xen_pool.c:612:    XEN_CALL_("pool.get_vswitch_controller");
./xenserver/src/xen_pool.c-613-    return session->ok;
./xenserver/src/xen_pool.c-614-}
./xenserver/src/xen_pool.c-615-
./xenserver/src/xen_pool.c-616-
./xenserver/src/xen_pool.c-617-bool
./xenserver/src/xen_pool.c:618:xen_pool_get_restrictions(xen_session *session, xen_string_string_map **result, xen_pool pool)
./xenserver/src/xen_pool.c-619-{
./xenserver/src/xen_pool.c-620-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-621-        {
./xenserver/src/xen_pool.c-622-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:623:              .u.string_val = pool }
./xenserver/src/xen_pool.c-624-        };
./xenserver/src/xen_pool.c-625-
./xenserver/src/xen_pool.c-626-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-627-
./xenserver/src/xen_pool.c-628-    *result = NULL;
./xenserver/src/xen_pool.c:629:    XEN_CALL_("pool.get_restrictions");
./xenserver/src/xen_pool.c-630-    return session->ok;
./xenserver/src/xen_pool.c-631-}
./xenserver/src/xen_pool.c-632-
./xenserver/src/xen_pool.c-633-
./xenserver/src/xen_pool.c-634-bool
./xenserver/src/xen_pool.c:635:xen_pool_get_metadata_vdis(xen_session *session, struct xen_vdi_set **result, xen_pool pool)
./xenserver/src/xen_pool.c-636-{
./xenserver/src/xen_pool.c-637-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-638-        {
./xenserver/src/xen_pool.c-639-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:640:              .u.string_val = pool }
./xenserver/src/xen_pool.c-641-        };
./xenserver/src/xen_pool.c-642-
./xenserver/src/xen_pool.c-643-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-644-
./xenserver/src/xen_pool.c-645-    *result = NULL;
./xenserver/src/xen_pool.c:646:    XEN_CALL_("pool.get_metadata_VDIs");
./xenserver/src/xen_pool.c-647-    return session->ok;
./xenserver/src/xen_pool.c-648-}
./xenserver/src/xen_pool.c-649-
./xenserver/src/xen_pool.c-650-
./xenserver/src/xen_pool.c-651-bool
./xenserver/src/xen_pool.c:652:xen_pool_set_name_label(xen_session *session, xen_pool pool, char *name_label)
./xenserver/src/xen_pool.c-653-{
./xenserver/src/xen_pool.c-654-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-655-        {
./xenserver/src/xen_pool.c-656-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:657:              .u.string_val = pool },
./xenserver/src/xen_pool.c-658-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-659-              .u.string_val = name_label }
./xenserver/src/xen_pool.c-660-        };
./xenserver/src/xen_pool.c-661-
./xenserver/src/xen_pool.c:662:    xen_call_(session, "pool.set_name_label", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-663-    return session->ok;
./xenserver/src/xen_pool.c-664-}
./xenserver/src/xen_pool.c-665-
./xenserver/src/xen_pool.c-666-
./xenserver/src/xen_pool.c-667-bool
./xenserver/src/xen_pool.c:668:xen_pool_set_name_description(xen_session *session, xen_pool pool, char *name_description)
./xenserver/src/xen_pool.c-669-{
./xenserver/src/xen_pool.c-670-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-671-        {
./xenserver/src/xen_pool.c-672-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:673:              .u.string_val = pool },
./xenserver/src/xen_pool.c-674-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-675-              .u.string_val = name_description }
./xenserver/src/xen_pool.c-676-        };
./xenserver/src/xen_pool.c-677-
./xenserver/src/xen_pool.c:678:    xen_call_(session, "pool.set_name_description", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-679-    return session->ok;
./xenserver/src/xen_pool.c-680-}
./xenserver/src/xen_pool.c-681-
./xenserver/src/xen_pool.c-682-
./xenserver/src/xen_pool.c-683-bool
./xenserver/src/xen_pool.c:684:xen_pool_set_default_sr(xen_session *session, xen_pool pool, xen_sr default_sr)
./xenserver/src/xen_pool.c-685-{
./xenserver/src/xen_pool.c-686-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-687-        {
./xenserver/src/xen_pool.c-688-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:689:              .u.string_val = pool },
./xenserver/src/xen_pool.c-690-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-691-              .u.string_val = default_sr }
./xenserver/src/xen_pool.c-692-        };
./xenserver/src/xen_pool.c-693-
./xenserver/src/xen_pool.c:694:    xen_call_(session, "pool.set_default_SR", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-695-    return session->ok;
./xenserver/src/xen_pool.c-696-}
./xenserver/src/xen_pool.c-697-
./xenserver/src/xen_pool.c-698-
./xenserver/src/xen_pool.c-699-bool
./xenserver/src/xen_pool.c:700:xen_pool_set_suspend_image_sr(xen_session *session, xen_pool pool, xen_sr suspend_image_sr)
./xenserver/src/xen_pool.c-701-{
./xenserver/src/xen_pool.c-702-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-703-        {
./xenserver/src/xen_pool.c-704-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:705:              .u.string_val = pool },
./xenserver/src/xen_pool.c-706-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-707-              .u.string_val = suspend_image_sr }
./xenserver/src/xen_pool.c-708-        };
./xenserver/src/xen_pool.c-709-
./xenserver/src/xen_pool.c:710:    xen_call_(session, "pool.set_suspend_image_SR", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-711-    return session->ok;
./xenserver/src/xen_pool.c-712-}
./xenserver/src/xen_pool.c-713-
./xenserver/src/xen_pool.c-714-
./xenserver/src/xen_pool.c-715-bool
./xenserver/src/xen_pool.c:716:xen_pool_set_crash_dump_sr(xen_session *session, xen_pool pool, xen_sr crash_dump_sr)
./xenserver/src/xen_pool.c-717-{
./xenserver/src/xen_pool.c-718-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-719-        {
./xenserver/src/xen_pool.c-720-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:721:              .u.string_val = pool },
./xenserver/src/xen_pool.c-722-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-723-              .u.string_val = crash_dump_sr }
./xenserver/src/xen_pool.c-724-        };
./xenserver/src/xen_pool.c-725-
./xenserver/src/xen_pool.c:726:    xen_call_(session, "pool.set_crash_dump_SR", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-727-    return session->ok;
./xenserver/src/xen_pool.c-728-}
./xenserver/src/xen_pool.c-729-
./xenserver/src/xen_pool.c-730-
./xenserver/src/xen_pool.c-731-bool
./xenserver/src/xen_pool.c:732:xen_pool_set_other_config(xen_session *session, xen_pool pool, xen_string_string_map *other_config)
./xenserver/src/xen_pool.c-733-{
./xenserver/src/xen_pool.c-734-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-735-        {
./xenserver/src/xen_pool.c-736-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:737:              .u.string_val = pool },
./xenserver/src/xen_pool.c-738-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-739-              .u.set_val = (arbitrary_set *)other_config }
./xenserver/src/xen_pool.c-740-        };
./xenserver/src/xen_pool.c-741-
./xenserver/src/xen_pool.c:742:    xen_call_(session, "pool.set_other_config", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-743-    return session->ok;
./xenserver/src/xen_pool.c-744-}
./xenserver/src/xen_pool.c-745-
./xenserver/src/xen_pool.c-746-
./xenserver/src/xen_pool.c-747-bool
./xenserver/src/xen_pool.c:748:xen_pool_add_to_other_config(xen_session *session, xen_pool pool, char *key, char *value)
./xenserver/src/xen_pool.c-749-{
./xenserver/src/xen_pool.c-750-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-751-        {
./xenserver/src/xen_pool.c-752-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:753:              .u.string_val = pool },
./xenserver/src/xen_pool.c-754-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-755-              .u.string_val = key },
./xenserver/src/xen_pool.c-756-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-757-              .u.string_val = value }
./xenserver/src/xen_pool.c-758-        };
./xenserver/src/xen_pool.c-759-
./xenserver/src/xen_pool.c:760:    xen_call_(session, "pool.add_to_other_config", param_values, 3, NULL, NULL);
./xenserver/src/xen_pool.c-761-    return session->ok;
./xenserver/src/xen_pool.c-762-}
./xenserver/src/xen_pool.c-763-
./xenserver/src/xen_pool.c-764-
./xenserver/src/xen_pool.c-765-bool
./xenserver/src/xen_pool.c:766:xen_pool_remove_from_other_config(xen_session *session, xen_pool pool, char *key)
./xenserver/src/xen_pool.c-767-{
./xenserver/src/xen_pool.c-768-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-769-        {
./xenserver/src/xen_pool.c-770-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:771:              .u.string_val = pool },
./xenserver/src/xen_pool.c-772-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-773-              .u.string_val = key }
./xenserver/src/xen_pool.c-774-        };
./xenserver/src/xen_pool.c-775-
./xenserver/src/xen_pool.c:776:    xen_call_(session, "pool.remove_from_other_config", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-777-    return session->ok;
./xenserver/src/xen_pool.c-778-}
./xenserver/src/xen_pool.c-779-
./xenserver/src/xen_pool.c-780-
./xenserver/src/xen_pool.c-781-bool
./xenserver/src/xen_pool.c:782:xen_pool_set_ha_allow_overcommit(xen_session *session, xen_pool pool, bool ha_allow_overcommit)
./xenserver/src/xen_pool.c-783-{
./xenserver/src/xen_pool.c-784-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-785-        {
./xenserver/src/xen_pool.c-786-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:787:              .u.string_val = pool },
./xenserver/src/xen_pool.c-788-            { .type = &abstract_type_bool,
./xenserver/src/xen_pool.c-789-              .u.bool_val = ha_allow_overcommit }
./xenserver/src/xen_pool.c-790-        };
./xenserver/src/xen_pool.c-791-
./xenserver/src/xen_pool.c:792:    xen_call_(session, "pool.set_ha_allow_overcommit", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-793-    return session->ok;
./xenserver/src/xen_pool.c-794-}
./xenserver/src/xen_pool.c-795-
./xenserver/src/xen_pool.c-796-
./xenserver/src/xen_pool.c-797-bool
./xenserver/src/xen_pool.c:798:xen_pool_set_tags(xen_session *session, xen_pool pool, struct xen_string_set *tags)
./xenserver/src/xen_pool.c-799-{
./xenserver/src/xen_pool.c-800-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-801-        {
./xenserver/src/xen_pool.c-802-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:803:              .u.string_val = pool },
./xenserver/src/xen_pool.c-804-            { .type = &abstract_type_string_set,
./xenserver/src/xen_pool.c-805-              .u.set_val = (arbitrary_set *)tags }
./xenserver/src/xen_pool.c-806-        };
./xenserver/src/xen_pool.c-807-
./xenserver/src/xen_pool.c:808:    xen_call_(session, "pool.set_tags", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-809-    return session->ok;
./xenserver/src/xen_pool.c-810-}
./xenserver/src/xen_pool.c-811-
./xenserver/src/xen_pool.c-812-
./xenserver/src/xen_pool.c-813-bool
./xenserver/src/xen_pool.c:814:xen_pool_add_tags(xen_session *session, xen_pool pool, char *value)
./xenserver/src/xen_pool.c-815-{
./xenserver/src/xen_pool.c-816-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-817-        {
./xenserver/src/xen_pool.c-818-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:819:              .u.string_val = pool },
./xenserver/src/xen_pool.c-820-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-821-              .u.string_val = value }
./xenserver/src/xen_pool.c-822-        };
./xenserver/src/xen_pool.c-823-
./xenserver/src/xen_pool.c:824:    xen_call_(session, "pool.add_tags", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-825-    return session->ok;
./xenserver/src/xen_pool.c-826-}
./xenserver/src/xen_pool.c-827-
./xenserver/src/xen_pool.c-828-
./xenserver/src/xen_pool.c-829-bool
./xenserver/src/xen_pool.c:830:xen_pool_remove_tags(xen_session *session, xen_pool pool, char *value)
./xenserver/src/xen_pool.c-831-{
./xenserver/src/xen_pool.c-832-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-833-        {
./xenserver/src/xen_pool.c-834-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:835:              .u.string_val = pool },
./xenserver/src/xen_pool.c-836-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-837-              .u.string_val = value }
./xenserver/src/xen_pool.c-838-        };
./xenserver/src/xen_pool.c-839-
./xenserver/src/xen_pool.c:840:    xen_call_(session, "pool.remove_tags", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-841-    return session->ok;
./xenserver/src/xen_pool.c-842-}
./xenserver/src/xen_pool.c-843-
./xenserver/src/xen_pool.c-844-
./xenserver/src/xen_pool.c-845-bool
./xenserver/src/xen_pool.c:846:xen_pool_set_gui_config(xen_session *session, xen_pool pool, xen_string_string_map *gui_config)
./xenserver/src/xen_pool.c-847-{
./xenserver/src/xen_pool.c-848-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-849-        {
./xenserver/src/xen_pool.c-850-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:851:              .u.string_val = pool },
./xenserver/src/xen_pool.c-852-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-853-              .u.set_val = (arbitrary_set *)gui_config }
./xenserver/src/xen_pool.c-854-        };
./xenserver/src/xen_pool.c-855-
./xenserver/src/xen_pool.c:856:    xen_call_(session, "pool.set_gui_config", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-857-    return session->ok;
./xenserver/src/xen_pool.c-858-}
./xenserver/src/xen_pool.c-859-
./xenserver/src/xen_pool.c-860-
./xenserver/src/xen_pool.c-861-bool
./xenserver/src/xen_pool.c:862:xen_pool_add_to_gui_config(xen_session *session, xen_pool pool, char *key, char *value)
./xenserver/src/xen_pool.c-863-{
./xenserver/src/xen_pool.c-864-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-865-        {
./xenserver/src/xen_pool.c-866-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:867:              .u.string_val = pool },
./xenserver/src/xen_pool.c-868-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-869-              .u.string_val = key },
./xenserver/src/xen_pool.c-870-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-871-              .u.string_val = value }
./xenserver/src/xen_pool.c-872-        };
./xenserver/src/xen_pool.c-873-
./xenserver/src/xen_pool.c:874:    xen_call_(session, "pool.add_to_gui_config", param_values, 3, NULL, NULL);
./xenserver/src/xen_pool.c-875-    return session->ok;
./xenserver/src/xen_pool.c-876-}
./xenserver/src/xen_pool.c-877-
./xenserver/src/xen_pool.c-878-
./xenserver/src/xen_pool.c-879-bool
./xenserver/src/xen_pool.c:880:xen_pool_remove_from_gui_config(xen_session *session, xen_pool pool, char *key)
./xenserver/src/xen_pool.c-881-{
./xenserver/src/xen_pool.c-882-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-883-        {
./xenserver/src/xen_pool.c-884-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:885:              .u.string_val = pool },
./xenserver/src/xen_pool.c-886-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-887-              .u.string_val = key }
./xenserver/src/xen_pool.c-888-        };
./xenserver/src/xen_pool.c-889-
./xenserver/src/xen_pool.c:890:    xen_call_(session, "pool.remove_from_gui_config", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-891-    return session->ok;
./xenserver/src/xen_pool.c-892-}
./xenserver/src/xen_pool.c-893-
./xenserver/src/xen_pool.c-894-
./xenserver/src/xen_pool.c-895-bool
./xenserver/src/xen_pool.c:896:xen_pool_set_wlb_enabled(xen_session *session, xen_pool pool, bool wlb_enabled)
./xenserver/src/xen_pool.c-897-{
./xenserver/src/xen_pool.c-898-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-899-        {
./xenserver/src/xen_pool.c-900-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:901:              .u.string_val = pool },
./xenserver/src/xen_pool.c-902-            { .type = &abstract_type_bool,
./xenserver/src/xen_pool.c-903-              .u.bool_val = wlb_enabled }
./xenserver/src/xen_pool.c-904-        };
./xenserver/src/xen_pool.c-905-
./xenserver/src/xen_pool.c:906:    xen_call_(session, "pool.set_wlb_enabled", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-907-    return session->ok;
./xenserver/src/xen_pool.c-908-}
./xenserver/src/xen_pool.c-909-
./xenserver/src/xen_pool.c-910-
./xenserver/src/xen_pool.c-911-bool
./xenserver/src/xen_pool.c:912:xen_pool_set_wlb_verify_cert(xen_session *session, xen_pool pool, bool wlb_verify_cert)
./xenserver/src/xen_pool.c-913-{
./xenserver/src/xen_pool.c-914-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-915-        {
./xenserver/src/xen_pool.c-916-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:917:              .u.string_val = pool },
./xenserver/src/xen_pool.c-918-            { .type = &abstract_type_bool,
./xenserver/src/xen_pool.c-919-              .u.bool_val = wlb_verify_cert }
./xenserver/src/xen_pool.c-920-        };
./xenserver/src/xen_pool.c-921-
./xenserver/src/xen_pool.c:922:    xen_call_(session, "pool.set_wlb_verify_cert", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-923-    return session->ok;
./xenserver/src/xen_pool.c-924-}
./xenserver/src/xen_pool.c-925-
./xenserver/src/xen_pool.c-926-
./xenserver/src/xen_pool.c-927-bool
./xenserver/src/xen_pool.c-928-xen_pool_join(xen_session *session, char *master_address, char *master_username, char *master_password)
./xenserver/src/xen_pool.c-929-{
./xenserver/src/xen_pool.c-930-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-931-        {
./xenserver/src/xen_pool.c-932-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-933-              .u.string_val = master_address },
./xenserver/src/xen_pool.c-934-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-935-              .u.string_val = master_username },
./xenserver/src/xen_pool.c-936-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-937-              .u.string_val = master_password }
./xenserver/src/xen_pool.c-938-        };
./xenserver/src/xen_pool.c-939-
./xenserver/src/xen_pool.c:940:    xen_call_(session, "pool.join", param_values, 3, NULL, NULL);
./xenserver/src/xen_pool.c-941-    return session->ok;
./xenserver/src/xen_pool.c-942-}
./xenserver/src/xen_pool.c-943-
./xenserver/src/xen_pool.c-944-
./xenserver/src/xen_pool.c-945-bool
./xenserver/src/xen_pool.c-946-xen_pool_join_force(xen_session *session, char *master_address, char *master_username, char *master_password)
./xenserver/src/xen_pool.c-947-{
./xenserver/src/xen_pool.c-948-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-949-        {
./xenserver/src/xen_pool.c-950-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-951-              .u.string_val = master_address },
./xenserver/src/xen_pool.c-952-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-953-              .u.string_val = master_username },
./xenserver/src/xen_pool.c-954-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-955-              .u.string_val = master_password }
./xenserver/src/xen_pool.c-956-        };
./xenserver/src/xen_pool.c-957-
./xenserver/src/xen_pool.c:958:    xen_call_(session, "pool.join_force", param_values, 3, NULL, NULL);
./xenserver/src/xen_pool.c-959-    return session->ok;
./xenserver/src/xen_pool.c-960-}
./xenserver/src/xen_pool.c-961-
./xenserver/src/xen_pool.c-962-
./xenserver/src/xen_pool.c-963-bool
./xenserver/src/xen_pool.c-964-xen_pool_eject(xen_session *session, xen_host host)
./xenserver/src/xen_pool.c-965-{
./xenserver/src/xen_pool.c-966-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-967-        {
./xenserver/src/xen_pool.c-968-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-969-              .u.string_val = host }
./xenserver/src/xen_pool.c-970-        };
./xenserver/src/xen_pool.c-971-
./xenserver/src/xen_pool.c:972:    xen_call_(session, "pool.eject", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-973-    return session->ok;
./xenserver/src/xen_pool.c-974-}
./xenserver/src/xen_pool.c-975-
./xenserver/src/xen_pool.c-976-
./xenserver/src/xen_pool.c-977-bool
./xenserver/src/xen_pool.c-978-xen_pool_initial_auth(xen_session *session, char **result)
./xenserver/src/xen_pool.c-979-{
./xenserver/src/xen_pool.c-980-
./xenserver/src/xen_pool.c-981-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-982-
./xenserver/src/xen_pool.c-983-    *result = NULL;
./xenserver/src/xen_pool.c:984:    xen_call_(session, "pool.initial_auth", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-985-    return session->ok;
./xenserver/src/xen_pool.c-986-}
./xenserver/src/xen_pool.c-987-
./xenserver/src/xen_pool.c-988-
./xenserver/src/xen_pool.c-989-bool
./xenserver/src/xen_pool.c-990-xen_pool_emergency_transition_to_master(xen_session *session)
./xenserver/src/xen_pool.c-991-{
./xenserver/src/xen_pool.c-992-
./xenserver/src/xen_pool.c:993:    xen_call_(session, "pool.emergency_transition_to_master", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-994-    return session->ok;
./xenserver/src/xen_pool.c-995-}
./xenserver/src/xen_pool.c-996-
./xenserver/src/xen_pool.c-997-
./xenserver/src/xen_pool.c-998-bool
./xenserver/src/xen_pool.c-999-xen_pool_emergency_reset_master(xen_session *session, char *master_address)
./xenserver/src/xen_pool.c-1000-{
./xenserver/src/xen_pool.c-1001-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1002-        {
./xenserver/src/xen_pool.c-1003-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1004-              .u.string_val = master_address }
./xenserver/src/xen_pool.c-1005-        };
./xenserver/src/xen_pool.c-1006-
./xenserver/src/xen_pool.c:1007:    xen_call_(session, "pool.emergency_reset_master", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1008-    return session->ok;
./xenserver/src/xen_pool.c-1009-}
./xenserver/src/xen_pool.c-1010-
./xenserver/src/xen_pool.c-1011-
./xenserver/src/xen_pool.c-1012-bool
./xenserver/src/xen_pool.c-1013-xen_pool_recover_slaves(xen_session *session, struct xen_host_set **result)
./xenserver/src/xen_pool.c-1014-{
./xenserver/src/xen_pool.c-1015-
./xenserver/src/xen_pool.c-1016-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1017-
./xenserver/src/xen_pool.c-1018-    *result = NULL;
./xenserver/src/xen_pool.c:1019:    xen_call_(session, "pool.recover_slaves", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1020-    return session->ok;
./xenserver/src/xen_pool.c-1021-}
./xenserver/src/xen_pool.c-1022-
./xenserver/src/xen_pool.c-1023-
./xenserver/src/xen_pool.c-1024-bool
./xenserver/src/xen_pool.c-1025-xen_pool_hello(xen_session *session, enum xen_hello_return *result, char *host_uuid, char *host_address)
./xenserver/src/xen_pool.c-1026-{
./xenserver/src/xen_pool.c-1027-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1028-        {
./xenserver/src/xen_pool.c-1029-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1030-              .u.string_val = host_uuid },
./xenserver/src/xen_pool.c-1031-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1032-              .u.string_val = host_address }
./xenserver/src/xen_pool.c-1033-        };
./xenserver/src/xen_pool.c-1034-
./xenserver/src/xen_pool.c-1035-    abstract_type result_type = xen_hello_return_abstract_type_;
./xenserver/src/xen_pool.c:1036:    XEN_CALL_("pool.hello");
./xenserver/src/xen_pool.c-1037-    return session->ok;
./xenserver/src/xen_pool.c-1038-}
./xenserver/src/xen_pool.c-1039-
./xenserver/src/xen_pool.c-1040-
./xenserver/src/xen_pool.c-1041-bool
./xenserver/src/xen_pool.c-1042-xen_pool_is_slave(xen_session *session, bool *result, xen_host host)
./xenserver/src/xen_pool.c-1043-{
./xenserver/src/xen_pool.c-1044-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1045-        {
./xenserver/src/xen_pool.c-1046-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1047-              .u.string_val = host }
./xenserver/src/xen_pool.c-1048-        };
./xenserver/src/xen_pool.c-1049-
./xenserver/src/xen_pool.c-1050-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-1051-
./xenserver/src/xen_pool.c:1052:    XEN_CALL_("pool.is_slave");
./xenserver/src/xen_pool.c-1053-    return session->ok;
./xenserver/src/xen_pool.c-1054-}
./xenserver/src/xen_pool.c-1055-
./xenserver/src/xen_pool.c-1056-
./xenserver/src/xen_pool.c-1057-bool
./xenserver/src/xen_pool.c-1058-xen_pool_create_vlan(xen_session *session, struct xen_pif_set **result, char *device, xen_network network, int64_t vlan)
./xenserver/src/xen_pool.c-1059-{
./xenserver/src/xen_pool.c-1060-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1061-        {
./xenserver/src/xen_pool.c-1062-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1063-              .u.string_val = device },
./xenserver/src/xen_pool.c-1064-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1065-              .u.string_val = network },
./xenserver/src/xen_pool.c-1066-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1067-              .u.int_val = vlan }
./xenserver/src/xen_pool.c-1068-        };
./xenserver/src/xen_pool.c-1069-
./xenserver/src/xen_pool.c-1070-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1071-
./xenserver/src/xen_pool.c-1072-    *result = NULL;
./xenserver/src/xen_pool.c:1073:    XEN_CALL_("pool.create_VLAN");
./xenserver/src/xen_pool.c-1074-    return session->ok;
./xenserver/src/xen_pool.c-1075-}
./xenserver/src/xen_pool.c-1076-
./xenserver/src/xen_pool.c-1077-
./xenserver/src/xen_pool.c-1078-bool
./xenserver/src/xen_pool.c-1079-xen_pool_create_vlan_from_pif(xen_session *session, struct xen_pif_set **result, xen_pif pif, xen_network network, int64_t vlan)
./xenserver/src/xen_pool.c-1080-{
./xenserver/src/xen_pool.c-1081-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1082-        {
./xenserver/src/xen_pool.c-1083-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1084-              .u.string_val = pif },
./xenserver/src/xen_pool.c-1085-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1086-              .u.string_val = network },
./xenserver/src/xen_pool.c-1087-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1088-              .u.int_val = vlan }
./xenserver/src/xen_pool.c-1089-        };
./xenserver/src/xen_pool.c-1090-
./xenserver/src/xen_pool.c-1091-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1092-
./xenserver/src/xen_pool.c-1093-    *result = NULL;
./xenserver/src/xen_pool.c:1094:    XEN_CALL_("pool.create_VLAN_from_PIF");
./xenserver/src/xen_pool.c-1095-    return session->ok;
./xenserver/src/xen_pool.c-1096-}
./xenserver/src/xen_pool.c-1097-
./xenserver/src/xen_pool.c-1098-
./xenserver/src/xen_pool.c-1099-bool
./xenserver/src/xen_pool.c-1100-xen_pool_slave_network_report(xen_session *session, struct xen_pif_set **result, xen_string_string_map *phydevs, xen_string_string_map *dev_to_mac, xen_string_int_map *dev_to_mtu, xen_host slave_host)
./xenserver/src/xen_pool.c-1101-{
./xenserver/src/xen_pool.c-1102-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1103-        {
./xenserver/src/xen_pool.c-1104-            { .type = &abstract_type_string_string_map,
--
./xenserver/src/xen_pool.c-1107-              .u.set_val = (arbitrary_set *)dev_to_mac },
./xenserver/src/xen_pool.c-1108-            { .type = &abstract_type_string_int_map,
./xenserver/src/xen_pool.c-1109-              .u.set_val = (arbitrary_set *)dev_to_mtu },
./xenserver/src/xen_pool.c-1110-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1111-              .u.string_val = slave_host }
./xenserver/src/xen_pool.c-1112-        };
./xenserver/src/xen_pool.c-1113-
./xenserver/src/xen_pool.c-1114-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1115-
./xenserver/src/xen_pool.c-1116-    *result = NULL;
./xenserver/src/xen_pool.c:1117:    XEN_CALL_("pool.slave_network_report");
./xenserver/src/xen_pool.c-1118-    return session->ok;
./xenserver/src/xen_pool.c-1119-}
./xenserver/src/xen_pool.c-1120-
./xenserver/src/xen_pool.c-1121-
./xenserver/src/xen_pool.c-1122-bool
./xenserver/src/xen_pool.c-1123-xen_pool_enable_ha(xen_session *session, struct xen_sr_set *heartbeat_srs, xen_string_string_map *configuration)
./xenserver/src/xen_pool.c-1124-{
./xenserver/src/xen_pool.c-1125-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1126-        {
./xenserver/src/xen_pool.c-1127-            { .type = &abstract_type_string_set,
./xenserver/src/xen_pool.c-1128-              .u.set_val = (arbitrary_set *)heartbeat_srs },
./xenserver/src/xen_pool.c-1129-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1130-              .u.set_val = (arbitrary_set *)configuration }
./xenserver/src/xen_pool.c-1131-        };
./xenserver/src/xen_pool.c-1132-
./xenserver/src/xen_pool.c:1133:    xen_call_(session, "pool.enable_ha", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-1134-    return session->ok;
./xenserver/src/xen_pool.c-1135-}
./xenserver/src/xen_pool.c-1136-
./xenserver/src/xen_pool.c-1137-
./xenserver/src/xen_pool.c-1138-bool
./xenserver/src/xen_pool.c-1139-xen_pool_disable_ha(xen_session *session)
./xenserver/src/xen_pool.c-1140-{
./xenserver/src/xen_pool.c-1141-
./xenserver/src/xen_pool.c:1142:    xen_call_(session, "pool.disable_ha", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1143-    return session->ok;
./xenserver/src/xen_pool.c-1144-}
./xenserver/src/xen_pool.c-1145-
./xenserver/src/xen_pool.c-1146-
./xenserver/src/xen_pool.c-1147-bool
./xenserver/src/xen_pool.c-1148-xen_pool_sync_database(xen_session *session)
./xenserver/src/xen_pool.c-1149-{
./xenserver/src/xen_pool.c-1150-
./xenserver/src/xen_pool.c:1151:    xen_call_(session, "pool.sync_database", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1152-    return session->ok;
./xenserver/src/xen_pool.c-1153-}
./xenserver/src/xen_pool.c-1154-
./xenserver/src/xen_pool.c-1155-
./xenserver/src/xen_pool.c-1156-bool
./xenserver/src/xen_pool.c-1157-xen_pool_designate_new_master(xen_session *session, xen_host host)
./xenserver/src/xen_pool.c-1158-{
./xenserver/src/xen_pool.c-1159-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1160-        {
./xenserver/src/xen_pool.c-1161-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1162-              .u.string_val = host }
./xenserver/src/xen_pool.c-1163-        };
./xenserver/src/xen_pool.c-1164-
./xenserver/src/xen_pool.c:1165:    xen_call_(session, "pool.designate_new_master", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1166-    return session->ok;
./xenserver/src/xen_pool.c-1167-}
./xenserver/src/xen_pool.c-1168-
./xenserver/src/xen_pool.c-1169-
./xenserver/src/xen_pool.c-1170-bool
./xenserver/src/xen_pool.c-1171-xen_pool_ha_prevent_restarts_for(xen_session *session, int64_t seconds)
./xenserver/src/xen_pool.c-1172-{
./xenserver/src/xen_pool.c-1173-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1174-        {
./xenserver/src/xen_pool.c-1175-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1176-              .u.int_val = seconds }
./xenserver/src/xen_pool.c-1177-        };
./xenserver/src/xen_pool.c-1178-
./xenserver/src/xen_pool.c:1179:    xen_call_(session, "pool.ha_prevent_restarts_for", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1180-    return session->ok;
./xenserver/src/xen_pool.c-1181-}
./xenserver/src/xen_pool.c-1182-
./xenserver/src/xen_pool.c-1183-
./xenserver/src/xen_pool.c-1184-bool
./xenserver/src/xen_pool.c-1185-xen_pool_ha_failover_plan_exists(xen_session *session, bool *result, int64_t n)
./xenserver/src/xen_pool.c-1186-{
./xenserver/src/xen_pool.c-1187-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1188-        {
./xenserver/src/xen_pool.c-1189-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1190-              .u.int_val = n }
./xenserver/src/xen_pool.c-1191-        };
./xenserver/src/xen_pool.c-1192-
./xenserver/src/xen_pool.c-1193-    abstract_type result_type = abstract_type_bool;
./xenserver/src/xen_pool.c-1194-
./xenserver/src/xen_pool.c:1195:    XEN_CALL_("pool.ha_failover_plan_exists");
./xenserver/src/xen_pool.c-1196-    return session->ok;
./xenserver/src/xen_pool.c-1197-}
./xenserver/src/xen_pool.c-1198-
./xenserver/src/xen_pool.c-1199-
./xenserver/src/xen_pool.c-1200-bool
./xenserver/src/xen_pool.c-1201-xen_pool_ha_compute_max_host_failures_to_tolerate(xen_session *session, int64_t *result)
./xenserver/src/xen_pool.c-1202-{
./xenserver/src/xen_pool.c-1203-
./xenserver/src/xen_pool.c-1204-    abstract_type result_type = abstract_type_int;
./xenserver/src/xen_pool.c-1205-
./xenserver/src/xen_pool.c:1206:    xen_call_(session, "pool.ha_compute_max_host_failures_to_tolerate", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1207-    return session->ok;
./xenserver/src/xen_pool.c-1208-}
./xenserver/src/xen_pool.c-1209-
./xenserver/src/xen_pool.c-1210-
./xenserver/src/xen_pool.c-1211-bool
./xenserver/src/xen_pool.c-1212-xen_pool_ha_compute_hypothetical_max_host_failures_to_tolerate(xen_session *session, int64_t *result, xen_vm_string_map *configuration)
./xenserver/src/xen_pool.c-1213-{
./xenserver/src/xen_pool.c-1214-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1215-        {
./xenserver/src/xen_pool.c-1216-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1217-              .u.set_val = (arbitrary_set *)configuration }
./xenserver/src/xen_pool.c-1218-        };
./xenserver/src/xen_pool.c-1219-
./xenserver/src/xen_pool.c-1220-    abstract_type result_type = abstract_type_int;
./xenserver/src/xen_pool.c-1221-
./xenserver/src/xen_pool.c:1222:    XEN_CALL_("pool.ha_compute_hypothetical_max_host_failures_to_tolerate");
./xenserver/src/xen_pool.c-1223-    return session->ok;
./xenserver/src/xen_pool.c-1224-}
./xenserver/src/xen_pool.c-1225-
./xenserver/src/xen_pool.c-1226-
./xenserver/src/xen_pool.c-1227-bool
./xenserver/src/xen_pool.c-1228-xen_pool_ha_compute_vm_failover_plan(xen_session *session, xen_vm_string_string_map_map **result, struct xen_host_set *failed_hosts, struct xen_vm_set *failed_vms)
./xenserver/src/xen_pool.c-1229-{
./xenserver/src/xen_pool.c-1230-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1231-        {
./xenserver/src/xen_pool.c-1232-            { .type = &abstract_type_string_set,
./xenserver/src/xen_pool.c-1233-              .u.set_val = (arbitrary_set *)failed_hosts },
./xenserver/src/xen_pool.c-1234-            { .type = &abstract_type_string_set,
./xenserver/src/xen_pool.c-1235-              .u.set_val = (arbitrary_set *)failed_vms }
./xenserver/src/xen_pool.c-1236-        };
./xenserver/src/xen_pool.c-1237-
./xenserver/src/xen_pool.c-1238-    abstract_type result_type = abstract_type_string_string_string_map_map;
./xenserver/src/xen_pool.c-1239-
./xenserver/src/xen_pool.c-1240-    *result = NULL;
./xenserver/src/xen_pool.c:1241:    XEN_CALL_("pool.ha_compute_vm_failover_plan");
./xenserver/src/xen_pool.c-1242-    return session->ok;
./xenserver/src/xen_pool.c-1243-}
./xenserver/src/xen_pool.c-1244-
./xenserver/src/xen_pool.c-1245-
./xenserver/src/xen_pool.c-1246-bool
./xenserver/src/xen_pool.c-1247-xen_pool_set_ha_host_failures_to_tolerate(xen_session *session, xen_pool self, int64_t value)
./xenserver/src/xen_pool.c-1248-{
./xenserver/src/xen_pool.c-1249-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1250-        {
./xenserver/src/xen_pool.c-1251-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1252-              .u.string_val = self },
./xenserver/src/xen_pool.c-1253-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1254-              .u.int_val = value }
./xenserver/src/xen_pool.c-1255-        };
./xenserver/src/xen_pool.c-1256-
./xenserver/src/xen_pool.c:1257:    xen_call_(session, "pool.set_ha_host_failures_to_tolerate", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-1258-    return session->ok;
./xenserver/src/xen_pool.c-1259-}
./xenserver/src/xen_pool.c-1260-
./xenserver/src/xen_pool.c-1261-
./xenserver/src/xen_pool.c-1262-bool
./xenserver/src/xen_pool.c:1263:xen_pool_create_new_blob(xen_session *session, xen_blob *result, xen_pool pool, char *name, char *mime_type)
./xenserver/src/xen_pool.c-1264-{
./xenserver/src/xen_pool.c-1265-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1266-        {
./xenserver/src/xen_pool.c-1267-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:1268:              .u.string_val = pool },
./xenserver/src/xen_pool.c-1269-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1270-              .u.string_val = name },
./xenserver/src/xen_pool.c-1271-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1272-              .u.string_val = mime_type }
./xenserver/src/xen_pool.c-1273-        };
./xenserver/src/xen_pool.c-1274-
./xenserver/src/xen_pool.c-1275-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-1276-
./xenserver/src/xen_pool.c-1277-    *result = NULL;
./xenserver/src/xen_pool.c:1278:    XEN_CALL_("pool.create_new_blob");
./xenserver/src/xen_pool.c-1279-    return session->ok;
./xenserver/src/xen_pool.c-1280-}
./xenserver/src/xen_pool.c-1281-
./xenserver/src/xen_pool.c-1282-
./xenserver/src/xen_pool.c-1283-bool
./xenserver/src/xen_pool.c-1284-xen_pool_ha_schedule_plan_recomputation(xen_session *session)
./xenserver/src/xen_pool.c-1285-{
./xenserver/src/xen_pool.c-1286-
./xenserver/src/xen_pool.c:1287:    xen_call_(session, "pool.ha_schedule_plan_recomputation", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1288-    return session->ok;
./xenserver/src/xen_pool.c-1289-}
./xenserver/src/xen_pool.c-1290-
./xenserver/src/xen_pool.c-1291-
./xenserver/src/xen_pool.c-1292-bool
./xenserver/src/xen_pool.c-1293-xen_pool_enable_binary_storage(xen_session *session)
./xenserver/src/xen_pool.c-1294-{
./xenserver/src/xen_pool.c-1295-
./xenserver/src/xen_pool.c:1296:    xen_call_(session, "pool.enable_binary_storage", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1297-    return session->ok;
./xenserver/src/xen_pool.c-1298-}
./xenserver/src/xen_pool.c-1299-
./xenserver/src/xen_pool.c-1300-
./xenserver/src/xen_pool.c-1301-bool
./xenserver/src/xen_pool.c-1302-xen_pool_disable_binary_storage(xen_session *session)
./xenserver/src/xen_pool.c-1303-{
./xenserver/src/xen_pool.c-1304-
./xenserver/src/xen_pool.c:1305:    xen_call_(session, "pool.disable_binary_storage", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1306-    return session->ok;
./xenserver/src/xen_pool.c-1307-}
./xenserver/src/xen_pool.c-1308-
./xenserver/src/xen_pool.c-1309-
./xenserver/src/xen_pool.c-1310-bool
./xenserver/src/xen_pool.c:1311:xen_pool_enable_external_auth(xen_session *session, xen_pool pool, xen_string_string_map *config, char *service_name, char *auth_type)
./xenserver/src/xen_pool.c-1312-{
./xenserver/src/xen_pool.c-1313-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1314-        {
./xenserver/src/xen_pool.c-1315-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:1316:              .u.string_val = pool },
./xenserver/src/xen_pool.c-1317-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1318-              .u.set_val = (arbitrary_set *)config },
./xenserver/src/xen_pool.c-1319-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1320-              .u.string_val = service_name },
./xenserver/src/xen_pool.c-1321-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1322-              .u.string_val = auth_type }
./xenserver/src/xen_pool.c-1323-        };
./xenserver/src/xen_pool.c-1324-
./xenserver/src/xen_pool.c:1325:    xen_call_(session, "pool.enable_external_auth", param_values, 4, NULL, NULL);
./xenserver/src/xen_pool.c-1326-    return session->ok;
./xenserver/src/xen_pool.c-1327-}
./xenserver/src/xen_pool.c-1328-
./xenserver/src/xen_pool.c-1329-
./xenserver/src/xen_pool.c-1330-bool
./xenserver/src/xen_pool.c:1331:xen_pool_disable_external_auth(xen_session *session, xen_pool pool, xen_string_string_map *config)
./xenserver/src/xen_pool.c-1332-{
./xenserver/src/xen_pool.c-1333-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1334-        {
./xenserver/src/xen_pool.c-1335-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:1336:              .u.string_val = pool },
./xenserver/src/xen_pool.c-1337-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1338-              .u.set_val = (arbitrary_set *)config }
./xenserver/src/xen_pool.c-1339-        };
./xenserver/src/xen_pool.c-1340-
./xenserver/src/xen_pool.c:1341:    xen_call_(session, "pool.disable_external_auth", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-1342-    return session->ok;
./xenserver/src/xen_pool.c-1343-}
./xenserver/src/xen_pool.c-1344-
./xenserver/src/xen_pool.c-1345-
./xenserver/src/xen_pool.c-1346-bool
./xenserver/src/xen_pool.c:1347:xen_pool_detect_nonhomogeneous_external_auth(xen_session *session, xen_pool pool)
./xenserver/src/xen_pool.c-1348-{
./xenserver/src/xen_pool.c-1349-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1350-        {
./xenserver/src/xen_pool.c-1351-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:1352:              .u.string_val = pool }
./xenserver/src/xen_pool.c-1353-        };
./xenserver/src/xen_pool.c-1354-
./xenserver/src/xen_pool.c:1355:    xen_call_(session, "pool.detect_nonhomogeneous_external_auth", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1356-    return session->ok;
./xenserver/src/xen_pool.c-1357-}
./xenserver/src/xen_pool.c-1358-
./xenserver/src/xen_pool.c-1359-
./xenserver/src/xen_pool.c-1360-bool
./xenserver/src/xen_pool.c-1361-xen_pool_initialize_wlb(xen_session *session, char *wlb_url, char *wlb_username, char *wlb_password, char *xenserver_username, char *xenserver_password)
./xenserver/src/xen_pool.c-1362-{
./xenserver/src/xen_pool.c-1363-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1364-        {
./xenserver/src/xen_pool.c-1365-            { .type = &abstract_type_string,
--
./xenserver/src/xen_pool.c-1367-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1368-              .u.string_val = wlb_username },
./xenserver/src/xen_pool.c-1369-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1370-              .u.string_val = wlb_password },
./xenserver/src/xen_pool.c-1371-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1372-              .u.string_val = xenserver_username },
./xenserver/src/xen_pool.c-1373-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1374-              .u.string_val = xenserver_password }
./xenserver/src/xen_pool.c-1375-        };
./xenserver/src/xen_pool.c-1376-
./xenserver/src/xen_pool.c:1377:    xen_call_(session, "pool.initialize_wlb", param_values, 5, NULL, NULL);
./xenserver/src/xen_pool.c-1378-    return session->ok;
./xenserver/src/xen_pool.c-1379-}
./xenserver/src/xen_pool.c-1380-
./xenserver/src/xen_pool.c-1381-
./xenserver/src/xen_pool.c-1382-bool
./xenserver/src/xen_pool.c-1383-xen_pool_deconfigure_wlb(xen_session *session)
./xenserver/src/xen_pool.c-1384-{
./xenserver/src/xen_pool.c-1385-
./xenserver/src/xen_pool.c:1386:    xen_call_(session, "pool.deconfigure_wlb", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1387-    return session->ok;
./xenserver/src/xen_pool.c-1388-}
./xenserver/src/xen_pool.c-1389-
./xenserver/src/xen_pool.c-1390-
./xenserver/src/xen_pool.c-1391-bool
./xenserver/src/xen_pool.c-1392-xen_pool_send_wlb_configuration(xen_session *session, xen_string_string_map *config)
./xenserver/src/xen_pool.c-1393-{
./xenserver/src/xen_pool.c-1394-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1395-        {
./xenserver/src/xen_pool.c-1396-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1397-              .u.set_val = (arbitrary_set *)config }
./xenserver/src/xen_pool.c-1398-        };
./xenserver/src/xen_pool.c-1399-
./xenserver/src/xen_pool.c:1400:    xen_call_(session, "pool.send_wlb_configuration", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1401-    return session->ok;
./xenserver/src/xen_pool.c-1402-}
./xenserver/src/xen_pool.c-1403-
./xenserver/src/xen_pool.c-1404-
./xenserver/src/xen_pool.c-1405-bool
./xenserver/src/xen_pool.c-1406-xen_pool_retrieve_wlb_configuration(xen_session *session, xen_string_string_map **result)
./xenserver/src/xen_pool.c-1407-{
./xenserver/src/xen_pool.c-1408-
./xenserver/src/xen_pool.c-1409-    abstract_type result_type = abstract_type_string_string_map;
./xenserver/src/xen_pool.c-1410-
./xenserver/src/xen_pool.c-1411-    *result = NULL;
./xenserver/src/xen_pool.c:1412:    xen_call_(session, "pool.retrieve_wlb_configuration", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1413-    return session->ok;
./xenserver/src/xen_pool.c-1414-}
./xenserver/src/xen_pool.c-1415-
./xenserver/src/xen_pool.c-1416-
./xenserver/src/xen_pool.c-1417-bool
./xenserver/src/xen_pool.c-1418-xen_pool_retrieve_wlb_recommendations(xen_session *session, xen_vm_string_set_map **result)
./xenserver/src/xen_pool.c-1419-{
./xenserver/src/xen_pool.c-1420-
./xenserver/src/xen_pool.c-1421-    abstract_type result_type = abstract_type_string_string_set_map;
./xenserver/src/xen_pool.c-1422-
./xenserver/src/xen_pool.c-1423-    *result = NULL;
./xenserver/src/xen_pool.c:1424:    xen_call_(session, "pool.retrieve_wlb_recommendations", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1425-    return session->ok;
./xenserver/src/xen_pool.c-1426-}
./xenserver/src/xen_pool.c-1427-
./xenserver/src/xen_pool.c-1428-
./xenserver/src/xen_pool.c-1429-bool
./xenserver/src/xen_pool.c-1430-xen_pool_send_test_post(xen_session *session, char **result, char *host, int64_t port, char *body)
./xenserver/src/xen_pool.c-1431-{
./xenserver/src/xen_pool.c-1432-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1433-        {
./xenserver/src/xen_pool.c-1434-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1435-              .u.string_val = host },
./xenserver/src/xen_pool.c-1436-            { .type = &abstract_type_int,
./xenserver/src/xen_pool.c-1437-              .u.int_val = port },
./xenserver/src/xen_pool.c-1438-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1439-              .u.string_val = body }
./xenserver/src/xen_pool.c-1440-        };
./xenserver/src/xen_pool.c-1441-
./xenserver/src/xen_pool.c-1442-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-1443-
./xenserver/src/xen_pool.c-1444-    *result = NULL;
./xenserver/src/xen_pool.c:1445:    XEN_CALL_("pool.send_test_post");
./xenserver/src/xen_pool.c-1446-    return session->ok;
./xenserver/src/xen_pool.c-1447-}
./xenserver/src/xen_pool.c-1448-
./xenserver/src/xen_pool.c-1449-
./xenserver/src/xen_pool.c-1450-bool
./xenserver/src/xen_pool.c-1451-xen_pool_certificate_install(xen_session *session, char *name, char *cert)
./xenserver/src/xen_pool.c-1452-{
./xenserver/src/xen_pool.c-1453-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1454-        {
./xenserver/src/xen_pool.c-1455-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1456-              .u.string_val = name },
./xenserver/src/xen_pool.c-1457-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1458-              .u.string_val = cert }
./xenserver/src/xen_pool.c-1459-        };
./xenserver/src/xen_pool.c-1460-
./xenserver/src/xen_pool.c:1461:    xen_call_(session, "pool.certificate_install", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-1462-    return session->ok;
./xenserver/src/xen_pool.c-1463-}
./xenserver/src/xen_pool.c-1464-
./xenserver/src/xen_pool.c-1465-
./xenserver/src/xen_pool.c-1466-bool
./xenserver/src/xen_pool.c-1467-xen_pool_certificate_uninstall(xen_session *session, char *name)
./xenserver/src/xen_pool.c-1468-{
./xenserver/src/xen_pool.c-1469-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1470-        {
./xenserver/src/xen_pool.c-1471-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1472-              .u.string_val = name }
./xenserver/src/xen_pool.c-1473-        };
./xenserver/src/xen_pool.c-1474-
./xenserver/src/xen_pool.c:1475:    xen_call_(session, "pool.certificate_uninstall", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1476-    return session->ok;
./xenserver/src/xen_pool.c-1477-}
./xenserver/src/xen_pool.c-1478-
./xenserver/src/xen_pool.c-1479-
./xenserver/src/xen_pool.c-1480-bool
./xenserver/src/xen_pool.c-1481-xen_pool_certificate_list(xen_session *session, struct xen_string_set **result)
./xenserver/src/xen_pool.c-1482-{
./xenserver/src/xen_pool.c-1483-
./xenserver/src/xen_pool.c-1484-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1485-
./xenserver/src/xen_pool.c-1486-    *result = NULL;
./xenserver/src/xen_pool.c:1487:    xen_call_(session, "pool.certificate_list", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1488-    return session->ok;
./xenserver/src/xen_pool.c-1489-}
./xenserver/src/xen_pool.c-1490-
./xenserver/src/xen_pool.c-1491-
./xenserver/src/xen_pool.c-1492-bool
./xenserver/src/xen_pool.c-1493-xen_pool_crl_install(xen_session *session, char *name, char *cert)
./xenserver/src/xen_pool.c-1494-{
./xenserver/src/xen_pool.c-1495-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1496-        {
./xenserver/src/xen_pool.c-1497-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1498-              .u.string_val = name },
./xenserver/src/xen_pool.c-1499-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1500-              .u.string_val = cert }
./xenserver/src/xen_pool.c-1501-        };
./xenserver/src/xen_pool.c-1502-
./xenserver/src/xen_pool.c:1503:    xen_call_(session, "pool.crl_install", param_values, 2, NULL, NULL);
./xenserver/src/xen_pool.c-1504-    return session->ok;
./xenserver/src/xen_pool.c-1505-}
./xenserver/src/xen_pool.c-1506-
./xenserver/src/xen_pool.c-1507-
./xenserver/src/xen_pool.c-1508-bool
./xenserver/src/xen_pool.c-1509-xen_pool_crl_uninstall(xen_session *session, char *name)
./xenserver/src/xen_pool.c-1510-{
./xenserver/src/xen_pool.c-1511-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1512-        {
./xenserver/src/xen_pool.c-1513-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1514-              .u.string_val = name }
./xenserver/src/xen_pool.c-1515-        };
./xenserver/src/xen_pool.c-1516-
./xenserver/src/xen_pool.c:1517:    xen_call_(session, "pool.crl_uninstall", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1518-    return session->ok;
./xenserver/src/xen_pool.c-1519-}
./xenserver/src/xen_pool.c-1520-
./xenserver/src/xen_pool.c-1521-
./xenserver/src/xen_pool.c-1522-bool
./xenserver/src/xen_pool.c-1523-xen_pool_crl_list(xen_session *session, struct xen_string_set **result)
./xenserver/src/xen_pool.c-1524-{
./xenserver/src/xen_pool.c-1525-
./xenserver/src/xen_pool.c-1526-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1527-
./xenserver/src/xen_pool.c-1528-    *result = NULL;
./xenserver/src/xen_pool.c:1529:    xen_call_(session, "pool.crl_list", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1530-    return session->ok;
./xenserver/src/xen_pool.c-1531-}
./xenserver/src/xen_pool.c-1532-
./xenserver/src/xen_pool.c-1533-
./xenserver/src/xen_pool.c-1534-bool
./xenserver/src/xen_pool.c-1535-xen_pool_certificate_sync(xen_session *session)
./xenserver/src/xen_pool.c-1536-{
./xenserver/src/xen_pool.c-1537-
./xenserver/src/xen_pool.c:1538:    xen_call_(session, "pool.certificate_sync", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1539-    return session->ok;
./xenserver/src/xen_pool.c-1540-}
./xenserver/src/xen_pool.c-1541-
./xenserver/src/xen_pool.c-1542-
./xenserver/src/xen_pool.c-1543-bool
./xenserver/src/xen_pool.c-1544-xen_pool_enable_redo_log(xen_session *session, xen_sr sr)
./xenserver/src/xen_pool.c-1545-{
./xenserver/src/xen_pool.c-1546-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1547-        {
./xenserver/src/xen_pool.c-1548-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1549-              .u.string_val = sr }
./xenserver/src/xen_pool.c-1550-        };
./xenserver/src/xen_pool.c-1551-
./xenserver/src/xen_pool.c:1552:    xen_call_(session, "pool.enable_redo_log", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1553-    return session->ok;
./xenserver/src/xen_pool.c-1554-}
./xenserver/src/xen_pool.c-1555-
./xenserver/src/xen_pool.c-1556-
./xenserver/src/xen_pool.c-1557-bool
./xenserver/src/xen_pool.c-1558-xen_pool_disable_redo_log(xen_session *session)
./xenserver/src/xen_pool.c-1559-{
./xenserver/src/xen_pool.c-1560-
./xenserver/src/xen_pool.c:1561:    xen_call_(session, "pool.disable_redo_log", NULL, 0, NULL, NULL);
./xenserver/src/xen_pool.c-1562-    return session->ok;
./xenserver/src/xen_pool.c-1563-}
./xenserver/src/xen_pool.c-1564-
./xenserver/src/xen_pool.c-1565-
./xenserver/src/xen_pool.c-1566-bool
./xenserver/src/xen_pool.c-1567-xen_pool_audit_log_append(xen_session *session, char *line)
./xenserver/src/xen_pool.c-1568-{
./xenserver/src/xen_pool.c-1569-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1570-        {
./xenserver/src/xen_pool.c-1571-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1572-              .u.string_val = line }
./xenserver/src/xen_pool.c-1573-        };
./xenserver/src/xen_pool.c-1574-
./xenserver/src/xen_pool.c:1575:    xen_call_(session, "pool.audit_log_append", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1576-    return session->ok;
./xenserver/src/xen_pool.c-1577-}
./xenserver/src/xen_pool.c-1578-
./xenserver/src/xen_pool.c-1579-
./xenserver/src/xen_pool.c-1580-bool
./xenserver/src/xen_pool.c-1581-xen_pool_set_vswitch_controller(xen_session *session, char *address)
./xenserver/src/xen_pool.c-1582-{
./xenserver/src/xen_pool.c-1583-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1584-        {
./xenserver/src/xen_pool.c-1585-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1586-              .u.string_val = address }
./xenserver/src/xen_pool.c-1587-        };
./xenserver/src/xen_pool.c-1588-
./xenserver/src/xen_pool.c:1589:    xen_call_(session, "pool.set_vswitch_controller", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1590-    return session->ok;
./xenserver/src/xen_pool.c-1591-}
./xenserver/src/xen_pool.c-1592-
./xenserver/src/xen_pool.c-1593-
./xenserver/src/xen_pool.c-1594-bool
./xenserver/src/xen_pool.c-1595-xen_pool_test_archive_target(xen_session *session, char **result, xen_pool self, xen_string_string_map *config)
./xenserver/src/xen_pool.c-1596-{
./xenserver/src/xen_pool.c-1597-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1598-        {
./xenserver/src/xen_pool.c-1599-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1600-              .u.string_val = self },
./xenserver/src/xen_pool.c-1601-            { .type = &abstract_type_string_string_map,
./xenserver/src/xen_pool.c-1602-              .u.set_val = (arbitrary_set *)config }
./xenserver/src/xen_pool.c-1603-        };
./xenserver/src/xen_pool.c-1604-
./xenserver/src/xen_pool.c-1605-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-1606-
./xenserver/src/xen_pool.c-1607-    *result = NULL;
./xenserver/src/xen_pool.c:1608:    XEN_CALL_("pool.test_archive_target");
./xenserver/src/xen_pool.c-1609-    return session->ok;
./xenserver/src/xen_pool.c-1610-}
./xenserver/src/xen_pool.c-1611-
./xenserver/src/xen_pool.c-1612-
./xenserver/src/xen_pool.c-1613-bool
./xenserver/src/xen_pool.c-1614-xen_pool_enable_local_storage_caching(xen_session *session, xen_pool self)
./xenserver/src/xen_pool.c-1615-{
./xenserver/src/xen_pool.c-1616-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1617-        {
./xenserver/src/xen_pool.c-1618-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1619-              .u.string_val = self }
./xenserver/src/xen_pool.c-1620-        };
./xenserver/src/xen_pool.c-1621-
./xenserver/src/xen_pool.c:1622:    xen_call_(session, "pool.enable_local_storage_caching", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1623-    return session->ok;
./xenserver/src/xen_pool.c-1624-}
./xenserver/src/xen_pool.c-1625-
./xenserver/src/xen_pool.c-1626-
./xenserver/src/xen_pool.c-1627-bool
./xenserver/src/xen_pool.c-1628-xen_pool_disable_local_storage_caching(xen_session *session, xen_pool self)
./xenserver/src/xen_pool.c-1629-{
./xenserver/src/xen_pool.c-1630-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1631-        {
./xenserver/src/xen_pool.c-1632-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c-1633-              .u.string_val = self }
./xenserver/src/xen_pool.c-1634-        };
./xenserver/src/xen_pool.c-1635-
./xenserver/src/xen_pool.c:1636:    xen_call_(session, "pool.disable_local_storage_caching", param_values, 1, NULL, NULL);
./xenserver/src/xen_pool.c-1637-    return session->ok;
./xenserver/src/xen_pool.c-1638-}
./xenserver/src/xen_pool.c-1639-
./xenserver/src/xen_pool.c-1640-
./xenserver/src/xen_pool.c-1641-bool
./xenserver/src/xen_pool.c-1642-xen_pool_get_all(xen_session *session, struct xen_pool_set **result)
./xenserver/src/xen_pool.c-1643-{
./xenserver/src/xen_pool.c-1644-
./xenserver/src/xen_pool.c-1645-    abstract_type result_type = abstract_type_string_set;
./xenserver/src/xen_pool.c-1646-
./xenserver/src/xen_pool.c-1647-    *result = NULL;
./xenserver/src/xen_pool.c:1648:    xen_call_(session, "pool.get_all", NULL, 0, &result_type, result);
./xenserver/src/xen_pool.c-1649-    return session->ok;
./xenserver/src/xen_pool.c-1650-}
./xenserver/src/xen_pool.c-1651-
./xenserver/src/xen_pool.c-1652-
./xenserver/src/xen_pool.c-1653-bool
./xenserver/src/xen_pool.c:1654:xen_pool_get_uuid(xen_session *session, char **result, xen_pool pool)
./xenserver/src/xen_pool.c-1655-{
./xenserver/src/xen_pool.c-1656-    abstract_value param_values[] =
./xenserver/src/xen_pool.c-1657-        {
./xenserver/src/xen_pool.c-1658-            { .type = &abstract_type_string,
./xenserver/src/xen_pool.c:1659:              .u.string_val = pool }
./xenserver/src/xen_pool.c-1660-        };
./xenserver/src/xen_pool.c-1661-
./xenserver/src/xen_pool.c-1662-    abstract_type result_type = abstract_type_string;
./xenserver/src/xen_pool.c-1663-
./xenserver/src/xen_pool.c-1664-    *result = NULL;
./xenserver/src/xen_pool.c:1665:    XEN_CALL_("pool.get_uuid");
./xenserver/src/xen_pool.c-1666-    return session->ok;
./xenserver/src/xen_pool.c-1667-}
--
./rstp/rstplib/cli.c-33-#include <readline/readline.h>
./rstp/rstplib/cli.c-34-#include <readline/history.h>
./rstp/rstplib/cli.c-35-
./rstp/rstplib/cli.c-36-#include "cli.h"
./rstp/rstplib/cli.c-37-
./rstp/rstplib/cli.c-38-static CMD_DSCR_T* TheList = 0;
./rstp/rstplib/cli.c-39-
./rstp/rstplib/cli.c-40-static int
./rstp/rstplib/cli.c-41-cli_parse_parms (const char* line, int skip_words, char** argv)
./rstp/rstplib/cli.c-42-{
./rstp/rstplib/cli.c:43:  static char pool[MAX_CLI_BUFF];
./rstp/rstplib/cli.c-44-  register char* ptr;
./rstp/rstplib/cli.c-45-  register int argc = 0, iii;
./rstp/rstplib/cli.c-46-
./rstp/rstplib/cli.c-47-  ptr = strchr (line, '\n');
./rstp/rstplib/cli.c-48-  if (ptr) *ptr = '\0';
./rstp/rstplib/cli.c:49:  memcpy (pool, line, MAX_CLI_BUFF);
./rstp/rstplib/cli.c:50:  pool[MAX_CLI_BUFF - 1] = '\0';
./rstp/rstplib/cli.c-51-
./rstp/rstplib/cli.c-52-  for (iii = 0; iii < MAXPARAMNUM; iii++) {
./rstp/rstplib/cli.c:53:    ptr = strtok (iii ? NULL : pool, "\t\n ");
./rstp/rstplib/cli.c-54-    if (! ptr) break;
./rstp/rstplib/cli.c-55-    if (skip_words-- <= 0) {
./rstp/rstplib/cli.c-56-      /* printf ("\targv[%d]='%s' skip_words=%d\n", argc, ptr, skip_words); */
./rstp/rstplib/cli.c-57-      argv[argc++] = ptr;
./rstp/rstplib/cli.c-58-    } else {
./rstp/rstplib/cli.c-59-      /* printf ("\tskip '%s' skip_words now %d\n", ptr, skip_words); */
./rstp/rstplib/cli.c-60-    }
./rstp/rstplib/cli.c-61-  }
./rstp/rstplib/cli.c-62-
./rstp/rstplib/cli.c-63-  return argc;
./rstp/rstplib/cli.c-64-}
./rstp/rstplib/cli.c-65-
./rstp/rstplib/cli.c-66-int cli_count_words (char* line)
./rstp/rstplib/cli.c-67-{
./rstp/rstplib/cli.c:68:  static char pool[MAX_CLI_BUFF];
./rstp/rstplib/cli.c-69-  register char* ptr = NULL;
./rstp/rstplib/cli.c-70-  register int cnt;
./rstp/rstplib/cli.c-71-
./rstp/rstplib/cli.c-72-  ptr = strchr (line, '\n');
./rstp/rstplib/cli.c-73-  if (ptr) *ptr = '\0';
./rstp/rstplib/cli.c:74:  strncpy (pool, line, MAX_CLI_BUFF);
./rstp/rstplib/cli.c:75:  pool[MAX_CLI_BUFF - 1] = '\0';
./rstp/rstplib/cli.c-76-
./rstp/rstplib/cli.c-77-  for (cnt = 0;; cnt++) {
./rstp/rstplib/cli.c:78:    ptr =  strtok (cnt ? NULL : pool, "\t\n ");
./rstp/rstplib/cli.c-79-    if (! ptr) {
./rstp/rstplib/cli.c-80-      break;
./rstp/rstplib/cli.c-81-    }
./rstp/rstplib/cli.c-82-  }
./rstp/rstplib/cli.c-83-
./rstp/rstplib/cli.c-84-  return cnt - 1;
./rstp/rstplib/cli.c-85-}
./rstp/rstplib/cli.c-86-
./rstp/rstplib/cli.c-87-void cli_register_language (const CMD_DSCR_T* cmd_list)
./rstp/rstplib/cli.c-88-{
--
./rstp/rstplib/cli.c-239-
./rstp/rstplib/cli.c-240-  for (iii = 0, par = reg->param; ; iii++, par++) {
./rstp/rstplib/cli.c-241-    if (! par->param_help) break;
./rstp/rstplib/cli.c-242-  }
./rstp/rstplib/cli.c-243-  return iii;
./rstp/rstplib/cli.c-244-}
./rstp/rstplib/cli.c-245-
./rstp/rstplib/cli.c-246-static void
./rstp/rstplib/cli.c-247-cli_help_brosed_line (int argc, char** argv, const char* line)
./rstp/rstplib/cli.c-248-{
./rstp/rstplib/cli.c:249:  char pool[MAX_CLI_BUFF];
./rstp/rstplib/cli.c-250-  CMD_DSCR_T* reg;
./rstp/rstplib/cli.c-251-  int iii, nf;
./rstp/rstplib/cli.c-252-
./rstp/rstplib/cli.c-253-  printf ("\n");
./rstp/rstplib/cli.c-254-#if 0
./rstp/rstplib/cli.c-255-  cli_debug_dump_args ("cli_help_brosed_line", argc, argv);
./rstp/rstplib/cli.c-256-#endif
./rstp/rstplib/cli.c-257-
./rstp/rstplib/cli.c:258:  memset (pool, 0, MAX_CLI_BUFF);
./rstp/rstplib/cli.c-259-  for (iii = 0; iii < argc; iii++) {
./rstp/rstplib/cli.c:260:    if (iii) strcat (pool, " ");
./rstp/rstplib/cli.c:261:    strcat (pool, argv[iii]);
./rstp/rstplib/cli.c:262:    nf = find_command (pool, 0, &reg);
./rstp/rstplib/cli.c-263-    if (1 == nf) {
./rstp/rstplib/cli.c-264-      nf = count_command_paramms (reg);
./rstp/rstplib/cli.c-265-      iii++;
./rstp/rstplib/cli.c-266-#if 0
./rstp/rstplib/cli.c-267-      printf ("iii=%d argc=%d nf=%d\n", iii, argc, nf);
./rstp/rstplib/cli.c-268-#endif
./rstp/rstplib/cli.c-269-      nf = strlen (line);
./rstp/rstplib/cli.c-270-      if (nf && ' ' == line[nf - 1])
./rstp/rstplib/cli.c-271-        argc++;
./rstp/rstplib/cli.c-272-      if (iii < argc) {
./rstp/rstplib/cli.c-273-        iii = argc - iii - 1;
./rstp/rstplib/cli.c-274-        if (! help_on_param (iii + 1, reg->param + iii, 1)) {
./rstp/rstplib/cli.c-275-          return;
./rstp/rstplib/cli.c-276-        }
./rstp/rstplib/cli.c-277-      }
./rstp/rstplib/cli.c-278-      help_on_command (reg, 0);
./rstp/rstplib/cli.c-279-      return;
./rstp/rstplib/cli.c-280-    } else if (! nf) {
./rstp/rstplib/cli.c:281:      printf ("\nunknown <%s>\n", pool);
./rstp/rstplib/cli.c-282-      usage ();
./rstp/rstplib/cli.c-283-      return;
./rstp/rstplib/cli.c-284-    }
./rstp/rstplib/cli.c-285-  }
./rstp/rstplib/cli.c:286:  find_command (pool, 1, &reg);
./rstp/rstplib/cli.c-287-}
./rstp/rstplib/cli.c-288-
./rstp/rstplib/cli.c-289-void cli_help (int argc, char** argv, const char* line)
./rstp/rstplib/cli.c-290-{
./rstp/rstplib/cli.c-291-#if 0
./rstp/rstplib/cli.c-292-  cli_debug_dump_args ("cli_help", argc, argv);
./rstp/rstplib/cli.c-293-#endif
./rstp/rstplib/cli.c-294-  if (argc > 1)
./rstp/rstplib/cli.c-295-    cli_help_brosed_line (argc - 1, argv + 1, line);
./rstp/rstplib/cli.c-296-  else
--
./llbfwd/llbfwd_proc_file.c-81-};
./llbfwd/llbfwd_proc_file.c-82-
./llbfwd/llbfwd_proc_file.c-83-static int llbfwd_open(struct inode *inodp, struct file *filp)
./llbfwd/llbfwd_proc_file.c-84-{
./llbfwd/llbfwd_proc_file.c-85-	return seq_open(filp, &llbfwd_seq_ops);
./llbfwd/llbfwd_proc_file.c-86-}
./llbfwd/llbfwd_proc_file.c-87-
./llbfwd/llbfwd_proc_file.c-88-/* command analyzer */
./llbfwd/llbfwd_proc_file.c-89-/* vserver name=XXX,next_ip=xxxx,netmask=xxx,protocol=XXX,poolname=XXX, 
./llbfwd/llbfwd_proc_file.c-90- *		timeout=xxx,persistent=xxx,master_schedule=xxxx,slave_schedule=xxxx,final_schedule=xxxx 
./llbfwd/llbfwd_proc_file.c:91: * pool xxxx add/delete rserver xxxx address=xxxx,bandwidth=xxxx,weight=xxxx,healthcheck=xxx
./llbfwd/llbfwd_proc_file.c-92- * topology add/delete node ip=xxxx, netmask=xx, area=xxxx, carrier=xxx
./llbfwd/llbfwd_proc_file.c-93- * delete vserver XXXX
./llbfwd/llbfwd_proc_file.c:94: * delete pool XXXX
./llbfwd/llbfwd_proc_file.c-95- **/
./llbfwd/llbfwd_proc_file.c-96-static int llbfwd_command_process(char *cmd)
./llbfwd/llbfwd_proc_file.c-97-{
./llbfwd/llbfwd_proc_file.c-98-	char cmdtype[1024] = {0}, *p, *end;
./llbfwd/llbfwd_proc_file.c-99-	char buf[512], attr[512], value[512];
./llbfwd/llbfwd_proc_file.c-100-	char arg[4][512];
./llbfwd/llbfwd_proc_file.c-101-	int len, first = 1;
./llbfwd/llbfwd_proc_file.c-102-	struct llb_vserver vs;
./llbfwd/llbfwd_proc_file.c-103-
./llbfwd/llbfwd_proc_file.c-104-	printk("before cmd:[%s]\n", cmd);
--
./llbfwd/llbfwd_proc_file.c-119-			first = 0;
./llbfwd/llbfwd_proc_file.c-120-			memset(buf, 0, sizeof(buf));
./llbfwd/llbfwd_proc_file.c-121-			memset(&vs, 0, sizeof(vs));
./llbfwd/llbfwd_proc_file.c-122-			p = end + 1;
./llbfwd/llbfwd_proc_file.c-123-			end = strchr(p, ',');
./llbfwd/llbfwd_proc_file.c-124-			len = end ? end - p : strlen(p);
./llbfwd/llbfwd_proc_file.c-125-			strncpy(buf, p, len);	
./llbfwd/llbfwd_proc_file.c-126-			sscanf(buf,"%s%s", attr, value);
./llbfwd/llbfwd_proc_file.c-127-			printk("buf=[%s] sttr[%s] value[%s]\n", buf, attr, value);
./llbfwd/llbfwd_proc_file.c-128-		}
./llbfwd/llbfwd_proc_file.c:129:	} else if (strcmp(cmdtype, "pool") == 0) {
./llbfwd/llbfwd_proc_file.c:130:		/* pool xxxx add/delete rserver xxxx address xxxx,weight xxxx */
./llbfwd/llbfwd_proc_file.c-131-		sscanf(p, "%s%s%s%s%s", arg[0], arg[1], arg[2], arg[3], buf);
./llbfwd/llbfwd_proc_file.c-132-		printk("%s %s %s %s %s\n", arg[0], arg[1], arg[2], arg[3], buf);
./llbfwd/llbfwd_proc_file.c-133-		if (strcmp(arg[1], "add") == 0 && strcmp(arg[2], "rserver")== 0 ) {
./llbfwd/llbfwd_proc_file.c-134-			p = buf;	
./llbfwd/llbfwd_proc_file.c:135:			printk ("pool add!\n");
./llbfwd/llbfwd_proc_file.c-136-		} else if (strcmp(arg[1], "delete") == 0 && strcmp(arg[2], "rserver") == 0) {
./llbfwd/llbfwd_proc_file.c-137-			p = buf;
./llbfwd/llbfwd_proc_file.c:138:			printk ("pool delete!\n");
./llbfwd/llbfwd_proc_file.c-139-		}
./llbfwd/llbfwd_proc_file.c-140-	} else if (strcmp(cmdtype, "topology") == 0) {
./llbfwd/llbfwd_proc_file.c-141-		/* arg[0]=delete/add arg[1]=node */
./llbfwd/llbfwd_proc_file.c-142-		sscanf(p, "%s%s%s%s%s", arg[0], arg[1], arg[2], arg[3], buf);
./llbfwd/llbfwd_proc_file.c-143-		printk("%s %s %s %s\n", arg[0], arg[1], arg[2], buf);
./llbfwd/llbfwd_proc_file.c-144-		if (strcmp(arg[0], "add") == 0 && strcmp(arg[1], "node")==0) {
./llbfwd/llbfwd_proc_file.c-145-			printk ("topology add!\n");	
./llbfwd/llbfwd_proc_file.c-146-		} else if (strcmp(arg[1], "delete") == 0 && strcmp(arg[1], "node") == 0) {
./llbfwd/llbfwd_proc_file.c-147-			printk ("topology delete!\n");	
./llbfwd/llbfwd_proc_file.c-148-		}
./llbfwd/llbfwd_proc_file.c-149-	} else if (strcmp(cmdtype, "delete") == 0) {
./llbfwd/llbfwd_proc_file.c-150-		sscanf(p, "%s %s", arg[0], buf);
./llbfwd/llbfwd_proc_file.c-151-		if (strcmp(arg[0], "vserver") == 0) {
./llbfwd/llbfwd_proc_file.c-152-			printk("delete vserver!\n");
./llbfwd/llbfwd_proc_file.c:153:		} else if (strcmp(arg[0], "pool") == 0) {
./llbfwd/llbfwd_proc_file.c:154:			printk("delete pool!\n");
./llbfwd/llbfwd_proc_file.c-155-		}
./llbfwd/llbfwd_proc_file.c-156-	} else {
./llbfwd/llbfwd_proc_file.c-157-		printk ("unknown command:[%s] type:[%s]\n", cmd, cmdtype);
./llbfwd/llbfwd_proc_file.c-158-		return -1;
./llbfwd/llbfwd_proc_file.c-159-	}
./llbfwd/llbfwd_proc_file.c-160-
./llbfwd/llbfwd_proc_file.c-161-	return 0;
./llbfwd/llbfwd_proc_file.c-162-}
./llbfwd/llbfwd_proc_file.c-163-
./llbfwd/llbfwd_proc_file.c-164-static ssize_t llbfwd_seq_write(
--
./llbfwd/main.c-93-
./llbfwd/main.c-94-	list_for_each_entry(cache, &llb_cache_head, list) {
./llbfwd/main.c-95-		if (cache->dip == dip) {
./llbfwd/main.c-96-			return cache;
./llbfwd/main.c-97-		}
./llbfwd/main.c-98-	}
./llbfwd/main.c-99-
./llbfwd/main.c-100-	return NULL;
./llbfwd/main.c-101-}
./llbfwd/main.c-102-
./llbfwd/main.c:103:struct llb_rserver * llb_rserver_search(const char *address, struct llb_pool *pool) 
./llbfwd/main.c-104-{
./llbfwd/main.c-105-	struct llb_rserver *rs;
./llbfwd/main.c-106-
./llbfwd/main.c:107:	list_for_each_entry(rs, &pool->rserver_head, list) {
./llbfwd/main.c-108-		if (strcmp(rs->address, address) == 0) {
./llbfwd/main.c-109-			return rs;
./llbfwd/main.c-110-		}
./llbfwd/main.c-111-	}
./llbfwd/main.c-112-
./llbfwd/main.c-113-	return NULL;
./llbfwd/main.c-114-}
./llbfwd/main.c-115-
./llbfwd/main.c-116-struct llb_pool * llb_pool_search(const char *poolname)
./llbfwd/main.c-117-{
./llbfwd/main.c:118:	struct llb_pool *pool;
./llbfwd/main.c-119-
./llbfwd/main.c:120:	list_for_each_entry(pool, &pool_head, list) {
./llbfwd/main.c:121:		if (strcmp(pool->name, poolname) == 0) {
./llbfwd/main.c:122:			return pool;
./llbfwd/main.c-123-		}
./llbfwd/main.c-124-	}
./llbfwd/main.c-125-
./llbfwd/main.c-126-	return NULL;
./llbfwd/main.c-127-}
./llbfwd/main.c-128-
./llbfwd/main.c-129-/* 功能：同一网段的vserver查询 */
./llbfwd/main.c-130-static struct llb_vserver * llb_vserver_search( char *dip )
./llbfwd/main.c-131-{
./llbfwd/main.c-132-	struct llb_vserver *vs;
--
./llbfwd/main.c-384-		}
./llbfwd/main.c-385-	}
./llbfwd/main.c-386-
./llbfwd/main.c-387-	return NULL;
./llbfwd/main.c-388-}
./llbfwd/main.c-389-
./llbfwd/main.c-390-static unsigned int vserver_scheduler_init(struct llb_vserver *vs)
./llbfwd/main.c-391-{
./llbfwd/main.c-392-	struct llbfwd_vserver_sched *sched;
./llbfwd/main.c-393-	struct llbfwd_scheduler *psched;
./llbfwd/main.c:394:	struct llb_pool *pool;
./llbfwd/main.c-395-	struct llb_rserver *rs;
./llbfwd/main.c-396-
./llbfwd/main.c-397-	list_for_each_entry( sched, &vs->vserver_sched_head, list) {
./llbfwd/main.c-398-		if ((psched = llbfwd_scheduler_search(sched->type)) != NULL) {
./llbfwd/main.c-399-			sched->psched =  psched;
./llbfwd/main.c-400-			if (!sched->psched) {
./llbfwd/main.c-401-				continue;
./llbfwd/main.c-402-			}
./llbfwd/main.c-403-
./llbfwd/main.c-404-			/* sched_data */
./llbfwd/main.c-405-			if (!strcmp(sched->type, SCHEDULER_TYPE_RR)) {
./llbfwd/main.c-406-				/* 第一个rs的list指针 */			
./llbfwd/main.c:407:				pool = llb_pool_search(vs->poolname);
./llbfwd/main.c:408:				if (pool == NULL) {
./llbfwd/main.c-409-					continue;
./llbfwd/main.c-410-				}
./llbfwd/main.c:411:				list_for_each_entry(rs, &pool->rserver_head, list) {
./llbfwd/main.c-412-					sched->sched_data = &rs->list;
./llbfwd/main.c-413-					printk ("vs:%s sched->name:%s sched->type:%s sched->data:%s\n", 
./llbfwd/main.c-414-								vs->name, sched->name, sched->type, rs->address);
./llbfwd/main.c-415-				}
./llbfwd/main.c-416-			} else if (!strcmp(sched->type, SCHEDULER_TYPE_WRR)) {
./llbfwd/main.c-417-				/* TODO ? */
./llbfwd/main.c-418-			} else if (!strcmp(sched->type, SCHEDULER_TYPE_TP)) {
./llbfwd/main.c-419-				/* TODO ? */
./llbfwd/main.c-420-			} else if (!strcmp(sched->type, SCHEDULER_TYPE_GA)) {
./llbfwd/main.c-421-				/* TODO ? */
--
./llbfwd/main.c-427-			vs->cur_sched = sched;
./llbfwd/main.c-428-		} 	
./llbfwd/main.c-429-	}
./llbfwd/main.c-430-
./llbfwd/main.c-431-	return 0;
./llbfwd/main.c-432-}
./llbfwd/main.c-433-
./llbfwd/main.c-434-__attribute__((unused))
./llbfwd/main.c-435-static int pool_test_data_init(void)
./llbfwd/main.c-436-{
./llbfwd/main.c:437:	struct llb_pool *pool;
./llbfwd/main.c-438-	struct llb_rserver *rs;
./llbfwd/main.c-439-
./llbfwd/main.c:440:	pool = kmalloc(sizeof(struct llb_pool), GFP_KERNEL);
./llbfwd/main.c:441:	if (pool == NULL) {
./llbfwd/main.c-442-		return -1;
./llbfwd/main.c-443-	}
./llbfwd/main.c:444:	memset(pool, 0, sizeof(struct llb_pool));
./llbfwd/main.c-445-
./llbfwd/main.c:446:	INIT_LIST_HEAD(&pool->rserver_head);
./llbfwd/main.c:447:	strcpy(pool->name, "pa");
./llbfwd/main.c:448:	strcpy(pool->healthcheck, "ha");
./llbfwd/main.c-449-
./llbfwd/main.c-450-	rs = kmalloc(sizeof(struct llb_rserver), GFP_KERNEL);
./llbfwd/main.c-451-	if (rs == NULL) {
./llbfwd/main.c-452-		return -1;
./llbfwd/main.c-453-	}
./llbfwd/main.c-454-	memset(rs, 0, sizeof(struct llb_rserver));
./llbfwd/main.c-455-	strcpy(rs->address, "220.181.111.148"); /* baidu */
./llbfwd/main.c-456-	strcpy(rs->weight, "10");
./llbfwd/main.c-457-	strcpy(rs->state, "up");
./llbfwd/main.c-458-
./llbfwd/main.c:459:	list_add_tail(&rs->list, &pool->rserver_head);
./llbfwd/main.c-460-
./llbfwd/main.c:461:	list_add_tail(&pool->list, &pool_head);
./llbfwd/main.c-462-
./llbfwd/main.c-463-	return 0;
./llbfwd/main.c-464-}
./llbfwd/main.c-465-
./llbfwd/main.c-466-/* 初始化vserver测试数据 */
./llbfwd/main.c-467-__attribute__((unused))
./llbfwd/main.c-468-static int vserver_test_data_init(void)
./llbfwd/main.c-469-{
./llbfwd/main.c-470-	struct llb_vserver *vs;
./llbfwd/main.c-471-
--
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1009-				world->tunnels + (idx + 1),
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1010-				(world->tunnels_used - (idx + 1)) *
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1011-					sizeof(tunala_item_t));
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1012-	world->tunnels_used--;
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1013-}
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1014-
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1015-static int tunala_item_io(tunala_selector_t *selector, tunala_item_t *item)
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1016-{
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1017-	int c_r, c_s, d_r, d_s; /* Four boolean flags */
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1018-
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c:1019:	/* Take ourselves out of the gene-pool if there was an except */
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1020-	if((item->clean_read != -1) && FD_ISSET(item->clean_read,
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1021-				&selector->last_selected.excepts))
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1022-		return 0;
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1023-	if((item->clean_send != -1) && FD_ISSET(item->clean_send,
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1024-				&selector->last_selected.excepts))
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1025-		return 0;
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1026-	if((item->dirty_read != -1) && FD_ISSET(item->dirty_read,
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1027-				&selector->last_selected.excepts))
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1028-		return 0;
./cavium/software/apps/TurboSSL-0.9.8j/demos/tunala/tunala.c-1029-	if((item->dirty_send != -1) && FD_ISSET(item->dirty_send,
--
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-607-	
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-608-	r_len = BN_num_bits(m);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-609-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-610-	/* Perform in software if modulus is too large for hardware. */
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-611-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-612-	if (r_len > max_key_len){
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-613-		AEPHKerr(AEPHK_F_AEP_MOD_EXP, AEPHK_R_SIZE_TOO_LARGE_OR_TOO_SMALL);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-614-		return BN_mod_exp(r, a, p, m, ctx);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-615-	} 
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-616-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c:617:	/*Grab a connection from the pool*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-618-	rv = aep_get_connection(&hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-619-	if (rv != AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-620-		{     
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-621-		AEPHKerr(AEPHK_F_AEP_MOD_EXP,AEPHK_R_GET_HANDLE_FAILED);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-622-		return BN_mod_exp(r, a, p, m, ctx);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-623-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-624-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-625-	/*To the card with the mod exp*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-626-	rv = p_AEP_ModExp(hConnection,(void*)a, (void*)p,(void*)m, (void*)r,NULL);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-627-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-628-	if (rv !=  AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-629-		{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-630-		AEPHKerr(AEPHK_F_AEP_MOD_EXP,AEPHK_R_MOD_EXP_FAILED);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-631-		rv = aep_close_connection(hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-632-		return BN_mod_exp(r, a, p, m, ctx);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-633-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-634-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c:635:	/*Return the connection to the pool*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-636-	rv = aep_return_connection(hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-637-	if (rv != AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-638-		{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-639-		AEPHKerr(AEPHK_F_AEP_MOD_EXP,AEPHK_R_RETURN_CONNECTION_FAILED); 
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-640-		goto err;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-641-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-642-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-643-	to_return = 1;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-644- err:
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-645-	return to_return;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-646-	}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-647-	
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-648-#ifndef OPENSSL_NO_RSA
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-649-static AEP_RV aep_mod_exp_crt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-650-	const BIGNUM *q, const BIGNUM *dmp1,
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-651-	const BIGNUM *dmq1,const BIGNUM *iqmp, BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-652-	{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-653-	AEP_RV rv = AEP_R_OK;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-654-	AEP_CONNECTION_HNDL hConnection;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-655-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c:656:	/*Grab a connection from the pool*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-657-	rv = aep_get_connection(&hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-658-	if (rv != AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-659-		{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-660-		AEPHKerr(AEPHK_F_AEP_MOD_EXP_CRT,AEPHK_R_GET_HANDLE_FAILED);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-661-		return FAIL_TO_SW;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-662-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-663-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-664-	/*To the card with the mod exp*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-665-	rv = p_AEP_ModExpCrt(hConnection,(void*)a, (void*)p, (void*)q, (void*)dmp1,(void*)dmq1,
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-666-		(void*)iqmp,(void*)r,NULL);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-667-	if (rv != AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-668-		{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-669-		AEPHKerr(AEPHK_F_AEP_MOD_EXP_CRT,AEPHK_R_MOD_EXP_CRT_FAILED);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-670-		rv = aep_close_connection(hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-671-		return FAIL_TO_SW;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-672-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-673-
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c:674:	/*Return the connection to the pool*/
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-675-	rv = aep_return_connection(hConnection);
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-676-	if (rv != AEP_R_OK)
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-677-		{
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-678-		AEPHKerr(AEPHK_F_AEP_MOD_EXP_CRT,AEPHK_R_RETURN_CONNECTION_FAILED); 
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-679-		goto err;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-680-		}
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-681- 
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-682- err:
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-683-	return rv;
./cavium/software/apps/TurboSSL-0.9.8j/engines/e_aep.c-684-	}
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-165-	int fd;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-166-	size_t i;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-167-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-168-#ifdef DEVRANDOM_EGD
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-169-	static const char *egdsockets[] = { DEVRANDOM_EGD, NULL };
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-170-	const char **egdsocket = NULL;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-171-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-172-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-173-#ifdef DEVRANDOM
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-174-	memset(randomstats,0,sizeof(randomstats));
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c:175:	/* Use a random entropy pool device. Linux, FreeBSD and OpenBSD
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-176-	 * have this. Use /dev/urandom if you can as /dev/random may block
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-177-	 * if it runs out of random entries.  */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-178-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-179-	for (i=0; i<sizeof(randomfiles)/sizeof(randomfiles[0]) && n < ENTROPY_NEEDED; i++)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-180-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-181-		if ((fd = open(randomfiles[i], O_RDONLY
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-182-#ifdef O_NONBLOCK
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-183-			|O_NONBLOCK
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-184-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_unix.c-185-#ifdef O_BINARY
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-67- *   will actually query "bytes" bytes of entropy form the egd-socket located
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-68- *   at path and will write them to buf (if supplied) or will directly feed
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-69- *   it to RAND_seed() if buf==NULL.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-70- *   The number of bytes is not limited by the maximum chunk size of EGD,
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-71- *   which is 255 bytes. If more than 255 bytes are wanted, several chunks
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-72- *   of entropy bytes are requested. The connection is left open until the
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-73- *   query is competed.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-74- *   RAND_query_egd_bytes() returns with
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-75- *     -1  if an error occured during connection or communication.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-76- *     num the number of bytes read from the EGD socket. This number is either
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c:77: *         the number of bytes requested or smaller, if the EGD pool is
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c:78: *         drained and the daemon signals that the pool is empty.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-79- *   This routine does not touch any RAND_status(). This is necessary, since
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-80- *   PRNG functions may call it during initialization.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-81- *
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-82- * RAND_egd_bytes(path, bytes) will query "bytes" bytes and have them
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-83- *   used to seed the PRNG.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-84- *   RAND_egd_bytes() is a wrapper for RAND_query_egd_bytes() with buf=NULL.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-85- *   Unlike RAND_query_egd_bytes(), RAND_status() is used to test the
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-86- *   seed status so that the return value can reflect the seed state:
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-87- *     -1  if an error occured during connection or communication _or_
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-88- *         if the PRNG has still not received the required seeding.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-89- *     num the number of bytes read from the EGD socket. This number is either
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c:90: *         the number of bytes requested or smaller, if the EGD pool is
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c:91: *         drained and the daemon signals that the pool is empty.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-92- *
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-93- * RAND_egd(path) will query 255 bytes and use the bytes retreived to seed
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-94- *   the PRNG.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-95- *   RAND_egd() is a wrapper for RAND_egd_bytes() with numbytes=255.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-96- */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-97-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-98-#if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VMS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_NETWARE) || defined(OPENSSL_SYS_VOS)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-99-int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-100-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/rand_egd.c-101-	return(-1);
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-402-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-403-		/* If the PRNG state is not yet unpredictable, then seeing
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-404-		 * the PRNG output may help attackers to determine the new
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-405-		 * state; thus we have to decrease the entropy estimate.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-406-		 * Once we've had enough initial seeding we don't bother to
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-407-		 * adjust the entropy count, though, because we're not ambitious
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-408-		 * to provide *information-theoretic* randomness.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-409-		 *
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-410-		 * NOTE: This approach fails if the program forks before
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-411-		 * we have enough entropy. Entropy should be collected
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c:412:		 * in a separate input pool and be transferred to the
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c:413:		 * output pool only when the entropy limit has been reached.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-414-		 */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-415-		entropy -= num;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-416-		if (entropy < 0)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-417-			entropy = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-418-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-419-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-420-	if (do_stir_pool)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-421-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-422-		/* In the output function only half of 'md' remains secret,
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-423-		 * so we better make sure that the required entropy gets
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c:424:		 * 'evenly distributed' through 'state', our randomness pool.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-425-		 * The input function (ssleay_rand_add) chains all of 'md',
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-426-		 * which makes it more suitable for this purpose.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-427-		 */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-428-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c:429:		int n = STATE_SIZE; /* so that the complete pool gets accessed */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-430-		while (n > 0)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-431-			{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-432-#if MD_DIGEST_LENGTH > 20
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-433-# error "Please adjust DUMMY_SEED."
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-434-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-435-#define DUMMY_SEED "...................." /* at least MD_DIGEST_LENGTH */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-436-			/* Note that the seed does not matter, it's just that
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-437-			 * ssleay_rand_add expects to have something to hash. */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-438-			ssleay_rand_add(DUMMY_SEED, MD_DIGEST_LENGTH, 0.0);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/rand/md_rand.c-439-			n -= MD_DIGEST_LENGTH;
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-71- * 1. Check a bunch of "(words+1)" type hacks in various bignum functions and
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-72- * check they can be safely removed.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-73- *  - Check +1 and other ugliness in BN_from_montgomery()
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-74- *
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-75- * 2. Consider allowing a BN_new_ex() that, at least, lets you specify an
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-76- * appropriate 'block' size that will be honoured by bn_expand_internal() to
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-77- * prevent piddly little reallocations. OTOH, profiling bignum expansions in
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-78- * BN_CTX doesn't show this to be a big issue.
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-79- */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-80-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:81:/* How many bignums are in each "pool item"; */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-82-#define BN_CTX_POOL_SIZE	16
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-83-/* The stack frame info is resizing, set a first-time expansion size; */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-84-#define BN_CTX_START_FRAMES	32
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-85-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-86-/***********/
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-87-/* BN_POOL */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-88-/***********/
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-89-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-90-/* A bundle of bignums that can be linked with other bundles */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-91-typedef struct bignum_pool_item
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-132-static unsigned int	BN_STACK_pop(BN_STACK *);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-133-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-134-/**********/
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-135-/* BN_CTX */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-136-/**********/
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-137-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-138-/* The opaque BN_CTX type */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-139-struct bignum_ctx
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-140-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-141-	/* The bignum bundles */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:142:	BN_POOL pool;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-143-	/* The "stack frames", if you will */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-144-	BN_STACK stack;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-145-	/* The number of bignums currently assigned */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-146-	unsigned int used;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-147-	/* Depth of stack overflow */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-148-	int err_stack;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-149-	/* Block "gets" until an "end" (compatibility behaviour) */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-150-	int too_many;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-151-	};
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-152-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-153-/* Enable this to find BN_CTX bugs */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-154-#ifdef BN_CTX_DEBUG
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-155-static const char *ctxdbg_cur = NULL;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-156-static void ctxdbg(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-157-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-158-	unsigned int bnidx = 0, fpidx = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:159:	BN_POOL_ITEM *item = ctx->pool.head;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-160-	BN_STACK *stack = &ctx->stack;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-161-	fprintf(stderr,"(%08x): ", (unsigned int)ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-162-	while(bnidx < ctx->used)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-163-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-164-		fprintf(stderr,"%02x ", item->vals[bnidx++ % BN_CTX_POOL_SIZE].dmax);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-165-		if(!(bnidx % BN_CTX_POOL_SIZE))
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-166-			item = item->next;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-167-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-168-	fprintf(stderr,"\n");
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-169-	bnidx = 0;
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-196-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-197-/* This function is an evil legacy and should not be used. This implementation
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-198- * is WYSIWYG, though I've done my best. */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-199-#ifndef OPENSSL_NO_DEPRECATED
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-200-void BN_CTX_init(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-201-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-202-	/* Assume the caller obtained the context via BN_CTX_new() and so is
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-203-	 * trying to reset it for use. Nothing else makes sense, least of all
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-204-	 * binary compatibility from a time when they could declare a static
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-205-	 * variable. */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:206:	BN_POOL_reset(&ctx->pool);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-207-	BN_STACK_reset(&ctx->stack);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-208-	ctx->used = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-209-	ctx->err_stack = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-210-	ctx->too_many = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-211-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-212-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-213-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-214-BN_CTX *BN_CTX_new(void)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-215-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-216-	BN_CTX *ret = OPENSSL_malloc(sizeof(BN_CTX));
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-217-	if(!ret)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-218-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-219-		BNerr(BN_F_BN_CTX_NEW,ERR_R_MALLOC_FAILURE);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-220-		return NULL;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-221-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-222-	/* Initialise the structure */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:223:	BN_POOL_init(&ret->pool);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-224-	BN_STACK_init(&ret->stack);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-225-	ret->used = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-226-	ret->err_stack = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-227-	ret->too_many = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-228-	return ret;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-229-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-230-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-231-void BN_CTX_free(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-232-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-233-	if (ctx == NULL)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-234-		return;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-235-#ifdef BN_CTX_DEBUG
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-236-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:237:	BN_POOL_ITEM *pool = ctx->pool.head;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:238:	fprintf(stderr,"BN_CTX_free, stack-size=%d, pool-bignums=%d\n",
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:239:		ctx->stack.size, ctx->pool.size);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-240-	fprintf(stderr,"dmaxs: ");
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:241:	while(pool) {
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-242-		unsigned loop = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-243-		while(loop < BN_CTX_POOL_SIZE)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:244:			fprintf(stderr,"%02x ", pool->vals[loop++].dmax);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:245:		pool = pool->next;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-246-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-247-	fprintf(stderr,"\n");
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-248-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-249-#endif
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-250-	BN_STACK_finish(&ctx->stack);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:251:	BN_POOL_finish(&ctx->pool);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-252-	OPENSSL_free(ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-253-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-254-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-255-void BN_CTX_start(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-256-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-257-	CTXDBG_ENTRY("BN_CTX_start", ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-258-	/* If we're already overflowing ... */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-259-	if(ctx->err_stack || ctx->too_many)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-260-		ctx->err_stack++;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-261-	/* (Try to) get a new frame pointer */
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-270-void BN_CTX_end(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-271-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-272-	CTXDBG_ENTRY("BN_CTX_end", ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-273-	if(ctx->err_stack)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-274-		ctx->err_stack--;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-275-	else
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-276-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-277-		unsigned int fp = BN_STACK_pop(&ctx->stack);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-278-		/* Does this stack frame have anything to release? */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-279-		if(fp < ctx->used)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:280:			BN_POOL_release(&ctx->pool, ctx->used - fp);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-281-		ctx->used = fp;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-282-		/* Unjam "too_many" in case "get" had failed */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-283-		ctx->too_many = 0;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-284-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-285-	CTXDBG_EXIT(ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-286-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-287-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-288-BIGNUM *BN_CTX_get(BN_CTX *ctx)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-289-	{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-290-	BIGNUM *ret;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-291-	CTXDBG_ENTRY("BN_CTX_get", ctx);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-292-	if(ctx->err_stack || ctx->too_many) return NULL;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:293:	if((ret = BN_POOL_get(&ctx->pool)) == NULL)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-294-		{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-295-		/* Setting too_many prevents repeated "get" attempts from
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-296-		 * cluttering the error stack. */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-297-		ctx->too_many = 1;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-298-		BNerr(BN_F_BN_CTX_GET,BN_R_TOO_MANY_TEMPORARY_VARIABLES);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-299-		return NULL;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-300-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-301-	/* OK, make sure the returned bignum is "zero" */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-302-	BN_zero(ret);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-303-	ctx->used++;
--
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-418-		if(!p->head)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-419-			p->head = p->current = p->tail = item;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-420-		else
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-421-			{
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-422-			p->tail->next = item;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-423-			p->tail = item;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-424-			p->current = item;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-425-			}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-426-		p->size += BN_CTX_POOL_SIZE;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-427-		p->used++;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c:428:		/* Return the first bignum from the new pool */
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-429-		return item->vals;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-430-		}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-431-	if(!p->used)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-432-		p->current = p->head;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-433-	else if((p->used % BN_CTX_POOL_SIZE) == 0)
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-434-		p->current = p->current->next;
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-435-	return p->current->vals + ((p->used++) % BN_CTX_POOL_SIZE);
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-436-	}
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-437-
./cavium/software/apps/TurboSSL-0.9.8j/crypto/bn/bn_ctx.c-438-static void BN_POOL_release(BN_POOL *p, unsigned int num)
--
./cavium/software/api/cavium_common.c-1539-
./cavium/software/api/cavium_common.c-1540-
./cavium/software/api/cavium_common.c-1541-   return ret_val;
./cavium/software/api/cavium_common.c-1542-}
./cavium/software/api/cavium_common.c-1543-#endif /* IPSEC_TEST */
./cavium/software/api/cavium_common.c-1544-
./cavium/software/api/cavium_common.c-1545-/*+****************************************************************************
./cavium/software/api/cavium_common.c-1546- *
./cavium/software/api/cavium_common.c-1547- * Csp1Random
./cavium/software/api/cavium_common.c-1548- *
./cavium/software/api/cavium_common.c:1549: * Get random data from random pool maintained by the driver.
./cavium/software/api/cavium_common.c-1550- *
./cavium/software/api/cavium_common.c-1551- * Input
./cavium/software/api/cavium_common.c-1552- *    request_type = CAVIUM_BLOCKING or CAVIUM_NON_BLOCKING
./cavium/software/api/cavium_common.c-1553- *          This api will only block if driver will have to refill
./cavium/software/api/cavium_common.c:1554: *          its random number pool. THis argument is ignored by the 
./cavium/software/api/cavium_common.c-1555- *          driver.
./cavium/software/api/cavium_common.c-1556- *   length = size of random data in bytes 
./cavium/software/api/cavium_common.c-1557- *
./cavium/software/api/cavium_common.c-1558- * Output
./cavium/software/api/cavium_common.c-1559- *   random = pointer to length bytes of random data
./cavium/software/api/cavium_common.c-1560- *      request_id = Unique ID for this request. This argument is ignored by the 
./cavium/software/api/cavium_common.c-1561- *                   driver.
./cavium/software/api/cavium_common.c-1562- *
./cavium/software/api/cavium_common.c-1563- * Return Value
./cavium/software/api/cavium_common.c-1564- * 0  = success 
--
./cavium/software/driver/linux/poll_thread.c-196- *
./cavium/software/driver/linux/poll_thread.c-197- * Revision 1.5  2008/11/06 09:07:18  ysandeep
./cavium/software/driver/linux/poll_thread.c-198- * Removed PX_PLUS
./cavium/software/driver/linux/poll_thread.c-199- *
./cavium/software/driver/linux/poll_thread.c-200- * Revision 1.4  2008/09/30 13:18:18  jsrikanth
./cavium/software/driver/linux/poll_thread.c-201- *         PX-4X [Multicard] support for IPsec :
./cavium/software/driver/linux/poll_thread.c-202- *                 -    Round-robin scheduling for selecting a device
./cavium/software/driver/linux/poll_thread.c-203- *                      implemented within IPSec APIs.
./cavium/software/driver/linux/poll_thread.c-204- *                 -    All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/linux/poll_thread.c-205- *                      moved to device structure.
./cavium/software/driver/linux/poll_thread.c:206: *                 -    A single buffer pool manager for all devices.
./cavium/software/driver/linux/poll_thread.c-207- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/linux/poll_thread.c-208- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/linux/poll_thread.c-209- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/linux/poll_thread.c-210- *         out all failing requests.
./cavium/software/driver/linux/poll_thread.c-211- *         Minor modification of changing all tabs to spaces.
./cavium/software/driver/linux/poll_thread.c-212- *
./cavium/software/driver/linux/poll_thread.c-213- * Revision 1.3  2007/03/08 20:38:28  panicker
./cavium/software/driver/linux/poll_thread.c-214- * * NPLUS mode changes. pre-release
./cavium/software/driver/linux/poll_thread.c-215- * * NitroxPX now supports N1-style NPLUS operation.
./cavium/software/driver/linux/poll_thread.c-216- * * Native PX mode PLUS operations are enabled only if PX_PLUS flag is enabled
--
./cavium/software/driver/linux/cavium_proc.c-507-   }
./cavium/software/driver/linux/cavium_proc.c-508-
./cavium/software/driver/linux/cavium_proc.c-509-   CAVIUM_MOD_DEC_USE_COUNT;
./cavium/software/driver/linux/cavium_proc.c-510-
./cavium/software/driver/linux/cavium_proc.c-511-   return 0;
./cavium/software/driver/linux/cavium_proc.c-512-}
./cavium/software/driver/linux/cavium_proc.c-513-#endif
./cavium/software/driver/linux/cavium_proc.c-514-
./cavium/software/driver/linux/cavium_proc.c-515-static int cavium_proc_buffer_stat_show(struct seq_file *m, void *v)
./cavium/software/driver/linux/cavium_proc.c-516-{
./cavium/software/driver/linux/cavium_proc.c:517:   pool i;
./cavium/software/driver/linux/cavium_proc.c-518-
./cavium/software/driver/linux/cavium_proc.c-519-   CAVIUM_MOD_INC_USE_COUNT;
./cavium/software/driver/linux/cavium_proc.c-520-
./cavium/software/driver/linux/cavium_proc.c-521-   for ( i = 0; i < BUF_POOLS; i++)
./cavium/software/driver/linux/cavium_proc.c-522-   {
./cavium/software/driver/linux/cavium_proc.c-523-#ifndef CAVIUM_HUGE_MEMORY
./cavium/software/driver/linux/cavium_proc.c-524-      if (i < 4)
./cavium/software/driver/linux/cavium_proc.c-525-         continue;
./cavium/software/driver/linux/cavium_proc.c-526-#endif
./cavium/software/driver/linux/cavium_proc.c-527-      switch (i)
--
./cavium/software/driver/linux/cavium_proc.c-546-             seq_printf(m,"LARGE BUFFERS\n");
./cavium/software/driver/linux/cavium_proc.c-547-             seq_printf(m,"-------------\n");
./cavium/software/driver/linux/cavium_proc.c-548-            break;
./cavium/software/driver/linux/cavium_proc.c-549-         case huge_pool:
./cavium/software/driver/linux/cavium_proc.c-550-             seq_printf(m,"HUGE BUFFERS\n");
./cavium/software/driver/linux/cavium_proc.c-551-             seq_printf(m,"------------\n");
./cavium/software/driver/linux/cavium_proc.c-552-            break;
./cavium/software/driver/linux/cavium_proc.c-553-         case os:
./cavium/software/driver/linux/cavium_proc.c-554-            break;
./cavium/software/driver/linux/cavium_proc.c-555-      }
./cavium/software/driver/linux/cavium_proc.c:556:      seq_printf(m,"Initial Buffer Count of pool: %d\n", buffer_stats[i]);
./cavium/software/driver/linux/cavium_proc.c:557:      seq_printf(m,"Allocated Buffers of pool: %d\n", alloc_buffer_stats[i]);
./cavium/software/driver/linux/cavium_proc.c:558:      seq_printf(m, "Fragmented Buffers of pool: %d\n", fragment_buf_stats[i]);
./cavium/software/driver/linux/cavium_proc.c:559:      seq_printf(m,"Buffers given for fragmentation from pool: %d\n", other_pools[i]);
./cavium/software/driver/linux/cavium_proc.c-560-      seq_printf(m, "\n");
./cavium/software/driver/linux/cavium_proc.c-561-   }
./cavium/software/driver/linux/cavium_proc.c-562-    
./cavium/software/driver/linux/cavium_proc.c-563-   CAVIUM_MOD_DEC_USE_COUNT;
./cavium/software/driver/linux/cavium_proc.c-564-
./cavium/software/driver/linux/cavium_proc.c-565-   return 0;
./cavium/software/driver/linux/cavium_proc.c-566-}
./cavium/software/driver/linux/cavium_proc.c-567-
./cavium/software/driver/linux/cavium_proc.c-568-#ifdef COUNTER_ENABLE
./cavium/software/driver/linux/cavium_proc.c-569-static int cavium_proc_data_stat_show(struct seq_file *m, void *v)
--
./cavium/software/driver/linux/linux_main.c-2473- *
./cavium/software/driver/linux/linux_main.c-2474- * Revision 1.35  2008/10/15 08:03:39  ysandeep
./cavium/software/driver/linux/linux_main.c-2475- * Multicard support for NPLUS added.
./cavium/software/driver/linux/linux_main.c-2476- *
./cavium/software/driver/linux/linux_main.c-2477- * Revision 1.33  2008/09/30 13:18:18  jsrikanth
./cavium/software/driver/linux/linux_main.c-2478- *         PX-4X [Multicard] support for IPsec :
./cavium/software/driver/linux/linux_main.c-2479- *                 -    Round-robin scheduling for selecting a device
./cavium/software/driver/linux/linux_main.c-2480- *                      implemented within IPSec APIs.
./cavium/software/driver/linux/linux_main.c-2481- *                 -    All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/linux/linux_main.c-2482- *                      moved to device structure.
./cavium/software/driver/linux/linux_main.c:2483: *                 -    A single buffer pool manager for all devices.
./cavium/software/driver/linux/linux_main.c-2484- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/linux/linux_main.c-2485- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/linux/linux_main.c-2486- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/linux/linux_main.c-2487- *         out all failing requests.
./cavium/software/driver/linux/linux_main.c-2488- *         Minor modification of changing all tabs to spaces.
./cavium/software/driver/linux/linux_main.c-2489- *
./cavium/software/driver/linux/linux_main.c-2490- * Revision 1.32  2008/08/25 10:04:13  aramesh
./cavium/software/driver/linux/linux_main.c-2491- * deleted unnecessary printfs.
./cavium/software/driver/linux/linux_main.c-2492- *
./cavium/software/driver/linux/linux_main.c-2493- * Revision 1.31  2008/07/29 14:53:21  aramesh
--
./cavium/software/driver/linux/linux_main.c-2759- * Fixed for NPLus (bimran).
./cavium/software/driver/linux/linux_main.c-2760- *
./cavium/software/driver/linux/linux_main.c-2761- * Revision 1.8  2004/04/24 04:01:26  bimran
./cavium/software/driver/linux/linux_main.c-2762- * Fixed NPLUS related bugs.
./cavium/software/driver/linux/linux_main.c-2763- * Added some more debug prints.
./cavium/software/driver/linux/linux_main.c-2764- *
./cavium/software/driver/linux/linux_main.c-2765- * Revision 1.7  2004/04/22 01:10:35  bimran
./cavium/software/driver/linux/linux_main.c-2766- * Added NPLUS registeration message.
./cavium/software/driver/linux/linux_main.c-2767- *
./cavium/software/driver/linux/linux_main.c-2768- * Revision 1.6  2004/04/21 19:15:18  bimran
./cavium/software/driver/linux/linux_main.c:2769: * Added Random pool support.
./cavium/software/driver/linux/linux_main.c-2770- * Added NPLUS specific initialization functions and core acquire functions.
./cavium/software/driver/linux/linux_main.c-2771- * Added NPLUS related ioctls.
./cavium/software/driver/linux/linux_main.c-2772- *
./cavium/software/driver/linux/linux_main.c-2773- * Revision 1.5  2004/04/20 17:40:27  bimran
./cavium/software/driver/linux/linux_main.c-2774- * changed all microcode references from cavium_device structure instead of global mirocode structure.
./cavium/software/driver/linux/linux_main.c-2775- *
./cavium/software/driver/linux/linux_main.c-2776- * Revision 1.4  2004/04/20 02:18:37  bimran
./cavium/software/driver/linux/linux_main.c-2777- * Removed an unreachabe code segment where ddr_present flag was checked before the driver checked for DDR memory presence.
./cavium/software/driver/linux/linux_main.c-2778- *
./cavium/software/driver/linux/linux_main.c-2779- * Revision 1.3  2004/04/19 18:36:32  bimran
--
./cavium/software/driver/osi/sg_free_list.c-156-
./cavium/software/driver/osi/sg_free_list.c-157-/*
./cavium/software/driver/osi/sg_free_list.c-158- * $Id: sg_free_list.c,v 1.2 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/sg_free_list.c-159- * $Log: sg_free_list.c,v $
./cavium/software/driver/osi/sg_free_list.c-160- * Revision 1.2  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/sg_free_list.c-161- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/sg_free_list.c-162- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/sg_free_list.c-163- *         implemented within IPSec APIs.
./cavium/software/driver/osi/sg_free_list.c-164- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/sg_free_list.c-165- *         moved to device structure.
./cavium/software/driver/osi/sg_free_list.c:166: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/sg_free_list.c-167- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/sg_free_list.c-168- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/sg_free_list.c-169- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/sg_free_list.c-170- *         out all failing requests.
./cavium/software/driver/osi/sg_free_list.c-171- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/sg_free_list.c-172- *
./cavium/software/driver/osi/sg_free_list.c-173- * Revision 1.1  2007/01/06 02:47:40  panicker
./cavium/software/driver/osi/sg_free_list.c-174- * * first cut - NITROX PX driver
./cavium/software/driver/osi/sg_free_list.c-175- *
./cavium/software/driver/osi/sg_free_list.c-176- * Revision 1.9  2005/09/28 15:50:26  ksadasivuni
--
./cavium/software/driver/osi/completion_dma_free_list.c-214-
./cavium/software/driver/osi/completion_dma_free_list.c-215-/*
./cavium/software/driver/osi/completion_dma_free_list.c-216- * $Id: completion_dma_free_list.c,v 1.8 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/completion_dma_free_list.c-217- * $Log: completion_dma_free_list.c,v $
./cavium/software/driver/osi/completion_dma_free_list.c-218- * Revision 1.8  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/completion_dma_free_list.c-219- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/completion_dma_free_list.c-220- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/completion_dma_free_list.c-221- *         implemented within IPSec APIs.
./cavium/software/driver/osi/completion_dma_free_list.c-222- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/completion_dma_free_list.c-223- *         moved to device structure.
./cavium/software/driver/osi/completion_dma_free_list.c:224: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/completion_dma_free_list.c-225- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/completion_dma_free_list.c-226- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/completion_dma_free_list.c-227- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/completion_dma_free_list.c-228- *         out all failing requests.
./cavium/software/driver/osi/completion_dma_free_list.c-229- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/completion_dma_free_list.c-230- *
./cavium/software/driver/osi/completion_dma_free_list.c-231- * Revision 1.7  2008/02/14 06:38:33  rkumar
./cavium/software/driver/osi/completion_dma_free_list.c-232- * The list management was improper with respect to sizes, it is corrected.
./cavium/software/driver/osi/completion_dma_free_list.c-233- *
./cavium/software/driver/osi/completion_dma_free_list.c-234- * Revision 1.6  2007/10/22 08:36:46  aramesh
--
./cavium/software/driver/osi/pending_free_list.c-189-
./cavium/software/driver/osi/pending_free_list.c-190-/*
./cavium/software/driver/osi/pending_free_list.c-191- * $Id: pending_free_list.c,v 1.3 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/pending_free_list.c-192- * $Log: pending_free_list.c,v $
./cavium/software/driver/osi/pending_free_list.c-193- * Revision 1.3  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/pending_free_list.c-194- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/pending_free_list.c-195- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/pending_free_list.c-196- *         implemented within IPSec APIs.
./cavium/software/driver/osi/pending_free_list.c-197- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/pending_free_list.c-198- *         moved to device structure.
./cavium/software/driver/osi/pending_free_list.c:199: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/pending_free_list.c-200- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/pending_free_list.c-201- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/pending_free_list.c-202- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/pending_free_list.c-203- *         out all failing requests.
./cavium/software/driver/osi/pending_free_list.c-204- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/pending_free_list.c-205- *
./cavium/software/driver/osi/pending_free_list.c-206- * Revision 1.2  2007/12/05 14:32:54  lpathy
./cavium/software/driver/osi/pending_free_list.c-207- * swapped allocation area
./cavium/software/driver/osi/pending_free_list.c-208- *
./cavium/software/driver/osi/pending_free_list.c-209- * Revision 1.1  2007/01/06 02:47:40  panicker
--
./cavium/software/driver/osi/pending_free_list.c-231- * Changed copyright
./cavium/software/driver/osi/pending_free_list.c-232- *
./cavium/software/driver/osi/pending_free_list.c-233- * Revision 1.9  2005/02/01 04:11:07  bimran
./cavium/software/driver/osi/pending_free_list.c-234- * copyright fix
./cavium/software/driver/osi/pending_free_list.c-235- *
./cavium/software/driver/osi/pending_free_list.c-236- * Revision 1.8  2004/06/23 20:49:10  bimran
./cavium/software/driver/osi/pending_free_list.c-237- * compiler warnings on NetBSD.
./cavium/software/driver/osi/pending_free_list.c-238- * Fixed global_counter to skip 0xffffffff
./cavium/software/driver/osi/pending_free_list.c-239- *
./cavium/software/driver/osi/pending_free_list.c-240- * Revision 1.4  2004/05/05 06:47:24  bimran
./cavium/software/driver/osi/pending_free_list.c:241: * Reqiest ID is no more pending free index. It is now read from random number pool.
./cavium/software/driver/osi/pending_free_list.c-242- *
./cavium/software/driver/osi/pending_free_list.c-243- * Revision 1.3  2004/05/02 19:45:31  bimran
./cavium/software/driver/osi/pending_free_list.c-244- * Added Copyright notice.
./cavium/software/driver/osi/pending_free_list.c-245- *
./cavium/software/driver/osi/pending_free_list.c-246- * Revision 1.2  2004/04/30 00:00:34  bimran
./cavium/software/driver/osi/pending_free_list.c-247- * Removed semaphoers from context memory in favour of just counts and a lock.
./cavium/software/driver/osi/pending_free_list.c-248- *
./cavium/software/driver/osi/pending_free_list.c-249- * Revision 1.1  2004/04/15 22:40:49  bimran
./cavium/software/driver/osi/pending_free_list.c-250- * Checkin of the code from India with some cleanups.
./cavium/software/driver/osi/pending_free_list.c-251- *
--
./cavium/software/driver/osi/buffer_pool.c-49-#include "cavium.h"
./cavium/software/driver/osi/buffer_pool.c-50-#include "init_cfg.h"
./cavium/software/driver/osi/buffer_pool.c-51-#include "buffer_pool.h"
./cavium/software/driver/osi/buffer_pool.c-52-
./cavium/software/driver/osi/buffer_pool.c-53-static cavium_buffer_t buffer[BUF_POOLS];
./cavium/software/driver/osi/buffer_pool.c-54-static cavium_frag_buf_t fragments[MAX_BUFFER_CHUNKS];
./cavium/software/driver/osi/buffer_pool.c-55-static Uint16 fragment_free_list[MAX_BUFFER_CHUNKS];
./cavium/software/driver/osi/buffer_pool.c-56-static Uint16 fragment_free_list_index;
./cavium/software/driver/osi/buffer_pool.c-57-static cavium_spinlock_t fragment_lock;
./cavium/software/driver/osi/buffer_pool.c-58-
./cavium/software/driver/osi/buffer_pool.c:59:static int malloc_buffer(pool,int,int);
./cavium/software/driver/osi/buffer_pool.c:60:static void free_buffer(pool);
./cavium/software/driver/osi/buffer_pool.c-61-static void put_buffer(cavium_buffer_t *,int);
./cavium/software/driver/osi/buffer_pool.c-62-static Uint8 *get_buffer(cavium_buffer_t *);
./cavium/software/driver/osi/buffer_pool.c-63-
./cavium/software/driver/osi/buffer_pool.c-64-struct cavium_list_head allocated_list_head = {NULL, NULL};
./cavium/software/driver/osi/buffer_pool.c-65-/* Initial Buffer count */
./cavium/software/driver/osi/buffer_pool.c-66-Uint32 buffer_stats[BUF_POOLS];
./cavium/software/driver/osi/buffer_pool.c-67-/* Allocated buffers */
./cavium/software/driver/osi/buffer_pool.c-68-Uint32 alloc_buffer_stats[BUF_POOLS];
./cavium/software/driver/osi/buffer_pool.c:69:/* Buffers in fragmented pool */
./cavium/software/driver/osi/buffer_pool.c-70-Uint32 fragment_buf_stats[BUF_POOLS];
./cavium/software/driver/osi/buffer_pool.c-71-/* Buffers given for fragmentation */
./cavium/software/driver/osi/buffer_pool.c-72-Uint32 other_pools[BUF_POOLS];
./cavium/software/driver/osi/buffer_pool.c-73-
./cavium/software/driver/osi/buffer_pool.c-74-/******************************************************** 
./cavium/software/driver/osi/buffer_pool.c-75- * Function : init_buffer_pool
./cavium/software/driver/osi/buffer_pool.c-76- *
./cavium/software/driver/osi/buffer_pool.c-77- * Arguments    : cavium_general_config *
./cavium/software/driver/osi/buffer_pool.c-78- * Return Value : Returns the status 0 (success) or
./cavium/software/driver/osi/buffer_pool.c-79- *                1 (failure)
./cavium/software/driver/osi/buffer_pool.c-80- * 
./cavium/software/driver/osi/buffer_pool.c:81: * This function is used to intialize the buffer pool of 
./cavium/software/driver/osi/buffer_pool.c-82- * the driver.The individual buffer pools are of size
./cavium/software/driver/osi/buffer_pool.c-83- * 1k,2k,4k,8k,16k and 32k
./cavium/software/driver/osi/buffer_pool.c-84- *
./cavium/software/driver/osi/buffer_pool.c-85- ********************************************************/
./cavium/software/driver/osi/buffer_pool.c-86-
./cavium/software/driver/osi/buffer_pool.c-87-Uint32
./cavium/software/driver/osi/buffer_pool.c-88-init_buffer_pool(cavium_general_config *gconfig)
./cavium/software/driver/osi/buffer_pool.c-89-{
./cavium/software/driver/osi/buffer_pool.c-90-   Uint16 i;
./cavium/software/driver/osi/buffer_pool.c-91-   cavium_dbgprint( "CAVIUM init_buffer_pool: called\n");
--
./cavium/software/driver/osi/buffer_pool.c-211-   buffer_stats[tiny] = 0;
./cavium/software/driver/osi/buffer_pool.c-212-#endif
./cavium/software/driver/osi/buffer_pool.c-213-   free_buffer(ex_tiny);
./cavium/software/driver/osi/buffer_pool.c-214-   buffer_stats[ex_tiny] = 0;
./cavium/software/driver/osi/buffer_pool.c-215-   cavium_spin_lock_destroy(&fragment_lock);
./cavium/software/driver/osi/buffer_pool.c-216-}
./cavium/software/driver/osi/buffer_pool.c-217-
./cavium/software/driver/osi/buffer_pool.c-218-/**************************************************** 
./cavium/software/driver/osi/buffer_pool.c-219- * Function  : malloc_buffer
./cavium/software/driver/osi/buffer_pool.c-220- * 
./cavium/software/driver/osi/buffer_pool.c:221: * Arguments :  pool,int, int
./cavium/software/driver/osi/buffer_pool.c-222- * Return Value : Type - int 
./cavium/software/driver/osi/buffer_pool.c-223- *                Returns the error value 0 (success)
./cavium/software/driver/osi/buffer_pool.c-224- *                and 1 (failure).
./cavium/software/driver/osi/buffer_pool.c-225- * 
./cavium/software/driver/osi/buffer_pool.c-226- * This function does the actual allocation of 
./cavium/software/driver/osi/buffer_pool.c:227: * memory to a particular buffer pool
./cavium/software/driver/osi/buffer_pool.c-228- *
./cavium/software/driver/osi/buffer_pool.c-229- ****************************************************/
./cavium/software/driver/osi/buffer_pool.c-230-
./cavium/software/driver/osi/buffer_pool.c-231-static int 
./cavium/software/driver/osi/buffer_pool.c:232:malloc_buffer(pool p, int count, int size)
./cavium/software/driver/osi/buffer_pool.c-233-{
./cavium/software/driver/osi/buffer_pool.c-234-   Uint16 i; 
./cavium/software/driver/osi/buffer_pool.c-235-   cavium_buffer_t *buf = &buffer[p];
./cavium/software/driver/osi/buffer_pool.c-236-
./cavium/software/driver/osi/buffer_pool.c-237-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-238-   /* cavium_memset(buf,0,sizeof(buf)); */
./cavium/software/driver/osi/buffer_pool.c-239-
./cavium/software/driver/osi/buffer_pool.c-240-   /* cavium_spin_lock_init(&buf->buffer_lock); */
./cavium/software/driver/osi/buffer_pool.c-241-   buf->chunks = count;
./cavium/software/driver/osi/buffer_pool.c-242-   buf->chunk_size = size;
--
./cavium/software/driver/osi/buffer_pool.c-250-      buf->address[i] = (Uint8 *)cavium_malloc_dma(buf->real_size + ALIGNMENT, NULL);
./cavium/software/driver/osi/buffer_pool.c-251-      if (!buf->address[i]) 
./cavium/software/driver/osi/buffer_pool.c-252-      {
./cavium/software/driver/osi/buffer_pool.c-253-         cavium_error("PKP malloc_buffer: failed for chunk=%d\n",i);
./cavium/software/driver/osi/buffer_pool.c-254-         goto failed;
./cavium/software/driver/osi/buffer_pool.c-255-      }
./cavium/software/driver/osi/buffer_pool.c-256-
./cavium/software/driver/osi/buffer_pool.c-257-      buf->address_trans[i] = (Uint8 *)(((ptrlong)(buf->address[i]) + 
./cavium/software/driver/osi/buffer_pool.c-258-                        sizeof(buffer_tag) + ALIGNMENT) & ALIGNMENT_MASK);
./cavium/software/driver/osi/buffer_pool.c-259-      buf->free_list[i] = i; 
./cavium/software/driver/osi/buffer_pool.c:260:      ((buffer_tag *)(((ptrlong)buf->address[i] + ALIGNMENT) & ALIGNMENT_MASK))->pool = p;
./cavium/software/driver/osi/buffer_pool.c-261-      ((buffer_tag *)(((ptrlong)buf->address[i] + ALIGNMENT) & ALIGNMENT_MASK))->index = i;
./cavium/software/driver/osi/buffer_pool.c-262-   }
./cavium/software/driver/osi/buffer_pool.c-263-
./cavium/software/driver/osi/buffer_pool.c-264-   return 0;
./cavium/software/driver/osi/buffer_pool.c-265-
./cavium/software/driver/osi/buffer_pool.c-266-failed:
./cavium/software/driver/osi/buffer_pool.c-267-    return 1;
./cavium/software/driver/osi/buffer_pool.c-268-}
./cavium/software/driver/osi/buffer_pool.c-269-
./cavium/software/driver/osi/buffer_pool.c-270-/*************************************************** 
./cavium/software/driver/osi/buffer_pool.c-271- * Function : free_buffer
./cavium/software/driver/osi/buffer_pool.c-272- *
./cavium/software/driver/osi/buffer_pool.c:273: * Arguments : pool
./cavium/software/driver/osi/buffer_pool.c-274- * Return Value : Returns void 
./cavium/software/driver/osi/buffer_pool.c-275- *
./cavium/software/driver/osi/buffer_pool.c-276- * This function does the actual freeing of the 
./cavium/software/driver/osi/buffer_pool.c-277- * DMA buffer which has been allocted by the driver
./cavium/software/driver/osi/buffer_pool.c-278- *
./cavium/software/driver/osi/buffer_pool.c-279- ***************************************************/
./cavium/software/driver/osi/buffer_pool.c-280-void 
./cavium/software/driver/osi/buffer_pool.c:281:free_buffer(pool p)
./cavium/software/driver/osi/buffer_pool.c-282-{
./cavium/software/driver/osi/buffer_pool.c-283-   int i;
./cavium/software/driver/osi/buffer_pool.c-284-   cavium_buffer_t *buf = &buffer[p];
./cavium/software/driver/osi/buffer_pool.c-285-
./cavium/software/driver/osi/buffer_pool.c-286-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-287-   for (i = 0; i < buf->chunks; i++) 
./cavium/software/driver/osi/buffer_pool.c-288-   {
./cavium/software/driver/osi/buffer_pool.c-289-      if (buf->address[i])
./cavium/software/driver/osi/buffer_pool.c-290-         cavium_free_dma(buf->address[i]);
./cavium/software/driver/osi/buffer_pool.c-291-   }
--
./cavium/software/driver/osi/buffer_pool.c-315-   return frag;
./cavium/software/driver/osi/buffer_pool.c-316-}
./cavium/software/driver/osi/buffer_pool.c-317-
./cavium/software/driver/osi/buffer_pool.c-318-/*************************************************
./cavium/software/driver/osi/buffer_pool.c-319- * Function : put_fragment
./cavium/software/driver/osi/buffer_pool.c-320- *
./cavium/software/driver/osi/buffer_pool.c-321- * Argument      : cavium_device *,cavium_frag_buf_t 
./cavium/software/driver/osi/buffer_pool.c-322- * Return Value  : Returns void 
./cavium/software/driver/osi/buffer_pool.c-323- *
./cavium/software/driver/osi/buffer_pool.c-324- * This function puts back the fragment into the 
./cavium/software/driver/osi/buffer_pool.c:325: * free pool of fragment list.
./cavium/software/driver/osi/buffer_pool.c-326- *
./cavium/software/driver/osi/buffer_pool.c-327- *************************************************/
./cavium/software/driver/osi/buffer_pool.c-328-
./cavium/software/driver/osi/buffer_pool.c-329-static void
./cavium/software/driver/osi/buffer_pool.c-330-put_fragment(cavium_device *RESERVED, cavium_frag_buf_t frag)
./cavium/software/driver/osi/buffer_pool.c-331-{
./cavium/software/driver/osi/buffer_pool.c-332-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-333-   fragment_free_list_index --;
./cavium/software/driver/osi/buffer_pool.c-334-   fragment_free_list[fragment_free_list_index] = (Uint16) frag.index;
./cavium/software/driver/osi/buffer_pool.c-335-}
./cavium/software/driver/osi/buffer_pool.c-336-/********************************************************* 
./cavium/software/driver/osi/buffer_pool.c-337- * Function  : put_buffer
./cavium/software/driver/osi/buffer_pool.c-338- *
./cavium/software/driver/osi/buffer_pool.c-339- * Arguments : cavium_buffer_t *, int
./cavium/software/driver/osi/buffer_pool.c-340- * Returns   : void
./cavium/software/driver/osi/buffer_pool.c-341- *
./cavium/software/driver/osi/buffer_pool.c-342- * This function puts back the buffer into the 
./cavium/software/driver/osi/buffer_pool.c:343: * free buffer pool
./cavium/software/driver/osi/buffer_pool.c-344- *********************************************************/
./cavium/software/driver/osi/buffer_pool.c-345-
./cavium/software/driver/osi/buffer_pool.c-346-static void 
./cavium/software/driver/osi/buffer_pool.c-347-put_buffer(cavium_buffer_t * b,int index)
./cavium/software/driver/osi/buffer_pool.c-348-{
./cavium/software/driver/osi/buffer_pool.c-349-   buffer_tag* t = NULL;
./cavium/software/driver/osi/buffer_pool.c-350-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-351-   cavium_spin_lock_softirqsave(&b->buffer_lock);
./cavium/software/driver/osi/buffer_pool.c-352-   b->free_list_index --;
./cavium/software/driver/osi/buffer_pool.c-353-   b->free_list[b->free_list_index] = (Uint16) index;
./cavium/software/driver/osi/buffer_pool.c-354-   t = (buffer_tag*)((ptrlong)b->address_trans[index] - sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c:355:   alloc_buffer_stats[t->pool]--;
./cavium/software/driver/osi/buffer_pool.c-356-   cavium_spin_unlock_softirqrestore(&b->buffer_lock);
./cavium/software/driver/osi/buffer_pool.c-357-}
./cavium/software/driver/osi/buffer_pool.c-358- 
./cavium/software/driver/osi/buffer_pool.c-359-/********************************************************* 
./cavium/software/driver/osi/buffer_pool.c-360- * Function  : get_buffer_from_init_pool
./cavium/software/driver/osi/buffer_pool.c-361- *
./cavium/software/driver/osi/buffer_pool.c-362- * Arguments : void *, cavium_buffer_t *
./cavium/software/driver/osi/buffer_pool.c-363- * Returns   : Returns the address of the buffer 
./cavium/software/driver/osi/buffer_pool.c-364- *             of type Uint8 *  or NULL
./cavium/software/driver/osi/buffer_pool.c-365- *
./cavium/software/driver/osi/buffer_pool.c-366- * This function gets buffer (which has been requested)
./cavium/software/driver/osi/buffer_pool.c:367: * from the preallocated free pool 
./cavium/software/driver/osi/buffer_pool.c-368- *
./cavium/software/driver/osi/buffer_pool.c-369- *********************************************************/
./cavium/software/driver/osi/buffer_pool.c-370-static Uint8 * 
./cavium/software/driver/osi/buffer_pool.c-371-get_buffer_from_init_pool(void *RESERVED, cavium_buffer_t * b)
./cavium/software/driver/osi/buffer_pool.c-372-{
./cavium/software/driver/osi/buffer_pool.c-373-   int index;
./cavium/software/driver/osi/buffer_pool.c-374-   Uint8 *ret = NULL;
./cavium/software/driver/osi/buffer_pool.c-375-
./cavium/software/driver/osi/buffer_pool.c-376-   buffer_tag* t = NULL;
./cavium/software/driver/osi/buffer_pool.c-377-
./cavium/software/driver/osi/buffer_pool.c-378-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-379-   cavium_spin_lock_softirqsave(&b->buffer_lock);
./cavium/software/driver/osi/buffer_pool.c-380-   if (b->free_list_index < b->chunks) {
./cavium/software/driver/osi/buffer_pool.c:381:      /* Allocating from the free pool */
./cavium/software/driver/osi/buffer_pool.c-382-      index = b->free_list[b->free_list_index++];
./cavium/software/driver/osi/buffer_pool.c-383-      ret = b->address_trans[index];
./cavium/software/driver/osi/buffer_pool.c-384-      t = (buffer_tag*)((ptrlong)b->address_trans[index] - sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c:385:      alloc_buffer_stats[t->pool]++;
./cavium/software/driver/osi/buffer_pool.c-386-   }
./cavium/software/driver/osi/buffer_pool.c-387-   cavium_spin_unlock_softirqrestore(&b->buffer_lock);
./cavium/software/driver/osi/buffer_pool.c-388-   return ret;
./cavium/software/driver/osi/buffer_pool.c-389-}
./cavium/software/driver/osi/buffer_pool.c-390-/********************************************************* 
./cavium/software/driver/osi/buffer_pool.c-391- * Function  : get_buffer
./cavium/software/driver/osi/buffer_pool.c-392- *
./cavium/software/driver/osi/buffer_pool.c-393- * Arguments : cavium_buffer_t *
./cavium/software/driver/osi/buffer_pool.c-394- * Returns   : Returns the address of the buffer 
./cavium/software/driver/osi/buffer_pool.c-395- *             of type Uint8 *  or NULL
./cavium/software/driver/osi/buffer_pool.c-396- *
./cavium/software/driver/osi/buffer_pool.c-397- * This function gets buffer (which has been requested)
./cavium/software/driver/osi/buffer_pool.c:398: * from the preallocated free pool or from the fragmented
./cavium/software/driver/osi/buffer_pool.c-399- * list of buffers obtained from higher pools
./cavium/software/driver/osi/buffer_pool.c-400- *
./cavium/software/driver/osi/buffer_pool.c-401- *********************************************************/
./cavium/software/driver/osi/buffer_pool.c-402-static Uint8 * 
./cavium/software/driver/osi/buffer_pool.c-403-get_buffer(cavium_buffer_t * b)
./cavium/software/driver/osi/buffer_pool.c-404-{
./cavium/software/driver/osi/buffer_pool.c-405-   int index;
./cavium/software/driver/osi/buffer_pool.c-406-   Uint8 *ret = NULL;
./cavium/software/driver/osi/buffer_pool.c-407-   struct cavium_list_head *tmp;
./cavium/software/driver/osi/buffer_pool.c:408:   int pool = 0;
./cavium/software/driver/osi/buffer_pool.c-409-
./cavium/software/driver/osi/buffer_pool.c-410-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-411-
./cavium/software/driver/osi/buffer_pool.c-412-   ret = get_buffer_from_init_pool(NULL, b);
./cavium/software/driver/osi/buffer_pool.c-413-   if (ret)
./cavium/software/driver/osi/buffer_pool.c-414-      return ret;
./cavium/software/driver/osi/buffer_pool.c-415-
./cavium/software/driver/osi/buffer_pool.c-416-   /* Allocating from the fragmented list of buffers 
./cavium/software/driver/osi/buffer_pool.c-417-    * obtained from higher pools*/
./cavium/software/driver/osi/buffer_pool.c-418-   cavium_spin_lock_softirqsave(&fragment_lock);
./cavium/software/driver/osi/buffer_pool.c-419-   cavium_list_for_each(tmp, &b->frags_list) {
./cavium/software/driver/osi/buffer_pool.c-420-      cavium_frag_buf_t *entry = cavium_list_entry(tmp, cavium_frag_buf_t, list);
./cavium/software/driver/osi/buffer_pool.c-421-      if (entry->free_list_index < entry->frags_count) {
./cavium/software/driver/osi/buffer_pool.c-422-         index = entry->free_list[entry->free_list_index++];
./cavium/software/driver/osi/buffer_pool.c-423-         ret = entry->address[index];
./cavium/software/driver/osi/buffer_pool.c-424-         if (entry->not_allocated == 1) {
./cavium/software/driver/osi/buffer_pool.c-425-            entry->not_allocated = 0;
./cavium/software/driver/osi/buffer_pool.c-426-            cavium_list_add_tail(&entry->alloc_list, &allocated_list_head);
./cavium/software/driver/osi/buffer_pool.c-427-         }
./cavium/software/driver/osi/buffer_pool.c:428:         pool = entry->p;
./cavium/software/driver/osi/buffer_pool.c:429:         other_pools[pool]++;
./cavium/software/driver/osi/buffer_pool.c-430-         break;
./cavium/software/driver/osi/buffer_pool.c-431-      }
./cavium/software/driver/osi/buffer_pool.c-432-   }
./cavium/software/driver/osi/buffer_pool.c-433-   cavium_spin_unlock_softirqrestore(&fragment_lock);
./cavium/software/driver/osi/buffer_pool.c-434-
./cavium/software/driver/osi/buffer_pool.c-435-   return ret;
./cavium/software/driver/osi/buffer_pool.c-436-}
./cavium/software/driver/osi/buffer_pool.c-437-
./cavium/software/driver/osi/buffer_pool.c-438-/************************************************************* 
./cavium/software/driver/osi/buffer_pool.c-439- * Function  : fragment_buffer
./cavium/software/driver/osi/buffer_pool.c-440- *
./cavium/software/driver/osi/buffer_pool.c:441: * Arguments : cavium_device *,  pool , Uint8 *
./cavium/software/driver/osi/buffer_pool.c-442- * Returns   : void 
./cavium/software/driver/osi/buffer_pool.c-443- *
./cavium/software/driver/osi/buffer_pool.c-444- * This function fragments the buffer pointed to by "buf"
./cavium/software/driver/osi/buffer_pool.c-445- * into sizes of b->chunk_size(of Pool p) and places the same 
./cavium/software/driver/osi/buffer_pool.c-446- * into b->frag_list (of Pool p)
./cavium/software/driver/osi/buffer_pool.c-447- * 
./cavium/software/driver/osi/buffer_pool.c-448- *************************************************************/
./cavium/software/driver/osi/buffer_pool.c-449-static void
./cavium/software/driver/osi/buffer_pool.c:450:fragment_buffer(cavium_device *RESERVED, pool p, Uint8 *buf)
./cavium/software/driver/osi/buffer_pool.c-451-{
./cavium/software/driver/osi/buffer_pool.c-452-   buffer_tag* t = (buffer_tag*)((ptrlong)buf - sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c-453-   cavium_frag_buf_t *fragment;
./cavium/software/driver/osi/buffer_pool.c-454-   Uint16 i;
./cavium/software/driver/osi/buffer_pool.c-455-   cavium_buffer_t *b = &(buffer[p]);
./cavium/software/driver/osi/buffer_pool.c-456-
./cavium/software/driver/osi/buffer_pool.c-457-   fragment = get_free_fragment(NULL);
./cavium/software/driver/osi/buffer_pool.c-458-
./cavium/software/driver/osi/buffer_pool.c-459-   fragment->big_buf = buf;
./cavium/software/driver/osi/buffer_pool.c-460-
./cavium/software/driver/osi/buffer_pool.c:461:   switch (t->pool) 
./cavium/software/driver/osi/buffer_pool.c-462-   {
./cavium/software/driver/osi/buffer_pool.c-463-      case ex_tiny:
./cavium/software/driver/osi/buffer_pool.c-464-         cavium_error("Cavium buffer pools fragmenting from a tiny buffer\n");
./cavium/software/driver/osi/buffer_pool.c-465-         put_fragment(NULL, *fragment);
./cavium/software/driver/osi/buffer_pool.c-466-         return;
./cavium/software/driver/osi/buffer_pool.c-467-      case tiny:
./cavium/software/driver/osi/buffer_pool.c-468-         fragment->frags_count = (TINY_BUFFER_CHUNK_SIZE/b->chunk_size);
./cavium/software/driver/osi/buffer_pool.c-469-         break;
./cavium/software/driver/osi/buffer_pool.c-470-      case small:
./cavium/software/driver/osi/buffer_pool.c-471-         fragment->frags_count = (SMALL_BUFFER_CHUNK_SIZE/b->chunk_size);
--
./cavium/software/driver/osi/buffer_pool.c-474-         fragment->frags_count = (MEDIUM_BUFFER_CHUNK_SIZE/b->chunk_size);
./cavium/software/driver/osi/buffer_pool.c-475-         break;
./cavium/software/driver/osi/buffer_pool.c-476-      case large:
./cavium/software/driver/osi/buffer_pool.c-477-         fragment->frags_count = (LARGE_BUFFER_CHUNK_SIZE/b->chunk_size);
./cavium/software/driver/osi/buffer_pool.c-478-         break;
./cavium/software/driver/osi/buffer_pool.c-479-      case huge_pool:
./cavium/software/driver/osi/buffer_pool.c-480-         fragment->frags_count = (HUGE_BUFFER_CHUNK_SIZE/b->chunk_size);
./cavium/software/driver/osi/buffer_pool.c-481-         break;
./cavium/software/driver/osi/buffer_pool.c-482-      default:
./cavium/software/driver/osi/buffer_pool.c-483-         /* bad, very bad! this should never happen. */
./cavium/software/driver/osi/buffer_pool.c:484:         cavium_error("Unsupported buffer pool %d\n", 
./cavium/software/driver/osi/buffer_pool.c:485:            t->pool);
./cavium/software/driver/osi/buffer_pool.c-486-         put_fragment(NULL, *fragment);
./cavium/software/driver/osi/buffer_pool.c-487-         return;
./cavium/software/driver/osi/buffer_pool.c-488-   }
./cavium/software/driver/osi/buffer_pool.c-489-
./cavium/software/driver/osi/buffer_pool.c-490-   fragment->p = p;
./cavium/software/driver/osi/buffer_pool.c-491-   fragment_buf_stats[p] += fragment->frags_count;
./cavium/software/driver/osi/buffer_pool.c-492-
./cavium/software/driver/osi/buffer_pool.c-493-   for (i = 0; i < fragment->frags_count; i++) 
./cavium/software/driver/osi/buffer_pool.c-494-   {
./cavium/software/driver/osi/buffer_pool.c-495-      fragment->free_list[i] = i;
--
./cavium/software/driver/osi/buffer_pool.c-497-   }
./cavium/software/driver/osi/buffer_pool.c-498-   fragment->free_list_index = 0;
./cavium/software/driver/osi/buffer_pool.c-499-   fragment->not_allocated = 1;
./cavium/software/driver/osi/buffer_pool.c-500-   cavium_list_add_tail(&fragment->list, &b->frags_list);
./cavium/software/driver/osi/buffer_pool.c-501-}
./cavium/software/driver/osi/buffer_pool.c-502-
./cavium/software/driver/osi/buffer_pool.c-503-/******************************************************
./cavium/software/driver/osi/buffer_pool.c-504- * 
./cavium/software/driver/osi/buffer_pool.c-505- * Function  : grow_buffers 
./cavium/software/driver/osi/buffer_pool.c-506- *
./cavium/software/driver/osi/buffer_pool.c:507: * Arguments : cavium_device *, pool 
./cavium/software/driver/osi/buffer_pool.c-508- * Returns   : Uint32 
./cavium/software/driver/osi/buffer_pool.c-509- *
./cavium/software/driver/osi/buffer_pool.c-510- * This function grows buffers in Pool p by allocating 
./cavium/software/driver/osi/buffer_pool.c:511: * from higher pool and fragmenting the higher pool buffer
./cavium/software/driver/osi/buffer_pool.c-512- *
./cavium/software/driver/osi/buffer_pool.c-513- ******************************************************/
./cavium/software/driver/osi/buffer_pool.c-514-static Uint32
./cavium/software/driver/osi/buffer_pool.c:515:grow_buffers(cavium_device *RESERVED, pool p)
./cavium/software/driver/osi/buffer_pool.c-516-{
./cavium/software/driver/osi/buffer_pool.c-517-   Uint8 *buf = NULL;
./cavium/software/driver/osi/buffer_pool.c-518-
./cavium/software/driver/osi/buffer_pool.c-519-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-520-   switch (p) 
./cavium/software/driver/osi/buffer_pool.c-521-   {
./cavium/software/driver/osi/buffer_pool.c-522-      case ex_tiny:
./cavium/software/driver/osi/buffer_pool.c-523-         buf = get_buffer_from_init_pool(NULL, &buffer[tiny]);
./cavium/software/driver/osi/buffer_pool.c-524-         if (buf) 
./cavium/software/driver/osi/buffer_pool.c-525-         {
--
./cavium/software/driver/osi/buffer_pool.c-568-      {
./cavium/software/driver/osi/buffer_pool.c-569-         put_buffer_in_pool(NULL, buf);
./cavium/software/driver/osi/buffer_pool.c-570-         return 1;
./cavium/software/driver/osi/buffer_pool.c-571-      }
./cavium/software/driver/osi/buffer_pool.c-572-   }
./cavium/software/driver/osi/buffer_pool.c-573-
./cavium/software/driver/osi/buffer_pool.c-574-   return 0;
./cavium/software/driver/osi/buffer_pool.c-575-}
./cavium/software/driver/osi/buffer_pool.c-576-
./cavium/software/driver/osi/buffer_pool.c-577-#if 0
./cavium/software/driver/osi/buffer_pool.c:578:/* Defragment the buffers from cavium_buffer_t into pool p back */
./cavium/software/driver/osi/buffer_pool.c-579-static Uint32
./cavium/software/driver/osi/buffer_pool.c:580:defragment_buffers(cavium_device *RESERVED, cavium_buffer_t *b, pool p)
./cavium/software/driver/osi/buffer_pool.c-581-{
./cavium/software/driver/osi/buffer_pool.c-582-   cavium_list_head *tmp, *tmp1;
./cavium/software/driver/osi/buffer_pool.c-583-   Uint32 ret = 1;
./cavium/software/driver/osi/buffer_pool.c-584-
./cavium/software/driver/osi/buffer_pool.c-585-   cavium_list_for_each_safe(tmp, tmp1, &b->frags_list) {
./cavium/software/driver/osi/buffer_pool.c-586-      cavium_frag_buf_t *frag = list_entry(tmp, cavium_frag_buf_t, list);
./cavium/software/driver/osi/buffer_pool.c-587-      buffer_tag * t = (buffer_tag*)((Uint32)(frag->big_buf) - sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c-588-      if (frag->not_allocated) {
./cavium/software/driver/osi/buffer_pool.c:589:         if (t->pool != p) { 
./cavium/software/driver/osi/buffer_pool.c-590-            continue;
./cavium/software/driver/osi/buffer_pool.c-591-         } else {
./cavium/software/driver/osi/buffer_pool.c-592-            cavium_list_del(&frag->list);
./cavium/software/driver/osi/buffer_pool.c-593-            put_fragment(NULL, *frag);
./cavium/software/driver/osi/buffer_pool.c-594-            put_buffer(b, t->index);
./cavium/software/driver/osi/buffer_pool.c-595-            ret = 0;
./cavium/software/driver/osi/buffer_pool.c-596-         }
./cavium/software/driver/osi/buffer_pool.c-597-      }
./cavium/software/driver/osi/buffer_pool.c-598-   }
./cavium/software/driver/osi/buffer_pool.c-599-   return ret;
./cavium/software/driver/osi/buffer_pool.c-600-}
./cavium/software/driver/osi/buffer_pool.c-601-
./cavium/software/driver/osi/buffer_pool.c:602:/* Trying to reclaim back all the possible buffers into pool p */
./cavium/software/driver/osi/buffer_pool.c-603-
./cavium/software/driver/osi/buffer_pool.c-604-/*********************************************** 
./cavium/software/driver/osi/buffer_pool.c-605- * Function  : reclaim_buffers_in_pool
./cavium/software/driver/osi/buffer_pool.c-606- *
./cavium/software/driver/osi/buffer_pool.c:607: * Arguments : cavium_device *, pool
./cavium/software/driver/osi/buffer_pool.c-608- * Returns   : static Uint32 
./cavium/software/driver/osi/buffer_pool.c-609- *
./cavium/software/driver/osi/buffer_pool.c-610- * This function tries to reclaim back all the 
./cavium/software/driver/osi/buffer_pool.c:611: * possible buffers into pool p
./cavium/software/driver/osi/buffer_pool.c-612- *
./cavium/software/driver/osi/buffer_pool.c-613- ***********************************************/
./cavium/software/driver/osi/buffer_pool.c-614-static Uint32
./cavium/software/driver/osi/buffer_pool.c:615:reclaim_buffers_in_pool(cavium_device * RESERVED, pool p)
./cavium/software/driver/osi/buffer_pool.c-616-{
./cavium/software/driver/osi/buffer_pool.c-617-   Uint32 ret = 1;
./cavium/software/driver/osi/buffer_pool.c-618-
./cavium/software/driver/osi/buffer_pool.c-619-   switch (p) {
./cavium/software/driver/osi/buffer_pool.c-620-      case huge_pool:
./cavium/software/driver/osi/buffer_pool.c-621-         if (!defragment_buffers(NULL, &buffer[large], p)) {
./cavium/software/driver/osi/buffer_pool.c-622-            ret = 0;
./cavium/software/driver/osi/buffer_pool.c-623-         }
./cavium/software/driver/osi/buffer_pool.c-624-      case large:
./cavium/software/driver/osi/buffer_pool.c-625-         if (!defragment_buffers(NULL, &buffer[medium], p)) {
--
./cavium/software/driver/osi/buffer_pool.c-646-}
./cavium/software/driver/osi/buffer_pool.c-647-#endif
./cavium/software/driver/osi/buffer_pool.c-648-
./cavium/software/driver/osi/buffer_pool.c-649-/************************************************************
./cavium/software/driver/osi/buffer_pool.c-650- * Function  : get_buffer_from_pool
./cavium/software/driver/osi/buffer_pool.c-651- *
./cavium/software/driver/osi/buffer_pool.c-652- * Arguments : void * , int 
./cavium/software/driver/osi/buffer_pool.c-653- * Returns   : Uint8 *
./cavium/software/driver/osi/buffer_pool.c-654- *
./cavium/software/driver/osi/buffer_pool.c-655- * This function tries to get the requested buffer 
./cavium/software/driver/osi/buffer_pool.c:656: * from the preallocated pool of buffers.If the preallocated
./cavium/software/driver/osi/buffer_pool.c:657: * pool has exhausted, then it tries to grow the buffers 
./cavium/software/driver/osi/buffer_pool.c:658: * from the next higher pool 
./cavium/software/driver/osi/buffer_pool.c-659- * 
./cavium/software/driver/osi/buffer_pool.c-660- *************************************************************/
./cavium/software/driver/osi/buffer_pool.c-661-
./cavium/software/driver/osi/buffer_pool.c-662-Uint8 *
./cavium/software/driver/osi/buffer_pool.c-663-get_buffer_from_pool(void *RESERVED,int size)
./cavium/software/driver/osi/buffer_pool.c-664-{
./cavium/software/driver/osi/buffer_pool.c-665-   Uint8 * buf;
./cavium/software/driver/osi/buffer_pool.c:666:   pool p;
./cavium/software/driver/osi/buffer_pool.c-667-
./cavium/software/driver/osi/buffer_pool.c-668-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-669-
./cavium/software/driver/osi/buffer_pool.c-670-get_buf:
./cavium/software/driver/osi/buffer_pool.c-671-   if (size <= EX_TINY_BUFFER_CHUNK_SIZE) 
./cavium/software/driver/osi/buffer_pool.c-672-   {
./cavium/software/driver/osi/buffer_pool.c-673-       buf = get_buffer(&buffer[ex_tiny]);
./cavium/software/driver/osi/buffer_pool.c-674-       p = ex_tiny;
./cavium/software/driver/osi/buffer_pool.c-675-   }
./cavium/software/driver/osi/buffer_pool.c-676-#ifdef CAVIUM_HUGE_MEMORY
--
./cavium/software/driver/osi/buffer_pool.c-695-      buf = get_buffer(&buffer[huge_pool]);
./cavium/software/driver/osi/buffer_pool.c-696-      p = huge_pool;
./cavium/software/driver/osi/buffer_pool.c-697-   }
./cavium/software/driver/osi/buffer_pool.c-698-#endif
./cavium/software/driver/osi/buffer_pool.c-699- else 
./cavium/software/driver/osi/buffer_pool.c-700-   {
./cavium/software/driver/osi/buffer_pool.c-701-#ifdef CAVIUM_OS
./cavium/software/driver/osi/buffer_pool.c-702-      buf = cavium_malloc_dma(size + sizeof(buffer_tag), NULL);
./cavium/software/driver/osi/buffer_pool.c-703-      if (buf) 
./cavium/software/driver/osi/buffer_pool.c-704-      {
./cavium/software/driver/osi/buffer_pool.c:705:         ((buffer_tag *)buf)->pool = os;
./cavium/software/driver/osi/buffer_pool.c-706-         return (buf + sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c-707-      }
./cavium/software/driver/osi/buffer_pool.c-708-      else
./cavium/software/driver/osi/buffer_pool.c-709-#endif
./cavium/software/driver/osi/buffer_pool.c-710-      {
./cavium/software/driver/osi/buffer_pool.c-711-         cavium_print("Out of memory %d\n",size);
./cavium/software/driver/osi/buffer_pool.c-712-                return NULL;   
./cavium/software/driver/osi/buffer_pool.c-713-      }
./cavium/software/driver/osi/buffer_pool.c-714-   }
./cavium/software/driver/osi/buffer_pool.c-715-   
--
./cavium/software/driver/osi/buffer_pool.c-722-      {
./cavium/software/driver/osi/buffer_pool.c-723-         /* Unable to grow */
./cavium/software/driver/osi/buffer_pool.c-724-#if 0
./cavium/software/driver/osi/buffer_pool.c-725-         if (reclaim_buffers_in_pool(NULL, p)) 
./cavium/software/driver/osi/buffer_pool.c-726-            /* no buffers, allocate from OS */
./cavium/software/driver/osi/buffer_pool.c-727-#endif
./cavium/software/driver/osi/buffer_pool.c-728-#ifdef CAVIUM_OS
./cavium/software/driver/osi/buffer_pool.c-729-         buf = cavium_malloc_dma(size + sizeof(buffer_tag), NULL);
./cavium/software/driver/osi/buffer_pool.c-730-         if (buf) 
./cavium/software/driver/osi/buffer_pool.c-731-         {
./cavium/software/driver/osi/buffer_pool.c:732:            ((buffer_tag *)buf)->pool = os;
./cavium/software/driver/osi/buffer_pool.c-733-            return (buf + sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c-734-         } else 
./cavium/software/driver/osi/buffer_pool.c-735-#endif
./cavium/software/driver/osi/buffer_pool.c-736-         {
./cavium/software/driver/osi/buffer_pool.c-737-            cavium_error("Unable to allocate buffer\n");
./cavium/software/driver/osi/buffer_pool.c-738-            return buf;
./cavium/software/driver/osi/buffer_pool.c-739-         }
./cavium/software/driver/osi/buffer_pool.c-740-      }
./cavium/software/driver/osi/buffer_pool.c-741-      goto get_buf;
./cavium/software/driver/osi/buffer_pool.c-742-   }
./cavium/software/driver/osi/buffer_pool.c-743-   return buf;
./cavium/software/driver/osi/buffer_pool.c-744-}
./cavium/software/driver/osi/buffer_pool.c-745-
./cavium/software/driver/osi/buffer_pool.c-746-/*************************************************
./cavium/software/driver/osi/buffer_pool.c-747- * Function : check_in_fragmented_pool
./cavium/software/driver/osi/buffer_pool.c-748- *
./cavium/software/driver/osi/buffer_pool.c-749- * Arguments    : cavium_device *, Uint8 *
./cavium/software/driver/osi/buffer_pool.c-750- * Return Value : Uint32 
./cavium/software/driver/osi/buffer_pool.c-751- *
./cavium/software/driver/osi/buffer_pool.c-752- * This function checks if a buffer is from a 
./cavium/software/driver/osi/buffer_pool.c:753: * fragmented pool, and if so places the buffer 
./cavium/software/driver/osi/buffer_pool.c-754- * on the free list
./cavium/software/driver/osi/buffer_pool.c-755- *
./cavium/software/driver/osi/buffer_pool.c-756- *************************************************/
./cavium/software/driver/osi/buffer_pool.c-757-
./cavium/software/driver/osi/buffer_pool.c-758-static Uint32
./cavium/software/driver/osi/buffer_pool.c-759-check_in_fragmented_pool(cavium_device *RESERVED, Uint8 *b)
./cavium/software/driver/osi/buffer_pool.c-760-{
./cavium/software/driver/osi/buffer_pool.c-761-   struct cavium_list_head *tmp, *tmp1;
./cavium/software/driver/osi/buffer_pool.c-762-
./cavium/software/driver/osi/buffer_pool.c-763-   MPRINTFLOW();
--
./cavium/software/driver/osi/buffer_pool.c-784-               cavium_list_del_init(&frag->alloc_list);
./cavium/software/driver/osi/buffer_pool.c-785-               /* Put back the big buffer */
./cavium/software/driver/osi/buffer_pool.c-786-               cavium_list_del_init(&frag->list);
./cavium/software/driver/osi/buffer_pool.c-787-               fragment_buf_stats[frag->p] -= frag->frags_count;
./cavium/software/driver/osi/buffer_pool.c-788-               put_fragment(NULL, *frag);
./cavium/software/driver/osi/buffer_pool.c-789-               big_buf_to_be_freed = 1;
./cavium/software/driver/osi/buffer_pool.c-790-            }
./cavium/software/driver/osi/buffer_pool.c-791-            cavium_spin_unlock_softirqrestore(&fragment_lock);
./cavium/software/driver/osi/buffer_pool.c-792-            if (big_buf_to_be_freed) 
./cavium/software/driver/osi/buffer_pool.c-793-            {
./cavium/software/driver/osi/buffer_pool.c:794:               put_buffer(&buffer[t->pool], t->index);
./cavium/software/driver/osi/buffer_pool.c-795-            }
./cavium/software/driver/osi/buffer_pool.c-796-            return 0;
./cavium/software/driver/osi/buffer_pool.c-797-         }
./cavium/software/driver/osi/buffer_pool.c-798-      }
./cavium/software/driver/osi/buffer_pool.c-799-   }
./cavium/software/driver/osi/buffer_pool.c-800-   cavium_spin_unlock_softirqrestore(&fragment_lock);
./cavium/software/driver/osi/buffer_pool.c-801-   return 1;
./cavium/software/driver/osi/buffer_pool.c-802-}
./cavium/software/driver/osi/buffer_pool.c-803-
./cavium/software/driver/osi/buffer_pool.c-804-/******************************************************** 
./cavium/software/driver/osi/buffer_pool.c-805- *
./cavium/software/driver/osi/buffer_pool.c-806- * Function : put_buffer_in_pool
./cavium/software/driver/osi/buffer_pool.c-807- * 
./cavium/software/driver/osi/buffer_pool.c-808- * Arguments     : void * , Uint8 * 
./cavium/software/driver/osi/buffer_pool.c-809- * Return Value  : Returns void
./cavium/software/driver/osi/buffer_pool.c-810- *
./cavium/software/driver/osi/buffer_pool.c:811: * This function releases the buffer to the buffer pool
./cavium/software/driver/osi/buffer_pool.c-812- * manager. 
./cavium/software/driver/osi/buffer_pool.c-813- *
./cavium/software/driver/osi/buffer_pool.c-814- ********************************************************/
./cavium/software/driver/osi/buffer_pool.c-815-
./cavium/software/driver/osi/buffer_pool.c-816-void 
./cavium/software/driver/osi/buffer_pool.c-817-put_buffer_in_pool(void *RESERVED, Uint8 *b)
./cavium/software/driver/osi/buffer_pool.c-818-{
./cavium/software/driver/osi/buffer_pool.c-819-   buffer_tag* t = NULL;
./cavium/software/driver/osi/buffer_pool.c-820-
./cavium/software/driver/osi/buffer_pool.c-821-   MPRINTFLOW();
./cavium/software/driver/osi/buffer_pool.c-822-   if (!check_in_fragmented_pool(NULL, b)) 
./cavium/software/driver/osi/buffer_pool.c-823-   {
./cavium/software/driver/osi/buffer_pool.c-824-      return;
./cavium/software/driver/osi/buffer_pool.c-825-   }
./cavium/software/driver/osi/buffer_pool.c-826-   
./cavium/software/driver/osi/buffer_pool.c-827-   t = (buffer_tag*)(b - sizeof(buffer_tag));
./cavium/software/driver/osi/buffer_pool.c-828-
./cavium/software/driver/osi/buffer_pool.c:829:   switch (t->pool) 
./cavium/software/driver/osi/buffer_pool.c-830-   {
./cavium/software/driver/osi/buffer_pool.c-831-      case ex_tiny:
./cavium/software/driver/osi/buffer_pool.c-832-         put_buffer(&buffer[ex_tiny], t->index);
./cavium/software/driver/osi/buffer_pool.c-833-         break;
./cavium/software/driver/osi/buffer_pool.c-834-   
./cavium/software/driver/osi/buffer_pool.c-835-      case tiny:
./cavium/software/driver/osi/buffer_pool.c-836-         put_buffer(&buffer[tiny], t->index);
./cavium/software/driver/osi/buffer_pool.c-837-         break;
./cavium/software/driver/osi/buffer_pool.c-838-
./cavium/software/driver/osi/buffer_pool.c-839-      case small:
--
./cavium/software/driver/osi/buffer_pool.c-852-         put_buffer(&buffer[huge_pool], t->index);
./cavium/software/driver/osi/buffer_pool.c-853-         break;
./cavium/software/driver/osi/buffer_pool.c-854-#ifdef CAVIUM_OS
./cavium/software/driver/osi/buffer_pool.c-855-      case os:
./cavium/software/driver/osi/buffer_pool.c-856-         cavium_free_dma((Uint8 *)t);
./cavium/software/driver/osi/buffer_pool.c-857-         return;
./cavium/software/driver/osi/buffer_pool.c-858-#endif
./cavium/software/driver/osi/buffer_pool.c-859-      default:
./cavium/software/driver/osi/buffer_pool.c-860-         /* bad, very bad! this should never happen. */
./cavium/software/driver/osi/buffer_pool.c-861-         cavium_error( 
./cavium/software/driver/osi/buffer_pool.c:862:            "Unsupported pool type (%d) in put_buffer_in_pool\n", 
./cavium/software/driver/osi/buffer_pool.c:863:            t->pool);
./cavium/software/driver/osi/buffer_pool.c-864-         return;
./cavium/software/driver/osi/buffer_pool.c-865-   }
./cavium/software/driver/osi/buffer_pool.c-866-}
./cavium/software/driver/osi/buffer_pool.c-867-
./cavium/software/driver/osi/buffer_pool.c-868-/*
./cavium/software/driver/osi/buffer_pool.c-869- * $Id: buffer_pool.c,v 1.5 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/buffer_pool.c-870- * $Log: buffer_pool.c,v $
./cavium/software/driver/osi/buffer_pool.c-871- * Revision 1.5  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/buffer_pool.c-872- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/buffer_pool.c-873- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/buffer_pool.c-874- *         implemented within IPSec APIs.
./cavium/software/driver/osi/buffer_pool.c-875- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/buffer_pool.c-876- *         moved to device structure.
./cavium/software/driver/osi/buffer_pool.c:877: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/buffer_pool.c-878- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/buffer_pool.c-879- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/buffer_pool.c-880- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/buffer_pool.c-881- *         out all failing requests.
./cavium/software/driver/osi/buffer_pool.c-882- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/buffer_pool.c-883- *
./cavium/software/driver/osi/buffer_pool.c-884- * Revision 1.4  2008/02/22 10:18:52  aramesh
./cavium/software/driver/osi/buffer_pool.c-885- * N1_SANITY is set always.
./cavium/software/driver/osi/buffer_pool.c-886- *
./cavium/software/driver/osi/buffer_pool.c-887- * Revision 1.3  2007/12/05 14:31:12  lpathy
./cavium/software/driver/osi/buffer_pool.c-888- * bug fix in fragmentation
./cavium/software/driver/osi/buffer_pool.c-889- *
./cavium/software/driver/osi/buffer_pool.c-890- * Revision 1.2  2007/06/06 08:47:29  rkumar
./cavium/software/driver/osi/buffer_pool.c-891- * CAVIUM_HUGE_MEMORY define missing
./cavium/software/driver/osi/buffer_pool.c-892- *
./cavium/software/driver/osi/buffer_pool.c-893- * Revision 1.1  2007/01/06 02:47:40  panicker
./cavium/software/driver/osi/buffer_pool.c-894- * * first cut - NITROX PX driver
./cavium/software/driver/osi/buffer_pool.c-895- *
./cavium/software/driver/osi/buffer_pool.c-896- * Revision 1.21  2006/11/15 06:42:44  kchunduri
./cavium/software/driver/osi/buffer_pool.c:897: * In 'put_buffer_in_pool' check in fragment buffer list should precede all pool checks.
./cavium/software/driver/osi/buffer_pool.c-898- *
./cavium/software/driver/osi/buffer_pool.c-899- * Revision 1.20  2006/11/10 09:22:38  apappu
./cavium/software/driver/osi/buffer_pool.c-900- * 'alloc_buffer_stats' are locked while updating. Else you may see wrong statistics on SMP platform.
./cavium/software/driver/osi/buffer_pool.c-901- *
./cavium/software/driver/osi/buffer_pool.c-902- * Revision 1.19  2006/09/28 08:57:06  kchunduri
./cavium/software/driver/osi/buffer_pool.c-903- * --encapsulate all dynamic allocations under CAVIUM_OS
./cavium/software/driver/osi/buffer_pool.c-904- *
./cavium/software/driver/osi/buffer_pool.c-905- * Revision 1.18  2005/11/17 13:31:09  kanantha
./cavium/software/driver/osi/buffer_pool.c-906- * Updating with the 64 bit modifications, with proper matching of data types
./cavium/software/driver/osi/buffer_pool.c-907- *
--
./cavium/software/driver/osi/interrupt.c-275- * $Log: interrupt.c,v $
./cavium/software/driver/osi/interrupt.c-276- * Revision 1.3  2008/12/22 05:42:10  jrana
./cavium/software/driver/osi/interrupt.c-277- *  COUNTERS and INTERRUPT COALEASCING ADDED
./cavium/software/driver/osi/interrupt.c-278- *
./cavium/software/driver/osi/interrupt.c-279- * Revision 1.2  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/interrupt.c-280- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/interrupt.c-281- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/interrupt.c-282- *         implemented within IPSec APIs.
./cavium/software/driver/osi/interrupt.c-283- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/interrupt.c-284- *         moved to device structure.
./cavium/software/driver/osi/interrupt.c:285: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/interrupt.c-286- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/interrupt.c-287- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/interrupt.c-288- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/interrupt.c-289- *         out all failing requests.
./cavium/software/driver/osi/interrupt.c-290- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/interrupt.c-291- *
./cavium/software/driver/osi/interrupt.c-292- * Revision 1.1  2007/01/06 02:47:40  panicker
./cavium/software/driver/osi/interrupt.c-293- * * first cut - NITROX PX driver
./cavium/software/driver/osi/interrupt.c-294- *
./cavium/software/driver/osi/interrupt.c-295- * Revision 1.12  2006/01/31 07:00:55  sgadam
--
./cavium/software/driver/osi/cavium.c-726- *
./cavium/software/driver/osi/cavium.c-727- * Revision 1.12  2008/11/06 09:07:53  ysandeep
./cavium/software/driver/osi/cavium.c-728- * Removed PX_PLUS
./cavium/software/driver/osi/cavium.c-729- *
./cavium/software/driver/osi/cavium.c-730- * Revision 1.11  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/cavium.c-731- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/cavium.c-732- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/cavium.c-733- *         implemented within IPSec APIs.
./cavium/software/driver/osi/cavium.c-734- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/cavium.c-735- *         moved to device structure.
./cavium/software/driver/osi/cavium.c:736: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/cavium.c-737- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/cavium.c-738- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/cavium.c-739- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/cavium.c-740- *         out all failing requests.
./cavium/software/driver/osi/cavium.c-741- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/cavium.c-742- *
./cavium/software/driver/osi/cavium.c-743- * Revision 1.10  2007/10/18 09:35:09  lpathy
./cavium/software/driver/osi/cavium.c-744- * Added windows support.
./cavium/software/driver/osi/cavium.c-745- *
./cavium/software/driver/osi/cavium.c-746- * Revision 1.9  2007/07/03 11:46:45  kchunduri
--
./cavium/software/driver/osi/pending_list.c-809- *
./cavium/software/driver/osi/pending_list.c-810- * Revision 1.16  2008/11/06 09:11:11  ysandeep
./cavium/software/driver/osi/pending_list.c-811- * Removed PX_PLUS
./cavium/software/driver/osi/pending_list.c-812- *
./cavium/software/driver/osi/pending_list.c-813- * Revision 1.15  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/pending_list.c-814- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/pending_list.c-815- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/pending_list.c-816- *         implemented within IPSec APIs.
./cavium/software/driver/osi/pending_list.c-817- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/pending_list.c-818- *         moved to device structure.
./cavium/software/driver/osi/pending_list.c:819: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/pending_list.c-820- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/pending_list.c-821- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/pending_list.c-822- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/pending_list.c-823- *         out all failing requests.
./cavium/software/driver/osi/pending_list.c-824- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/pending_list.c-825- *
./cavium/software/driver/osi/pending_list.c-826- * Revision 1.14  2008/07/02 12:35:26  aramesh
./cavium/software/driver/osi/pending_list.c-827- * deleted part number and corresponding flags.
./cavium/software/driver/osi/pending_list.c-828- *
./cavium/software/driver/osi/pending_list.c-829- * Revision 1.13  2007/11/19 11:11:55  lpathy
--
./cavium/software/driver/osi/init_cfg.c-280-   /* If DDR memory is found, then these values will be overwritten*/
./cavium/software/driver/osi/init_cfg.c-281-   cavium_dev[dev_count].dram_max = config->context_max;
./cavium/software/driver/osi/init_cfg.c-282-   cavium_dev[dev_count].dram_base = 0;
./cavium/software/driver/osi/init_cfg.c-283-
./cavium/software/driver/osi/init_cfg.c-284-  /* check the presence of dram */
./cavium/software/driver/osi/init_cfg.c-285-   check_dram(&cavium_dev[dev_count]);
./cavium/software/driver/osi/init_cfg.c-286- 
./cavium/software/driver/osi/init_cfg.c-287-   if(cavium_dev[dev_count].dram_present)
./cavium/software/driver/osi/init_cfg.c-288-      enable_local_ddr(&cavium_dev[dev_count]);
./cavium/software/driver/osi/init_cfg.c-289-
./cavium/software/driver/osi/init_cfg.c:290:   /* allocate a pool of context memory chunks */
./cavium/software/driver/osi/init_cfg.c-291-   cavium_dbgprint("cavium_general_init: init context.\n");
./cavium/software/driver/osi/init_cfg.c-292-   if(init_context(&cavium_dev[dev_count])) 
./cavium/software/driver/osi/init_cfg.c-293-   {
./cavium/software/driver/osi/init_cfg.c-294-      ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-295-      cavium_error("init_context failed\n");
./cavium/software/driver/osi/init_cfg.c-296-      goto init_error;
./cavium/software/driver/osi/init_cfg.c-297-   }
./cavium/software/driver/osi/init_cfg.c-298-
./cavium/software/driver/osi/init_cfg.c-299-   /* do core discovery and init requests */
./cavium/software/driver/osi/init_cfg.c-300-   cavium_dbgprint("cavium_init: doing core discovery, load microcode\n");
--
./cavium/software/driver/osi/init_cfg.c-396-   if (init_buffer_pool(gconfig))
./cavium/software/driver/osi/init_cfg.c-397-   {
./cavium/software/driver/osi/init_cfg.c-398-       ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-399-       goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-400-   }
./cavium/software/driver/osi/init_cfg.c-401-   status = INIT_BUFFER_POOL_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-402-
./cavium/software/driver/osi/init_cfg.c-403-   MPRINTFLOW();
./cavium/software/driver/osi/init_cfg.c-404-   for (i = 0; i < dev_count; i++) 
./cavium/software/driver/osi/init_cfg.c-405-   {
./cavium/software/driver/osi/init_cfg.c:406:      /* initialize random pool */
./cavium/software/driver/osi/init_cfg.c:407:      cavium_dbgprint("cavium_general_init:init rnd pool.\n");
./cavium/software/driver/osi/init_cfg.c-408-      if(init_rnd_buffer(&cavium_dev[i]))
./cavium/software/driver/osi/init_cfg.c-409-      {
./cavium/software/driver/osi/init_cfg.c-410-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-411-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-412-      }
./cavium/software/driver/osi/init_cfg.c-413-      status = INIT_RND_BUFFER_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-414-      /* Initialize key memory chunks */
./cavium/software/driver/osi/init_cfg.c-415-#if defined(SSL) || defined(NPLUS)
./cavium/software/driver/osi/init_cfg.c-416-      cavium_dbgprint("cavium_general_init:init key memory.\n");
./cavium/software/driver/osi/init_cfg.c-417-      if (init_key_memory(&cavium_dev[i])) 
--
./cavium/software/driver/osi/init_cfg.c-422-      status = INIT_KEY_MEMORY_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-423-#endif
./cavium/software/driver/osi/init_cfg.c-424-      cavium_dbgprint("cavium_general_init:init completion dma free list.\n");
./cavium/software/driver/osi/init_cfg.c-425-      if(init_completion_dma_free_list(&cavium_dev[i],gconfig->sg_dma_list_max))
./cavium/software/driver/osi/init_cfg.c-426-      {
./cavium/software/driver/osi/init_cfg.c-427-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-428-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-429-      }
./cavium/software/driver/osi/init_cfg.c-430-      status = INIT_COMPLETION_DMA_FREE_LIST_SUCCESS; 
./cavium/software/driver/osi/init_cfg.c-431-
./cavium/software/driver/osi/init_cfg.c:432:      /* allocate a pool of pending structs for response queue */
./cavium/software/driver/osi/init_cfg.c-433-      cavium_dbgprint("cavium_general_init: init pending free list.\n");
./cavium/software/driver/osi/init_cfg.c-434-      if(init_pending_free_list(&cavium_dev[i], gconfig->pending_max))
./cavium/software/driver/osi/init_cfg.c-435-      {
./cavium/software/driver/osi/init_cfg.c-436-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-437-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-438-      }
./cavium/software/driver/osi/init_cfg.c-439-      status = INIT_PENDING_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-440-
./cavium/software/driver/osi/init_cfg.c-441-      cavium_dbgprint("cavium_general_init: init direct free list\n");
./cavium/software/driver/osi/init_cfg.c-442-      if(init_direct_free_list(&cavium_dev[i], gconfig->direct_max))
./cavium/software/driver/osi/init_cfg.c-443-      {
./cavium/software/driver/osi/init_cfg.c-444-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-445-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-446-      }
./cavium/software/driver/osi/init_cfg.c-447-      status = INIT_DIRECT_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-448-
./cavium/software/driver/osi/init_cfg.c:449:      /* allocate a pool of operation structs*/
./cavium/software/driver/osi/init_cfg.c-450-      cavium_dbgprint("cavium_general_init: init SG free list\n");
./cavium/software/driver/osi/init_cfg.c-451-      if(init_sg_free_list(&cavium_dev[i], gconfig->sg_max))
./cavium/software/driver/osi/init_cfg.c-452-      {
./cavium/software/driver/osi/init_cfg.c-453-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-454-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-455-      }
./cavium/software/driver/osi/init_cfg.c-456-      status = INIT_SG_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-457- 
./cavium/software/driver/osi/init_cfg.c:458:      /* allocate a pool of scatter/gather dma lists */
./cavium/software/driver/osi/init_cfg.c-459-      cavium_dbgprint("cavium_general_init: init sg dma free list.\n");
./cavium/software/driver/osi/init_cfg.c-460-      if(init_sg_dma_free_list(&cavium_dev[i], gconfig->sg_dma_list_max))
./cavium/software/driver/osi/init_cfg.c-461-      {
./cavium/software/driver/osi/init_cfg.c-462-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-463-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-464-      }
./cavium/software/driver/osi/init_cfg.c-465-      status = INIT_SG_DMA_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-466-
./cavium/software/driver/osi/init_cfg.c-467-   } /* dev loop */
./cavium/software/driver/osi/init_cfg.c-468-
--
./cavium/software/driver/osi/init_cfg.c-1849-
./cavium/software/driver/osi/init_cfg.c-1850-   	status = NONE_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1851-	MPRINTFLOW();
./cavium/software/driver/osi/init_cfg.c-1852-
./cavium/software/driver/osi/init_cfg.c-1853-   	/* initialize pending lists/ response queues*/
./cavium/software/driver/osi/init_cfg.c-1854-   	cavium_dbgprint("cavium_devres_init: initializing pending queues.\n");
./cavium/software/driver/osi/init_cfg.c-1855-	/* TODO - pending lists contains for loop which is not needed in case of FreeBSD, because cavium_devres_init is called per each device */
./cavium/software/driver/osi/init_cfg.c-1856-   	init_pending_lists();
./cavium/software/driver/osi/init_cfg.c-1857-   	status = INIT_PENDING_LISTS_SUCCESS;   
./cavium/software/driver/osi/init_cfg.c-1858-
./cavium/software/driver/osi/init_cfg.c:1859:      /* allocate a pool of pending structs for response queue */
./cavium/software/driver/osi/init_cfg.c-1860-      cavium_dbgprint("cavium_devres_init: init pending free list.\n");
./cavium/software/driver/osi/init_cfg.c-1861-      if(init_pending_free_list(pdev, gconfig->pending_max))
./cavium/software/driver/osi/init_cfg.c-1862-      {
./cavium/software/driver/osi/init_cfg.c-1863-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-1864-         goto init_devres_error;
./cavium/software/driver/osi/init_cfg.c-1865-      }
./cavium/software/driver/osi/init_cfg.c-1866-      status = INIT_PENDING_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1867-
./cavium/software/driver/osi/init_cfg.c:1868:      /* allocate a pool of operation structs*/
./cavium/software/driver/osi/init_cfg.c-1869-      cavium_dbgprint("cavium_devres_init: init direct free list\n");
./cavium/software/driver/osi/init_cfg.c-1870-      if(init_direct_free_list(pdev, gconfig->direct_max))
./cavium/software/driver/osi/init_cfg.c-1871-      {
./cavium/software/driver/osi/init_cfg.c-1872-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-1873-         goto init_devres_error;
./cavium/software/driver/osi/init_cfg.c-1874-      }
./cavium/software/driver/osi/init_cfg.c-1875-      status = INIT_DIRECT_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1876-
./cavium/software/driver/osi/init_cfg.c:1877:      /* allocate a pool of operation structs*/
./cavium/software/driver/osi/init_cfg.c-1878-      cavium_dbgprint("cavium_devres_init: init SG free list\n");
./cavium/software/driver/osi/init_cfg.c-1879-      if(init_sg_free_list(pdev, gconfig->sg_max))
./cavium/software/driver/osi/init_cfg.c-1880-      {
./cavium/software/driver/osi/init_cfg.c-1881-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-1882-         goto init_devres_error;
./cavium/software/driver/osi/init_cfg.c-1883-      }
./cavium/software/driver/osi/init_cfg.c-1884-      status = INIT_SG_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1885-
./cavium/software/driver/osi/init_cfg.c:1886:      /* allocate a pool of scatter/gather dma lists */
./cavium/software/driver/osi/init_cfg.c-1887-      cavium_dbgprint("cavium_devres_init: init sg dma free list.\n");
./cavium/software/driver/osi/init_cfg.c-1888-      if(init_sg_dma_free_list(pdev, gconfig->sg_dma_list_max))
./cavium/software/driver/osi/init_cfg.c-1889-      {
./cavium/software/driver/osi/init_cfg.c-1890-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-1891-         goto init_devres_error;
./cavium/software/driver/osi/init_cfg.c-1892-      }
./cavium/software/driver/osi/init_cfg.c-1893-      status = INIT_SG_DMA_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1894-
./cavium/software/driver/osi/init_cfg.c:1895:	/* Initialize random pool */
./cavium/software/driver/osi/init_cfg.c-1896-	if (init_rnd_buffer(pdev))
./cavium/software/driver/osi/init_cfg.c-1897-	{
./cavium/software/driver/osi/init_cfg.c-1898-		ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-1899-		goto init_devres_error;
./cavium/software/driver/osi/init_cfg.c-1900-	}
./cavium/software/driver/osi/init_cfg.c-1901-      	status = INIT_RND_BUFFER_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-1902-
./cavium/software/driver/osi/init_cfg.c-1903-      	/* Initialize key memory chunks */
./cavium/software/driver/osi/init_cfg.c-1904-#if defined(SSL) || defined(NPLUS)
./cavium/software/driver/osi/init_cfg.c-1905-      cavium_dbgprint("cavium_devres_init:init key memory.\n");
--
./cavium/software/driver/osi/init_cfg.c-2002-   cavium_general_init_status status = NONE_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2003-   int ret=0;
./cavium/software/driver/osi/init_cfg.c-2004-   int i=0;
./cavium/software/driver/osi/init_cfg.c-2005-   /* initialize pending lists/ response queues*/
./cavium/software/driver/osi/init_cfg.c-2006-   cavium_dbgprint("cavium_common_init: initializing pending queues.\n");
./cavium/software/driver/osi/init_cfg.c-2007-   init_pending_lists();
./cavium/software/driver/osi/init_cfg.c-2008-   status = INIT_PENDING_LISTS_SUCCESS;   
./cavium/software/driver/osi/init_cfg.c-2009-
./cavium/software/driver/osi/init_cfg.c-2010-   for(i=0; i<dev_count; i++)
./cavium/software/driver/osi/init_cfg.c-2011-   {
./cavium/software/driver/osi/init_cfg.c:2012:      /* allocate a pool of pending structs for response queue */
./cavium/software/driver/osi/init_cfg.c-2013-      cavium_dbgprint("cavium_common_init: init pending free list.\n");
./cavium/software/driver/osi/init_cfg.c-2014- 
./cavium/software/driver/osi/init_cfg.c-2015-      if(init_pending_free_list(&cavium_dev[i], gconfig->pending_max)) 
./cavium/software/driver/osi/init_cfg.c-2016-      {
./cavium/software/driver/osi/init_cfg.c-2017-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2018-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2019-      }
./cavium/software/driver/osi/init_cfg.c-2020-      status = INIT_PENDING_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2021-    
./cavium/software/driver/osi/init_cfg.c:2022:      /* allocate a pool of operation structs*/
./cavium/software/driver/osi/init_cfg.c-2023-      cavium_dbgprint("cavium_common_init: init direct free list\n");
./cavium/software/driver/osi/init_cfg.c-2024-      if(init_direct_free_list(&cavium_dev[i], gconfig->direct_max))
./cavium/software/driver/osi/init_cfg.c-2025-      {
./cavium/software/driver/osi/init_cfg.c-2026-          ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2027-          goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2028-      }
./cavium/software/driver/osi/init_cfg.c-2029-      status = INIT_DIRECT_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c:2030:      /* allocate a pool of operation structs*/
./cavium/software/driver/osi/init_cfg.c-2031-      cavium_dbgprint("cavium_common_init: init SG free list\n");
./cavium/software/driver/osi/init_cfg.c-2032-      if(init_sg_free_list(&cavium_dev[i], gconfig->sg_max))
./cavium/software/driver/osi/init_cfg.c-2033-      {
./cavium/software/driver/osi/init_cfg.c-2034-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2035-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2036-      }
./cavium/software/driver/osi/init_cfg.c-2037-      status = INIT_SG_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2038-   
./cavium/software/driver/osi/init_cfg.c:2039:      /* allocate a pool of scatter/gather dma lists */
./cavium/software/driver/osi/init_cfg.c-2040-      cavium_dbgprint("cavium_common_init: init sg dma free list.\n");
./cavium/software/driver/osi/init_cfg.c-2041-      if(init_sg_dma_free_list(&cavium_dev[i], gconfig->sg_dma_list_max))
./cavium/software/driver/osi/init_cfg.c-2042-      {
./cavium/software/driver/osi/init_cfg.c-2043-         ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2044-         goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2045-      }
./cavium/software/driver/osi/init_cfg.c-2046-      status = INIT_SG_DMA_FREE_LIST_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2047-   }
./cavium/software/driver/osi/init_cfg.c-2048-   cavium_dbgprint("cavium_common_init: init blocking and non-blocking list.\n");
./cavium/software/driver/osi/init_cfg.c-2049-   init_blocking_non_blocking_lists();
--
./cavium/software/driver/osi/init_cfg.c-2090-   MPRINTFLOW();
./cavium/software/driver/osi/init_cfg.c-2091-
./cavium/software/driver/osi/init_cfg.c-2092-   status = NONE_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2093-   cavium_dbgprint("cavium_devres_init:init buffer pools.\n");
./cavium/software/driver/osi/init_cfg.c-2094-   if (init_buffer_pool(gconfig)) 
./cavium/software/driver/osi/init_cfg.c-2095-   {
./cavium/software/driver/osi/init_cfg.c-2096-      ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2097-      goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2098-   }
./cavium/software/driver/osi/init_cfg.c-2099-   status = INIT_BUFFER_POOL_SUCCESS;
./cavium/software/driver/osi/init_cfg.c:2100:   /* initialize random pool */
./cavium/software/driver/osi/init_cfg.c:2101:   cavium_dbgprint("cavium_devres_init:init rnd pool.\n");
./cavium/software/driver/osi/init_cfg.c-2102-   if(init_rnd_buffer(pdev))
./cavium/software/driver/osi/init_cfg.c-2103-   {
./cavium/software/driver/osi/init_cfg.c-2104-      ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/init_cfg.c-2105-      goto init_general_error;
./cavium/software/driver/osi/init_cfg.c-2106-   }
./cavium/software/driver/osi/init_cfg.c-2107-   status = INIT_RND_BUFFER_SUCCESS;
./cavium/software/driver/osi/init_cfg.c-2108-    /* Initialize key memory chunks */
./cavium/software/driver/osi/init_cfg.c-2109-#if defined(SSL) || defined(NPLUS)
./cavium/software/driver/osi/init_cfg.c-2110-   cavium_dbgprint("cavium_devres_init:init key memory.\n");
./cavium/software/driver/osi/init_cfg.c-2111-   if (init_key_memory(pdev)) 
--
./cavium/software/driver/osi/init_cfg.c-2306- *
./cavium/software/driver/osi/init_cfg.c-2307- * Revision 1.28  2008/10/15 08:03:39  ysandeep
./cavium/software/driver/osi/init_cfg.c-2308- * Multicard support for NPLUS added.
./cavium/software/driver/osi/init_cfg.c-2309- *
./cavium/software/driver/osi/init_cfg.c-2310- * Revision 1.27  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/init_cfg.c-2311- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/init_cfg.c-2312- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/init_cfg.c-2313- *         implemented within IPSec APIs.
./cavium/software/driver/osi/init_cfg.c-2314- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/init_cfg.c-2315- *         moved to device structure.
./cavium/software/driver/osi/init_cfg.c:2316: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/init_cfg.c-2317- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/init_cfg.c-2318- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/init_cfg.c-2319- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/init_cfg.c-2320- *         out all failing requests.
./cavium/software/driver/osi/init_cfg.c-2321- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/init_cfg.c-2322- *
./cavium/software/driver/osi/init_cfg.c-2323- * Revision 1.26  2008/07/18 05:53:20  aramesh
./cavium/software/driver/osi/init_cfg.c-2324- * px_flag is set.
./cavium/software/driver/osi/init_cfg.c-2325- *
./cavium/software/driver/osi/init_cfg.c-2326- * Revision 1.25  2008/07/03 05:04:37  aramesh
--
./cavium/software/driver/osi/request_manager.c-400-   }
./cavium/software/driver/osi/request_manager.c-401-
./cavium/software/driver/osi/request_manager.c-402-   req->time_in = cavium_jiffies;
./cavium/software/driver/osi/request_manager.c-403-   strcmd = (Cmd *)&request.cmd;
./cavium/software/driver/osi/request_manager.c-404-
./cavium/software/driver/osi/request_manager.c-405-   switch(req->dma_mode) 
./cavium/software/driver/osi/request_manager.c-406-   {
./cavium/software/driver/osi/request_manager.c-407-      case CAVIUM_DIRECT:
./cavium/software/driver/osi/request_manager.c-408-      {
./cavium/software/driver/osi/request_manager.c-409-         cavium_dbgprint("CAVIUM_DIRECT\n");
./cavium/software/driver/osi/request_manager.c:410:         /* Get a direct operation struct from free pool */
./cavium/software/driver/osi/request_manager.c-411-         pkp_direct_operation = get_direct_entry(n1_dev);
./cavium/software/driver/osi/request_manager.c-412-         if (pkp_direct_operation == NULL) 
./cavium/software/driver/osi/request_manager.c-413-         {
./cavium/software/driver/osi/request_manager.c-414-            cavium_dbgprint("do_request: direct entry entry list full\n");
./cavium/software/driver/osi/request_manager.c-415-            ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/request_manager.c-416-            goto cleanup_direct;
./cavium/software/driver/osi/request_manager.c-417-         }
./cavium/software/driver/osi/request_manager.c-418-
./cavium/software/driver/osi/request_manager.c-419-         /* Setup direct operation -- fill in {d,r,c}ptr */
./cavium/software/driver/osi/request_manager.c-420-         if(pkp_setup_direct_operation(n1_dev,req, pkp_direct_operation))
--
./cavium/software/driver/osi/request_manager.c-481-#ifdef MC2
./cavium/software/driver/osi/request_manager.c-482-            cavium_dump("dptr", pkp_direct_operation->dptr, pkp_direct_operation->dlen);
./cavium/software/driver/osi/request_manager.c-483-#else
./cavium/software/driver/osi/request_manager.c-484-            cavium_dump("DPTR", pkp_direct_operation->dptr, pkp_direct_operation->dlen*8);
./cavium/software/driver/osi/request_manager.c-485-#endif
./cavium/software/driver/osi/request_manager.c-486-         break;
./cavium/software/driver/osi/request_manager.c-487-      }
./cavium/software/driver/osi/request_manager.c-488-      case CAVIUM_SCATTER_GATHER:
./cavium/software/driver/osi/request_manager.c-489-      {
./cavium/software/driver/osi/request_manager.c-490-         /* 
./cavium/software/driver/osi/request_manager.c:491:          * Get a scatter/gather operation struct from free pool 
./cavium/software/driver/osi/request_manager.c-492-          */
./cavium/software/driver/osi/request_manager.c-493-         /* 
./cavium/software/driver/osi/request_manager.c-494-          * to scatter/gather module 
./cavium/software/driver/osi/request_manager.c-495-          */
./cavium/software/driver/osi/request_manager.c-496-         pkp_sg_operation = get_sg_entry(n1_dev);
./cavium/software/driver/osi/request_manager.c-497-         if (pkp_sg_operation == NULL) 
./cavium/software/driver/osi/request_manager.c-498-         {
./cavium/software/driver/osi/request_manager.c-499-            ret = ERR_MEMORY_ALLOC_FAILURE;
./cavium/software/driver/osi/request_manager.c-500-            cavium_dbgprint("do_request: sg_entry list full\n");
./cavium/software/driver/osi/request_manager.c-501-            goto cleanup_sg;
--
./cavium/software/driver/osi/request_manager.c-1399- *
./cavium/software/driver/osi/request_manager.c-1400- * Revision 1.24  2008/11/06 09:11:36  ysandeep
./cavium/software/driver/osi/request_manager.c-1401- * Removed PX_PLUS
./cavium/software/driver/osi/request_manager.c-1402- *
./cavium/software/driver/osi/request_manager.c-1403- * Revision 1.23  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/request_manager.c-1404- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/request_manager.c-1405- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/request_manager.c-1406- *         implemented within IPSec APIs.
./cavium/software/driver/osi/request_manager.c-1407- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/request_manager.c-1408- *         moved to device structure.
./cavium/software/driver/osi/request_manager.c:1409: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/request_manager.c-1410- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/request_manager.c-1411- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/request_manager.c-1412- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/request_manager.c-1413- *         out all failing requests.
./cavium/software/driver/osi/request_manager.c-1414- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/request_manager.c-1415- *
./cavium/software/driver/osi/request_manager.c-1416- * Revision 1.22  2008/07/30 13:01:08  aramesh
./cavium/software/driver/osi/request_manager.c-1417- * removed CN501 and CN1001.
./cavium/software/driver/osi/request_manager.c-1418- *
./cavium/software/driver/osi/request_manager.c-1419- * Revision 1.21  2008/07/02 12:35:26  aramesh
--
./cavium/software/driver/osi/hw_lib.c-1258- *
./cavium/software/driver/osi/hw_lib.c-1259- * Revision 1.21  2008/12/16 12:04:42  jsrikanth
./cavium/software/driver/osi/hw_lib.c-1260- * Added Common driver and Multi-Card Changes for FreeBSD
./cavium/software/driver/osi/hw_lib.c-1261- *
./cavium/software/driver/osi/hw_lib.c-1262- * Revision 1.20  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/hw_lib.c-1263- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/hw_lib.c-1264- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/hw_lib.c-1265- *         implemented within IPSec APIs.
./cavium/software/driver/osi/hw_lib.c-1266- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/hw_lib.c-1267- *         moved to device structure.
./cavium/software/driver/osi/hw_lib.c:1268: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/hw_lib.c-1269- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/hw_lib.c-1270- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/hw_lib.c-1271- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/hw_lib.c-1272- *         out all failing requests.
./cavium/software/driver/osi/hw_lib.c-1273- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/hw_lib.c-1274- *
./cavium/software/driver/osi/hw_lib.c-1275- * Revision 1.19  2008/07/28 11:42:05  aramesh
./cavium/software/driver/osi/hw_lib.c-1276- * done proper indendation.
./cavium/software/driver/osi/hw_lib.c-1277- *
./cavium/software/driver/osi/hw_lib.c-1278- * Revision 1.18  2008/07/18 05:55:32  aramesh
--
./cavium/software/driver/osi/command_que.c-162-
./cavium/software/driver/osi/command_que.c-163-/*
./cavium/software/driver/osi/command_que.c-164- * $Id: command_que.c,v 1.5 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/command_que.c-165- * $Log: command_que.c,v $
./cavium/software/driver/osi/command_que.c-166- * Revision 1.5  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/command_que.c-167- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/command_que.c-168- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/command_que.c-169- *         implemented within IPSec APIs.
./cavium/software/driver/osi/command_que.c-170- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/command_que.c-171- *         moved to device structure.
./cavium/software/driver/osi/command_que.c:172: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/command_que.c-173- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/command_que.c-174- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/command_que.c-175- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/command_que.c-176- *         out all failing requests.
./cavium/software/driver/osi/command_que.c-177- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/command_que.c-178- *
./cavium/software/driver/osi/command_que.c-179- * Revision 1.4  2007/11/19 11:11:55  lpathy
./cavium/software/driver/osi/command_que.c-180- * ported to 64 bit windows.
./cavium/software/driver/osi/command_que.c-181- *
./cavium/software/driver/osi/command_que.c-182- * Revision 1.3  2007/05/01 06:39:57  kchunduri
--
./cavium/software/driver/osi/direct_free_list.c-160-
./cavium/software/driver/osi/direct_free_list.c-161-/*
./cavium/software/driver/osi/direct_free_list.c-162- * $Id: direct_free_list.c,v 1.2 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/direct_free_list.c-163- * $Log: direct_free_list.c,v $
./cavium/software/driver/osi/direct_free_list.c-164- * Revision 1.2  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/direct_free_list.c-165- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/direct_free_list.c-166- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/direct_free_list.c-167- *         implemented within IPSec APIs.
./cavium/software/driver/osi/direct_free_list.c-168- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/direct_free_list.c-169- *         moved to device structure.
./cavium/software/driver/osi/direct_free_list.c:170: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/direct_free_list.c-171- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/direct_free_list.c-172- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/direct_free_list.c-173- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/direct_free_list.c-174- *         out all failing requests.
./cavium/software/driver/osi/direct_free_list.c-175- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/direct_free_list.c-176- *
./cavium/software/driver/osi/direct_free_list.c-177- * Revision 1.1  2007/01/06 02:47:40  panicker
./cavium/software/driver/osi/direct_free_list.c-178- * * first cut - NITROX PX driver
./cavium/software/driver/osi/direct_free_list.c-179- *
./cavium/software/driver/osi/direct_free_list.c-180- * Revision 1.12  2006/01/31 07:00:55  sgadam
--
./cavium/software/driver/osi/error_handler.c-1105-
./cavium/software/driver/osi/error_handler.c-1106-/*
./cavium/software/driver/osi/error_handler.c-1107- * $Id: error_handler.c,v 1.5 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/error_handler.c-1108- * $Log: error_handler.c,v $
./cavium/software/driver/osi/error_handler.c-1109- * Revision 1.5  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/error_handler.c-1110- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/error_handler.c-1111- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/error_handler.c-1112- *         implemented within IPSec APIs.
./cavium/software/driver/osi/error_handler.c-1113- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/error_handler.c-1114- *         moved to device structure.
./cavium/software/driver/osi/error_handler.c:1115: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/error_handler.c-1116- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/error_handler.c-1117- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/error_handler.c-1118- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/error_handler.c-1119- *         out all failing requests.
./cavium/software/driver/osi/error_handler.c-1120- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/error_handler.c-1121- *
./cavium/software/driver/osi/error_handler.c-1122- * Revision 1.4  2007/05/01 05:17:30  kchunduri
./cavium/software/driver/osi/error_handler.c-1123- * --replaced pci_write_config_dword/pci_read_config_dword calls with write_PCI_register/read_PCI_register OSI calls.
./cavium/software/driver/osi/error_handler.c-1124- *
./cavium/software/driver/osi/error_handler.c-1125- * Revision 1.3  2007/03/08 20:43:33  panicker
--
./cavium/software/driver/osi/cavium_random.c-48-#include "cavium_endian.h"
./cavium/software/driver/osi/cavium_random.c-49-#include "cavium_list.h"
./cavium/software/driver/osi/cavium_random.c-50-#include "cavium.h"
./cavium/software/driver/osi/cavium_random.c-51-#include "cavium_random.h"
./cavium/software/driver/osi/cavium_random.c-52-#include "request_manager.h"
./cavium/software/driver/osi/cavium_random.c-53-#include "error_handler.h"
./cavium/software/driver/osi/cavium_random.c-54-#include "init_cfg.h"
./cavium/software/driver/osi/cavium_random.c-55-#include "buffer_pool.h"
./cavium/software/driver/osi/cavium_random.c-56-
./cavium/software/driver/osi/cavium_random.c-57-/*
./cavium/software/driver/osi/cavium_random.c:58: * Random Number pool stuff
./cavium/software/driver/osi/cavium_random.c-59- */
./cavium/software/driver/osi/cavium_random.c-60-int
./cavium/software/driver/osi/cavium_random.c-61-init_rnd_buffer(cavium_device * pkp_dev)
./cavium/software/driver/osi/cavium_random.c-62-{
./cavium/software/driver/osi/cavium_random.c-63-   MPRINTFLOW();
./cavium/software/driver/osi/cavium_random.c-64-   cavium_spin_lock_init(&pkp_dev->rnd_lock);
./cavium/software/driver/osi/cavium_random.c-65-   cavium_spin_lock_init(&pkp_dev->id_lock);
./cavium/software/driver/osi/cavium_random.c-66-
./cavium/software/driver/osi/cavium_random.c-67-   if((pkp_dev->rnd_buffer = 
./cavium/software/driver/osi/cavium_random.c-68-      get_buffer_from_pool(pkp_dev,RND_MAX)) == NULL) {
./cavium/software/driver/osi/cavium_random.c:69:           cavium_print( "Not enough memory to create random pool.\n");
./cavium/software/driver/osi/cavium_random.c-70-           return 1;
./cavium/software/driver/osi/cavium_random.c-71-   }
./cavium/software/driver/osi/cavium_random.c-72-   pkp_dev->rnd_index=0;
./cavium/software/driver/osi/cavium_random.c-73-   return 0;
./cavium/software/driver/osi/cavium_random.c-74-}/* init_rnd_buffer*/
./cavium/software/driver/osi/cavium_random.c-75-
./cavium/software/driver/osi/cavium_random.c-76-void
./cavium/software/driver/osi/cavium_random.c-77-cleanup_rnd_buffer(cavium_device * pkp_dev)
./cavium/software/driver/osi/cavium_random.c-78-{
./cavium/software/driver/osi/cavium_random.c-79-   MPRINTFLOW();
--
./cavium/software/driver/osi/cavium_random.c-201- * $Log: cavium_random.c,v $
./cavium/software/driver/osi/cavium_random.c-202- * Revision 1.7  2008/11/06 09:08:52  ysandeep
./cavium/software/driver/osi/cavium_random.c-203- * Removed PX_PLUS
./cavium/software/driver/osi/cavium_random.c-204- *
./cavium/software/driver/osi/cavium_random.c-205- * Revision 1.6  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/cavium_random.c-206- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/cavium_random.c-207- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/cavium_random.c-208- *         implemented within IPSec APIs.
./cavium/software/driver/osi/cavium_random.c-209- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/cavium_random.c-210- *         moved to device structure.
./cavium/software/driver/osi/cavium_random.c:211: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/cavium_random.c-212- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/cavium_random.c-213- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/cavium_random.c-214- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/cavium_random.c-215- *         out all failing requests.
./cavium/software/driver/osi/cavium_random.c-216- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/cavium_random.c-217- *
./cavium/software/driver/osi/cavium_random.c-218- * Revision 1.5  2007/06/11 13:41:07  tghoriparti
./cavium/software/driver/osi/cavium_random.c-219- * cavium_mmap_kernel_buffers return values handled properly when failed.
./cavium/software/driver/osi/cavium_random.c-220- *
./cavium/software/driver/osi/cavium_random.c-221- * Revision 1.4  2007/03/08 20:43:33  panicker
--
./cavium/software/driver/osi/cavium_random.c-265- * Revision 1.7  2004/05/28 17:57:22  bimran
./cavium/software/driver/osi/cavium_random.c-266- * used id lock instead of rnd_lock
./cavium/software/driver/osi/cavium_random.c-267- *
./cavium/software/driver/osi/cavium_random.c-268- * Revision 1.6  2004/05/11 20:50:32  tsingh
./cavium/software/driver/osi/cavium_random.c-269- * Changed some arguments passed through a function
./cavium/software/driver/osi/cavium_random.c-270- *
./cavium/software/driver/osi/cavium_random.c-271- * Revision 1.5  2004/05/11 03:10:39  bimran
./cavium/software/driver/osi/cavium_random.c-272- * some performance opt.
./cavium/software/driver/osi/cavium_random.c-273- *
./cavium/software/driver/osi/cavium_random.c-274- * Revision 1.4  2004/05/05 06:45:06  bimran
./cavium/software/driver/osi/cavium_random.c:275: * Fixed initialization and cleanup for random pool.
./cavium/software/driver/osi/cavium_random.c:276: * Added another function to get request ids from random pool.
./cavium/software/driver/osi/cavium_random.c-277- *
./cavium/software/driver/osi/cavium_random.c-278- * Revision 1.3  2004/05/02 19:44:29  bimran
./cavium/software/driver/osi/cavium_random.c-279- * Added Copyright notice.
./cavium/software/driver/osi/cavium_random.c-280- *
./cavium/software/driver/osi/cavium_random.c-281- * Revision 1.2  2004/04/21 19:18:58  bimran
./cavium/software/driver/osi/cavium_random.c-282- * NPLUS support.
./cavium/software/driver/osi/cavium_random.c-283- *
./cavium/software/driver/osi/cavium_random.c-284- * Revision 1.1  2004/04/15 22:40:48  bimran
./cavium/software/driver/osi/cavium_random.c-285- * Checkin of the code from India with some cleanups.
./cavium/software/driver/osi/cavium_random.c-286- *
--
./cavium/software/driver/osi/sg_dma_free_list.c-197-
./cavium/software/driver/osi/sg_dma_free_list.c-198-/*
./cavium/software/driver/osi/sg_dma_free_list.c-199- * $Id: sg_dma_free_list.c,v 1.2 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/sg_dma_free_list.c-200- * $Log: sg_dma_free_list.c,v $
./cavium/software/driver/osi/sg_dma_free_list.c-201- * Revision 1.2  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/sg_dma_free_list.c-202- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/sg_dma_free_list.c-203- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/sg_dma_free_list.c-204- *         implemented within IPSec APIs.
./cavium/software/driver/osi/sg_dma_free_list.c-205- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/sg_dma_free_list.c-206- *         moved to device structure.
./cavium/software/driver/osi/sg_dma_free_list.c:207: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/sg_dma_free_list.c-208- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/sg_dma_free_list.c-209- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/sg_dma_free_list.c-210- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/sg_dma_free_list.c-211- *         out all failing requests.
./cavium/software/driver/osi/sg_dma_free_list.c-212- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/sg_dma_free_list.c-213- *
./cavium/software/driver/osi/sg_dma_free_list.c-214- * Revision 1.1  2007/01/06 02:47:40  panicker
./cavium/software/driver/osi/sg_dma_free_list.c-215- * * first cut - NITROX PX driver
./cavium/software/driver/osi/sg_dma_free_list.c-216- *
./cavium/software/driver/osi/sg_dma_free_list.c-217- * Revision 1.14  2005/10/13 09:26:33  ksnaren
--
./cavium/software/driver/osi/bl_nbl_list.c-444-
./cavium/software/driver/osi/bl_nbl_list.c-445-/*
./cavium/software/driver/osi/bl_nbl_list.c-446- * $Id: bl_nbl_list.c,v 1.6 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/bl_nbl_list.c-447- * $Log: bl_nbl_list.c,v $
./cavium/software/driver/osi/bl_nbl_list.c-448- * Revision 1.6  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/bl_nbl_list.c-449- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/bl_nbl_list.c-450- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/bl_nbl_list.c-451- *         implemented within IPSec APIs.
./cavium/software/driver/osi/bl_nbl_list.c-452- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/bl_nbl_list.c-453- *         moved to device structure.
./cavium/software/driver/osi/bl_nbl_list.c:454: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/bl_nbl_list.c-455- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/bl_nbl_list.c-456- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/bl_nbl_list.c-457- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/bl_nbl_list.c-458- *         out all failing requests.
./cavium/software/driver/osi/bl_nbl_list.c-459- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/bl_nbl_list.c-460- *
./cavium/software/driver/osi/bl_nbl_list.c-461- * Revision 1.5  2008/03/14 09:40:17  rkumar
./cavium/software/driver/osi/bl_nbl_list.c-462- * Wrong pointer[req_stat_buf instead of resp_stat_buf] check for memory allocation failure corrected.
./cavium/software/driver/osi/bl_nbl_list.c-463- *
./cavium/software/driver/osi/bl_nbl_list.c-464- * Revision 1.4  2008/01/08 05:58:22  rkumar
--
./cavium/software/driver/osi/key_memory.c-983- *
./cavium/software/driver/osi/key_memory.c-984- * Revision 1.11  2008/11/06 09:10:19  ysandeep
./cavium/software/driver/osi/key_memory.c-985- * Removed PX_PLUS
./cavium/software/driver/osi/key_memory.c-986- *
./cavium/software/driver/osi/key_memory.c-987- * Revision 1.10  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/key_memory.c-988- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/key_memory.c-989- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/key_memory.c-990- *         implemented within IPSec APIs.
./cavium/software/driver/osi/key_memory.c-991- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/key_memory.c-992- *         moved to device structure.
./cavium/software/driver/osi/key_memory.c:993: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/key_memory.c-994- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/key_memory.c-995- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/key_memory.c-996- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/key_memory.c-997- *         out all failing requests.
./cavium/software/driver/osi/key_memory.c-998- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/key_memory.c-999- *
./cavium/software/driver/osi/key_memory.c-1000- * Revision 1.9  2008/08/04 14:55:57  aramesh
./cavium/software/driver/osi/key_memory.c-1001- * for key size >640 two fsk writes done.
./cavium/software/driver/osi/key_memory.c-1002- *
./cavium/software/driver/osi/key_memory.c-1003- * Revision 1.8  2008/03/06 08:05:13  aramesh
--
./cavium/software/driver/osi/context_memory.c-276- /* cavium_spin_lock_init(&pkp_dev->ctx_lock); */
./cavium/software/driver/osi/context_memory.c-277-
./cavium/software/driver/osi/context_memory.c-278- pkp_dev->ctx_ipsec_count =pkp_dev->ipsec_chunk_count;
./cavium/software/driver/osi/context_memory.c-279- pkp_dev->ctx_ssl_count = pkp_dev->ssl_chunk_count;
./cavium/software/driver/osi/context_memory.c-280-
./cavium/software/driver/osi/context_memory.c-281- pkp_dev->ctx_ipsec_free_index = 0;
./cavium/software/driver/osi/context_memory.c-282- pkp_dev->ctx_ipsec_put_index = -1;
./cavium/software/driver/osi/context_memory.c-283- pkp_dev->ctx_ssl_free_index =pkp_dev->ipsec_chunk_count;
./cavium/software/driver/osi/context_memory.c-284- return 0;
./cavium/software/driver/osi/context_memory.c-285-#else
./cavium/software/driver/osi/context_memory.c:286:  cavium_dbgprint("ctx init simulated (i.e, using buffer pool)\n");
./cavium/software/driver/osi/context_memory.c-287- return 0;
./cavium/software/driver/osi/context_memory.c-288-#endif
./cavium/software/driver/osi/context_memory.c-289-}/*init_context*/
./cavium/software/driver/osi/context_memory.c-290-
./cavium/software/driver/osi/context_memory.c-291-
./cavium/software/driver/osi/context_memory.c-292-/*
./cavium/software/driver/osi/context_memory.c-293- * Get next available context ID
./cavium/software/driver/osi/context_memory.c-294- */
./cavium/software/driver/osi/context_memory.c-295-int
./cavium/software/driver/osi/context_memory.c-296-alloc_context_id(cavium_device *pkp_dev, ContextType c, ptrlong *cid)
--
./cavium/software/driver/osi/context_memory.c-532-         cavium_free_virt((Uint8 *)pkp_dev->org_ctx_free_list);
./cavium/software/driver/osi/context_memory.c-533-         pkp_dev->org_ctx_free_list=NULL;
./cavium/software/driver/osi/context_memory.c-534-      }
./cavium/software/driver/osi/context_memory.c-535-   }
./cavium/software/driver/osi/context_memory.c-536-
./cavium/software/driver/osi/context_memory.c-537-   pkp_dev->ctx_ipsec_free_index=0;
./cavium/software/driver/osi/context_memory.c-538-   pkp_dev->ctx_ssl_free_index=0;
./cavium/software/driver/osi/context_memory.c-539-
./cavium/software/driver/osi/context_memory.c-540-   return 0;
./cavium/software/driver/osi/context_memory.c-541-#else
./cavium/software/driver/osi/context_memory.c:542:   cavium_dbgprint("ctx cleanup simulated (i.e, using buffer pool)\n");
./cavium/software/driver/osi/context_memory.c-543-   return 0;
./cavium/software/driver/osi/context_memory.c-544-#endif
./cavium/software/driver/osi/context_memory.c-545-}/*cleanup_context*/
./cavium/software/driver/osi/context_memory.c-546-
./cavium/software/driver/osi/context_memory.c-547-#ifdef DUMP_FAILING_REQUESTS
./cavium/software/driver/osi/context_memory.c-548-Uint8 *
./cavium/software/driver/osi/context_memory.c-549-find_host_ctx(cavium_device *pkp_dev, Uint64 ctx_addr)
./cavium/software/driver/osi/context_memory.c-550-{
./cavium/software/driver/osi/context_memory.c-551-    Uint8 *ret = NULL;
./cavium/software/driver/osi/context_memory.c-552-
--
./cavium/software/driver/osi/context_memory.c-572-
./cavium/software/driver/osi/context_memory.c-573-/*
./cavium/software/driver/osi/context_memory.c-574- * $Id: context_memory.c,v 1.9 2008/09/30 13:15:17 jsrikanth Exp $
./cavium/software/driver/osi/context_memory.c-575- * $Log: context_memory.c,v $
./cavium/software/driver/osi/context_memory.c-576- * Revision 1.9  2008/09/30 13:15:17  jsrikanth
./cavium/software/driver/osi/context_memory.c-577- * PX-4X [Multicard] support for IPsec :
./cavium/software/driver/osi/context_memory.c-578- *      -  Round-robin scheduling for selecting a device
./cavium/software/driver/osi/context_memory.c-579- *         implemented within IPSec APIs.
./cavium/software/driver/osi/context_memory.c-580- *      -  All Lists [Pending/Direct/SG/CompletionDMA]
./cavium/software/driver/osi/context_memory.c-581- *         moved to device structure.
./cavium/software/driver/osi/context_memory.c:582: *      -  A single buffer pool manager for all devices.
./cavium/software/driver/osi/context_memory.c-583- *         Interrupt handler now checks for PCI Error register as well.
./cavium/software/driver/osi/context_memory.c-584- *         Proc Entry bug fixes when dumping more than a single page.
./cavium/software/driver/osi/context_memory.c-585- *         DUMP_FAILING_REQUESTS pre-processor define added to dump
./cavium/software/driver/osi/context_memory.c-586- *         out all failing requests.
./cavium/software/driver/osi/context_memory.c-587- * Minor modifications of removing all tabs to spaces.
./cavium/software/driver/osi/context_memory.c-588- *
./cavium/software/driver/osi/context_memory.c-589- * Revision 1.8  2008/02/22 10:20:13  aramesh
./cavium/software/driver/osi/context_memory.c-590- * N1_SANITY is set always.
./cavium/software/driver/osi/context_memory.c-591- *
./cavium/software/driver/osi/context_memory.c-592- * Revision 1.7  2007/12/07 05:33:37  ksadasivuni
./cavium/software/driver/osi/context_memory.c:593: * ptr should be freed not ptr-8 to buffer pool
./cavium/software/driver/osi/context_memory.c-594- *
./cavium/software/driver/osi/context_memory.c-595- * Revision 1.6  2007/12/07 05:24:18  ksadasivuni
./cavium/software/driver/osi/context_memory.c:596: * 1.  changed context memory to use buffer pool as px doesn't have DDR
./cavium/software/driver/osi/context_memory.c-597- * 2.  PX_ECC_FreeContext now takes cid argument
./cavium/software/driver/osi/context_memory.c-598- *
./cavium/software/driver/osi/context_memory.c-599- * Revision 1.5  2007/11/19 11:11:55  lpathy
./cavium/software/driver/osi/context_memory.c-600- * ported to 64 bit windows.
./cavium/software/driver/osi/context_memory.c-601- *
./cavium/software/driver/osi/context_memory.c-602- * Revision 1.4  2007/10/18 09:35:09  lpathy
./cavium/software/driver/osi/context_memory.c-603- * Added windows support.
./cavium/software/driver/osi/context_memory.c-604- *
./cavium/software/driver/osi/context_memory.c-605- * Revision 1.3  2007/09/10 10:56:18  kchunduri
./cavium/software/driver/osi/context_memory.c-606- * --Maintain Context and KeyMemory resources per device.
--
./smartllb/smartllb_admin/smartllb_admin.c-917-			smartllb_vserver_delete(vserver_old);
./smartllb/smartllb_admin/smartllb_admin.c-918-		}
./smartllb/smartllb_admin/smartllb_admin.c-919-	}
./smartllb/smartllb_admin/smartllb_admin.c-920-
./smartllb/smartllb_admin/smartllb_admin.c-921-	return 0;
./smartllb/smartllb_admin/smartllb_admin.c-922-}
./smartllb/smartllb_admin/smartllb_admin.c-923-
./smartllb/smartllb_admin/smartllb_admin.c-924-static struct llb_pool * smartllb_llb_pool_search(struct list_head * pool_head,
./smartllb/smartllb_admin/smartllb_admin.c-925-			const char *pool_name) 
./smartllb/smartllb_admin/smartllb_admin.c-926-{
./smartllb/smartllb_admin/smartllb_admin.c:927:	struct llb_pool *pool;
./smartllb/smartllb_admin/smartllb_admin.c-928-
./smartllb/smartllb_admin/smartllb_admin.c-929-	if (pool_head == NULL) {
./smartllb/smartllb_admin/smartllb_admin.c-930-		return NULL;
./smartllb/smartllb_admin/smartllb_admin.c-931-	}
./smartllb/smartllb_admin/smartllb_admin.c-932-
./smartllb/smartllb_admin/smartllb_admin.c:933:	list_for_each_entry(pool, pool_head, list) {
./smartllb/smartllb_admin/smartllb_admin.c:934:		if (strcasecmp(pool->name, pool_name) == 0) {
./smartllb/smartllb_admin/smartllb_admin.c:935:			return pool;
./smartllb/smartllb_admin/smartllb_admin.c-936-		}
./smartllb/smartllb_admin/smartllb_admin.c-937-	}
./smartllb/smartllb_admin/smartllb_admin.c-938-
./smartllb/smartllb_admin/smartllb_admin.c-939-	return  NULL;
./smartllb/smartllb_admin/smartllb_admin.c-940-}
./smartllb/smartllb_admin/smartllb_admin.c-941-
./smartllb/smartllb_admin/smartllb_admin.c-942-static struct llb_vserver * smartllb_llb_vserver_search(struct list_head * vserver_head,
./smartllb/smartllb_admin/smartllb_admin.c-943-			const char *vserver_name) 
./smartllb/smartllb_admin/smartllb_admin.c-944-{
./smartllb/smartllb_admin/smartllb_admin.c-945-	struct llb_vserver *vs;
--
./smartllb/smartllb_admin/smartllb_admin.c-1526-static void smartllb_config_queue_new2old()
./smartllb/smartllb_admin/smartllb_admin.c-1527-{
./smartllb/smartllb_admin/smartllb_admin.c-1528-	/* release old queue */
./smartllb/smartllb_admin/smartllb_admin.c-1529-	smartllb_config_queue_put();
./smartllb/smartllb_admin/smartllb_admin.c-1530-
./smartllb/smartllb_admin/smartllb_admin.c-1531-	/* move new -> old */
./smartllb/smartllb_admin/smartllb_admin.c-1532-
./smartllb/smartllb_admin/smartllb_admin.c-1533-	/* splice vserver */
./smartllb/smartllb_admin/smartllb_admin.c-1534-	list_splice_tail(&scu.vserver_head_new, &scu.vserver_head);
./smartllb/smartllb_admin/smartllb_admin.c-1535-
./smartllb/smartllb_admin/smartllb_admin.c:1536:	/* splice pool */
./smartllb/smartllb_admin/smartllb_admin.c-1537-	list_splice_tail(&scu.pool_head_new, &scu.pool_head);
./smartllb/smartllb_admin/smartllb_admin.c-1538-
./smartllb/smartllb_admin/smartllb_admin.c-1539-	/* splice topology */
./smartllb/smartllb_admin/smartllb_admin.c-1540-	list_splice_tail(&scu.topology_head_new, &scu.topology_head);
./smartllb/smartllb_admin/smartllb_admin.c-1541-
./smartllb/smartllb_admin/smartllb_admin.c-1542-	/* splice policy */
./smartllb/smartllb_admin/smartllb_admin.c-1543-	list_splice_tail(&scu.policy_head_new, &scu.policy_head);
./smartllb/smartllb_admin/smartllb_admin.c-1544-
./smartllb/smartllb_admin/smartllb_admin.c-1545-	/* splice llb_snat */
./smartllb/smartllb_admin/smartllb_admin.c-1546-	list_splice_tail(&scu.llb_snat_head_new, &scu.llb_snat_head);
--
./smartllb/smartllb_admin/smartllb_admin.c-1564-				vserver->name, vserver->enable, vserver->protocol, vserver->poolname, vserver->persistent);
./smartllb/smartllb_admin/smartllb_admin.c-1565-	}
./smartllb/smartllb_admin/smartllb_admin.c-1566-	list_for_each_entry(vserver, &scu.vserver_head, list) {
./smartllb/smartllb_admin/smartllb_admin.c-1567-		DP( "new_vserver[%s] enable[%s] protocol[%s] pool_name[%s] persistent[%s]", 
./smartllb/smartllb_admin/smartllb_admin.c-1568-				vserver->name, vserver->enable, vserver->protocol, vserver->poolname, vserver->persistent);
./smartllb/smartllb_admin/smartllb_admin.c-1569-	}
./smartllb/smartllb_admin/smartllb_admin.c-1570-}
./smartllb/smartllb_admin/smartllb_admin.c-1571-
./smartllb/smartllb_admin/smartllb_admin.c-1572-static  void smartllb_config_pool_show()
./smartllb/smartllb_admin/smartllb_admin.c-1573-{
./smartllb/smartllb_admin/smartllb_admin.c:1574:	struct llb_pool *pool;
./smartllb/smartllb_admin/smartllb_admin.c-1575-
./smartllb/smartllb_admin/smartllb_admin.c:1576:	list_for_each_entry(pool, &scu.pool_head_new, list) {
./smartllb/smartllb_admin/smartllb_admin.c:1577:		DP( "pool_new[%s]", pool->name);
./smartllb/smartllb_admin/smartllb_admin.c-1578-
./smartllb/smartllb_admin/smartllb_admin.c-1579-	}
./smartllb/smartllb_admin/smartllb_admin.c:1580:	list_for_each_entry(pool, &scu.pool_head, list) {
./smartllb/smartllb_admin/smartllb_admin.c:1581:		DP( "pool_new[%s]", pool->name);
./smartllb/smartllb_admin/smartllb_admin.c-1582-	}
./smartllb/smartllb_admin/smartllb_admin.c-1583-}
./smartllb/smartllb_admin/smartllb_admin.c-1584-
./smartllb/smartllb_admin/smartllb_admin.c-1585-
./smartllb/smartllb_admin/smartllb_admin.c-1586-__attribute__((unused))
./smartllb/smartllb_admin/smartllb_admin.c-1587-static void smartllb_config_queue_show()
./smartllb/smartllb_admin/smartllb_admin.c-1588-{
./smartllb/smartllb_admin/smartllb_admin.c-1589-	DP( "============================");
./smartllb/smartllb_admin/smartllb_admin.c-1590-	smartllb_config_vserver_show();
./smartllb/smartllb_admin/smartllb_admin.c-1591-	smartllb_config_pool_show();
./smartllb/smartllb_admin/smartllb_admin.c-1592-	DP( "============================");
./smartllb/smartllb_admin/smartllb_admin.c-1593-}
./smartllb/smartllb_admin/smartllb_admin.c-1594-
./smartllb/smartllb_admin/smartllb_admin.c-1595-static void smartllb_config_queue_get()
./smartllb/smartllb_admin/smartllb_admin.c-1596-{
./smartllb/smartllb_admin/smartllb_admin.c-1597-	char *o_config = NULL;
./smartllb/smartllb_admin/smartllb_admin.c-1598-
./smartllb/smartllb_admin/smartllb_admin.c-1599-	/* 释放上一次获取结果内存 */
./smartllb/smartllb_admin/smartllb_admin.c-1600-	smartllb_config_queue_new2old();
./smartllb/smartllb_admin/smartllb_admin.c-1601-
./smartllb/smartllb_admin/smartllb_admin.c:1602:	/* 读取链路的vserver/pool/topology节点从文件到内存 */
./smartllb/smartllb_admin/smartllb_admin.c-1603-	if (module_get_queue(&scu.vserver_head_new, "llb_vserver", NULL) != 0) {
./smartllb/smartllb_admin/smartllb_admin.c-1604-		DP( "Error: module_get_queue llb_vserver!\n");
./smartllb/smartllb_admin/smartllb_admin.c-1605-	}
./smartllb/smartllb_admin/smartllb_admin.c-1606-	if(module_get_queue(&scu.pool_head_new, "llb_pool", NULL) != 0) {
./smartllb/smartllb_admin/smartllb_admin.c-1607-		DP( "Error: module_get_queue llb_pool!\n");
./smartllb/smartllb_admin/smartllb_admin.c-1608-	}
./smartllb/smartllb_admin/smartllb_admin.c-1609-	if (module_get_queue(&scu.topology_head_new, "tp_node", NULL) != 0) {
./smartllb/smartllb_admin/smartllb_admin.c-1610-		DP( "Error: module_get_queue llb_topology!\n");
./smartllb/smartllb_admin/smartllb_admin.c-1611-	}		
./smartllb/smartllb_admin/smartllb_admin.c-1612-	if (module_get_queue(&scu.snat_head_new, "snat", NULL) != 0) {
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-94-	NULL,                                  /* init module */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-95-	NULL,                                  /* init process */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-96-	NULL,                                  /* init thread */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-97-	NULL,                                  /* exit thread */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-98-	NULL,                                  /* exit process */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-99-	NULL,                                  /* exit master */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-100-	NGX_MODULE_V1_PADDING
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-101-};
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-102-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-103-/* dummy */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:104:static ngx_int_t ngx_http_sticky_hash_variable(ngx_pool_t *pool, void *in,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-105-                                            size_t len, ngx_str_t *digest)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-106-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-107-    return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-108-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-109-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-110-/*
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-111- * function called by the upstream module to init itself
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-112- * it's called once per instance
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-113- */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-114-ngx_int_t ngx_http_init_upstream_sticky(ngx_conf_t *cf,
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-139-		return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-140-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-141-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-142-	/* if 'index', no need to alloc and generate digest */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-143-	if (!conf->hash && !conf->hmac) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-144-		conf->peers = NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-145-		return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-146-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-147-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-148-	/* create our own upstream indexes */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:149:	conf->peers = ngx_pcalloc(cf->pool, sizeof (ngx_http_sticky_peers_t) + 
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-150-                            sizeof(ngx_http_sticky_peer_t) * rr_peers->number);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-151-	if (conf->peers == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-152-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-153-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-154- 
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-155-    conf->peers->number = rr_peers->number;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-156-    conf->peers->single = rr_peers->single;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-157-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-158-	/* parse each peer and generate digest if necessary */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-159-	for (i = 0; i < rr_peers->number; i++) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-160-        conf->peers->peer[i].sockaddr = rr_peers->peer[i].sockaddr;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-161-        conf->peers->peer[i].name = rr_peers->peer[i].name;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-162-        conf->peers->peer[i].socklen = rr_peers->peer[i].socklen;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-163-        conf->peers->peer[i].down = rr_peers->peer[i].down;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-164-        conf->peers->peer[i].index = i;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-165-		if (conf->hmac) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-166-			/* generate hmac */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:167:			conf->hmac(cf->pool, rr_peers->peer[i].sockaddr,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-168-                     rr_peers->peer[i].socklen, &conf->hmac_key,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-169-                     &conf->peers->peer[i].digest);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-170-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-171-		} else {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-172-			/* generate hash */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:173:			conf->hash(cf->pool, rr_peers->peer[i].sockaddr,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-174-                     rr_peers->peer[i].socklen, &conf->peers->peer[i].digest);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-175-		}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-176-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-177-        /* TODO Fix this */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-178-        /*ngx_conf_log_error(NGX_LOG_WARN, cf, 0, "[sticky/ngx_http_init_upstream_sticky] "*/
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-179-        /*"generated digest \"%V\" for upstream at index %d", &conf->peers->peer[i].digest, i);*/
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-180-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-181-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-182-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-183-    return ngx_http_sticky_create_peers_hash(cf, conf);
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-262-    ngx_int_t                     n;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-263-    ngx_uint_t                    key;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-264-    ngx_http_sticky_peer_t       *sp;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-265-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-266-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-267-                   "init sticky peer");
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-268-    conf = ngx_http_conf_upstream_srv_conf(us,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-269-                                         ngx_http_sticky_module);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-270-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-271-    /* alloc custom sticky struct */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:272:    iphp = ngx_palloc(r->pool, sizeof(ngx_http_sticky_peer_data_t));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-273-    if (iphp == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-274-        return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-275-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-276-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-277-    /* attach it to the request upstream data */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-278-    r->upstream->peer.sticky_data = iphp;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-279-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-280-	/* init the custom sticky struct */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-281-    iphp->old_selected_peer = -1;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-282-    iphp->selected_peer = -1;
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-556-                        "value=\"%V\" index=%ui", &conf->cookie_name,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-557-                        &conf->peers->peer[iphp->selected_peer].digest,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-558-                        iphp->selected_peer);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-559-            } else {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-560-                ngx_str_t route;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-561-                ngx_uint_t tmp = pc->cache_index;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-562-                route.len = 0;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-563-                do {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-564-                    route.len++;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-565-                } while (tmp /= 10);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:566:                route.data = ngx_pcalloc(iphp->request->pool,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-567-                                         sizeof(u_char) * (route.len + 1));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-568-                if (route.data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-569-                    return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-570-                }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-571-                ngx_snprintf(route.data, route.len, "%d", pc->cache_index);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-572-                route.len = ngx_strlen(route.data);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-573-                ngx_http_sticky_misc_set_cookie(iphp->request,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-574-                        &conf->cookie_name, &route, &conf->cookie_domain,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-575-                        &conf->cookie_path, conf->ctx.expires);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-576-                ngx_log_debug(NGX_LOG_DEBUG_HTTP, pc->log, 0,
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-613-/* create shm_zone,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-614- * caller must set shm_zone->init and shm_zone->data after calling
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-615- * this. shared_memory name starts with '$sticky_group_' is reserved.
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-616- */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-617-static char *ngx_http_sticky_make_shm_zone(ngx_conf_t *cf,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-618-        ngx_shm_zone_t **shm_zone, ngx_int_t size, ngx_str_t *name,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-619-        ngx_str_t *template)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-620-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-621-    ngx_str_t zone_name;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-622-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:623:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (256));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-624-    if (zone_name.data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-625-        return NGX_CONF_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-626-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-627-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-628-    /* add a '$' as prefix */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-629-    ngx_snprintf(zone_name.data, 255, "%V%V%d", template, name, ngx_current_seq);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-630-    zone_name.len = ngx_strlen(zone_name.data);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-631-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-632-    *shm_zone = ngx_shared_memory_add(cf, &zone_name, size,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-633-            &ngx_http_sticky_module);
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-992-	return NGX_CONF_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-993-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-994-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-995-/*
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-996- * alloc stick configuration
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-997- */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-998-static void *ngx_http_sticky_create_conf(ngx_conf_t *cf)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-999-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1000-	ngx_http_sticky_srv_conf_t *conf;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1001-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1002:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_sticky_srv_conf_t));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1003-	if (conf == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1004-		return NGX_CONF_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1005-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1006-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1007-    conf->group = NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1008-    conf->rr_peers = NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1009-    conf->peers = NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1010-	return conf;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1011-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1012-
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1051-    ngx_hash_keys_arrays_t      ha;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1052-    ngx_http_sticky_peer_t     *sp;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1053-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1054-    ngx_memzero(&ha, sizeof(ngx_hash_keys_arrays_t));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1055-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1056-    ha.temp_pool = ngx_create_pool(16384, cf->log);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1057-    if (ha.temp_pool == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1058-        return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1059-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1060-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1061:    ha.pool = cf->pool;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1062-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1063-    if (ngx_hash_keys_array_init(&ha, NGX_HASH_LARGE) != NGX_OK) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1064-        goto failed;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1065-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1066-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1067-    for(i = 0; i < sscf->peers->number; ++i) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1068-        sp = &sscf->peers->peer[i];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1069-        rc = ngx_hash_add_key(&ha, &sp->digest, (void *)sp,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1070-                NGX_HASH_READONLY_KEY);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1071-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1072-        if (rc == NGX_ERROR) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1073-            return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1074-        }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1075-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1076-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1077-    hash.key = ngx_hash_key_lc;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1078-    hash.max_size = 4096;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1079-    hash.bucket_size = 1024;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1080-    hash.name = "upstream_ip_address_hash";
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1081:    hash.pool = cf->pool;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1082-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1083-    if (ha.keys.nelts) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1084-        hash.hash = &sscf->address_hash;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1085-        hash.temp_pool = NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1086-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1087-        if (ngx_hash_init(&hash, ha.keys.elts, ha.keys.nelts) != NGX_OK) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1088-            goto failed;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1089-        }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1090-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1091-
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1963-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1964-    smcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_sticky_module);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1965-    group = ngx_http_sticky_group_lookup(cf, new);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1966-    if (group != NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1967-            return group;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1968-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1969-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1970-    /* since ngx_shared_memory_add requries size argument, we create it
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1971-     * after all parameters processed. */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1972-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1973:    group = ngx_pcalloc(cf->pool, sizeof(ngx_http_sticky_group_t));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1974-    if (group == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1975-        return NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1976-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1977-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1978-    group->name = *new;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1979-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1980:    if (ngx_array_init(&group->confs, cf->pool, 4,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1981-                sizeof(ngx_http_sticky_srv_conf_t *)) != NGX_OK) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1982-        return NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1983-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1984-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1985-    groupp = ngx_array_push(&smcf->groups);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1986-    if (groupp == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1987-        return NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1988-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1989-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1990-    *groupp = group;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1991-    return group;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1992-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1993-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1994-static void * ngx_http_sticky_create_main_conf(ngx_conf_t *cf)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1995-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1996-    ngx_http_sticky_main_conf_t  *smcf;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1997-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:1998:    smcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_sticky_main_conf_t));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-1999-    if (smcf == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2000-        return NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2001-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c:2002:    if (ngx_array_init(&smcf->groups, cf->pool, 4,
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2003-                       sizeof(ngx_http_sticky_group_t *))
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2004-        != NGX_OK)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2005-    {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2006-        return NULL;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2007-    }
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2008-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2009-    return smcf;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_module.c-2010-}
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-41-	/*; Max-Age= */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-42-	if (expires != NGX_CONF_UNSET) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-43-		len += sizeof("; Max-Age=") - 1 + NGX_TIME_T_LEN;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-44-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-45-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-46-	/* ; Path= */
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-47-	if (path->len > 0) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-48-		len += sizeof("; Path=") - 1 + path->len;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-49-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-50-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:51:	cookie = ngx_pnalloc(r->pool, len);	
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-52-	if (cookie == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-53-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-54-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-55-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-56-	p = ngx_copy(cookie, name->data, name->len);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-57-	*p++ = '=';
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-58-	p = ngx_copy(p, value->data, value->len);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-59-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-60-	if (domain->len > 0) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-61-		p = ngx_copy(p, "; Domain=", sizeof("; Domain=") - 1);	
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-104-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-105-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-106-	set_cookie->hash = 1;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-107-	ngx_str_set(&set_cookie->key, "Set-Cookie");
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-108-	set_cookie->value.len = p - cookie;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-109-	set_cookie->value.data = cookie;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-110-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-111-	return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-112-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-113-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:114:ngx_int_t ngx_http_sticky_misc_md5(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-115-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-116-	ngx_md5_t md5;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-117-	u_char hash[MD5_DIGEST_LENGTH];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-118-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:119:	digest->data = ngx_pcalloc(pool, MD5_DIGEST_LENGTH * 2);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-120-	if (digest->data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-121-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-122-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-123-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-124-	digest->len = MD5_DIGEST_LENGTH * 2;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-125-	ngx_md5_init(&md5);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-126-	ngx_md5_update(&md5, in, len);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-127-	ngx_md5_final(hash, &md5);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-128-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-129-	ngx_hex_dump(digest->data, hash, MD5_DIGEST_LENGTH);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-130-	return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-131-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-132-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:133:ngx_int_t ngx_http_sticky_misc_sha1(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *digest)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-134-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-135-	ngx_sha1_t sha1;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-136-	u_char hash[SHA_DIGEST_LENGTH];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-137-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:138:	digest->data = ngx_pcalloc(pool, SHA_DIGEST_LENGTH * 2);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-139-	if (digest->data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-140-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-141-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-142-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-143-	digest->len = SHA_DIGEST_LENGTH * 2;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-144-	ngx_sha1_init(&sha1);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-145-	ngx_sha1_update(&sha1, in, len);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-146-	ngx_sha1_final(hash, &sha1);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-147-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-148-	ngx_hex_dump(digest->data, hash, SHA_DIGEST_LENGTH);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-149-	return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-150-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-151-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:152:ngx_int_t ngx_http_sticky_misc_hmac_md5(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *key, ngx_str_t *digest)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-153-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-154-	u_char hash[MD5_DIGEST_LENGTH];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-155-	u_char k[MD5_CBLOCK];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-156-	ngx_md5_t md5;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-157-	u_int i;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-158-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:159:	digest->data = ngx_pcalloc(pool, MD5_DIGEST_LENGTH * 2);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-160-	if (digest->data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-161-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-162-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-163-	digest->len = MD5_DIGEST_LENGTH * 2;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-164-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-165-	ngx_memzero(k, sizeof(k));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-166-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-167-	if (key->len > MD5_CBLOCK) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-168-		ngx_md5_init(&md5);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-169-		ngx_md5_update(&md5, key->data, key->len);
--
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-190-	ngx_md5_init(&md5);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-191-	ngx_md5_update(&md5, k, MD5_CBLOCK);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-192-	ngx_md5_update(&md5, hash, MD5_DIGEST_LENGTH);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-193-	ngx_md5_final(hash, &md5);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-194-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-195-	ngx_hex_dump(digest->data, hash, MD5_DIGEST_LENGTH);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-196-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-197-	return NGX_OK;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-198-}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-199-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:200:ngx_int_t ngx_http_sticky_misc_hmac_sha1(ngx_pool_t *pool, void *in, size_t len, ngx_str_t *key, ngx_str_t *digest)
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-201-{
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-202-	u_char hash[SHA_DIGEST_LENGTH];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-203-	u_char k[SHA_CBLOCK];
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-204-	ngx_sha1_t sha1;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-205-	u_int i;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-206-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c:207:	digest->data = ngx_pcalloc(pool, SHA_DIGEST_LENGTH * 2);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-208-	if (digest->data == NULL) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-209-		return NGX_ERROR;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-210-	}
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-211-	digest->len = SHA_DIGEST_LENGTH * 2;
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-212-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-213-	ngx_memzero(k, sizeof(k));
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-214-
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-215-	if (key->len > SHA_CBLOCK) {
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-216-		ngx_sha1_init(&sha1);
./nginx/3party/nginx-sticky-module/ngx_http_sticky_misc.c-217-		ngx_sha1_update(&sha1, key->data, key->len);
--
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-81-{
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-82-    ngx_http_upstream_multiplex_peer_data_t  *mp;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-83-    ngx_http_upstream_multiplex_srv_conf_t   *umsf;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-84-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-85-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-86-                   "init multiplex peer");
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-87-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-88-    umsf = ngx_http_conf_upstream_srv_conf(us,
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-89-                                          ngx_http_upstream_multiplex_module);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-90-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c:91:    mp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_multiplex_peer_data_t));
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-92-    if (mp == NULL) {
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-93-        return NGX_ERROR;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-94-    }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-95-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-96-    mp->conf = umsf;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-97-    mp->upstream = r->upstream;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-98-    r->upstream->peer.multiplex_data = mp;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-99-    r->upstream->peer.get_multiplex = ngx_http_upstream_get_multiplex_peer;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-100-    r->upstream->peer.free_multiplex = ngx_http_upstream_free_multiplex_peer;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-101-    
--
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-181-    ngx_queue_remove(q);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-182-    ngx_queue_insert_head(&umsf->free, q);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-183-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-184-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pc->log, 0,
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-185-            "get multiplex peer: using connection %p, index=%i", c, index);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-186-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-187-    c->idle = 0;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-188-    c->log = pc->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-189-    c->read->log = pc->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-190-    c->write->log = pc->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c:191:    c->pool->log = pc->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-192-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-193-    pc->connection = c;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-194-    pc->cached = 1;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-195-    pc->cache_index = index;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-196-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-197-    return NGX_DONE;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-198-}
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-199-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-200-static ngx_int_t
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-201-ngx_http_upstream_get_multiplex_peer(ngx_peer_connection_t *pc, void *data,
--
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-299-    }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-300-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-301-    c->write->handler = ngx_http_upstream_multiplex_dummy_handler;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-302-    c->read->handler = ngx_http_upstream_multiplex_close_handler;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-303-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-304-    c->data = item;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-305-    c->idle = 1;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-306-    c->log = ngx_cycle->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-307-    c->read->log = ngx_cycle->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-308-    c->write->log = ngx_cycle->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c:309:    c->pool->log = ngx_cycle->log;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-310-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-311-    item->socklen = pc->socklen;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-312-    ngx_memcpy(&item->sockaddr, pc->sockaddr, pc->socklen);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-313-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-314-    if (c->read->ready) {
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-315-        ngx_http_upstream_multiplex_close_handler(c->read);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-316-    }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-317-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-318-    return NGX_OK;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-319-invalid:
--
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-387-        c->ssl->no_send_shutdown = 1;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-388-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-389-        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-390-            c->ssl->handler = ngx_http_upstream_multiplex_close;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-391-            return;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-392-        }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-393-    }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-394-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-395-#endif
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-396-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c:397:    ngx_destroy_pool(c->pool);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-398-    ngx_close_connection(c);
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-399-}
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-400-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-401-static void *
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-402-ngx_http_upstream_multiplex_create_conf(ngx_conf_t *cf)
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-403-{
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-404-    ngx_http_upstream_multiplex_srv_conf_t  *conf;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c:405:    conf = ngx_pcalloc(cf->pool,
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-406-                       sizeof(ngx_http_upstream_multiplex_srv_conf_t));
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-407-    if (conf == NULL) {
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-408-        return NULL;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-409-    }
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-410-
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-411-    /*
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-412-     * set by ngx_pcalloc():
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-413-     *
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-414-     *     conf->original_init_upstream = NULL;
./nginx/3party/nginx_upstream_multiplex/ngx_http_upstream_multiplex_module.c-415-     *     conf->original_init_peer = NULL;
--
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-131-    } state;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-132-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-133-    if (args == NULL) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-134-	return NGX_ERROR;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-135-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-136-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-137-    if (r->args.len == 0) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-138-	return NGX_OK;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-139-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-140-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c:141:    if (ngx_array_init(args, r->pool, 1, sizeof(ngx_keyval_t)) != NGX_OK) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-142-	return NGX_ERROR;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-143-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-144-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-145-    c = r->args.data;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-146-    state = sw_name;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-147-    name_start = name_end = value_start = value_end = NULL;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-148-    for (n = 0; n <= r->args.len; ++n) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-149-	ch = *c;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-150-	switch (state) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-151-	case sw_name:
--
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-736-	uscf = uscfp[i];
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-737-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-738-	peers = uscf->peer.data;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-739-	if (uscf->peer.get_rr_peers) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-740-	    peers = uscf->peer.get_rr_peers(uscf);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-741-	}
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-742-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-743-	for (j = 0; j < peers->number; j++, (*num)++) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-744-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-745-	    peer = &peers->peer[j];
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c:746:	    cur = ngx_pcalloc(r->pool, sizeof(ngx_http_stat_rserver_t));
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-747-	    if (cur == NULL) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-748-		return NGX_ERROR;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-749-	    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-750-	    ngx_memcpy(cur->upstream, uscf->host.data, uscf->host.len);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-751-	    ngx_memcpy(cur->rsname, peer->name.data, peer->name.len);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-752-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-753-	    if (i == 0 && j == 0) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-754-		*rhead = prev = cur;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-755-	    } else {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-756-		prev->next = cur;
--
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-776-    ngx_http_core_srv_conf_t *cscf, **cscfp;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-777-    ngx_http_stat_vserver_t *cur, *prev = NULL;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-778-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-779-    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-780-    if (cmcf == NULL) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-781-	return NGX_OK;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-782-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-783-    cscfp = cmcf->servers.elts;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-784-    for (i = 0; i < cmcf->servers.nelts; i++, (*num)++) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-785-	cscf = cscfp[i];
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c:786:	cur = ngx_pcalloc(r->pool, sizeof(ngx_http_stat_vserver_t));
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-787-	ngx_memcpy(cur->vsname, cscf->server_name.data,
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-788-		   cscf->server_name.len);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-789-	if (i == 0) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-790-	    *vhead = prev = cur;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-791-	} else {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-792-	    prev->next = cur;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-793-	}
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-794-	prev = cur;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-795-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-796-
--
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-853-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-854-    peers = uscf->peer.data;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-855-    if (uscf->peer.get_rr_peers) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-856-	peers = uscf->peer.get_rr_peers(uscf);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-857-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-858-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-859-    size = sizeof("Upstream:  \n") + ngx_strlen(head) + 512;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-860-    size0 = NGX_ATOMIC_T_LEN * 5;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-861-    size += size0 * peers->number;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-862-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c:863:    b = ngx_create_temp_buf(r->pool, size);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-864-    if (b == NULL) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-865-	return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-866-    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-867-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-868-    out.buf = b;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-869-    out.next = NULL;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-870-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-871-    b->last = ngx_sprintf(b->last, "Upstream: %V\n", &name);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-872-    b->last = ngx_snprintf(b->last, ngx_strlen(head), "%s", head);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-873-
--
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-956-		found = 1;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-957-		break;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-958-	    }
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-959-	}
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-960-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-961-	if (found != 1) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-962-	    return NGX_HTTP_NOT_FOUND;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-963-	}
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-964-
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-965-	size += sizeof(ngx_http_stat_vserver_t) + 5 * 15 + 80;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c:966:	b = ngx_create_temp_buf(r->pool, size);
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-967-	if (b == NULL) {
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-968-	    return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-969-	}
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-970-	out.buf = b;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-971-	out.next = NULL;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-972-	compress =
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-973-	    lv->cpr_html + lv->cpr_plain + lv->cpr_richtext + lv->cpr_css +
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-974-	    lv->cpr_rtf;
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-975-	uncompress =
./nginx/3party/nginx_conn_stat/ngx_http_conn_stat_module.c-976-	    lv->uncpr_html + lv->uncpr_plain + lv->uncpr_richtext +
--
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-105-    if (conf->sh->quench) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-106-        return NGX_HTTP_SERVICE_UNAVAILABLE;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-107-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-108-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-109-    n = ngx_atomic_fetch_add(&conf->sh->conn, 1);
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-110-    if (conf->maxconn && n >= conf->maxconn) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-111-            ngx_atomic_fetch_add(&conf->sh->conn, -1);
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-112-            return NGX_HTTP_SERVICE_UNAVAILABLE;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-113-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-114-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c:115:    cln = ngx_pool_cleanup_add(r->connection->pool,
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-116-                                     sizeof(ngx_http_conn_limit_conf_t *));
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-117-    if (cln == NULL) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-118-        n = ngx_atomic_fetch_add(&conf->sh->conn, -1);
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-119-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-120-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-121-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-122-    cln->handler = ngx_http_conn_limit_cleanup;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-123-    cln->data = conf;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-124-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-125-    return NGX_DECLINED;
--
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-374-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-375-    return NGX_CONF_OK;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-376-}
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-377-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-378-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-379-static void *
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-380-ngx_http_conn_limit_create_conf(ngx_conf_t *cf)
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-381-{
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-382-    ngx_http_conn_limit_conf_t  *conf;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-383-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c:384:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_conn_limit_conf_t));
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-385-    if (conf == NULL) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-386-        return NULL;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-387-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-388-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-389-    /*
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-390-     * set by ngx_pcalloc():
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-391-     *
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-392-     *     conf->shm_zone = NULL;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-393-     *     conf->burst = 0;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-394-     *     conf->nodelay = 0;
--
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-410-    ngx_http_conn_limit_conf_t  *clcf = child;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-411-    ngx_http_core_srv_conf_t    *cscf;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-412-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-413-    if (clcf->maxconn == NGX_CONF_UNSET_UINT) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-414-        clcf->maxconn = 0;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-415-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-416-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-417-    if (clcf->maxreq == NGX_CONF_UNSET_UINT) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-418-        clcf->maxreq = 0;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-419-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c:420:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (256));
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-421-    if (zone_name.data == NULL) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-422-        return NGX_CONF_ERROR;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-423-    }
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-424-
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-425-    cscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_core_module);
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-426-    sn = cscf->server_names.elts;
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-427-    if (cscf->server_names.nelts == 0) {
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-428-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-429-                "server_name directive reqired.");
./nginx/3party/nginx_conn_limit/ngx_http_conn_limit_module.c-430-        return NGX_CONF_ERROR;
--
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-125-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-126-        return NGX_ERROR;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-127-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-128-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-129-    server = us->servers->elts;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-130-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-131-    for (n = 0, i = 0; i < us->servers->nelts; i++) {
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-132-        n += server[i].naddrs;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-133-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-134-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c:135:    peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_hash_peers_t)
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-136-            + sizeof(ngx_http_upstream_hash_peer_t) * n);
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-137-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-138-    if (peers == NULL) {
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-139-        return NGX_ERROR;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-140-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-141-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-142-    peers->number = n;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-143-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-144-    /* one hostname can have multiple IP addresses in DNS */
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-145-    for (n = 0, i = 0; i < us->servers->nelts; i++) {
--
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-162-    ngx_http_upstream_srv_conf_t *us)
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-163-{
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-164-    ngx_http_upstream_hash_peer_data_t     *uhpd;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-165-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-166-    ngx_str_t val;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-167-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-168-    if (ngx_http_script_run(r, &val, us->lengths, 0, us->values) == NULL) {
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-169-        return NGX_ERROR;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-170-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-171-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c:172:    uhpd = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_hash_peer_data_t)
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-173-            + sizeof(uintptr_t) *
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-174-                ((ngx_http_upstream_hash_peers_t *)us->peer.data)->number /
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-175-                    (8 * sizeof(uintptr_t)));
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-176-    if (uhpd == NULL) {
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-177-        return NGX_ERROR;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-178-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-179-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-180-    r->upstream->peer.data = uhpd;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-181-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-182-    uhpd->peers = us->peer.data;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-183-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-184-    r->upstream->peer.free = ngx_http_upstream_free_hash_peer;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-185-    r->upstream->peer.get = ngx_http_upstream_get_hash_peer;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-186-    r->upstream->peer.tries = us->retries + 1;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-187-#if (NGX_HTTP_SSL)
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-188-    r->upstream->peer.set_session = ngx_http_upstream_set_hash_peer_session;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-189-    r->upstream->peer.save_session = ngx_http_upstream_save_hash_peer_session;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-190-#endif
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-191-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-192-    /* must be big enough for the retry keys */
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c:193:    if ((uhpd->current_key.data = ngx_pcalloc(r->pool, NGX_ATOMIC_T_LEN + val.len)) == NULL) {
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-194-        return NGX_ERROR;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-195-    }
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-196-
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-197-    ngx_memcpy(uhpd->current_key.data, val.data, val.len);
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-198-    uhpd->current_key.len = val.len;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-199-    uhpd->original_key = val;
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-200-    uhpd->hash = ngx_http_upstream_hash_crc32(uhpd->current_key.data, uhpd->current_key.len);
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-201-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-202-            "upstream_hash: hashed \"%V\" to %ui", &uhpd->current_key, uhpd->hash % uhpd->peers->number);
./nginx/3party/nginx_upstream_hash/ngx_http_upstream_hash_module.c-203-    uhpd->try_i = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-383-    tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-384-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-385-    tf = rb->temp_file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-386-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-387-    if (tf) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-388-        if (tf->file.fd != NGX_INVALID_FILE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-389-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-390-            dd("cleaning temp file %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-391-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-392-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:393:            ngx_http_lua_pool_cleanup_file(r->pool, tf->file.fd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-394-            tf->file.fd = NGX_INVALID_FILE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-395-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-396-            dd("temp file cleaned: %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-397-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-398-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-399-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-400-        rb->temp_file = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-401-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-402-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-403-    if (body.len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-404-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-405-        if (rb->bufs) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-406-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-407-            for (cl = rb->bufs; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-408-                if (cl->buf->tag == tag && cl->buf->temporary) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-409-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-410-                    dd("free old request body buffer: size:%d",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-411-                       (int) ngx_buf_size(cl->buf));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-412-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:413:                    ngx_pfree(r->pool, cl->buf->start);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-414-                    cl->buf->tag = (ngx_buf_tag_t) NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-415-                    cl->buf->temporary = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-416-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-417-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-418-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-419-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-420-        rb->bufs = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-421-        rb->buf = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-422-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-423-        dd("request body is set to empty string");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-424-        goto set_header;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-425-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-426-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-427-    if (rb->bufs) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-428-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-429-        for (cl = rb->bufs; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-430-            if (cl->buf->tag == tag && cl->buf->temporary) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-431-                dd("free old request body buffer: size:%d",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-432-                   (int) ngx_buf_size(cl->buf));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-433-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:434:                ngx_pfree(r->pool, cl->buf->start);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-435-                cl->buf->tag = (ngx_buf_tag_t) NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-436-                cl->buf->temporary = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-437-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-438-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-439-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-440-        rb->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-441-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-442-        b = rb->bufs->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-443-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-444-        ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-445-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-446-        b->temporary = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-447-        b->tag = tag;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-448-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:449:        b->start = ngx_palloc(r->pool, body.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-450-        if (b->start == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-451-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-452-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-453-        b->end = b->start + body.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-454-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-455-        b->pos = b->start;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-456-        b->last = ngx_copy(b->pos, body.data, body.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-457-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-458-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-459-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:460:        rb->bufs = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-461-        if (rb->bufs == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-462-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-463-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-464-        rb->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:466:        b = ngx_create_temp_buf(r->pool, body.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-467-        b->tag = tag;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-468-        b->last = ngx_copy(b->pos, body.data, body.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-469-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-470-        rb->bufs->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-471-        rb->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-472-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-473-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-474-set_header:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-475-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-476-    /* override input header Content-Length (value must be null terminated) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-477-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:478:    value.data = ngx_palloc(r->pool, NGX_SIZE_T_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-479-    if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-480-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-481-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-482-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-483-    value.len = ngx_sprintf(value.data, "%uz", body.len) - value.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-484-    value.data[value.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-485-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-486-    dd("setting request Content-Length to %.*s (%d)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-487-       (int) value.len, value.data, (int) body.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-488-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-566-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-567-#if 1
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-568-    tf = rb->temp_file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-569-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-570-    if (tf) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-571-        if (tf->file.fd != NGX_INVALID_FILE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-572-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-573-            dd("cleaning temp file %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-574-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-575-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:576:            ngx_http_lua_pool_cleanup_file(r->pool, tf->file.fd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-577-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-578-            ngx_memzero(tf, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-579-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-580-            tf->file.fd = NGX_INVALID_FILE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-581-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-582-            dd("temp file cleaned: %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-583-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-584-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-585-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-586-        rb->temp_file = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-587-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-588-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-589-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-590-    r->request_body_in_clean_file = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-591-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-592-    r->headers_in.content_length_n = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-593-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:594:    rb->buf = ngx_create_temp_buf(r->pool, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-595-    if (rb->buf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-596-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-597-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-598-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:599:    rb->bufs = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-600-    if (rb->bufs == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-601-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-602-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-603-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-604-    rb->bufs->buf = rb->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-605-    rb->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-606-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-607-    return 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-608-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-609-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-706-    rb = r->request_body;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-707-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-708-    if (rb->temp_file) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-709-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-710-        /* save the last part */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-711-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-712-        if (ngx_http_lua_write_request_body(r, rb->bufs) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-713-            return luaL_error(L, "fail to write file");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-714-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-715-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:716:        b = ngx_calloc_buf(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-717-        if (b == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-718-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-719-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-720-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-721-        b->in_file = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-722-        b->file_pos = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-723-        b->file_last = rb->temp_file->file.offset;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-724-        b->file = &rb->temp_file->file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-725-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-726-        if (rb->bufs->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-727-            rb->bufs->next->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-728-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-729-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-730-            rb->bufs->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-731-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-732-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-733-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-734-    /* override input header Content-Length (value must be null terminated) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-735-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:736:    value.data = ngx_palloc(r->pool, NGX_SIZE_T_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-737-    if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-738-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-739-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-740-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-741-    size = r->headers_in.content_length_n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-742-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-743-    value.len = ngx_sprintf(value.data, "%uz", size) - value.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-744-    value.data[value.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-745-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-746-    dd("setting request Content-Length to %.*s (%d)", (int) value.len,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-825-    ngx_http_lua_check_fake_request(L, r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-826-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-827-    if (r->discard_body) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-828-        return luaL_error(L, "request body already discarded asynchronously");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-829-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-830-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-831-    if (r->request_body == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-832-        return luaL_error(L, "request body not read yet");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-833-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-834-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:835:    name.data = ngx_palloc(r->pool, name.len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-836-    if (name.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-837-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-838-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-839-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-840-    ngx_memcpy(name.data, p, name.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-841-    name.data[name.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-842-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-843-    if (n == 2) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-844-        luaL_checktype(L, 2, LUA_TBOOLEAN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-845-        clean = lua_toboolean(L, 2);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-857-    tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-858-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-859-    if (rb->bufs) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-860-        dd("XXX reusing buf");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-861-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-862-        for (cl = rb->bufs; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-863-            if (cl->buf->tag == tag && cl->buf->temporary) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-864-                dd("free old request body buffer: size:%d",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-865-                   (int) ngx_buf_size(cl->buf));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-866-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:867:                ngx_pfree(r->pool, cl->buf->start);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-868-                cl->buf->tag = (ngx_buf_tag_t) NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-869-                cl->buf->temporary = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-870-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-871-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-872-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-873-        rb->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-874-        b = rb->bufs->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-875-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-876-        ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-877-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-878-        b->tag = tag;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-879-        rb->buf = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-880-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-881-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-882-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-883-        dd("XXX creating new buf");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-884-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:885:        rb->bufs = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-886-        if (rb->bufs == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-887-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-888-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-889-        rb->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-890-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:891:        b = ngx_calloc_buf(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-892-        if (b == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-893-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-894-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-895-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-896-        b->tag = tag;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-897-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-898-        rb->bufs->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-899-        rb->buf = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-900-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-901-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-904-    /* just make r->request_body->temp_file a bare stub */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-905-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-906-    tf = rb->temp_file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-907-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-908-    if (tf) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-909-        if (tf->file.fd != NGX_INVALID_FILE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-910-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-911-            dd("cleaning temp file %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-912-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-913-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:914:            ngx_http_lua_pool_cleanup_file(r->pool, tf->file.fd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-915-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-916-            ngx_memzero(tf, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-917-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-918-            tf->file.fd = NGX_INVALID_FILE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-919-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-920-            dd("temp file cleaned: %.*s", (int) tf->file.name.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-921-               tf->file.name.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-922-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-923-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-924-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-925-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:926:        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-927-        if (tf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-928-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-929-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-930-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-931-        tf->file.fd = NGX_INVALID_FILE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-932-        rb->temp_file = tf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-933-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-934-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-935-    /* read the file info and construct an in-file buf */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-936-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-970-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-971-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-972-        r->request_body->bufs = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-973-        r->request_body->buf = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-974-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-975-        goto set_header;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-976-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-977-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-978-    /* register file cleanup hook */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-979-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:980:    cln = ngx_pool_cleanup_add(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-981-                               sizeof(ngx_pool_cleanup_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-982-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-983-    if (cln == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-984-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-985-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-986-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-987-    cln->handler = clean ? ngx_pool_delete_file : ngx_pool_cleanup_file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-988-    clnf = cln->data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-989-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-990-    clnf->fd = of.fd;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-991-    clnf->name = name.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:992:    clnf->log = r->pool->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-993-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-994-    b->file = &tf->file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-995-    if (b->file == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-996-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-997-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-998-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-999-    dd("XXX file size: %d", (int) of.size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1000-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1001-    b->file_pos = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1002-    b->file_last = of.size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1003-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1004-    b->in_file = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1005-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1006-    dd("buf file: %p, f:%u", b->file, b->in_file);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1007-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1008-set_header:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1009-    /* override input header Content-Length (value must be null terminated) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1010-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:1011:    value.data = ngx_palloc(r->pool, NGX_OFF_T_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1012-    if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1013-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1014-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1015-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1016-    value.len = ngx_sprintf(value.data, "%O", of.size) - value.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1017-    value.data[value.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1018-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1019-    r->headers_in.content_length_n = of.size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1020-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1021-    if (r->headers_in.content_length) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1041-ngx_http_lua_write_request_body(ngx_http_request_t *r, ngx_chain_t *body)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1042-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1043-    ssize_t                    n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1044-    ngx_temp_file_t           *tf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1045-    ngx_http_request_body_t   *rb;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1046-    ngx_http_core_loc_conf_t  *clcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1047-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1048-    rb = r->request_body;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1049-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1050-    if (rb->temp_file == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:1051:        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1052-        if (tf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1053-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1054-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1055-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1056-        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1057-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1058-        tf->file.fd = NGX_INVALID_FILE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1059-        tf->file.log = r->connection->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1060-        tf->path = clcf->client_body_temp_path;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:1061:        tf->pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1062-        tf->warn = "a client request body is buffered to a temporary file";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1063-        tf->log_level = r->request_body_file_log_level;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1064-        tf->persistent = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1065-        tf->clean = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1066-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1067-        if (r->request_body_file_group_access) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1068-            tf->access = 0660;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1069-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1070-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1071-        rb->temp_file = tf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1072-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1073-        if (body == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1074-            /* empty body with r->request_body_in_file_only */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1075-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c:1076:            if (ngx_create_temp_file(&tf->file, tf->path, tf->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1077-                                     tf->persistent, tf->clean, tf->access)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1078-                != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1079-            {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1080-                return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1081-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1082-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1083-            return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1084-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1085-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_body.c-1086-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-187-    ngx_http_lua_loc_conf_t   *llcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-188-    ngx_http_lua_main_conf_t  *lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-189-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-190-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-191-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-192-    /* Eval nginx variables in code path string first */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-193-    if (ngx_http_complex_value(r, &llcf->access_src, &eval_src) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-194-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-195-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-196-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c:197:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-198-                                           eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-199-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-200-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-201-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-202-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-203-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-204-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-205-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-206-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_accessby.c-207-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-403-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-404-    if (llcf->transform_underscores_in_resp_headers) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-405-        /* replace "_" with "-" */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-406-        for (i = 0; i < len; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-407-            if (p[i] == '_') {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-408-                p[i] = '-';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-409-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-410-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-411-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-412-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:413:    key.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-414-    if (key.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-415-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-416-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-417-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-418-    ngx_memcpy(key.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-419-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-420-    key.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-421-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-422-    key.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-423-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-456-                      "set ngx.header.HEADER after sending out "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-457-                      "response headers");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-458-        return 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-459-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-460-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-461-    /* we skip the first argument that is the table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-462-    p = (u_char *) luaL_checklstring(L, 2, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-463-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-464-    dd("key: %.*s, len %d", (int) len, p, (int) len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:466:    key.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-467-    if (key.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-468-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-469-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-470-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-471-    ngx_memcpy(key.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-472-    key.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-473-    key.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-474-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-475-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-476-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-505-            value.data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-506-            value.len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-507-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-508-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-509-            for (i = 1; i <= n; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-510-                dd("header value table index %d", (int) i);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-511-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-512-                lua_rawgeti(L, 3, i);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-513-                p = (u_char *) luaL_checklstring(L, -1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-514-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:515:                value.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-516-                if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-517-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-518-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-519-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-520-                ngx_memcpy(value.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-521-                value.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-522-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-523-                rc = ngx_http_lua_set_output_header(r, key, value,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-524-                                                    i == 1 /* override */);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-525-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-528-                                      "failed to set header %s (error: %d)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-529-                                      key.data, (int) rc);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-530-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-531-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-532-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-533-            return 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-534-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-535-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-536-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-537-        p = (u_char *) luaL_checklstring(L, 3, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:538:        value.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-539-        if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-540-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-541-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-542-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-543-        ngx_memcpy(value.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-544-        value.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-545-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-546-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-547-    dd("key: %.*s, value: %.*s",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-548-       (int) key.len, key.data, (int) value.len, value.data);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-609-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-610-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-611-    /* replace "_" with "-" */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-612-    for (i = 0; i < len; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-613-        if (p[i] == '_') {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-614-            p[i] = '-';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-615-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-616-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-617-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-618-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:619:    key.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-620-    if (key.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-621-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-622-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-623-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-624-    ngx_memcpy(key.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-625-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-626-    key.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-627-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-628-    key.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-629-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-643-                   lua_gettop(L));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-644-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-645-                lua_rawgeti(L, 2, i);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-646-                p = (u_char *) luaL_checklstring(L, -1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-647-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-648-                /*
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-649-                 * we also copy the trailling '\0' char here because nginx
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-650-                 * header values must be null-terminated
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-651-                 * */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-652-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:653:                value.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-654-                if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-655-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-656-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-657-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-658-                ngx_memcpy(value.data, p, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-659-                value.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-660-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-661-                rc = ngx_http_lua_set_input_header(r, key, value,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-662-                                                   i == 1 /* override */);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-663-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-672-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-673-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-674-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-675-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-676-        /*
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-677-         * we also copy the trailling '\0' char here because nginx
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-678-         * header values must be null-terminated
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-679-         * */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-680-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-681-        p = (u_char *) luaL_checklstring(L, 2, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:682:        value.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-683-        if (value.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-684-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-685-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-686-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-687-        ngx_memcpy(value.data, p, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-688-        value.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-689-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-690-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-691-    dd("key: %.*s, value: %.*s",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-692-       (int) key.len, key.data, (int) value.len, value.data);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-728-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-729-    if (llcf->transform_underscores_in_resp_headers) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-730-        /* replace "_" with "-" */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-731-        for (i = 0; i < len; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-732-            if (p[i] == '_') {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-733-                p[i] = '-';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-734-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-735-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-736-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-737-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c:738:    key.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-739-    if (key.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-740-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-741-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-742-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-743-    ngx_memcpy(key.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-744-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-745-    key.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-746-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-747-    key.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers.c-748-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-33-        return luaL_error(L, "only one argument expected but got %d", n);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-34-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-35-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-36-    arg_url.data = (u_char *) luaL_checklstring(L, 1, &arg_url.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-37-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-38-    r = ngx_http_lua_get_req(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-39-    if (r == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-40-        return luaL_error(L, "request object not found");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-41-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-42-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c:43:    url.data = ngx_pcalloc(r->pool, arg_url.len+1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-44-    if (url.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-45-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-46-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-47-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-48-    (void)ngx_copy(url.data, arg_url.data, arg_url.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-49-    url.data[arg_url.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-50-    url.len = arg_url.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-51-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-52-    if (ngx_http_proxy_update_reroute_location(r, &url) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_req_reroute.c-53-        return luaL_error(L, "cant update proxy location");
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-170-    ngx_http_lua_loc_conf_t         *llcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-171-    char                            *err;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-172-    ngx_str_t                        eval_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-173-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-174-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-175-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-176-    if (ngx_http_complex_value(r, &llcf->log_src, &eval_src) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-177-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-178-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-179-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c:180:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-181-                                           eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-182-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-183-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-184-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-185-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-186-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-187-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-188-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-189-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-190-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-219-    /*  set Lua VM panic handler */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-220-    lua_atpanic(L, ngx_http_lua_atpanic);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-221-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-222-    NGX_LUA_EXCEPTION_TRY {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-223-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-224-        /* initialize nginx context in Lua VM, code chunk at stack top sp = 1 */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-225-        ngx_http_lua_log_by_lua_env(L, r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-226-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-227-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-228-        /* XXX: work-around to nginx regex subsystem */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c:229:        old_pool = ngx_http_lua_pcre_malloc_init(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-230-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-231-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-232-        lua_pushcfunction(L, ngx_http_lua_traceback);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-233-        lua_insert(L, 1);  /* put it under chunk and args */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-234-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-235-        /*  protected call user code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-236-        rc = lua_pcall(L, 0, 1, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-237-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-238-        lua_remove(L, 1);  /* remove traceback function */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_logby.c-239-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-189-    ngx_http_lua_loc_conf_t         *llcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-190-    char                            *err;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-191-    ngx_str_t                        eval_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-192-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-193-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-194-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-195-    if (ngx_http_complex_value(r, &llcf->rewrite_src, &eval_src) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-196-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-197-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-198-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c:199:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-200-                                           eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-201-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-202-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-203-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-204-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-205-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-206-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-207-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-208-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_rewriteby.c-209-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-494-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-495-    return NGX_CONF_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-496-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-497-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-498-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-499-static void *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-500-ngx_http_lua_create_main_conf(ngx_conf_t *cf)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-501-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-502-    ngx_http_lua_main_conf_t    *lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-503-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c:504:    lmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_lua_main_conf_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-505-    if (lmcf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-506-        return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-507-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-508-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-509-    /* set by ngx_pcalloc:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-510-     *      lmcf->lua = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-511-     *      lmcf->lua_path = { 0, NULL };
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-512-     *      lmcf->lua_cpath = { 0, NULL };
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-513-     *      lmcf->pending_timers = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-514-     *      lmcf->running_timers = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-521-     *      lmcf->preload_hooks = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-522-     *      lmcf->requires_header_filter = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-523-     *      lmcf->requires_body_filter = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-524-     *      lmcf->requires_capture_filter = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-525-     *      lmcf->requires_rewrite = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-526-     *      lmcf->requires_access = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-527-     *      lmcf->requires_log = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-528-     *      lmcf->requires_shm = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-529-     */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-530-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c:531:    lmcf->pool = cf->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-532-    lmcf->max_pending_timers = NGX_CONF_UNSET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-533-    lmcf->max_running_timers = NGX_CONF_UNSET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-534-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-535-    lmcf->regex_cache_max_entries = NGX_CONF_UNSET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-536-    lmcf->regex_match_limit = NGX_CONF_UNSET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-537-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-538-    lmcf->postponed_to_rewrite_phase_end = NGX_CONF_UNSET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-539-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-540-    dd("nginx Lua module main config structure initialized!");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-541-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-568-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-569-    return NGX_CONF_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-570-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-571-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-572-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-573-static void *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-574-ngx_http_lua_create_loc_conf(ngx_conf_t *cf)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-575-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-576-    ngx_http_lua_loc_conf_t *conf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-577-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c:578:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_lua_loc_conf_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-579-    if (conf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-580-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-581-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-582-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-583-    /* set by ngx_pcalloc:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-584-     *      conf->access_src  = {{ 0, NULL }, NULL, NULL, NULL};
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-585-     *      conf->access_src_key = NULL
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-586-     *      conf->rewrite_src = {{ 0, NULL }, NULL, NULL, NULL};
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-587-     *      conf->rewrite_src_key = NULL
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-588-     *      conf->rewrite_handler = NULL;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-716-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-717-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-718-static char *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-719-ngx_http_lua_init_vm(ngx_conf_t *cf, ngx_http_lua_main_conf_t *lmcf)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-720-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-721-    ngx_pool_cleanup_t              *cln;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-722-    ngx_http_lua_preload_hook_t     *hook;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-723-    lua_State                       *L;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-724-    ngx_uint_t                       i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-725-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c:726:    /* add new cleanup handler to config mem pool */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c:727:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-728-    if (cln == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-729-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-730-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-731-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-732-    /* create new Lua VM instance */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-733-    lmcf->lua = ngx_http_lua_new_state(cf, lmcf);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-734-    if (lmcf->lua == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-735-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-736-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_module.c-737-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-141-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-142-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-143-    if (size == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-144-        /* do nothing for empty strings */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-145-        lua_pushinteger(L, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-146-        return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-147-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-148-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-149-    tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-150-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c:151:    cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-152-                                          &ctx->free_bufs, size, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-153-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-154-    if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-155-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-156-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-157-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-158-    b = cl->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-159-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-160-    for (i = 1; i <= nargs; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-161-        type = lua_type(L, i);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-224-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-225-        lua_pushliteral(L, "nginx output filter error");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-226-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-227-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-228-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-229-    dd("downstream write: %d, buf len: %d", (int) rc,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-230-       (int) (b->last - b->pos));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-231-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-232-    if (!ctx->out) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-233-#if nginx_version >= 1001004
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c:234:        ngx_chain_update_chains(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-235-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-236-        ngx_chain_update_chains(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-237-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-238-                                &ctx->free_bufs, &ctx->busy_bufs, &cl, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-239-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-240-        dd("out lua buf tag: %p, buffered: %x, busy bufs: %p",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-241-           &ngx_http_lua_module, (int) r->connection->buffered,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-242-           ctx->busy_bufs);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-243-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-244-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-512-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-513-        lua_pushliteral(L, "buffering");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-514-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-515-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-516-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-517-    if (ctx->flush_buf) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-518-        cl = ctx->flush_buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-519-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-520-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-521-        dd("allocating new flush buf");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c:522:        buf = ngx_calloc_buf(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-523-        if (buf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-524-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-525-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-526-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-527-        buf->flush = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-528-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-529-        dd("allocating new flush chain");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c:530:        cl = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-531-        if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-532-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-533-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-534-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-535-        cl->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-536-        cl->buf = buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-537-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-538-        ctx->flush_buf = cl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-539-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_output.c-540-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-176-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-177-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-178-                   "lua location capture, uri:\"%V\" c:%ud", &r->uri,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-179-                   r->main->count);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-180-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-181-    sr_statuses_len = nsubreqs * sizeof(ngx_int_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-182-    sr_headers_len  = nsubreqs * sizeof(ngx_http_headers_out_t *);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-183-    sr_bodies_len   = nsubreqs * sizeof(ngx_str_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-184-    sr_flags_len    = nsubreqs * sizeof(uint8_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-185-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:186:    p = ngx_pcalloc(r->pool, sr_statuses_len + sr_headers_len +
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-187-                    sr_bodies_len + sr_flags_len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-188-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-189-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-190-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-191-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-192-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-193-    coctx->sr_statuses = (void *) p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-194-    p += sr_statuses_len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-195-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-196-    coctx->sr_headers = (void *) p;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-410-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-411-            lua_getfield(L, 4, "body");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-412-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-413-            type = lua_type(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-414-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-415-            if (type != LUA_TNIL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-416-                if (type != LUA_TSTRING && type != LUA_TNUMBER) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-417-                    return luaL_error(L, "Bad http request body");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-418-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-419-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:420:                body = ngx_pcalloc(r->pool, sizeof(ngx_http_request_body_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-421-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-422-                if (body == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-423-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-424-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-425-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-426-                q = (u_char *) lua_tolstring(L, -1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-427-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-428-                dd("request body: [%.*s]", (int) len, q);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-429-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-430-                if (len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:431:                    b = ngx_create_temp_buf(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-432-                    if (b == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-433-                        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-434-                    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-435-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-436-                    b->last = ngx_copy(b->last, q, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-437-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:438:                    body->bufs = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-439-                    if (body->bufs == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-440-                        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-441-                    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-442-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-443-                    body->bufs->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-444-                    body->bufs->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-445-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-446-                    body->buf = b;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-447-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-448-            }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-458-            dd("queries query uri ctx?: %d", lua_gettop(L));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-459-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-460-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-461-            method = NGX_HTTP_GET;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-462-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-463-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-464-        /* stack: queries query uri ctx? */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-466-        p = (u_char *) luaL_checklstring(L, 3, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-467-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:468:        uri.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-469-        if (uri.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-470-            return luaL_error(L, "memory allocation error");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-471-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-472-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-473-        ngx_memcpy(uri.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-474-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-475-        uri.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-476-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-477-        args.data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-478-        args.len = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-481-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-482-        rc = ngx_http_parse_unsafe_uri(r, &uri, &args, &flags);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-483-        if (rc != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-484-            dd("rc = %d", (int) rc);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-485-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-486-            return luaL_error(L, "unsafe uri in argument #1: %s", p);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-487-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-488-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-489-        if (args.len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-490-            if (extra_args.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:491:                p = ngx_palloc(r->pool, extra_args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-492-                if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-493-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-494-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-495-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-496-                ngx_memcpy(p, extra_args.data, extra_args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-497-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-498-                args.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-499-                args.len = extra_args.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-500-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-501-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-502-        } else if (extra_args.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-503-            /* concatenate the two parts of args together */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-504-            len = args.len + (sizeof("&") - 1) + extra_args.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-505-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:506:            p = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-507-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-508-                return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-509-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-510-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-511-            q = ngx_copy(p, args.data, args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-512-            *q++ = '&';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-513-            ngx_memcpy(q, extra_args.data, extra_args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-514-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-515-            args.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-516-            args.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-517-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-518-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:519:        p = ngx_pnalloc(r->pool, sizeof(ngx_http_post_subrequest_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-520-                        + sizeof(ngx_http_lua_ctx_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-521-                        + sizeof(ngx_http_lua_post_subrequest_data_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-522-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-523-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-524-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-525-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-526-        psr = (ngx_http_post_subrequest_t *) p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-527-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-528-        p += sizeof(ngx_http_post_subrequest_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-529-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-720-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-721-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-722-    if (!(vars_action & NGX_HTTP_LUA_SHARE_ALL_VARS)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-723-        /* we do not inherit the parent request's variables */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-724-        cmcf = ngx_http_get_module_main_conf(sr, ngx_http_core_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-725-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-726-        size = cmcf->variables.nelts * sizeof(ngx_http_variable_value_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-727-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-728-        if (vars_action & NGX_HTTP_LUA_COPY_ALL_VARS) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-729-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:730:            sr->variables = ngx_palloc(sr->pool, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-731-            if (sr->variables == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-732-                return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-733-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-734-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-735-            ngx_memcpy(sr->variables, r->variables, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-736-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-737-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-738-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-739-            /* we do not inherit the parent request's variables */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-740-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:741:            sr->variables = ngx_pcalloc(sr->pool, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-742-            if (sr->variables == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-743-                return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-744-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-745-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-746-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-747-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-748-    return ngx_http_lua_subrequest_add_extra_vars(sr, extra_vars);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-749-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-750-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-751-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-775-    variables_hash = &cmcf->variables_hash;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-776-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-777-    var = extra_vars->elts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-778-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-779-    for (i = 0; i < extra_vars->nelts; i++, var++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-780-        /* copy the variable's name and value because they are allocated
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-781-         * by the lua VM */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-782-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-783-        len = var->key.len + var->value.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-784-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:785:        p = ngx_pnalloc(sr->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-786-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-787-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-788-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-789-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-790-        name.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-791-        name.len = var->key.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-792-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-793-        p = ngx_copy(p, var->key.data, var->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-794-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-795-        hash = ngx_hash_strlow(name.data, name.data, name.len);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-802-        v = ngx_hash_find(variables_hash, hash, name.data, name.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-803-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-804-        if (v) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-805-            if (!(v->flags & NGX_HTTP_VAR_CHANGEABLE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-806-                ngx_log_error(NGX_LOG_ERR, sr->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-807-                              "variable \"%V\" not changeable", &name);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-808-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-809-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-810-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-811-            if (v->set_handler) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:812:                vv = ngx_palloc(sr->pool, sizeof(ngx_http_variable_value_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-813-                if (vv == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-814-                    return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-815-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-816-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-817-                vv->valid = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-818-                vv->not_found = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-819-                vv->no_cacheable = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-820-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-821-                vv->data = val;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-822-                vv->len = len;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-867-    ngx_keyval_t        *var;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-868-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-869-    if (table < 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-870-        table = lua_gettop(L) + table + 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-871-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-872-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-873-    vars = *varsp;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-874-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-875-    if (vars == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-876-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:877:        vars = ngx_array_create(r->pool, 4, sizeof(ngx_keyval_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-878-        if (vars == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-879-            dd("here");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-880-            luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-881-            return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-882-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-883-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-884-        *varsp = vars;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-885-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-886-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-887-    lua_pushnil(L);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1012-        /*  ignore all non-memory buffers */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1013-        len += cl->buf->last - cl->buf->pos;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1014-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1015-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1016-    body_str->len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1017-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1018-    if (len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1019-        body_str->data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1020-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1021-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1022:        p = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1023-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1024-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1025-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1026-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1027-        body_str->data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1028-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1029-        /* copy from and then free the data buffers */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1030-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1031-        for (cl = ctx->body; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1032-            p = ngx_copy(p, cl->buf->pos, cl->buf->last - cl->buf->pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1033-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1034-            cl->buf->last = cl->buf->pos;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1035-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1036-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1037-            dd("free body chain link buf ASAP");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1038:            ngx_pfree(r->pool, cl->buf->start);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1039-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1040-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1041-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1042-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1043-    if (ctx->body) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1044-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1045-#if defined(nginx_version) && nginx_version >= 1001004
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1046:        ngx_chain_update_chains(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1047-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1048-        ngx_chain_update_chains(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1049-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1050-                                &pr_ctx->free_bufs, &pr_ctx->busy_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1051-                                &ctx->body,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1052-                                (ngx_buf_tag_t) &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1053-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1054-        dd("free bufs: %p", pr_ctx->free_bufs);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1055-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1056-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1098-ngx_http_lua_set_content_length_header(ngx_http_request_t *r, off_t len)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1099-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1100-    ngx_table_elt_t                 *h, *header;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1101-    u_char                          *p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1102-    ngx_list_part_t                 *part;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1103-    ngx_http_request_t              *pr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1104-    ngx_uint_t                       i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1105-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1106-    r->headers_in.content_length_n = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1107-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1108:    if (ngx_list_init(&r->headers_in.headers, r->pool, 20,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1109-                      sizeof(ngx_table_elt_t)) != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1110-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1111-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1112-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1113-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1114-    h = ngx_list_push(&r->headers_in.headers);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1115-    if (h == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1116-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1117-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1118-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1119-    h->key = ngx_http_lua_content_length_header_key;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1120:    h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1121-    if (h->lowcase_key == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1122-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1123-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1124-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1125-    ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1126-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1127-    r->headers_in.content_length = h;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1128-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1129:    p = ngx_palloc(r->pool, NGX_OFF_T_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1130-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1131-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1132-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1133-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1134-    h->value.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1135-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1136-    h->value.len = ngx_sprintf(h->value.data, "%O", len) - h->value.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1137-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1138-    h->hash = ngx_hash(ngx_hash(ngx_hash(ngx_hash(ngx_hash(ngx_hash(ngx_hash(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1139-            ngx_hash(ngx_hash(ngx_hash(ngx_hash(ngx_hash(
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1244-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1245-        /*  copy captured body */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1246-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1247-        body_str = &coctx->sr_bodies[index];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1248-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1249-        lua_pushlstring(co, (char *) body_str->data, body_str->len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1250-        lua_setfield(co, -2, "body");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1251-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1252-        if (body_str->data) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1253-            dd("free body buffer ASAP");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1254:            ngx_pfree(r->pool, body_str->data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1255-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1256-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1257-        /* copy captured headers */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1258-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1259-        lua_newtable(co); /* res.header */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1260-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1261-        sr_headers = coctx->sr_headers[index];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1262-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1263-        dd("saving subrequest response headers");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1264-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1425-#if defined(NGX_DTRACE) && NGX_DTRACE
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1426-        ngx_http_probe_subrequest_cycle(r, uri, args);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1427-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1428-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1429-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1430-                      "subrequests cycle while processing \"%V\"", uri);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1431-        r->main->subrequests = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1432-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1433-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1434-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1435:    sr = ngx_pcalloc(r->pool, sizeof(ngx_http_request_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1436-    if (sr == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1437-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1438-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1439-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1440-    sr->signature = NGX_HTTP_MODULE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1441-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1442-    c = r->connection;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1443-    sr->connection = c;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1444-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1445:    sr->ctx = ngx_pcalloc(r->pool, sizeof(void *) * ngx_http_max_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1446-    if (sr->ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1447-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1448-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1449-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1450:    if (ngx_list_init(&sr->headers_out.headers, r->pool, 20,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1451-                      sizeof(ngx_table_elt_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1452-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1453-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1454-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1455-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1456-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1457-    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1458-    sr->main_conf = cscf->ctx->main_conf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1459-    sr->srv_conf = cscf->ctx->srv_conf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1460-    sr->loc_conf = cscf->ctx->loc_conf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1461-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1462:    sr->pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1463-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1464-    sr->headers_in = r->headers_in;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1466-    ngx_http_clear_content_length(sr);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1467-    ngx_http_clear_accept_ranges(sr);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1468-    ngx_http_clear_last_modified(sr);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1469-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1470-    sr->request_body = r->request_body;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1471-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1472-#ifdef HAVE_ALLOW_REQUEST_BODY_UPDATING_PATCH
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1552-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1553-    coctx = ctx->cur_co_ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1554-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1555-    dd("nsubreqs: %d", (int) coctx->nsubreqs);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1556-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1557-    ngx_http_lua_handle_subreq_responses(r, ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1558-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1559-    dd("free sr_statues/headers/bodies memory ASAP");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1560-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1561-#if 1
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1562:    ngx_pfree(r->pool, coctx->sr_statuses);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1563-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1564-    coctx->sr_statuses = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1565-    coctx->sr_headers = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1566-    coctx->sr_bodies = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1567-    coctx->sr_flags = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1568-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1569-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1570-    c = r->connection;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1571-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1572-    rc = ngx_http_lua_run_thread(lmcf->lua, r, ctx, coctx->nsubreqs);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1614-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1615-    r->connection->data = r->parent;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1616-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1617-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1618-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1619-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1620-ngx_http_post_request_to_head(ngx_http_request_t *r)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1621-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1622-    ngx_http_posted_request_t  *pr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1623-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1624:    pr = ngx_palloc(r->pool, sizeof(ngx_http_posted_request_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1625-    if (pr == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1626-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1627-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1628-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1629-    pr->request = r;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1630-    pr->next = r->main->posted_requests;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1631-    r->main->posted_requests = pr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1632-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1633-    return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1634-}
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1643-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1644-    tf = r->request_body->temp_file;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1645-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1646-    if (!tf->persistent || !tf->clean) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1647-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1648-                      "the request body was not read by ngx_lua");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1649-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1650-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1651-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1652-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1653:    body = ngx_palloc(r->pool, sizeof(ngx_http_request_body_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1654-    if (body == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1655-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1656-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1657-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1658-    ngx_memcpy(body, r->request_body, sizeof(ngx_http_request_body_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1659-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c:1660:    body->temp_file = ngx_palloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1661-    if (body->temp_file == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1662-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1663-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1664-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1665-    ngx_memcpy(body->temp_file, tf, sizeof(ngx_temp_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1666-    dd("file fd: %d", body->temp_file->file.fd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1667-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1668-    r->request_body = body;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1669-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_subrequest.c-1670-    return NGX_OK;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-190-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-191-    ngx_http_lua_check_context(L, ctx, NGX_HTTP_LUA_CONTEXT_REWRITE
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-192-                               | NGX_HTTP_LUA_CONTEXT_ACCESS
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-193-                               | NGX_HTTP_LUA_CONTEXT_CONTENT
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-194-                               | NGX_HTTP_LUA_CONTEXT_TIMER);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-195-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-196-    luaL_checktype(L, 1, LUA_TTABLE);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-197-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-198-    p = (u_char *) luaL_checklstring(L, 2, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-199-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c:200:    host.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-201-    if (host.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-202-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-203-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-204-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-205-    host.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-206-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-207-    ngx_memcpy(host.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-208-    host.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-209-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-210-    if (n == 3) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-281-        u->read_timeout = u->conf->read_timeout;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-282-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-283-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-284-    ngx_memzero(&url, sizeof(ngx_url_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-285-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-286-    url.url.len = host.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-287-    url.url.data = host.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-288-    url.default_port = port;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-289-    url.no_resolve = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-290-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c:291:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-292-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-293-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-294-        if (url.err) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-295-            lua_pushfstring(L, "failed to parse host name \"%s\": %s",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-296-                            host.data, url.err);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-297-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-298-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-299-            lua_pushfstring(L, "failed to parse host name \"%s\"", host.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-300-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-301-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-302-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-303-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-304-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c:305:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-306-    if (u->resolved == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-307-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-308-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-309-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-310-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-311-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-312-                       "lua udp socket network address given directly");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-313-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-314-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-315-        u->resolved->socklen = url.addrs[0].socklen;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-510-        i = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-511-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-512-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-513-        i = ngx_random() % ur->naddrs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-514-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-515-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-516-    dd("selected addr index: %d", (int) i);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-517-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-518-    len = NGX_INET_ADDRSTRLEN + sizeof(":65536") - 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-519-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c:520:    p = ngx_pnalloc(r->pool, len + sizeof(struct sockaddr_in));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-521-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-522-        ngx_resolve_name_done(ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-523-        u->ft_type |= NGX_HTTP_LUA_SOCKET_FT_RESOLVER;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-524-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-525-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-526-        lua_pushliteral(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-527-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-528-        if (waiting) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-529-            ngx_http_run_posted_requests(c);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-530-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-630-    /* rc == NGX_OK */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-631-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-632-    c = uc->connection;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-633-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-634-    c->data = u;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-635-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-636-    c->write->handler = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-637-    c->read->handler = ngx_http_lua_socket_udp_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-638-    c->read->resolver = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-639-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c:640:    c->pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-641-    c->log = r->connection->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-642-    c->read->log = c->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-643-    c->write->log = c->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-644-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-645-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-646-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-647-    coctx = ctx->cur_co_ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-648-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-649-    coctx->data = u;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_udp.c-650-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-38-        return luaL_error(L, "no request object found");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-39-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-40-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-41-    ngx_http_lua_check_fake_request(L, r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-42-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-43-    switch (lua_type(L, 1)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-44-    case LUA_TNUMBER:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-45-    case LUA_TSTRING:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-46-        p = (u_char *) lua_tolstring(L, 1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-47-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c:48:        args.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-49-        if (args.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-50-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-51-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-52-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-53-        ngx_memcpy(args.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-54-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-55-        args.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-56-        break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-57-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-58-    case LUA_TTABLE:
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-107-        return luaL_error(L, "no request object found");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-108-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-109-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-110-    ngx_http_lua_check_fake_request(L, r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-111-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-112-    lua_createtable(L, 0, 4);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-113-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-114-    /* we copy r->args over to buf to simplify
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-115-     * unescaping query arg keys and values */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-116-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c:117:    buf = ngx_palloc(r->pool, r->args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-118-    if (buf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-119-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-120-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-121-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-122-    ngx_memcpy(buf, r->args.data, r->args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-123-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-124-    last = buf + r->args.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-125-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-126-    retval = ngx_http_lua_parse_args(L, buf, last, max);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-127-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c:128:    ngx_pfree(r->pool, buf);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-129-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-130-    return retval;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-131-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-132-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-133-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-134-static int
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-135-ngx_http_lua_ngx_req_get_post_args(lua_State *L)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-136-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-137-    ngx_http_request_t          *r;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-138-    u_char                      *buf;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-188-    /* we copy r->request_body->bufs over to buf to simplify
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-189-     * unescaping query arg keys and values */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-190-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-191-    len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-192-    for (cl = r->request_body->bufs; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-193-        len += cl->buf->last - cl->buf->pos;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-194-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-195-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-196-    dd("post body length: %d", (int) len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-197-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c:198:    buf = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-199-    if (buf == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-200-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-201-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-202-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-203-    p = buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-204-    for (cl = r->request_body->bufs; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-205-        p = ngx_copy(p, cl->buf->pos, cl->buf->last - cl->buf->pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-206-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-207-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-208-    dd("post body: %.*s", (int) len, buf);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-209-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-210-    last = buf + len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-211-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-212-    retval = ngx_http_lua_parse_args(L, buf, last, max);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-213-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c:214:    ngx_pfree(r->pool, buf);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-215-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-216-    return retval;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-217-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-218-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-219-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-220-int
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-221-ngx_http_lua_parse_args(lua_State *L, u_char *buf, u_char *last, int max)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-222-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-223-    u_char                      *p, *q;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_args.c-224-    u_char                      *src, *dst;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-74-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-75-            ngx_http_lua_check_context(L, ctx, NGX_HTTP_LUA_CONTEXT_REWRITE);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-76-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-77-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-78-                           "lua set uri jump to \"%*s\"", len, p);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-79-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-80-            ngx_http_lua_check_if_abortable(L, ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-81-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-82-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-83-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c:84:    r->uri.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-85-    if (r->uri.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-86-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-87-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-88-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-89-    ngx_memcpy(r->uri.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-90-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-91-    r->uri.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-92-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-93-    r->internal = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_uri.c-94-    r->valid_unparsed_uri = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-205-    if (value->len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-206-        h->hash = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-207-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-208-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-209-        h->hash = hv->hash;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-210-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-211-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-212-    h->key = hv->key;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-213-    h->value = *value;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-214-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c:215:    h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-216-    if (h->lowcase_key == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-217-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-218-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-219-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-220-    ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-221-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-222-    if (output_header) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-223-        *output_header = h;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-224-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-225-        while (r != r->main) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-407-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-408-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-409-ngx_http_set_cookie_header(ngx_http_request_t *r,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-410-    ngx_http_lua_header_val_t *hv, ngx_str_t *value)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-411-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-412-    ngx_table_elt_t  **cookie, *h;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-413-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-414-    if (!hv->no_override && r->headers_in.cookies.nelts > 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-415-        ngx_array_destroy(&r->headers_in.cookies);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-416-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c:417:        if (ngx_array_init(&r->headers_in.cookies, r->pool, 2,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-418-                           sizeof(ngx_table_elt_t *))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-419-            != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-420-        {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-421-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-422-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-423-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-424-        dd("clear headers in cookies: %d", (int) r->headers_in.cookies.nelts);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-425-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-426-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-427-#if 1
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-428-    if (r->headers_in.cookies.nalloc == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c:429:        if (ngx_array_init(&r->headers_in.cookies, r->pool, 2,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-430-                           sizeof(ngx_table_elt_t *))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-431-            != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-432-        {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-433-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-434-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-435-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-436-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-437-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-438-    if (ngx_http_set_header_helper(r, hv, value, &h) == NGX_ERROR) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-439-        return NGX_ERROR;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-595-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-596-        if (cur == l->last) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-597-            l->nalloc = cur->nelts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-598-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-599-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-600-        return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-601-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-602-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-603-    dd("the middle entry in the part");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-604-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c:605:    new = ngx_palloc(l->pool, sizeof(ngx_list_part_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-606-    if (new == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-607-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-608-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-609-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-610-    new->elts = &data[i + 1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-611-    new->nelts = cur->nelts - i - 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-612-    new->next = cur->next;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-613-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-614-    cur->nelts = i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_in.c-615-    cur->next = new;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-92-    size_t           len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-93-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-94-    ngx_pool_t      *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-95-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-96-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-97-    dd("initialize nginx context in Lua VM, code chunk at stack top  sp = 1");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-98-    ngx_http_lua_body_filter_by_lua_env(L, r, in);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-99-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-100-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-101-    /* XXX: work-around to nginx regex subsystem */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:102:    old_pool = ngx_http_lua_pcre_malloc_init(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-103-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-104-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-105-    lua_pushcfunction(L, ngx_http_lua_traceback);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-106-    lua_insert(L, 1);  /* put it under chunk and args */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-107-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-108-    dd("protected call user code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-109-    rc = lua_pcall(L, 0, 1, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-110-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-111-    lua_remove(L, 1);  /* remove traceback function */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-112-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-206-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-207-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-208-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-209-    /* Eval nginx variables in code path string first */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-210-    if (ngx_http_complex_value(r, &llcf->body_filter_src, &eval_src)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-211-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-212-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-213-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-214-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-215-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:216:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-217-                                           eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-218-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-219-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-220-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-221-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-222-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-223-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-224-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-225-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-226-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-341-    /* in != out */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-342-    rc = ngx_http_next_body_filter(r, out);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-343-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-344-    if (rc == NGX_ERROR) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-345-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-346-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-347-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-348-    tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-349-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-350-#if nginx_version >= 1001004
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:351:    ngx_chain_update_chains(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-352-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-353-    ngx_chain_update_chains(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-354-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-355-                            &ctx->free_bufs, &ctx->busy_bufs, &out, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-356-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-357-    return rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-358-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-359-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-360-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-361-ngx_int_t
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-500-                        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-501-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-502-                        break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-503-                    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-504-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-505-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-506-            } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-507-                tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-508-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-509-                cl = ngx_http_lua_chains_get_free_buf(r->connection->log,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:510:                                                      r->pool, &ctx->free_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-511-                                                      0, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-512-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-513-                if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-514-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-515-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-516-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-517-                if (r == r->main) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-518-                    cl->buf->last_buf = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-519-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-520-                } else {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-616-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-617-                } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-618-                    in->buf->last_in_chain = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-619-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-620-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-621-            } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-622-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-623-                tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-624-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-625-                cl = ngx_http_lua_chains_get_free_buf(r->connection->log,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:626:                                                      r->pool, &ctx->free_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-627-                                                      0, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-628-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-629-                if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-630-                    return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-631-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-632-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-633-                if (r == r->main) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-634-                    cl->buf->last_buf = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-635-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-636-                } else {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-641-                lua_pushlightuserdata(L, cl);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-642-                lua_rawset(L, LUA_GLOBALSINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-643-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-644-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-645-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-646-        return 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-647-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-648-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-649-    tag = (ngx_buf_tag_t) &ngx_http_lua_module;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-650-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c:651:    cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-652-                                          &ctx->free_bufs, size, tag);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-653-    if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-654-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-655-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-656-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-657-    if (type == LUA_TTABLE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-658-        cl->buf->last = ngx_http_lua_copy_str_in_table(L, 3, cl->buf->last);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-659-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-660-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_bodyfilterby.c-661-        cl->buf->last = ngx_copy(cl->buf->pos, data, size);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-55-    ccv->complex_value->values = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-56-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-57-    if (nv == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-58-        return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-59-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-60-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-61-    n = nv * (2 * sizeof(ngx_http_lua_script_copy_code_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-62-                  + sizeof(ngx_http_lua_script_capture_code_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-63-        + sizeof(uintptr_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-64-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:65:    if (ngx_array_init(&lengths, ccv->pool, n, 1) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-66-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-67-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-68-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-69-    n = (nv * (2 * sizeof(ngx_http_lua_script_copy_code_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-70-                   + sizeof(ngx_http_lua_script_capture_code_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-71-                + sizeof(uintptr_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-72-                + sizeof(uintptr_t) - 1)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-73-            & ~(sizeof(uintptr_t) - 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-74-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:75:    if (ngx_array_init(&values, ccv->pool, n, 1) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-76-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-77-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-78-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-79-    pl = &lengths;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-80-    pv = &values;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-81-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-82-    ngx_memzero(&sc, sizeof(ngx_http_lua_script_compile_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-83-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:84:    sc.pool = ccv->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-85-    sc.log = ccv->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-86-    sc.source = v;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-87-    sc.lengths = &pl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-88-    sc.values = &pv;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-89-    sc.complete_lengths = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-90-    sc.complete_values = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-91-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-92-    if (ngx_http_lua_script_compile(&sc) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-93-        ngx_array_destroy(&lengths);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-94-        ngx_array_destroy(&values);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-129-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-130-    e.ip = val->lengths;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-131-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-132-    len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-133-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-134-    while (*(uintptr_t *) e.ip) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-135-        lcode = *(ngx_http_lua_script_len_code_pt *) e.ip;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-136-        len += lcode(&e);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-137-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-138-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:139:    p = ngx_pnalloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-140-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-141-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-142-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-143-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-144-    e.ip = val->values;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-145-    e.pos = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-146-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-147-    while (*(uintptr_t *) e.ip) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-148-        code = *(ngx_http_lua_script_code_pt *) e.ip;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-149-        code((ngx_http_lua_script_engine_t *) &e);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-150-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-151-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-152-    luaL_addlstring(luabuf, (char *) &subj->data[offset], cap[0] - offset);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-153-    luaL_addlstring(luabuf, (char *) p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-154-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:155:    ngx_pfree(r->pool, p);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-156-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-157-    return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-158-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-159-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-160-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-161-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-162-ngx_http_lua_script_compile(ngx_http_lua_script_compile_t *sc)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-163-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-164-    u_char       ch;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-165-    ngx_str_t    name;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-470-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-471-ngx_http_lua_script_init_arrays(ngx_http_lua_script_compile_t *sc)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-472-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-473-    ngx_uint_t   n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-474-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-475-    if (*sc->lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-476-        n = sc->variables * (2 * sizeof(ngx_http_lua_script_copy_code_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-477-                             + sizeof(ngx_http_lua_script_capture_code_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-478-            + sizeof(uintptr_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-479-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:480:        *sc->lengths = ngx_array_create(sc->pool, n, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-481-        if (*sc->lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-482-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-483-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-484-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-485-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-486-    if (*sc->values == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-487-        n = (sc->variables * (2 * sizeof(ngx_http_lua_script_copy_code_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-488-                              + sizeof(ngx_http_lua_script_capture_code_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-489-                + sizeof(uintptr_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-490-                + sizeof(uintptr_t) - 1)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-491-            & ~(sizeof(uintptr_t) - 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-492-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c:493:        *sc->values = ngx_array_create(sc->pool, n, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-494-        if (*sc->values == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-495-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-496-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-497-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-498-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-499-    sc->variables = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-500-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-501-    return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-502-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_script.c-503-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-90-    args.len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-91-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-92-    /* read the 1st argument (uri) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-93-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-94-    p = (u_char *) luaL_checklstring(L, 1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-95-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-96-    if (len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-97-        return luaL_error(L, "The uri argument is empty");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-98-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-99-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:100:    uri.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-101-    if (uri.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-102-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-103-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-104-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-105-    ngx_memcpy(uri.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-106-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-107-    uri.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-108-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-109-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-110-    if (ctx == NULL) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-126-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-127-    if (n == 2) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-128-        /* read the 2nd argument (args) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-129-        dd("args type: %s", luaL_typename(L, 2));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-130-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-131-        switch (lua_type(L, 2)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-132-        case LUA_TNUMBER:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-133-        case LUA_TSTRING:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-134-            p = (u_char *) lua_tolstring(L, 2, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-135-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:136:            user_args.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-137-            if (user_args.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-138-                return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-139-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-140-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-141-            ngx_memcpy(user_args.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-142-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-143-            user_args.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-144-            break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-145-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-146-        case LUA_TTABLE:
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-164-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-165-        user_args.data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-166-        user_args.len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-167-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-168-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-169-    if (user_args.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-170-        if (args.len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-171-            args = user_args;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-172-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-173-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:174:            p = ngx_palloc(r->pool, args.len + user_args.len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-175-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-176-                return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-177-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-178-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-179-            q = ngx_copy(p, args.data, args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-180-            *q++ = '&';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-181-            ngx_memcpy(q, user_args.data, user_args.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-182-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-183-            args.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-184-            args.len += user_args.len + 1;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-246-                               | NGX_HTTP_LUA_CONTEXT_ACCESS
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-247-                               | NGX_HTTP_LUA_CONTEXT_CONTENT);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-248-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-249-    ngx_http_lua_check_if_abortable(L, ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-250-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-251-    if (ctx->headers_sent) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-252-        return luaL_error(L, "attempt to call ngx.redirect after sending out "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-253-                          "the headers");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-254-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-255-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:256:    uri = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-257-    if (uri == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-258-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-259-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-260-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-261-    ngx_memcpy(uri, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-262-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-263-    r->headers_out.location = ngx_list_push(&r->headers_out.headers);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-264-    if (r->headers_out.location == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-265-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-266-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-335-    of.directio = clcf->directio;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-336-    of.valid = clcf->open_file_cache_valid;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-337-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-338-    of.errors = clcf->open_file_cache_errors;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-339-    of.events = clcf->open_file_cache_events;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-340-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-341-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-342-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-343-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-344-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:345:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-346-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-347-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-348-        switch (of.err) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-349-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-350-        case 0:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-351-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-352-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-353-        case NGX_ENOENT:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-354-        case NGX_ENOTDIR:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-355-        case NGX_ENAMETOOLONG:
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-386-    r->root_tested = !r->error_page;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-387-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-388-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "http static fd: %d", of.fd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-389-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-390-    if (of.is_dir) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-391-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-392-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http dir");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-393-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-394-        ngx_http_clear_location(r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-395-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:396:        r->headers_out.location = ngx_palloc(r->pool, sizeof(ngx_table_elt_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-397-        if (r->headers_out.location == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-398-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-399-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-400-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-401-        len = r->uri.len + 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-402-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-403-        if (!clcf->alias && clcf->root_lengths == NULL && r->args.len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-404-            location = path.data + clcf->root.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-405-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-406-            *last = '/';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-407-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-408-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-409-            if (r->args.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-410-                len += r->args.len + 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-411-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-412-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:413:            location = ngx_pnalloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-414-            if (location == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-415-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-416-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-417-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-418-            last = ngx_copy(location, r->uri.data, r->uri.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-419-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-420-            *last = '/';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-421-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-422-            if (r->args.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-423-                *++last = '?';
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-468-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-469-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-470-    if (r != r->main && of.size == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-471-        return ngx_http_send_header(r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-472-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-473-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-474-    r->allow_ranges = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-475-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-476-    /* we need to allocate all before the header would be sent */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-477-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:478:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-479-    if (b == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-480-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-481-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-482-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:483:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-484-    if (b->file == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-485-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-486-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-487-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-488-    rc = ngx_http_send_header(r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-489-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-490-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-491-        return rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-492-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-493-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-593-    if (ctx->headers_sent) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-594-        return luaL_error(L, "attempt to call ngx.post_redirect after sending out "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-595-                "the headers");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-596-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-597-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-598-    /* ugly, but it works */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-599-    if (ctx->exited) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-600-        goto end;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-601-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-602-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:603:    r->uri.data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-604-    if (r->uri.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-605-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-606-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-607-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-608-    ngx_memcpy(r->uri.data, path, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-609-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-610-    r->uri.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-611-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-612-    r->internal = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-613-    r->valid_unparsed_uri = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-674-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-675-    ngx_http_lua_check_context(L, ctx, NGX_HTTP_LUA_CONTEXT_HEADER_FILTER);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-676-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-677-    ngx_http_lua_check_if_abortable(L, ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-678-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-679-    if (ctx->headers_sent) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-680-        return luaL_error(L, "attempt to call ngx.post_redirect after sending out "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-681-                "the headers");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-682-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-683-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c:684:    uri = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-685-    if (uri == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-686-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-687-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-688-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-689-    ngx_memcpy(uri, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-690-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-691-    r->headers_out.location = ngx_list_push(&r->headers_out.headers);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-692-    if (r->headers_out.location == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-693-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_control.c-694-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-48-        lua_setfield(L, -2, package);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-49-        lua_pop(L, 2);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-50-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-51-        return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-52-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-53-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-54-    /* L == NULL */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-55-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-56-    if (lmcf->preload_hooks == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-57-        lmcf->preload_hooks =
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c:58:            ngx_array_create(cf->pool, 4,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-59-                             sizeof(ngx_http_lua_preload_hook_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-60-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-61-        if (lmcf->preload_hooks == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-62-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-63-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-64-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-65-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-66-    hook = ngx_array_push(lmcf->preload_hooks);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-67-    if (hook == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_api.c-68-        return NGX_ERROR;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-89-    size_t           len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-90-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-91-    ngx_pool_t      *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-92-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-93-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-94-    /*  initialize nginx context in Lua VM, code chunk at stack top    sp = 1 */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-95-    ngx_http_lua_header_filter_by_lua_env(L, r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-96-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-97-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-98-    /* XXX: work-around to nginx regex subsystem */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c:99:    old_pool = ngx_http_lua_pcre_malloc_init(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-100-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-101-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-102-    lua_pushcfunction(L, ngx_http_lua_traceback);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-103-    lua_insert(L, 1);  /* put it under chunk and args */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-104-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-105-    /*  protected call user code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-106-    rc = lua_pcall(L, 0, 1, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-107-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-108-    lua_remove(L, 1);  /* remove traceback function */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-109-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-193-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-194-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-195-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-196-    /* Eval nginx variables in code path string first */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-197-    if (ngx_http_complex_value(r, &llcf->header_filter_src, &eval_src)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-198-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-199-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-200-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-201-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-202-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c:203:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-204-                                           eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-205-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-206-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-207-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-208-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-209-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-210-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-211-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-212-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headerfilterby.c-213-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-277-    if (ngx_cycle->files) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-278-        ngx_cycle->files[0] = saved_c;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-279-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-280-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-281-    if (c == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-282-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-283-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-284-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-285-    c->fd = -1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-286-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:287:    c->pool = ngx_create_pool(NGX_CYCLE_POOL_SIZE, c->log);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:288:    if (c->pool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-289-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-290-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-291-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:292:    log = ngx_pcalloc(c->pool, sizeof(ngx_log_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-293-    if (log == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-294-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-295-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-296-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:297:    logctx = ngx_palloc(c->pool, sizeof(ngx_http_log_ctx_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-298-    if (logctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-299-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-300-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-301-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:302:    dd("c pool allocated: %d", (int) (sizeof(ngx_log_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-303-       + sizeof(ngx_http_log_ctx_t) + sizeof(ngx_http_request_t)));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-304-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-305-    logctx->connection = c;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-306-    logctx->request = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-307-    logctx->current_request = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-308-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-309-    c->log = log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-310-    c->log->connection = c->number;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-311-    c->log->handler = ngx_http_lua_log_timer_error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-312-    c->log->data = logctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-313-    c->log->action = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-314-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-315-    c->log_error = NGX_ERROR_INFO;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-316-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-317-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:318:    c->buffer = ngx_create_temp_buf(c->pool, 2);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-319-    if (c->buffer == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-320-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-321-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-322-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-323-    c->buffer->start[0] = CR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-324-    c->buffer->start[1] = LF;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-325-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-326-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-327-    /* create the fake request */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-328-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:329:    r = ngx_pcalloc(c->pool, sizeof(ngx_http_request_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-330-    if (r == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-331-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-332-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-333-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-334-    c->requests++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-335-    logctx->request = r;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-336-    logctx->current_request = r;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-337-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:338:    r->pool = ngx_create_pool(NGX_CYCLE_POOL_SIZE, c->log);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:339:    if (r->pool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-340-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-341-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-342-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:343:    dd("r pool allocated: %d", (int) (sizeof(ngx_http_lua_ctx_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-344-       + sizeof(void *) * ngx_http_max_module + sizeof(ngx_http_cleanup_t)));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-345-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-346-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:347:    hc = ngx_pcalloc(c->pool, sizeof(ngx_http_connection_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-348-    if (hc == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-349-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-350-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-351-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-352-    r->header_in = c->buffer;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-353-    r->header_end = c->buffer->start;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-354-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:355:    if (ngx_list_init(&r->headers_out.headers, r->pool, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-356-                      sizeof(ngx_table_elt_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-357-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-358-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-359-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-360-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-361-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:362:    if (ngx_list_init(&r->headers_in.headers, r->pool, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-363-                      sizeof(ngx_table_elt_t))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-364-        != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-365-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-366-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-367-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-368-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-369-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:370:    r->ctx = ngx_pcalloc(r->pool, sizeof(void *) * ngx_http_max_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-371-    if (r->ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-372-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-373-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-374-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-375-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-376-    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-377-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:378:    r->variables = ngx_pcalloc(r->pool, cmcf->variables.nelts
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-379-                                        * sizeof(ngx_http_variable_value_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-380-    if (r->variables == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-381-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-382-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-383-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-384-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-385-    ctx = ngx_http_lua_create_ctx(r);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-386-    if (ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-387-        goto abort;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-388-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-475-    return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-476-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-477-abort:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-478-    if (tctx.co_ref && tctx.co) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-479-        lua_pushlightuserdata(tctx.co, &ngx_http_lua_coroutines_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-480-        lua_rawget(tctx.co, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-481-        luaL_unref(tctx.co, -1, tctx.co_ref);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-482-        lua_settop(tctx.co, 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-483-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-484-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:485:    if (r && r->pool) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:486:        ngx_destroy_pool(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-487-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-488-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-489-    if (c) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-490-        ngx_http_lua_close_fake_connection(c);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-491-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-492-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-493-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-494-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-495-static u_char *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-496-ngx_http_lua_log_timer_error(ngx_log_t *log, u_char *buf, size_t len)
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-552-        return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-553-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-554-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-555-    /* expire pending timers immediately */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-556-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-557-    sentinel = ngx_event_timer_rbtree.sentinel;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-558-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-559-    prev = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-560-    cur = ngx_event_timer_rbtree.root;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-561-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c:562:    events = ngx_pcalloc(ngx_cycle->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-563-                         lmcf->pending_timers * sizeof(ngx_event_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-564-    if (events == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-565-        return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-566-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-567-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-568-    n = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-569-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-570-    dd("root: %p, root parent: %p, sentinel: %p", cur, cur->parent, sentinel);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-571-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_timer.c-572-    while (lmcf->pending_timers > n) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-233-    ngx_http_lua_loc_conf_t         *llcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-234-    char                            *err;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-235-    ngx_str_t                        eval_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-236-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-237-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-238-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-239-    if (ngx_http_complex_value(r, &llcf->content_src, &eval_src) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-240-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-241-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-242-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c:243:    script_path = ngx_http_lua_rebase_path(r->pool, eval_src.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-244-            eval_src.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-245-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-246-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-247-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-248-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-249-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-250-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-251-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-252-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_contentby.c-253-    /*  load Lua script file (w/ cache)        sp = 1 */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-15-#include "stdio.h"
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-16-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-17-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-18-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-19-static ngx_pool_t *ngx_http_lua_pcre_pool = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-20-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-21-static void *(*old_pcre_malloc)(size_t);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-22-static void (*old_pcre_free)(void *ptr);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-23-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-24-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:25:/* XXX: work-around to nginx regex subsystem, must init a memory pool
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-26- * to use PCRE functions. As PCRE still has memory-leaking problems,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-27- * and nginx overwrote pcre_malloc/free hooks with its own static
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-28- * functions, so nobody else can reuse nginx regex subsystem... */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-29-static void *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-30-ngx_http_lua_pcre_malloc(size_t size)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-31-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:32:    dd("lua pcre pool is %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-33-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-34-    if (ngx_http_lua_pcre_pool) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-35-        return ngx_palloc(ngx_http_lua_pcre_pool, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-36-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-37-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:38:    fprintf(stderr, "error: lua pcre malloc failed due to empty pcre pool");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-39-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-40-    return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-41-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-42-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-43-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-44-static void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-45-ngx_http_lua_pcre_free(void *ptr)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-46-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:47:    dd("lua pcre pool is %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-48-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-49-    if (ngx_http_lua_pcre_pool) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-50-        ngx_pfree(ngx_http_lua_pcre_pool, ptr);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-51-        return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-52-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-53-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:54:    fprintf(stderr, "error: lua pcre free failed due to empty pcre pool");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-55-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-56-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-57-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-58-ngx_pool_t *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:59:ngx_http_lua_pcre_malloc_init(ngx_pool_t *pool)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-60-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-61-    ngx_pool_t          *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-62-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-63-    if (pcre_malloc != ngx_http_lua_pcre_malloc) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-64-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-65-        dd("overriding nginx pcre malloc and free");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-66-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:67:        ngx_http_lua_pcre_pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-68-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-69-        old_pcre_malloc = pcre_malloc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-70-        old_pcre_free = pcre_free;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-71-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-72-        pcre_malloc = ngx_http_lua_pcre_malloc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-73-        pcre_free = ngx_http_lua_pcre_free;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-74-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-75-        return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-76-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-77-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:78:    dd("lua pcre pool was %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-79-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-80-    old_pool = ngx_http_lua_pcre_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:81:    ngx_http_lua_pcre_pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-82-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:83:    dd("lua pcre pool is %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-84-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-85-    return old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-86-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-87-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-88-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-89-void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-90-ngx_http_lua_pcre_malloc_done(ngx_pool_t *old_pool)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-91-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:92:    dd("lua pcre pool was %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-93-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-94-    ngx_http_lua_pcre_pool = old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-95-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c:96:    dd("lua pcre pool is %p", ngx_http_lua_pcre_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-97-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-98-    if (old_pool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-99-        pcre_malloc = old_pcre_malloc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-100-        pcre_free = old_pcre_free;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-101-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-102-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-103-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-104-#endif /* NGX_PCRE */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-105-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_pcrefix.c-106-/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-198-    if (value->len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-199-        h->hash = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-200-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-201-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-202-        h->hash = hv->hash;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-203-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-204-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-205-    h->key = hv->key;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-206-    h->value = *value;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-207-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c:208:    h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-209-    if (h->lowcase_key == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-210-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-211-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-212-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-213-    ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-214-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-215-    if (output_header) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-216-        *output_header = h;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-217-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-218-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-260-ngx_http_set_builtin_multi_header(ngx_http_request_t *r,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-261-    ngx_http_lua_header_val_t *hv, ngx_str_t *value)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-262-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-263-    ngx_array_t      *pa;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-264-    ngx_table_elt_t  *ho, **ph;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-265-    ngx_uint_t        i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-266-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-267-    pa = (ngx_array_t *) ((char *) &r->headers_out + hv->offset);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-268-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-269-    if (pa->elts == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c:270:        if (ngx_array_init(pa, r->pool, 2, sizeof(ngx_table_elt_t *))
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-271-            != NGX_OK)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-272-        {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-273-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-274-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-275-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-276-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-277-    if (hv->no_override) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-278-        ph = pa->elts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-279-        for (i = 0; i < pa->nelts; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_headers_out.c-280-            if (!ph[i]->hash) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-34-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-35-    ngx_http_lua_main_conf_t   *lmcf = conf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-36-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-37-    ngx_str_t                  *value, name;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-38-    ngx_shm_zone_t             *zone;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-39-    ngx_shm_zone_t            **zp;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-40-    ngx_http_lua_shdict_ctx_t  *ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-41-    ssize_t                     size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-42-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-43-    if (lmcf->shm_zones == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:44:        lmcf->shm_zones = ngx_palloc(cf->pool, sizeof(ngx_array_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-45-        if (lmcf->shm_zones == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-46-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-47-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-48-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:49:        ngx_array_init(lmcf->shm_zones, cf->pool, 2, sizeof(ngx_shm_zone_t *));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-50-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-51-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-52-    value = cf->args->elts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-53-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-54-    ctx = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-55-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-56-    if (value[1].len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-57-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-58-                           "invalid lua shared dict name \"%V\"", &value[1]);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-59-        return NGX_CONF_ERROR;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-62-    name = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-63-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-64-    size = ngx_parse_size(&value[2]);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-65-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-66-    if (size <= 8191) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-67-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-68-                           "invalid lua shared dict size \"%V\"", &value[2]);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-69-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-70-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-71-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:72:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_lua_shdict_ctx_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-73-    if (ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-74-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-75-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-76-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-77-    ctx->name = name;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-78-    ctx->main_conf = lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-79-    ctx->log = &cf->cycle->new_log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-80-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-81-    zone = ngx_shared_memory_add(cf, &name, (size_t) size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-82-                                 &ngx_http_lua_module);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-192-     * value[2] = lua script source to be executed
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-193-     * value[3..] = real params
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-194-     * */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-195-    value = cf->args->elts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-196-    target = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-197-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-198-    filter.type = NDK_SET_VAR_MULTI_VALUE_DATA;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-199-    filter.func = cmd->post;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-200-    filter.size = cf->args->nelts - 3;    /*  get number of real params */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-201-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:202:    filter_data = ngx_palloc(cf->pool, sizeof(ngx_http_lua_set_var_data_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-203-    if (filter_data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-204-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-205-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-206-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-207-    filter_data->size = filter.size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-208-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:209:    p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-210-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-211-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-212-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-213-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-214-    filter_data->key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-215-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-216-    p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-217-    p = ngx_http_lua_digest_hex(p, value[2].data, value[2].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-218-    *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-219-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-242-     * value[3..] = real params
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-243-     * */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-244-    value = cf->args->elts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-245-    target = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-246-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-247-    filter.type = NDK_SET_VAR_MULTI_VALUE_DATA;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-248-    filter.func = cmd->post;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-249-    filter.size = cf->args->nelts - 2;    /*  get number of real params and
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-250-                                              lua script */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-251-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:252:    filter_data = ngx_palloc(cf->pool, sizeof(ngx_http_lua_set_var_data_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-253-    if (filter_data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-254-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-255-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-256-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-257-    filter_data->size = filter.size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-258-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:259:    p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-260-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-261-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-262-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-263-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-264-    filter_data->key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-265-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-266-    p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-267-    p = ngx_http_lua_digest_hex(p, value[2].data, value[2].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-268-    *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-269-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-339-    filter_data->script.data = v[0].data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-340-    filter_data->script.len = v[0].len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-341-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-342-    /* skip the lua file path argument */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-343-    v++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-344-    nargs = filter_data->size - 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-345-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-346-    dd("script: %.*s", (int) filter_data->script.len, filter_data->script.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-347-    dd("nargs: %d", (int) nargs);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-348-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:349:    script_path = ngx_http_lua_rebase_path(r->pool, filter_data->script.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-350-                                           filter_data->script.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-351-    if (script_path == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-352-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-353-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-354-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-355-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-356-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-357-    L = lmcf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-358-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-359-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-415-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-416-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-417-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-418-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-419-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-420-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-421-    if (cmd->post == ngx_http_lua_rewrite_handler_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-422-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-423-        llcf->rewrite_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-424-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:425:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-426-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-427-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-428-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-429-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-430-        llcf->rewrite_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-431-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-432-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-433-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-434-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-435-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-438-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-439-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-440-        ccv.complex_value = &llcf->rewrite_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-441-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-442-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-443-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-444-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-445-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-446-        if (llcf->rewrite_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-447-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:448:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-449-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-450-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-451-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-452-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-453-            llcf->rewrite_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-454-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-455-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-456-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-457-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-458-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-497-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-498-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-499-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-500-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-501-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-502-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-503-    if (cmd->post == ngx_http_lua_access_handler_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-504-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-505-        llcf->access_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-506-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:507:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-508-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-509-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-510-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-511-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-512-        llcf->access_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-513-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-514-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-515-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-516-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-517-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-520-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-521-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-522-        ccv.complex_value = &llcf->access_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-523-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-524-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-525-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-526-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-527-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-528-        if (llcf->access_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-529-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:530:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-531-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-532-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-533-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-534-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-535-            llcf->access_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-536-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-537-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-538-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-539-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-540-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-579-        /*  Oops...Invalid location conf */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-580-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-581-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-582-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-583-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-584-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-585-    if (cmd->post == ngx_http_lua_content_handler_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-586-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-587-        llcf->content_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-588-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:589:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-590-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-591-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-592-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-593-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-594-        llcf->content_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-595-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-596-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-597-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-598-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-599-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-602-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-603-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-604-        ccv.complex_value = &llcf->content_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-605-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-606-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-607-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-608-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-609-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-610-        if (llcf->content_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-611-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:612:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-613-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-614-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-615-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-616-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-617-            llcf->content_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-618-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-619-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-620-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-621-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-622-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-668-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-669-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-670-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-671-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-672-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-673-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-674-    if (cmd->post == ngx_http_lua_log_handler_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-675-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-676-        llcf->log_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-677-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:678:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-679-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-680-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-681-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-682-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-683-        llcf->log_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-684-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-685-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-686-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-687-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-688-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-691-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-692-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-693-        ccv.complex_value = &llcf->log_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-694-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-695-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-696-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-697-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-698-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-699-        if (llcf->log_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-700-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:701:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-702-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-703-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-704-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-705-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-706-            llcf->log_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-707-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-708-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-709-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-710-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-711-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-749-        /*  Oops...Invalid location conf */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-750-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-751-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-752-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-753-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-754-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-755-    if (cmd->post == ngx_http_lua_header_filter_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-756-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-757-        llcf->header_filter_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-758-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:759:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-760-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-761-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-762-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-763-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-764-        llcf->header_filter_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-765-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-766-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-767-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-768-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-769-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-772-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-773-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-774-        ccv.complex_value = &llcf->header_filter_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-775-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-776-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-777-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-778-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-779-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-780-        if (llcf->header_filter_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-781-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:782:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-783-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-784-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-785-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-786-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-787-            llcf->header_filter_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-788-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-789-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-790-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-791-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-792-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-830-        /*  Oops...Invalid location conf */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-831-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-832-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-833-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-834-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-835-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-836-    if (cmd->post == ngx_http_lua_body_filter_inline) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-837-        /* Don't eval nginx variables for inline lua code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-838-        llcf->body_filter_src.value = value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-839-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:840:        p = ngx_palloc(cf->pool, NGX_HTTP_LUA_INLINE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-841-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-842-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-843-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-844-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-845-        llcf->body_filter_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-846-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-847-        p = ngx_copy(p, NGX_HTTP_LUA_INLINE_TAG, NGX_HTTP_LUA_INLINE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-848-        p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-849-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-850-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-853-        ccv.cf = cf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-854-        ccv.value = &value[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-855-        ccv.complex_value = &llcf->body_filter_src;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-856-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-857-        if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-858-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-859-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-860-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-861-        if (llcf->body_filter_src.lengths == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-862-            /* no variable found */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:863:            p = ngx_palloc(cf->pool, NGX_HTTP_LUA_FILE_KEY_LEN + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-864-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-865-                return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-866-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-867-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-868-            llcf->body_filter_src_key = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-869-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-870-            p = ngx_copy(p, NGX_HTTP_LUA_FILE_TAG, NGX_HTTP_LUA_FILE_TAG_LEN);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-871-            p = ngx_http_lua_digest_hex(p, value[1].data, value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-872-            *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-873-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-908-    if (value[1].len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-909-        /*  Oops...Invalid location conf */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-910-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-911-                           "invalid location config: no runnable Lua code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-912-        return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-913-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-914-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-915-    lmcf->init_handler = cmd->post;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-916-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-917-    if (cmd->post == ngx_http_lua_init_by_file) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c:918:        name = ngx_http_lua_rebase_path(cf->pool, value[1].data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-919-                                        value[1].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-920-        if (name == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-921-            return NGX_CONF_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-922-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-923-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-924-        lmcf->init_src.data = name;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-925-        lmcf->init_src.len = ngx_strlen(name);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-926-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-927-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_directive.c-928-        lmcf->init_src = value[1];
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-290-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-291-    ngx_http_lua_check_context(L, ctx, NGX_HTTP_LUA_CONTEXT_REWRITE
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-292-                               | NGX_HTTP_LUA_CONTEXT_ACCESS
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-293-                               | NGX_HTTP_LUA_CONTEXT_CONTENT
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-294-                               | NGX_HTTP_LUA_CONTEXT_TIMER);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-295-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-296-    luaL_checktype(L, 1, LUA_TTABLE);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-297-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-298-    p = (u_char *) luaL_checklstring(L, 2, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-299-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:300:    host.data = ngx_palloc(r->pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-301-    if (host.data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-302-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-303-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-304-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-305-    host.len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-306-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-307-    ngx_memcpy(host.data, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-308-    host.data[len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-309-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-310-    key_index = 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-311-    custom_pool = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-312-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-313-    if (lua_type(L, n) == LUA_TTABLE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-314-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-315-        /* found the last optional option table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-316-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:317:        lua_getfield(L, n, "pool");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-318-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-319-        switch (lua_type(L, -1)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-320-        case LUA_TNUMBER:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-321-            lua_tostring(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-322-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-323-        case LUA_TSTRING:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-324-            custom_pool = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-325-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-326-            lua_pushvalue(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-327-            lua_rawseti(L, 1, SOCKET_KEY_INDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-328-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-329-            key_index = n + 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-330-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-331-            break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-332-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-333-        default:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:334:            msg = lua_pushfstring(L, "bad \"pool\" option type: %s",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-335-                                  luaL_typename(L, -1));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-336-            luaL_argerror(L, n, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-337-            break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-338-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-339-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-340-        n--;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-341-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-342-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-343-    if (n == 3) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-344-        port = luaL_checkinteger(L, 3);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-456-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-457-    /* rc == NGX_DECLINED */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-458-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-459-    ngx_memzero(&url, sizeof(ngx_url_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-460-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-461-    url.url.len = host.len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-462-    url.url.data = host.data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-463-    url.default_port = port;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-464-    url.no_resolve = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:466:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-467-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-468-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-469-        if (url.err) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-470-            lua_pushfstring(L, "failed to parse host name \"%s\": %s",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-471-                            host.data, url.err);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-472-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-473-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-474-            lua_pushfstring(L, "failed to parse host name \"%s\"", host.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-475-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-476-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-477-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-478-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-479-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-480-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-481-                   "lua tcp socket connect timeout: %M", u->connect_timeout);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-482-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:483:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-484-    if (u->resolved == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-485-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-486-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-487-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-488-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-489-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-490-                       "lua tcp socket network address given directly");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-491-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-492-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-493-        u->resolved->socklen = url.addrs[0].socklen;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-682-        i = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-683-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-684-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-685-        i = ngx_random() % ur->naddrs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-686-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-687-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-688-    dd("selected addr index: %d", (int) i);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-689-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-690-    len = NGX_INET_ADDRSTRLEN + sizeof(":65536") - 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-691-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:692:    p = ngx_pnalloc(r->pool, len + sizeof(struct sockaddr_in));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-693-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-694-        ngx_resolve_name_done(ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-695-        u->ft_type |= NGX_HTTP_LUA_SOCKET_FT_RESOLVER;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-696-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-697-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-698-        lua_pushliteral(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-699-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-700-        if (waiting) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-701-            ngx_http_run_posted_requests(c);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-702-        }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-822-    c->data = u;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-823-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-824-    c->write->handler = ngx_http_lua_socket_tcp_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-825-    c->read->handler = ngx_http_lua_socket_tcp_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-826-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-827-    u->write_event_handler = ngx_http_lua_socket_connected_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-828-    u->read_event_handler = ngx_http_lua_socket_connected_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-829-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-830-    c->sendfile &= r->connection->sendfile;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-831-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:832:    c->pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-833-    c->log = r->connection->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-834-    c->read->log = c->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-835-    c->write->log = c->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-836-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-837-    /* init or reinit the ngx_output_chain() and ngx_chain_writer() contexts */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-838-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-839-#if 0
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-840-    u->writer.out = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-841-    u->writer.last = &u->writer.out;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-842-#endif
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1101-        u->length = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1102-        u->rest = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1103-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1104-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1105-    u->input_filter_ctx = u;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1106-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1107-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1108-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1109-    if (u->bufs_in == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1110-        u->bufs_in =
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:1111:            ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1112-                                             &ctx->free_recv_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1113-                                             u->conf->buffer_size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1114-                                             (ngx_buf_tag_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1115-                                             &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1116-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1117-        if (u->bufs_in == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1118-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1119-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1120-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1121-        u->buf_in = u->bufs_in;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1664-            return luaL_argerror(L, 2, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1665-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1666-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1667-    if (len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1668-        lua_pushinteger(L, 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1669-        return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1670-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1671-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1672-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1673-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:1674:    cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1675-                                          &ctx->free_bufs, len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1676-                                          (ngx_buf_tag_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1677-                                          &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1678-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1679-    if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1680-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1681-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1682-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1683-    b = cl->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-1684-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2076-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2077-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2078-                ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2079-                if (ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2080-                    ngx_http_lua_socket_handle_error(r, u,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2081-                                                NGX_HTTP_LUA_SOCKET_FT_ERROR);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2082-                    return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2083-                }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2084-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2085-#if defined(nginx_version) && nginx_version >= 1001004
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:2086:                ngx_chain_update_chains(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2087-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2088-                ngx_chain_update_chains(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2089-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2090-                                        &ctx->free_bufs, &ctx->busy_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2091-                                        &u->request_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2092-                                        (ngx_buf_tag_t) &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2093-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2094-                u->write_event_handler = ngx_http_lua_socket_dummy_handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2095-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2096-                if (ngx_handle_write_event(c->write, 0) != NGX_OK) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2602-    cp->pattern.data =
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2603-        (u_char *) lua_tolstring(L, lua_upvalueindex(2),
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2604-                                 &cp->pattern.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2605-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2606-    u->input_filter_ctx = cp;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2607-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2608-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2609-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2610-    if (u->bufs_in == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2611-        u->bufs_in =
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:2612:            ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2613-                                             &ctx->free_recv_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2614-                                             u->conf->buffer_size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2615-                                             (ngx_buf_tag_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2616-                                             &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2617-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2618-        if (u->bufs_in == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2619-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2620-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2621-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-2622-        u->buf_in = u->bufs_in;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3055-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3056-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3057-    if (ngx_http_lua_test_expect(r) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3058-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3059-        lua_pushliteral(L, "test expect failed");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3060-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3061-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3062-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3063-    /* prevent other request body reader from running */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3064-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3065:    rb = ngx_pcalloc(r->pool, sizeof(ngx_http_request_body_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3066-    if (rb == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3067-        return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3068-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3069-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3070-    rb->rest = r->headers_in.content_length_n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3071-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3072-    r->request_body = rb;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3073-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3074-    lua_createtable(L, 3 /* narr */, 1 /* nrec */); /* the object */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3075-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3296-    lua_pushvalue(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3297-    lua_rawget(L, -3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3298-    spool = lua_touserdata(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3299-    lua_pop(L, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3300-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3301-    /* stack: obj timeout? size? cache key */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3302-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3303-    llcf = ngx_http_get_module_loc_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3304-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3305-    if (spool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3306:        /* create a new socket pool for the current peer key */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3307-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3308-        if (n == 3) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3309-            pool_size = luaL_checkinteger(L, 3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3310-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3311-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3312-            pool_size = llcf->pool_size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3313-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3314-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3315-        if (pool_size == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3316-            lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3317:            lua_pushliteral(L, "zero pool size");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3318-            return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3319-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3320-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3321-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3322:                       "lua tcp socket connection pool size: %ui", pool_size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3323-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3324-        size = sizeof(ngx_http_lua_socket_pool_t) + key.len
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3325-               + sizeof(ngx_http_lua_socket_pool_item_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3326-               * pool_size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3327-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3328-        spool = lua_newuserdata(L, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3329-        if (spool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3330-            return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3331-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3332-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3333-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3334:                       "lua tcp socket keepalive create connection pool for key"
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3335-                       " \"%s\"", lua_tostring(L, -2));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3336-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3337-        lua_rawset(L, -3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3338-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3339-        lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3340-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3341-        spool->conf = lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3342-        spool->active_connections = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3343-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3344-        ngx_queue_init(&spool->cache);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3463-    ngx_peer_connection_t               *pc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3464-    ngx_connection_t                    *c;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3466-    top = lua_gettop(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3467-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3468-    if (key_index < 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3469-        key_index = top + key_index + 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3470-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3471-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3472-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3473:                   "lua tcp socket pool get keepalive peer");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3474-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3475-    pc = &u->peer;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3476-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3477-    lua_pushlightuserdata(L, &ngx_http_lua_socket_pool_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3478-    lua_rawget(L, LUA_REGISTRYINDEX); /* table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3479-    lua_pushvalue(L, key_index); /* key */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3480-    lua_rawget(L, -2);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3481-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3482-    spool = lua_touserdata(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3483-    if (spool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3484-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pc->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3485:                       "lua tcp socket keepalive connection pool not found");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3486-        lua_settop(L, top);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3487-        return NGX_DECLINED;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3488-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3489-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3490-    u->socket_pool = spool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3491-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3492-    if (!ngx_queue_empty(&spool->cache)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3493-        q = ngx_queue_head(&spool->cache);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3494-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3495-        item = ngx_queue_data(q, ngx_http_lua_socket_pool_item_t, queue);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3539-            cln->data = u;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3540-            u->cleanup = &cln->handler;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3541-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3542-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3543-        lua_settop(L, top);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3544-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3545-        return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3546-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3547-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3548-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pc->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3549:                   "lua tcp socket keepalive: connection pool empty");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3550-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3551-    lua_settop(L, top);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3552-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3553-    return NGX_DECLINED;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3554-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3555-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3556-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3557-static void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3558-ngx_http_lua_socket_keepalive_dummy_handler(ngx_event_t *ev)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3559-{
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3633-    return NGX_DECLINED;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3634-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3635-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3636-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3637-static void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3638-ngx_http_lua_socket_free_pool(ngx_log_t *log, ngx_http_lua_socket_pool_t *spool)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3639-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3640-    lua_State                           *L;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3641-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3642-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3643:                   "lua tcp socket keepalive: free connection pool for \"%s\"",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3644-                   spool->key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3645-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3646-    L = spool->conf->lua;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3647-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3648-    lua_pushlightuserdata(L, &ngx_http_lua_socket_pool_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3649-    lua_rawget(L, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3650-    lua_pushstring(L, (char *) spool->key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3651-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3652-    lua_rawset(L, -3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3653-    lua_pop(L, 1);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3776-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3777-        ngx_http_lua_probe_socket_tcp_receive_done(r, u, b->pos, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3778-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3779-        goto done;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3780-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3781-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3782-    /* nbufs > 1 */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3783-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3784-    dd("WARN: allocate a big memory: %d", (int) size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3785-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3786:    p = ngx_palloc(r->pool, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3787-    if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3788-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3789-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3790-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3791-    last = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3792-    for (cl = u->bufs_in; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3793-        b = cl->buf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3794-        last = ngx_copy(last, b->pos, b->last - b->pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3795-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3796-        dd("copying input data chunk from %p: \"%.*s\"", cl,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3797-           (int) (b->last - b->pos), b->pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3798-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3799-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3800-    lua_pushlstring(L, (char *) p, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3801-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3802-    ngx_http_lua_probe_socket_tcp_receive_done(r, u, p, size);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3803-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3804:    ngx_pfree(r->pool, p);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3805-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3806-done:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3807-    if (nbufs > 1 && ll) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3808-        dd("recycle buffers: %d", (int) (nbufs - 1));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3809-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3810-        *ll = ctx->free_recv_bufs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3811-        ctx->free_recv_bufs = u->bufs_in;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3812-        u->bufs_in = u->buf_in;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3813-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3814-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3827-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3828-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3829-ngx_http_lua_socket_add_input_buffer(ngx_http_request_t *r,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3830-    ngx_http_lua_socket_tcp_upstream_t *u)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3831-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3832-    ngx_chain_t             *cl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3833-    ngx_http_lua_ctx_t      *ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3834-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3835-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3836-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3837:    cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3838-                                          &ctx->free_recv_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3839-                                          u->conf->buffer_size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3840-                                          (ngx_buf_tag_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3841-                                          &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3842-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3843-    if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3844-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3845-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3846-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3847-    u->buf_in->next = cl;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3895-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3896-    if (prefix <= u->conf->buffer_size) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3897-        size = u->conf->buffer_size;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3898-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3899-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3900-        size = prefix;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3901-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3902-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3903-    ctx = ngx_http_get_module_ctx(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3904-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c:3905:    new_cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3906-                                              &ctx->free_recv_bufs,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3907-                                              size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3908-                                              (ngx_buf_tag_t)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3909-                                              &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3910-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3911-    if (new_cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3912-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3913-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3914-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_socket_tcp.c-3915-    b = new_cl->buf;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-168-    name.data = lowcase;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-169-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-170-    /* we read the variable new value */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-171-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-172-    value_type = lua_type(L, 3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-173-    switch (value_type) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-174-    case LUA_TNUMBER:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-175-    case LUA_TSTRING:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-176-        p = (u_char *) luaL_checklstring(L, 3, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-177-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c:178:        val = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-179-        if (val == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-180-            return luaL_error(L, "memory allocation erorr");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-181-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-182-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-183-        ngx_memcpy(val, p, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-184-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-185-        break;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-186-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-187-    case LUA_TNIL:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-188-        /* undef the variable */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-206-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-207-    if (v) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-208-        if (!(v->flags & NGX_HTTP_VAR_CHANGEABLE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-209-            return luaL_error(L, "variable \"%s\" not changeable", lowcase);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-210-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-211-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-212-        if (v->set_handler) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-213-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-214-            dd("set variables with set_handler");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-215-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c:216:            vv = ngx_palloc(r->pool, sizeof(ngx_http_variable_value_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-217-            if (vv == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-218-                return luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-219-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-220-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-221-            if (value_type == LUA_TNIL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-222-                vv->valid = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-223-                vv->not_found = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-224-                vv->no_cacheable = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-225-                vv->data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_variable.c-226-                vv->len = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-417-        entry_coctx->co_status = NGX_HTTP_LUA_CO_DEAD;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-418-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-419-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-420-    if (inited) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-421-        lua_pop(L, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-422-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-423-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-424-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-425-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-426-u_char *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:427:ngx_http_lua_rebase_path(ngx_pool_t *pool, u_char *src, size_t len)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-428-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-429-    u_char            *p, *dst;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-430-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-431-    if (len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-432-        return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-433-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-434-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-435-    if (src[0] == '/') {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-436-        /* being an absolute path already */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:437:        dst = ngx_palloc(pool, len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-438-        if (dst == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-439-            return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-440-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-441-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-442-        p = ngx_copy(dst, src, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-443-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-444-        *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-445-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-446-        return dst;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-447-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-448-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:449:    dst = ngx_palloc(pool, ngx_cycle->prefix.len + len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-450-    if (dst == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-451-        return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-452-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-453-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-454-    p = ngx_copy(dst, ngx_cycle->prefix.data, ngx_cycle->prefix.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-455-    p = ngx_copy(p, src, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-456-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-457-    *p = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-458-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-459-    return dst;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-694-    lua_pushlightuserdata(L, &ngx_http_lua_coroutines_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-695-    lua_newtable(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-696-    lua_rawset(L, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-697-    /* }}} */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-698-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-699-    /* create the registry entry for the Lua request ctx data table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-700-    lua_pushlightuserdata(L, &ngx_http_lua_ctx_tables_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-701-    lua_newtable(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-702-    lua_rawset(L, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-703-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:704:    /* create the registry entry for the Lua socket connection pool table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-705-    lua_pushlightuserdata(L, &ngx_http_lua_socket_pool_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-706-    lua_newtable(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-707-    lua_rawset(L, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-708-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-709-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-710-    /* create the registry entry for the Lua precompiled regex object cache */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-711-    lua_pushlightuserdata(L, &ngx_http_lua_regex_cache_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-712-    lua_newtable(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-713-    lua_rawset(L, LUA_REGISTRYINDEX);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-714-#endif
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-780-    lua_setfield(L, -2, "ngx"); /* ngx package loaded */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-781-    lua_pop(L, 2);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-782-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-783-    lua_setglobal(L, "ngx");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-784-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-785-    ngx_http_lua_inject_coroutine_api(cf->log, L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-786-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-787-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-788-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-789-void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:790:ngx_http_lua_discard_bufs(ngx_pool_t *pool, ngx_chain_t *in)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-791-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-792-    ngx_chain_t         *cl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-793-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-794-    for (cl = in; cl; cl = cl->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-795-        cl->buf->pos = cl->buf->last;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-796-        cl->buf->file_pos = cl->buf->file_last;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-797-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-798-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-799-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-800-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-816-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-817-        if (cl->buf->last_in_chain || cl->buf->last_buf) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-818-            *eof = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-819-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-820-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-821-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-822-    if (len == 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-823-        return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-824-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-825-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:826:    cl = ngx_http_lua_chains_get_free_buf(r->connection->log, r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-827-                                          &ctx->free_bufs, len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-828-                                          (ngx_buf_tag_t) &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-829-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-830-    if (cl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-831-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-832-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-833-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-834-    dd("chains get free buf: %d == %d", (int) (cl->buf->end - cl->buf->start),
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-835-       (int) len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-836-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-855-void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-856-ngx_http_lua_reset_ctx(ngx_http_request_t *r, lua_State *L,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-857-    ngx_http_lua_ctx_t *ctx)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-858-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-859-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-860-                   "lua reset ctx");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-861-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-862-    ngx_http_lua_del_all_threads(r, L, ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-863-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-864-    if (ctx->user_co_ctx) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:865:        /* no way to destroy a list but clean up the whole pool */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-866-        ctx->user_co_ctx = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-867-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-868-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-869-    ngx_memzero(&ctx->entry_co_ctx, sizeof(ngx_http_lua_co_ctx_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-870-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-871-    ctx->entry_co_ctx.co_ref = LUA_NOREF;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-872-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-873-    ctx->entered_rewrite_phase = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-874-    ctx->entered_access_phase = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-875-    ctx->entered_content_phase = 0;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1016-            nrets = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1017-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1018-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1019-        for ( ;; ) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1020-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1021-            dd("calling lua_resume: vm %p, nret %d", ctx->cur_co_ctx->co,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1022-               (int) nrets);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1023-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1024-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1025-            /* XXX: work-around to nginx regex subsystem */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:1026:            old_pool = ngx_http_lua_pcre_malloc_init(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1027-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1028-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1029-            /*  run code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1030-            dd("ctx: %p", ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1031-            dd("cur co: %p", ctx->cur_co_ctx->co);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1032-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1033-            orig_coctx = ctx->cur_co_ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1034-            rv = lua_resume(orig_coctx->co, nrets);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1035-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1036-#if (NGX_PCRE)
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1548-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1549-            return rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1550-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1551-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1552-        if (ctx->busy_bufs) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1553-            cl = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1554-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1555-            dd("updating chains...");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1556-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1557-#if nginx_version >= 1001004
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:1558:            ngx_chain_update_chains(r->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1559-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1560-            ngx_chain_update_chains(
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1561-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1562-                                    &ctx->free_bufs, &ctx->busy_bufs, &cl,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1563-                                    (ngx_buf_tag_t) &ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1564-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1565-            dd("update lua buf tag: %p, buffered: %x, busy bufs: %p",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1566-                &ngx_http_lua_module, (int) c->buffered, ctx->busy_bufs);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1567-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-1568-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2297-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2298-    len += (size_t) total_escape;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2299-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2300-    if (n > 1) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2301-        len += (n - 1) * (sizeof("&") - 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2302-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2303-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2304-    dd("len 1: %d", (int) len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2305-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2306-    if (r) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:2307:        p = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2308-        if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2309-            luaL_error(L, "out of memory");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2310-            return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2311-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2312-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2313-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2314-        p = lua_newuserdata(L, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2315-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2316-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2317-    args->data = p;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2890-    return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2891-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2892-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2893-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2894-ngx_http_lua_co_ctx_t *
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2895-ngx_http_lua_create_co_ctx(ngx_http_request_t *r, ngx_http_lua_ctx_t *ctx)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2896-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2897-    ngx_http_lua_co_ctx_t       *coctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2898-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2899-    if (ctx->user_co_ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:2900:        ctx->user_co_ctx = ngx_list_create(r->pool, 4,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2901-                                           sizeof(ngx_http_lua_co_ctx_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2902-        if (ctx->user_co_ctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2903-            return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2904-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2905-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2906-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2907-    coctx = ngx_list_push(ctx->user_co_ctx);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2908-    if (coctx == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2909-        return NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2910-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2970-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2971-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2972-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2973-ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2974-ngx_http_lua_post_thread(ngx_http_request_t *r, ngx_http_lua_ctx_t *ctx,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2975-    ngx_http_lua_co_ctx_t *coctx)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2976-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2977-    ngx_http_lua_posted_thread_t  **p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2978-    ngx_http_lua_posted_thread_t   *pt;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2979-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:2980:    pt = ngx_palloc(r->pool, sizeof(ngx_http_lua_posted_thread_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2981-    if (pt == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2982-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2983-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2984-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2985-    pt->co_ctx = coctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2986-    pt->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2987-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2988-    for (p = &ctx->posted_threads; *p; p = &(*p)->next) { /* void */ }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2989-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-2990-    *p = pt;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3045-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3046-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3047-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3048-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3049-ngx_http_lua_post_zombie_thread(ngx_http_request_t *r,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3050-    ngx_http_lua_co_ctx_t *parent, ngx_http_lua_co_ctx_t *thread)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3051-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3052-    ngx_http_lua_posted_thread_t  **p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3053-    ngx_http_lua_posted_thread_t   *pt;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3054-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3055:    pt = ngx_palloc(r->pool, sizeof(ngx_http_lua_posted_thread_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3056-    if (pt == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3057-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3058-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3059-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3060-    pt->co_ctx = thread;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3061-    pt->next = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3062-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3063-    for (p = &parent->zombie_child_threads; *p; p = &(*p)->next) { /* void */ }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3064-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3065-    *p = pt;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3423-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3424-    ngx_log_t                 *log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3425-    ngx_http_cleanup_t        *cln;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3426-    ngx_http_log_ctx_t        *ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3427-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3428-    log = r->connection->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3429-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3430-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http lua close fake "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3431-                   "request");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3432-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3433:    if (r->pool == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3434-        ngx_log_error(NGX_LOG_ALERT, log, 0, "http lua fake request "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3435-                      "already closed");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3436-        return;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3437-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3438-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3439-    for (cln = r->cleanup; cln; cln = cln->next) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3440-        if (cln->handler) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3441-            cln->handler(cln->data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3442-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3443-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3444-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3445:    /* the various request strings were allocated from r->pool */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3446-    ctx = log->data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3447-    ctx->request = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3448-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3449-    r->request_line.len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3450-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3451-    r->connection->destroyed = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3452-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3453:    ngx_destroy_pool(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3454-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3455-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3456-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3457-void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3458-ngx_http_lua_close_fake_connection(ngx_connection_t *c)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3459-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3460:    ngx_pool_t          *pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3461-    ngx_connection_t    *saved_c = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3462-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3463-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, c->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3464-                   "http lua close fake http connection");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3465-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3466-    c->destroyed = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3467-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3468:    pool = c->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3469-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3470-    if (c->read->timer_set) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3471-        ngx_del_timer(c->read);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3472-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3473-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3474-    if (c->write->timer_set) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3475-        ngx_del_timer(c->write);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3476-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3477-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3478-    c->read->closed = 1;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3487-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3488-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3489-    ngx_free_connection(c);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3490-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3491-    c->fd = -1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3492-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3493-    if (ngx_cycle->files) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3494-        ngx_cycle->files[0] = saved_c;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3495-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3496-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3497:    if (pool) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c:3498:        ngx_destroy_pool(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3499-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3500-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3501-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_util.c-3502-/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-155-    if (rc != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-156-        return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-157-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-158-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-159-    dd("add copy chain eof: %d, sr: %d", (int) eof, r != r->main);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-160-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-161-    if (eof) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-162-        ctx->seen_last_for_subreq = 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-163-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-164-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c:165:    ngx_http_lua_discard_bufs(r->pool, in);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-166-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-167-    return NGX_OK;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-168-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-169-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_capturefilter.c-170-/* vi:set ft=c ts=4 sw=4 et fdm=marker: */
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-48-    pcre_extra                   *regex_sd;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-49-    int                           ncaptures;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-50-    int                          *captures;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-51-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-52-    ngx_http_lua_complex_value_t    *replace;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-53-} ngx_http_lua_regex_t;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-54-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-55-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-56-typedef struct {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-57-    ngx_str_t     pattern;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:58:    ngx_pool_t   *pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-59-    ngx_int_t     options;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-60-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-61-    pcre         *regex;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-62-    int           captures;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-63-    ngx_str_t     err;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-64-} ngx_http_lua_regex_compile_t;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-65-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-66-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-67-typedef struct {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-68-    ngx_http_cleanup_pt     *cleanup;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-77-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-78-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-79-static int ngx_http_lua_ngx_re_gmatch_iterator(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-80-static ngx_uint_t ngx_http_lua_ngx_re_parse_opts(lua_State *L,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-81-    ngx_http_lua_regex_compile_t *re, ngx_str_t *opts, int narg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-82-static int ngx_http_lua_ngx_re_sub_helper(lua_State *L, unsigned global);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-83-static int ngx_http_lua_ngx_re_match(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-84-static int ngx_http_lua_ngx_re_gmatch(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-85-static int ngx_http_lua_ngx_re_sub(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-86-static int ngx_http_lua_ngx_re_gsub(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:87:static void ngx_http_lua_regex_free_study_data(ngx_pool_t *pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-88-    pcre_extra *sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-89-static ngx_int_t ngx_http_lua_regex_compile(ngx_http_lua_regex_compile_t *rc);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-90-static void ngx_http_lua_ngx_re_gmatch_cleanup(void *data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-91-static int ngx_http_lua_ngx_re_gmatch_gc(lua_State *L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-92-static void ngx_http_lua_re_collect_named_captures(lua_State *L,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-93-    u_char *name_table, int name_count, int name_entry_size,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-94-    unsigned flags, ngx_str_t *subj);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-95-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-96-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-97-#define ngx_http_lua_regex_exec(re, e, s, start, captures, size, opts)       \
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-116-    ngx_http_lua_regex_t        *re;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-117-    const char                  *msg;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-118-    ngx_int_t                    rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-119-    ngx_uint_t                   n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-120-    int                          i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-121-    ngx_int_t                    pos = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-122-    int                          nargs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-123-    int                         *cap = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-124-    int                          ovecsize;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-125-    ngx_uint_t                   flags;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:126:    ngx_pool_t                  *pool, *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-127-    ngx_http_lua_main_conf_t    *lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-128-    u_char                       errstr[NGX_MAX_CONF_ERRSTR + 1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-129-    pcre_extra                  *sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-130-    int                          name_entry_size, name_count;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-131-    u_char                      *name_table;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-132-    int                          exec_opts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-133-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-134-    ngx_http_lua_regex_compile_t      re_comp;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-135-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-136-    nargs = lua_gettop(L);
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-180-        opts.len = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-181-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-182-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-183-    re_comp.options = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-184-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-185-    flags = ngx_http_lua_ngx_re_parse_opts(L, &re_comp, &opts, 3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-186-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-187-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-188-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-189-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:190:        pool = lmcf->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-191-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:192:        dd("server pool %p", lmcf->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-193-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-194-        lua_pushlightuserdata(L, &ngx_http_lua_regex_cache_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-195-        lua_rawget(L, LUA_REGISTRYINDEX); /* table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-196-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-197-        lua_pushliteral(L, "m");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-198-        lua_pushvalue(L, 2); /* table regex */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-199-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-200-        dd("options size: %d", (int) sizeof(re_comp.options));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-201-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-202-        lua_pushlstring(L, (char *) &re_comp.options, sizeof(re_comp.options));
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-245-        if (lmcf->regex_cache_entries >= lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-246-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-247-            if (lmcf->regex_cache_entries == lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-248-                ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-249-                              "lua exceeding regex cache max entries (%i)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-250-                              lmcf->regex_cache_max_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-251-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-252-                lmcf->regex_cache_entries++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-253-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-254-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:255:            pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-256-            flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-257-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-258-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-259-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:260:        pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-261-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-262-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:263:    dd("pool %p, r pool %p", pool, r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-264-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-265-    re_comp.pattern = pat;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-266-    re_comp.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-267-    re_comp.err.data = errstr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:268:    re_comp.pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-269-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-270-    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-271-                   "lua compiling match regex \"%s\" with options \"%s\" "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-272-                   "(compile once: %d) (dfa mode: %d) (jit mode: %d)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-273-                   pat.data, opts.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-274-                   (flags & NGX_LUA_RE_COMPILE_ONCE) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-275-                   (flags & NGX_LUA_RE_MODE_DFA) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-276-                   (flags & NGX_LUA_RE_MODE_JIT) != 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-277-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:278:    old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-279-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-280-    rc = ngx_http_lua_regex_compile(&re_comp);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-281-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-282-    ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-283-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-284-    if (rc != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-285-        dd("compile failed");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-286-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-287-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-288-        lua_pushlstring(L, (char *) re_comp.err.data, re_comp.err.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-289-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-290-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-291-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-292-#if (LUA_HAVE_PCRE_JIT)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-293-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-294-    if (flags & NGX_LUA_RE_MODE_JIT) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-295-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:296:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-297-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-298-        sd = pcre_study(re_comp.regex, PCRE_STUDY_JIT_COMPILE, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-299-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-300-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-301-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-302-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-303-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-304-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-305-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-306-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-307-                           "pcre study failed with PCRE_STUDY_JIT_COMPILE: "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-308-                           "%s (%p)", msg, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-309-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-310-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-311-        if (sd != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-312-            int         jitted;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-313-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:314:            old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-315-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-316-            pcre_fullinfo(re_comp.regex, sd, PCRE_INFO_JIT, &jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-317-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-318-            ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-319-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-320-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-321-                           "pcre JIT compiling result: %d", jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-322-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-323-#   endif /* !(NGX_DEBUG) */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-324-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-325-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:326:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-327-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-328-        sd = pcre_study(re_comp.regex, 0, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-329-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-330-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-331-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-332-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-333-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-334-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-335-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-336-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-359-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-360-    if (flags & NGX_LUA_RE_MODE_DFA) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-361-        ovecsize = 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-362-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-363-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-364-        ovecsize = (re_comp.captures + 1) * 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-365-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-366-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-367-    dd("allocating cap with size: %d", (int) ovecsize);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-368-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:369:    cap = ngx_palloc(pool, ovecsize * sizeof(int));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-370-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-371-    if (cap == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-372-        flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-373-        msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-374-        goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-375-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-376-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-377-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-378-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-379-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-380-                       "lua saving compiled regex (%d captures) into the cache "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-381-                       "(entries %i)", re_comp.captures,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-382-                       lmcf->regex_cache_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-383-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:384:        re = ngx_palloc(pool, sizeof(ngx_http_lua_regex_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-385-        if (re == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-386-            msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-387-            goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-388-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-389-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-390-        dd("saving regex %p, ncaptures %d,  captures %p", re_comp.regex,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-391-                re_comp.captures, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-392-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-393-        re->regex = re_comp.regex;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-394-        re->regex_sd = sd;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-457-                                     ovecsize, exec_opts);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-458-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-459-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-460-    if (rc == NGX_REGEX_NO_MATCHED) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-461-        ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-462-                       "regex \"%V\" not matched on string \"%V\" starting "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-463-                       "from %i", &pat, &subj, pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-464-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-465-        if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-466-            if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:467:                ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-468-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-469-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:470:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:471:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-472-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-473-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-474-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-475-        return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-476-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-477-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-478-    if (rc < 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-479-        msg = lua_pushfstring(L, ngx_regex_exec_n " failed: %d", (int) rc);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-480-        goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-481-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-516-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-517-    if (nargs == 4) { /* having ctx table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-518-        pos = cap[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-519-        lua_pushinteger(L, (lua_Integer) pos);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-520-        lua_setfield(L, 4, "pos");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-521-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-522-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-523-    if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-524-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-525-        if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:526:            ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-527-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-528-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:529:        ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:530:        ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-531-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-532-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-533-    return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-534-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-535-error:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-536-    if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-537-        if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:538:            ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-539-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-540-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-541-        if (re_comp.regex) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:542:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-543-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-544-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-545-        if (cap) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:546:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-547-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-548-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-549-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-550-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-551-    lua_pushstring(L, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-552-    return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-553-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-554-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-555-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-556-static int
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-562-    ngx_str_t                    pat;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-563-    ngx_str_t                    opts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-564-    int                          ovecsize;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-565-    ngx_http_lua_regex_t        *re;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-566-    ngx_http_lua_regex_ctx_t    *ctx;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-567-    const char                  *msg;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-568-    int                          nargs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-569-    ngx_int_t                    flags;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-570-    int                         *cap = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-571-    ngx_int_t                    rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:572:    ngx_pool_t                  *pool, *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-573-    u_char                       errstr[NGX_MAX_CONF_ERRSTR + 1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-574-    pcre_extra                  *sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-575-    ngx_http_cleanup_t          *cln;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-576-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-577-    ngx_http_lua_regex_compile_t      re_comp;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-578-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-579-    nargs = lua_gettop(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-580-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-581-    if (nargs != 2 && nargs != 3) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-582-        return luaL_error(L, "expecting two or three arguments, but got %d",
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-602-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-603-    /* stack: subj regex */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-604-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-605-    re_comp.options = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-606-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-607-    flags = ngx_http_lua_ngx_re_parse_opts(L, &re_comp, &opts, 3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-608-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-609-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-610-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-611-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:612:        pool = lmcf->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-613-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:614:        dd("server pool %p", lmcf->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-615-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-616-        lua_pushlightuserdata(L, &ngx_http_lua_regex_cache_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-617-        lua_rawget(L, LUA_REGISTRYINDEX); /* table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-618-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-619-        lua_pushliteral(L, "m");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-620-        lua_pushvalue(L, 2); /* table regex */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-621-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-622-        dd("options size: %d", (int) sizeof(re_comp.options));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-623-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-624-        lua_pushlstring(L, (char *) &re_comp.options,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-667-        if (lmcf->regex_cache_entries >= lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-668-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-669-            if (lmcf->regex_cache_entries == lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-670-                ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-671-                              "lua exceeding regex cache max entries (%i)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-672-                              lmcf->regex_cache_max_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-673-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-674-                lmcf->regex_cache_entries++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-675-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-676-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:677:            pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-678-            flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-679-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-680-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-681-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:682:        pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-683-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-684-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-685-    re_comp.pattern = pat;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-686-    re_comp.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-687-    re_comp.err.data = errstr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:688:    re_comp.pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-689-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-690-    ngx_log_debug5(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-691-                   "lua compiling gmatch regex \"%s\" with options \"%s\" "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-692-                   "(compile once: %d) (dfa mode: %d) (jit mode: %d)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-693-                   pat.data, opts.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-694-                   (flags & NGX_LUA_RE_COMPILE_ONCE) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-695-                   (flags & NGX_LUA_RE_MODE_DFA) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-696-                   (flags & NGX_LUA_RE_MODE_JIT) != 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-697-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:698:    old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-699-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-700-    rc = ngx_http_lua_regex_compile(&re_comp);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-701-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-702-    ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-703-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-704-    if (rc != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-705-        dd("compile failed");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-706-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-707-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-708-        lua_pushlstring(L, (char *) re_comp.err.data, re_comp.err.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-709-        return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-710-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-711-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-712-#if LUA_HAVE_PCRE_JIT
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-713-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-714-    if (flags & NGX_LUA_RE_MODE_JIT) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-715-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:716:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-717-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-718-        sd = pcre_study(re_comp.regex, PCRE_STUDY_JIT_COMPILE, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-719-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-720-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-721-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-722-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-723-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-724-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-725-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-726-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-727-                           "pcre_study failed with PCRE_STUDY_JIT_COMPILE: "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-728-                           "%s (%p)", msg, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-729-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-730-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-731-        if (sd != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-732-            int         jitted;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-733-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:734:            old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-735-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-736-            pcre_fullinfo(re_comp.regex, sd, PCRE_INFO_JIT, &jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-737-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-738-            ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-739-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-740-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-741-                           "pcre JIT compiling result: %d", jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-742-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-743-#   endif /* NGX_DEBUG */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-744-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-745-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-746-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:747:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-748-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-749-        sd = pcre_study(re_comp.regex, 0, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-750-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-751-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-752-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-753-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-754-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-755-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-756-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-757-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-778-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-779-    dd("compile done, captures %d", re_comp.captures);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-780-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-781-    if (flags & NGX_LUA_RE_MODE_DFA) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-782-        ovecsize = 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-783-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-784-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-785-        ovecsize = (re_comp.captures + 1) * 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-786-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-787-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:788:    cap = ngx_palloc(pool, ovecsize * sizeof(int));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-789-    if (cap == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-790-        flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-791-        msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-792-        goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-793-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-794-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-795-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-796-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-797-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-798-                       "lua saving compiled regex (%d captures) into the cache "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-799-                       "(entries %i)", re_comp.captures,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-800-                       lmcf->regex_cache_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-801-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:802:        re = ngx_palloc(pool, sizeof(ngx_http_lua_regex_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-803-        if (re == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-804-            msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-805-            goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-806-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-807-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-808-        dd("saving regex %p, ncaptures %d,  captures %p", re_comp.regex,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-809-           re_comp.captures, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-810-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-811-        re->regex = re_comp.regex;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-812-        re->regex_sd = sd;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-859-    lua_pushinteger(L, 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-860-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-861-    /* upvalues in order: subj ctx offset */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-862-    lua_pushcclosure(L, ngx_http_lua_ngx_re_gmatch_iterator, 3);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-863-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-864-    return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-865-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-866-error:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-867-    if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-868-        if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:869:            ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-870-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-871-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-872-        if (re_comp.regex) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:873:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-874-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-875-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-876-        if (cap) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:877:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-878-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-879-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-880-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-881-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-882-    lua_pushstring(L, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-883-    return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-884-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-885-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-886-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-887-static int
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-913-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-914-    cap = ctx->captures;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-915-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-916-    dd("offset %d, r %p, subj %s", (int) offset, ctx->request, subj.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-917-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-918-    r = ngx_http_lua_get_req(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-919-    if (r == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-920-        return luaL_error(L, "no request object found");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-921-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-922-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:923:    if (r != ctx->request || r->pool != ctx->request->pool) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-924-        return luaL_error(L, "attempt to use ngx.re.gmatch iterator in a "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-925-                          "request that did not create it");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-926-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-927-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-928-    dd("regex exec...");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-929-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-930-    if (pcre_fullinfo(ctx->regex, NULL, PCRE_INFO_NAMECOUNT,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-931-                      &name_count) != 0)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-932-    {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-933-        msg = "cannot acquire named subpattern count";
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-979-                                     exec_opts);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-980-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-981-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-982-    if (rc == NGX_REGEX_NO_MATCHED) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-983-        /* set upvalue "offset" to -1 */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-984-        lua_pushinteger(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-985-        lua_replace(L, lua_upvalueindex(3));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-986-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-987-        if (!(ctx->flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-988-            if (ctx->regex_sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:989:                ngx_http_lua_regex_free_study_data(r->pool, ctx->regex_sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-990-                ctx->regex_sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-991-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-992-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:993:            ngx_pfree(r->pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-994-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-995-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-996-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-997-        return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-998-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-999-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1000-    if (rc < 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1001-        msg = lua_pushfstring(L, ngx_regex_exec_n " failed: %d", (int) rc);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1002-        goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1003-    }
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1039-    offset = cap[1];
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1040-    if (offset == cap[0]) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1041-        offset++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1042-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1043-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1044-    if (offset > (ssize_t) subj.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1045-        offset = -1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1046-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1047-        if (!(ctx->flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1048-            if (ctx->regex_sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1049:                ngx_http_lua_regex_free_study_data(r->pool, ctx->regex_sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1050-                ctx->regex_sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1051-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1052-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1053:            ngx_pfree(r->pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1054-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1055-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1056-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1057-    lua_pushinteger(L, offset);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1058-    lua_replace(L, lua_upvalueindex(3));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1059-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1060-    return 1;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1061-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1062-error:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1063-    lua_pushinteger(L, -1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1064-    lua_replace(L, lua_upvalueindex(3));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1065-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1066-    if (!(ctx->flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1067-        if (ctx->regex_sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1068:            ngx_http_lua_regex_free_study_data(r->pool, ctx->regex_sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1069-            ctx->regex_sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1070-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1071-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1072:        ngx_pfree(r->pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1073-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1074-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1075-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1076-    lua_pushstring(L, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1077-    return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1078-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1079-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1080-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1081-static ngx_uint_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1082-ngx_http_lua_ngx_re_parse_opts(lua_State *L, ngx_http_lua_regex_compile_t *re,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1179-static int
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1180-ngx_http_lua_ngx_re_sub_helper(lua_State *L, unsigned global)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1181-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1182-    ngx_http_lua_regex_t        *re;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1183-    ngx_http_request_t          *r;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1184-    ngx_str_t                    subj;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1185-    ngx_str_t                    pat;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1186-    ngx_str_t                    opts;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1187-    ngx_str_t                    tpl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1188-    ngx_http_lua_main_conf_t    *lmcf;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1189:    ngx_pool_t                  *pool, *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1190-    const char                  *msg;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1191-    ngx_int_t                    rc;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1192-    ngx_uint_t                   n;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1193-    ngx_int_t                    i;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1194-    int                          nargs;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1195-    int                         *cap = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1196-    int                          ovecsize;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1197-    int                          type;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1198-    unsigned                     func;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1199-    int                          offset;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1261-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1262-    /* stack: subj regex repl */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1263-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1264-    re_comp.options = 0;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1265-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1266-    flags = ngx_http_lua_ngx_re_parse_opts(L, &re_comp, &opts, 4);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1267-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1268-    lmcf = ngx_http_get_module_main_conf(r, ngx_http_lua_module);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1269-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1270-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1271:        pool = lmcf->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1272-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1273:        dd("server pool %p", lmcf->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1274-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1275-        lua_pushlightuserdata(L, &ngx_http_lua_regex_cache_key);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1276-        lua_rawget(L, LUA_REGISTRYINDEX); /* table */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1277-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1278-        lua_pushliteral(L, "s");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1279-        lua_pushinteger(L, tpl.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1280-        lua_pushliteral(L, ":");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1281-        lua_pushvalue(L, 2);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1282-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1283-        if (tpl.len != 0) {
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1343-        if (lmcf->regex_cache_entries >= lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1344-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1345-            if (lmcf->regex_cache_entries == lmcf->regex_cache_max_entries) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1346-                ngx_log_error(NGX_LOG_WARN, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1347-                              "lua exceeding regex cache max entries (%i)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1348-                              lmcf->regex_cache_max_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1349-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1350-                lmcf->regex_cache_entries++;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1351-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1352-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1353:            pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1354-            flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1355-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1356-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1357-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1358:        pool = r->pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1359-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1360-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1361-    re_comp.pattern = pat;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1362-    re_comp.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1363-    re_comp.err.data = errstr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1364:    re_comp.pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1365-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1366-    dd("compiling regex");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1367-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1368-    ngx_log_debug6(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1369-                   "lua compiling %ssub regex \"%s\" with options \"%s\" "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1370-                   "(compile once: %d) (dfa mode: %d) (jit mode: %d)",
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1371-                   global ? "g" : "", pat.data, opts.data,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1372-                   (flags & NGX_LUA_RE_COMPILE_ONCE) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1373-                   (flags & NGX_LUA_RE_MODE_DFA) != 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1374-                   (flags & NGX_LUA_RE_MODE_JIT) != 0);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1375-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1376:    old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1377-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1378-    rc = ngx_http_lua_regex_compile(&re_comp);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1379-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1380-    ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1381-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1382-    if (rc != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1383-        dd("compile failed");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1384-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1385-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1386-        lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1387-        lua_pushlstring(L, (char *) re_comp.err.data, re_comp.err.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1388-        return 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1389-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1390-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1391-#if LUA_HAVE_PCRE_JIT
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1392-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1393-    if (flags & NGX_LUA_RE_MODE_JIT) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1394-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1395:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1396-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1397-        sd = pcre_study(re_comp.regex, PCRE_STUDY_JIT_COMPILE, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1398-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1399-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1400-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1401-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1402-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1403-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1404-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1405-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1406-                           "pcre study failed with PCRE_STUDY_JIT_COMPILE: "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1407-                           "%s (%p)", msg, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1408-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1409-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1410-        if (sd != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1411-            int         jitted;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1412-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1413:            old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1414-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1415-            pcre_fullinfo(re_comp.regex, sd, PCRE_INFO_JIT, &jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1416-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1417-            ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1418-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1419-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1420-                           "pcre JIT compiling result: %d", jitted);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1421-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1422-#   endif /* NGX_DEBUG */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1423-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1424-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1425-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1426:        old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1427-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1428-        sd = pcre_study(re_comp.regex, 0, &msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1429-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1430-        ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1431-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1432-#   if (NGX_DEBUG)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1433-        dd("sd = %p", sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1434-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1435-        if (msg != NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1436-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1457-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1458-    dd("compile done, captures %d", re_comp.captures);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1459-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1460-    if (flags & NGX_LUA_RE_MODE_DFA) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1461-        ovecsize = 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1462-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1463-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1464-        ovecsize = (re_comp.captures + 1) * 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1465-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1466-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1467:    cap = ngx_palloc(pool, ovecsize * sizeof(int));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1468-    if (cap == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1469-        flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1470-        msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1471-        goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1472-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1473-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1474-    if (func) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1475-        ctpl = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1476-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1477-    } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1478:        ctpl = ngx_palloc(pool, sizeof(ngx_http_lua_complex_value_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1479-        if (ctpl == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1480-            flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1481-            msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1482-            goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1483-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1484-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1485-        if ((flags & NGX_LUA_RE_COMPILE_ONCE) && tpl.len != 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1486-            /* copy the string buffer pointed to by tpl.data from Lua VM */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1487:            p = ngx_palloc(pool, tpl.len + 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1488-            if (p == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1489-                flags &= ~NGX_LUA_RE_COMPILE_ONCE;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1490-                msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1491-                goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1492-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1493-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1494-            ngx_memcpy(p, tpl.data, tpl.len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1495-            p[tpl.len] = '\0';
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1496-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1497-            tpl.data = p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1498-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1499-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1500-        ngx_memzero(&ccv, sizeof(ngx_http_lua_compile_complex_value_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1501:        ccv.pool = pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1502-        ccv.log = r->connection->log;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1503-        ccv.value = &tpl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1504-        ccv.complex_value = ctpl;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1505-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1506-        if (ngx_http_lua_compile_complex_value(&ccv) != NGX_OK) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1507:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1508:            ngx_pfree(pool, ctpl);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1509-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1510-            if ((flags & NGX_LUA_RE_COMPILE_ONCE) && tpl.len != 0) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1511:                ngx_pfree(pool, tpl.data);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1512-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1513-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1514-            if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1515:                ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1516-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1517-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1518:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1519-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1520-            lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1521-            lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1522-            lua_pushliteral(L, "failed to compile the replacement template");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1523-            return 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1524-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1525-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1526-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1527-    if (flags & NGX_LUA_RE_COMPILE_ONCE) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1528-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1529-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1530-                       "lua saving compiled sub regex (%d captures) into "
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1531-                       "the cache (entries %i)", re_comp.captures,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1532-                       lmcf->regex_cache_entries);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1533-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1534:        re = ngx_palloc(pool, sizeof(ngx_http_lua_regex_t));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1535-        if (re == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1536-            msg = "no memory";
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1537-            goto error;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1538-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1539-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1540-        dd("saving regex %p, ncaptures %d,  captures %p", re_comp.regex,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1541-           re_comp.captures, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1542-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1543-        re->regex = re_comp.regex;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1544-        re->regex_sd = sd;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1750-                            subj.len - offset);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1751-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1752-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1753-        luaL_pushresult(&luabuf);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1754-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1755-        dd("the dst string: %s", lua_tostring(L, -1));
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1756-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1757-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1758-    if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1759-        if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1760:            ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1761-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1762-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1763-        if (re_comp.regex) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1764:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1765-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1766-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1767-        if (ctpl) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1768:            ngx_pfree(pool, ctpl);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1769-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1770-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1771-        if (cap) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1772:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1773-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1774-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1775-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1776-    lua_pushinteger(L, count);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1777-    return 2;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1778-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1779-error:
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1780-    if (!(flags & NGX_LUA_RE_COMPILE_ONCE)) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1781-        if (sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1782:            ngx_http_lua_regex_free_study_data(pool, sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1783-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1784-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1785-        if (re_comp.regex) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1786:            ngx_pfree(pool, re_comp.regex);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1787-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1788-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1789-        if (ctpl) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1790:            ngx_pfree(pool, ctpl);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1791-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1792-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1793-        if (cap) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1794:            ngx_pfree(pool, cap);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1795-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1796-    }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1797-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1798-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1799-    lua_pushnil(L);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1800-    lua_pushstring(L, msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1801-    return 3;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1802-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1803-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1804-
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1819-    lua_setfield(L, -2, "sub");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1820-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1821-    lua_pushcfunction(L, ngx_http_lua_ngx_re_gsub);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1822-    lua_setfield(L, -2, "gsub");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1823-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1824-    lua_setfield(L, -2, "re");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1825-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1826-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1827-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1828-static void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1829:ngx_http_lua_regex_free_study_data(ngx_pool_t *pool, pcre_extra *sd)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1830-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1831-    ngx_pool_t              *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1832-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1833:    old_pool = ngx_http_lua_pcre_malloc_init(pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1834-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1835-#if LUA_HAVE_PCRE_JIT
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1836-    pcre_free_study(sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1837-#else
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1838-    pcre_free(sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1839-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1840-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1841-    ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1842-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1843-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1844-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1845-static ngx_int_t
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1846-ngx_http_lua_regex_compile(ngx_http_lua_regex_compile_t *rc)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1847-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1848-    int           n, erroff;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1849-    char         *p;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1850-    const char   *errstr;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1851-    pcre         *re;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1852-    ngx_pool_t   *old_pool;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1853-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1854:    old_pool = ngx_http_lua_pcre_malloc_init(rc->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1855-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1856-    re = pcre_compile((const char *) rc->pattern.data, (int) rc->options,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1857-                      &errstr, &erroff, NULL);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1858-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1859-    ngx_http_lua_pcre_malloc_done(old_pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1860-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1861-    if (re == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1862-        if ((size_t) erroff == rc->pattern.len) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1863-           rc->err.len = ngx_snprintf(rc->err.data, rc->err.len,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1864-                                      "pcre_compile() failed: %s in \"%V\"",
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1896-}
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1897-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1898-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1899-static void
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1900-ngx_http_lua_ngx_re_gmatch_cleanup(void *data)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1901-{
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1902-    ngx_http_lua_regex_ctx_t    *ctx = data;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1903-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1904-    if (ctx) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1905-        if (ctx->regex_sd) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c:1906:            ngx_http_lua_regex_free_study_data(ctx->request->pool,
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1907-                                               ctx->regex_sd);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1908-            ctx->regex_sd = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1909-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1910-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1911-        if (ctx->cleanup) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1912-            *ctx->cleanup = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1913-            ctx->cleanup = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1914-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1915-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_regex.c-1916-        ctx->request = NULL;
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-87-           "stack top    sp = 1");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-88-        ngx_http_lua_set_by_lua_env(L, r, nargs, args);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-89-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-90-        /*  passing directive arguments to the user code */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-91-        for (i = 0; i < nargs; i++) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-92-            lua_pushlstring(L, (const char *) args[i].data, args[i].len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-93-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-94-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-95-#if (NGX_PCRE)
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-96-        /* XXX: work-around to nginx regex subsystem */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c:97:        old_pool = ngx_http_lua_pcre_malloc_init(r->pool);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-98-#endif
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-99-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-100-        lua_pushcfunction(L, ngx_http_lua_traceback);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-101-        lua_insert(L, 1);  /* put it under chunk and args */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-102-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-103-        dd("protected call user code");
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-104-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-105-        rc = lua_pcall(L, nargs, 1, 1);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-106-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-107-        dd("after protected call user code");
--
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-126-                          "failed to run set_by_lua*: %*s", len, err_msg);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-127-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-128-            lua_settop(L, 0);    /*  clear remaining elems on stack */
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-129-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-130-            return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-131-        }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-132-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-133-        data = (u_char *) lua_tolstring(L, -1, &len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-134-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-135-        if (data) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c:136:            val->data = ngx_palloc(r->pool, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-137-            if (val->data == NULL) {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-138-                return NGX_ERROR;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-139-            }
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-140-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-141-            ngx_memcpy(val->data, data, len);
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-142-            val->len = len;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-143-
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-144-        } else {
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-145-            val->data = NULL;
./nginx/3party/nginx_lua_module/src/ngx_http_lua_setby.c-146-            val->len = 0;
--
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-120-    ngx_string("Warning"),		/** 14.46 **/
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-121-    ngx_string("WWW-Authenticate"),	/** 14.47 **/
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-122-    ngx_string("Cookie"),		/** nope  **/
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-123-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-124-    ngx_null_string
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-125-};
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-126-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-127-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-128-static ngx_int_t
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-129-ngx_http_rfc2616_rbtree_init(ngx_http_rfc2616_check_loc_conf_t * rcf,
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c:130:			     ngx_log_t * log, ngx_pool_t * pool)
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-131-{
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-132-    ngx_int_t i;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-133-    ngx_str_node_t *n;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-134-    uint32_t hash;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-135-    char buff[BUFSIZ];
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-136-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-137-    ngx_rbtree_init(&rcf->rfc2616_check_rbtree,
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-138-		    &rcf->rfc2616_check_rbtree_sentinel,
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-139-		    ngx_str_rbtree_insert_value);
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-140-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-141-    for (i = 0;; i++) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-142-	if (ngx_http_rfc2616_allow_command[i].len == 0) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-143-	    break;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-144-	}
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c:145:	n = ngx_palloc(pool, sizeof(ngx_str_node_t));
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-146-	if (n == NULL) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-147-	    goto error;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-148-	}
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-149-	n->str = ngx_http_rfc2616_allow_command[i];
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-150-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-151-	hash = ngx_crc32_long(n->str.data, n->str.len);
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-152-	n->node.key = hash;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-153-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-154-	memset(buff, 0, sizeof(buff));
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-155-	snprintf(buff, n->str.len + 1, "%s", n->str.data);
--
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-263-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-264-    /** get ours location configuration **/
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-265-    rcf = ngx_http_conf_get_module_srv_conf(cf,
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-266-					    ngx_http_rfc2616_check_module);
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-267-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-268-    value = cf->args->elts;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-269-    if (ngx_strcmp(value[1].data, "on") == 0) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-270-	rcf->use_rfc2616_check = USE_RFC2616_CHECK;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-271-    }
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-272-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c:273:    if (ngx_http_rfc2616_rbtree_init(rcf, cf->log, cf->pool) != NGX_OK) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-274-	return NGX_CONF_ERROR;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-275-    }
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-276-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-277-    return NGX_CONF_OK;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-278-}
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-279-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-280-static ngx_int_t ngx_http_rfccheck_init(ngx_conf_t *cf)
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-281-{
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-282-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-283-    ngx_http_handler_pt        *h;
--
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-292-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-293-    *h = ngx_http_rfc2616_check_handler;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-294-    return NGX_OK;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-295-}
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-296-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-297-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-298-static void *ngx_http_rfc2616_check_create_conf(ngx_conf_t * cf)
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-299-{
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-300-    ngx_http_rfc2616_check_loc_conf_t *rcf;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-301-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c:302:    rcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_rfc2616_check_loc_conf_t));
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-303-    if (rcf == NULL) {
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-304-	return NULL;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-305-    }
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-306-    rcf->use_rfc2616_check = 0;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-307-
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-308-    return rcf;
./nginx/3party/ngx_http_rfc2616_check/ngx_http_rfc2616_check_module.c-309-}
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-705-            ngx_http_healthchecks[i].health_ev.timer_set = 0;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-706-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-707-            t = abs(ngx_random() % ngx_http_healthchecks[i].conf->health_delay);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-708-            ngx_add_timer(&ngx_http_healthchecks[i].ownership_ev, t);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-709-        }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-710-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-711-    return NGX_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-712-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-713-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-714-static ngx_int_t ngx_http_healthcheck_preconfig(ngx_conf_t *cf) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:715:    ngx_http_healthchecks_arr = ngx_array_create(cf->pool, 10,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-716-            sizeof(ngx_http_healthcheck_status_t));
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-717-    if (ngx_http_healthchecks_arr == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-718-        return NGX_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-719-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-720-    return NGX_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-721-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-722-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-723-static ngx_int_t ngx_http_healthcheck_init(ngx_conf_t *cf) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-724-    ngx_str_t        *shm_name;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-725-    ngx_shm_zone_t   *shm_zone;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-726-    ngx_uint_t         i;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-727-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-728-      "healthcheck: healthcheck_init");
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-729-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-730-    if (ngx_http_healthchecks_arr->nelts == 0) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-731-      ngx_http_healthchecks_shm = NULL;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-732-      return NGX_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-733-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-734-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:735:    shm_name = ngx_palloc(cf->pool, sizeof *shm_name);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-736-    shm_name->len = sizeof("http_healthcheck") - 1;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-737-    shm_name->data = (unsigned char *) "http_healthcheck";
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-738-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-739-    // I guess a page each is good enough (?)
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-740-    shm_zone = ngx_shared_memory_add(cf, shm_name,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-741-            ngx_pagesize * (ngx_http_healthchecks_arr->nelts + 1),
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-742-            &ngx_http_healthcheck_module);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-743-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-744-    if (shm_zone == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-745-        return NGX_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-746-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-747-    shm_zone->init = ngx_http_healthcheck_init_zone;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-748-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-749-    for (i=0; i<ngx_http_healthchecks_arr->nelts; i++) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-750-      // It says 'temp', but it should last forever-ish
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:751:      ngx_http_healthchecks[i].read_buffer = ngx_create_temp_buf(cf->pool,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-752-          ngx_http_healthchecks[i].conf->health_buffersize);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-753-      if (ngx_http_healthchecks[i].read_buffer  == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-754-          return NGX_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-755-      }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-756-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-757-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-758-    return NGX_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-759-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-760-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-761-static ngx_int_t
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-787-    shm_zone->data = ngx_http_healthchecks_shm;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-788-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-789-    return NGX_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-790-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-791-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-792-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-793-// --- BEGIN PUBLIC METHODS ---
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-794-ngx_int_t
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-795-ngx_http_healthcheck_add_peer(ngx_http_upstream_srv_conf_t *uscf,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-796-#if defined(nginx_version) && nginx_version >= 8022
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:797:        ngx_addr_t *peer, ngx_pool_t *pool) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-798-#else
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:799:        ngx_peer_addr_t *peer, ngx_pool_t *pool) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-800-#endif
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-801-    ngx_http_healthcheck_status_t *status;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-802-    status = ngx_array_push(ngx_http_healthchecks_arr);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-803-    if (status == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-804-        return NGX_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-805-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-806-    status->conf = uscf;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-807-    status->peer = peer;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-808-    status->index = ngx_http_healthchecks_arr->nelts - 1;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:809:    status->pc = ngx_pcalloc(pool, sizeof(ngx_peer_connection_t));
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-810-    if (status->pc == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-811-        return NGX_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-812-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-813-    return ngx_http_healthchecks_arr->nelts - 1;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-814-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-815-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-816-ngx_int_t ngx_http_healthcheck_is_down(ngx_uint_t index, ngx_log_t *log) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-817-    if (index >= ngx_http_healthchecks_arr->nelts) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-818-        ngx_log_error(NGX_LOG_CRIT, log, 0,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-819-            "healthcheck: Invalid index to is_down: %i", index);
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-848-        case NGX_HEALTH_FULL_BUFFER:
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-849-            return "Contents could not fit read buffer";
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-850-        case NGX_HEALTH_EARLY_CLOSE:
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-851-            return "Connection closed early";
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-852-        default:
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-853-            return "Unknown state";
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-854-  }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-855-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-856-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-857-ngx_buf_t* ngx_http_healthcheck_buf_append(ngx_buf_t *dst, ngx_buf_t *src,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:858:    ngx_pool_t *pool) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-859-  //TODO: Consider using a buffer chain
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-860-  ngx_buf_t *new_buf;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-861-    if (dst->last + (src->last - src->pos) > dst->end) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:862:        new_buf = ngx_create_temp_buf(pool, ((dst->last - dst->pos) + (src->last - src->pos)) * 2 + 1);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-863-        if (new_buf == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-864-            return NULL;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-865-        }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-866-        ngx_memcpy(new_buf->last, dst->pos, (dst->last - dst->pos));
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-867-        new_buf->last += (dst->last - dst->pos);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-868-        // TODO: I don't think there's a way to uncreate the dst buffer (??)
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-869-        // Should be ok because these are small and cleared at the end of
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-870-        // the status request
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-871-        dst = new_buf;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-872-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-873-    ngx_memcpy(dst->last, src->pos, (src->last - src->pos));
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-874-    dst->last += (src->last - src->pos);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-875-    return dst;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-876-}
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-877-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:878:#define NGX_HEALTH_APPEND_CHECK(dst, src, pool) \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-879-    do { \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:880:        dst = ngx_http_healthcheck_buf_append(b, tmp, pool); \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-881-        if (dst == NULL) { \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-882-            return NGX_HTTP_INTERNAL_SERVER_ERROR; \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-883-        } \
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-884-    } while (0);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-885-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-886-static ngx_int_t ngx_http_healthcheck_status_handler(ngx_http_request_t *r) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-887-    ngx_int_t          rc;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-888-    ngx_buf_t         *b, *tmp;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-889-    ngx_chain_t        out;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-890-    ngx_uint_t i;
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-906-    if (r->method == NGX_HTTP_HEAD) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-907-        r->headers_out.status = NGX_HTTP_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-908-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-909-        rc = ngx_http_send_header(r);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-910-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-911-        if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-912-            return rc;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-913-        }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-914-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-915-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:916:    b = ngx_create_temp_buf(r->pool, 10);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:917:    tmp = ngx_create_temp_buf(r->pool, 1000);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-918-    if (b == NULL || tmp == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-919-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-920-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-921-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-922-    tmp->last = ngx_snprintf(tmp->pos, tmp->end - tmp->pos,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-923-        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-924-        "\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-925-        "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-926-        "<head>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-927-        "  <title>NGINX Healthcheck status</title>\n"
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-933-        "    <th>Name</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-934-        "    <th>Owner PID</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-935-        "    <th>Last action time</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-936-        "    <th>Concurrent status values</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-937-        "    <th>Time of concurrent values</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-938-        "    <th>Last response down</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-939-        "    <th>Last health status</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-940-        "    <th>Is down?</th>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-941-        "  </tr>\n");
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-942-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:943:    NGX_HEALTH_APPEND_CHECK(b, tmp, (r->pool));
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-944-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-945-    for (i=0; i<ngx_http_healthchecks_arr->nelts; i++) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-946-      stat = &ngx_http_healthchecks[i];
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-947-      shm  = stat->shm;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-948-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-949-      tmp->last = ngx_snprintf(tmp->pos, tmp->end - tmp->pos,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-950-        "  <tr>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-951-        "    <td>%i</td>\n" // Index
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-952-        "    <td>%V</td>\n" // Name
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-953-        "    <td>%P</td>\n" // PID
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-955-        "    <td>%i</td>\n" // concurrent status values
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-956-        "    <td>%M</td>\n" // Time concurrent
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-957-        "    <td>%d</td>\n" // Last response down?
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-958-        "    <td>%s</td>\n" // Code of last response
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-959-        "    <td>%A</td>\n" // Is down?
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-960-        "  </tr>\n", stat->index, &stat->peer->name, shm->owner,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-961-                     shm->action_time, shm->concurrent,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-962-                     shm->since, (int)shm->last_down,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-963-                     ngx_http_healthcheck_statestr(shm->down_code),
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-964-                     shm->down);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:965:      NGX_HEALTH_APPEND_CHECK(b, tmp, r->pool);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-966-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-967-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-968-    tmp->last = ngx_snprintf(tmp->pos, tmp->end - tmp->pos,
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-969-        "</table>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-970-        "</body>\n"
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-971-        "</html>\n");
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:972:    NGX_HEALTH_APPEND_CHECK(b, tmp, r->pool);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-973-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-974-    r->headers_out.status = NGX_HTTP_OK;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-975-    r->headers_out.content_length_n = b->last - b->pos;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-976-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-977-    b->last_buf = 1;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-978-    out.buf = b;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-979-    out.next = NULL;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-980-
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-981-    rc = ngx_http_send_header(r);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-982-
--
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1054-    uscf->health_send.len  = 0;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1055-    size_t at;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1056-    uscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_upstream_module);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1057-    for (i = 1; i<num; i++) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1058-        if (i !=1) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1059-            uscf->health_send.len += 2; // \r\n
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1060-        }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1061-        uscf->health_send.len += value[i].len;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1062-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1063-    uscf->health_send.len += (sizeof(CRLF) - 1) * 2;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c:1064:    uscf->health_send.data = ngx_pnalloc(cf->pool, uscf->health_send.len + 1);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1065-    if (uscf->health_send.data == NULL) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1066-        return "Unable to alloc data to send";
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1067-    }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1068-    at = 0;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1069-    for (i = 1; i<num; i++) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1070-        if (i !=1) {
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1071-            ngx_memcpy(uscf->health_send.data + at, CRLF, sizeof(CRLF) - 1);
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1072-            at += sizeof(CRLF) - 1;
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1073-        }
./nginx/3party/healthcheck_nginx_upstreams/ngx_http_healthcheck_module.c-1074-        ngx_memcpy(uscf->health_send.data + at, value[i].data, value[i].len);
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-259-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-260-    node->parent = temp;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-261-    node->left = sentinel;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-262-    node->right = sentinel;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-263-    ngx_rbt_red(node);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-264-}
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-265-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-266-#define NGX_BITVECTOR_ELT_SIZE (sizeof(uintptr_t) * 8)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-267-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-268-    static uintptr_t *
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:269:ngx_bitvector_alloc(ngx_pool_t *pool, ngx_uint_t size, uintptr_t *small)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-270-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-271-    ngx_uint_t nelts = (size + NGX_BITVECTOR_ELT_SIZE - 1) / NGX_BITVECTOR_ELT_SIZE;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-272-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-273-    if (small && nelts == 1) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-274-        *small = 0;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-275-        return small;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-276-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-277-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:278:    return ngx_pcalloc(pool, nelts * NGX_BITVECTOR_ELT_SIZE);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-279-}
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-280-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-281-    static ngx_int_t
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-282-ngx_bitvector_test(uintptr_t *bv, ngx_uint_t bit)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-283-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-284-    ngx_uint_t                      n, m;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-285-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-286-    n = bit / NGX_BITVECTOR_ELT_SIZE;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-287-    m = 1 << (bit % NGX_BITVECTOR_ELT_SIZE);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-288-
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-458-        n = 0;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-459-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-460-        for (i = 0; i < us->servers->nelts; i++) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-461-            if (server[i].backup) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-462-                continue;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-463-            }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-464-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-465-            n += server[i].naddrs;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-466-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-467-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:468:        peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_fair_peers_t)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-469-                + sizeof(ngx_http_upstream_fair_peer_t) * (n - 1));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-470-        if (peers == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-471-            return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-472-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-473-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-474-        peers->number = n;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-475-        peers->name = &us->host;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-476-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-477-        n = 0;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-478-
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-508-                continue;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-509-            }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-510-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-511-            n += server[i].naddrs;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-512-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-513-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-514-        if (n == 0) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-515-            return NGX_OK;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-516-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-517-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:518:        backup = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_fair_peers_t)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-519-                + sizeof(ngx_http_upstream_fair_peer_t) * (n - 1));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-520-        if (backup == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-521-            return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-522-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-523-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-524-        backup->number = n;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-525-        backup->name = &us->host;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-526-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-527-        n = 0;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-528-
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-560-                "no port in upstream \"%V\" in %s:%ui",
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-561-                &us->host, us->file_name, us->line);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-562-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-563-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-564-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-565-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-566-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-567-    u.host = us->host;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-568-    u.port = (in_port_t) (us->port ? us->port : us->default_port);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-569-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:570:    if (ngx_inet_resolve_host(cf->pool, &u) != NGX_OK) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-571-        if (u.err) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-572-            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-573-                    "%s in upstream \"%V\" in %s:%ui",
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-574-                    u.err, &us->host, us->file_name, us->line);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-575-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-576-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-577-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-578-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-579-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-580-    n = u.naddrs;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-581-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:582:    peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_fair_peers_t)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-583-            + sizeof(ngx_http_upstream_fair_peer_t) * (n - 1));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-584-    if (peers == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-585-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-586-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-587-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-588-    peers->number = n;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-589-    peers->name = &us->host;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-590-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-591-    for (i = 0; i < u.naddrs; i++) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-592-        peers->peer[i].sockaddr = u.addrs[i].sockaddr;
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-664- **/
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-665-    ngx_int_t
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-666-ngx_http_upstream_init_fair_multiplex(ngx_conf_t *cf,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-667-        ngx_http_upstream_srv_conf_t *us, ngx_int_t nr_peers,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-668-        ngx_http_upstream_multiplex_srv_conf_t *umsf)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-669-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-670-    ngx_http_upstream_multiplex_cache_t     *cached;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-671-    ngx_int_t                               i;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-672-    ngx_http_upstream_multiplex_cache_ctx_t *queue_ctx;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-673-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:674:    cached = ngx_pcalloc(cf->pool, 
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-675-            sizeof(ngx_http_upstream_multiplex_cache_t) * umsf->max_cached);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-676-    if (cached == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-677-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-678-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-679-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:680:    queue_ctx = ngx_pcalloc(cf->pool,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-681-            sizeof(ngx_http_upstream_multiplex_cache_ctx_t) * nr_peers);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-682-    if (queue_ctx == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-683-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-684-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-685-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-686-    ngx_queue_init(&umsf->free);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-687-    for (i = 0; i < nr_peers; i++) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-688-        ngx_queue_init(&queue_ctx[i].cache);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-689-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-690-
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-710-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-711-    ngx_http_upstream_multiplex_srv_conf_t       *umsf;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-712-#endif
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-713-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-714-    /* do the dirty work using rr module */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-715-    if (ngx_http_upstream_init_fair_rr(cf, us) != NGX_OK) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-716-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-717-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-718-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-719-    /* setup our wrapper around rr */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:720:    peers = ngx_palloc(cf->pool, sizeof *peers);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-721-    if (peers == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-722-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-723-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-724-    peers = us->peer.data;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-725-    n = peers->number;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-726-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:727:    shm_name = ngx_palloc(cf->pool, sizeof *shm_name);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-728-    shm_name->len = sizeof("upstream_fair") - 1;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-729-    shm_name->data = (unsigned char *) "upstream_fair";
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-730-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-731-    if (ngx_http_upstream_fair_shm_size == 0) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-732-        ngx_http_upstream_fair_shm_size = 8 * ngx_pagesize;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-733-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-734-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-735-    ngx_http_upstream_fair_shm_zone = ngx_shared_memory_add(
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-736-            cf, shm_name, ngx_http_upstream_fair_shm_size, &ngx_http_upstream_fair_module);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-737-    if (ngx_http_upstream_fair_shm_zone == NULL) {
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1370-ngx_http_upstream_init_fair_peer(ngx_http_request_t *r,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1371-        ngx_http_upstream_srv_conf_t *us)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1372-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1373-    ngx_http_upstream_fair_peer_data_t     *fp;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1374-    ngx_http_upstream_fair_peers_t         *usfp;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1375-    ngx_uint_t                              n;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1376-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1377-    fp = r->upstream->peer.data;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1378-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1379-    if (fp == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1380:        fp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_fair_peer_data_t));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1381-        if (fp == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1382-            return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1383-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1384-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1385-        r->upstream->peer.data = fp;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1386-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1387-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1388-    usfp = us->peer.data;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1389-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1390:    fp->tried = ngx_bitvector_alloc(r->pool, usfp->number, &fp->data);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1391:    fp->done = ngx_bitvector_alloc(r->pool, usfp->number, &fp->data2);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1392-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1393-    if (fp->tried == NULL || fp->done == NULL) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1394-        return NGX_ERROR;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1395-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1396-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1397-    /* set up shared memory area */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1398-    ngx_http_upstream_fair_shm_alloc(usfp, r->connection->log);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1399-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1400-    fp->current = usfp->current;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1401-    fp->peers = usfp;
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1493-        /* TODO: may block */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1494-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1495-        ngx_ssl_free_session(old_ssl_session);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1496-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1497-}
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1498-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1499-#endif
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1500-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1501-#if (NGX_HTTP_EXTENDED_STATUS)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1502-    static void
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1503:ngx_http_upstream_fair_walk_status(ngx_pool_t *pool, ngx_chain_t *cl, ngx_int_t *length,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1504-        ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1505-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1506-    ngx_http_upstream_fair_shm_block_t     *s_node = (ngx_http_upstream_fair_shm_block_t *) node;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1507-    ngx_http_upstream_fair_peers_t         *peers;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1508-    ngx_chain_t                            *new_cl;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1509-    ngx_buf_t                              *b;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1510-    ngx_uint_t                              size, i;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1511-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1512-    if (node == sentinel) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1513-        return;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1514-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1515-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1516-    if (node->left != sentinel) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1517:        ngx_http_upstream_fair_walk_status(pool, cl, length, node->left, sentinel);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1518-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1519-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1520-    if (s_node->generation != ngx_http_upstream_fair_generation) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1521-        size = 100;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1522-        peers = NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1523-    } else {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1524-        /* this is rather ugly (casting an uintptr_t back into a pointer
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1525-         * but as long as the generation is still the same (verified above),
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1526-         * it should be still safe
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1527-         */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1528-        peers = (ngx_http_upstream_fair_peers_t *) s_node->peers;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1529-        if (!peers->shared) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1530-            goto next;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1531-        }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1532-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1533-        size = 200 + peers->number * 120; /* LOTS of slack */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1534-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1535-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1536:    b = ngx_create_temp_buf(pool, size);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1537-    if (!b) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1538-        goto next;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1539-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1540-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1541:    new_cl = ngx_alloc_chain_link(pool);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1542-    if (!new_cl) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1543-        goto next;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1544-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1545-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1546-    new_cl->buf = b;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1547-    new_cl->next = NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1548-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1549-    while (cl->next) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1550-        cl = cl->next;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1551-    }
--
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1569-    *length += b->last - b->pos;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1570-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1571-    if (cl->buf) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1572-        cl->buf->last_buf = 0;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1573-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1574-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1575-    cl = cl->next;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1576-next:
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1577-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1578-    if (node->right != sentinel) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1579:        ngx_http_upstream_fair_walk_status(pool, cl, length, node->right, sentinel);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1580-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1581-}
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1582-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1583-    static ngx_chain_t*
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1584-ngx_http_upstream_fair_report_status(ngx_http_request_t *r, ngx_int_t *length)
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1585-{
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1586-    ngx_buf_t              *b;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1587-    ngx_chain_t            *cl;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1588-    ngx_slab_pool_t        *shpool;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1589-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1590:    b = ngx_create_temp_buf(r->pool, sizeof("\nupstream_fair status report:\n"));
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1591-    if (!b) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1592-        return NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1593-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1594-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1595:    cl = ngx_alloc_chain_link(r->pool);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1596-    if (!cl) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1597-        return NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1598-    }
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1599-    cl->next = NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1600-    cl->buf = b;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1601-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1602-    b->last = ngx_cpymem(b->last, "\nupstream_fair status report:\n",
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1603-            sizeof("\nupstream_fair status report:\n") - 1);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1604-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1605-    *length = b->last - b->pos;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1606-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1607-    shpool = (ngx_slab_pool_t *)ngx_http_upstream_fair_shm_zone->shm.addr;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1608-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1609-    ngx_shmtx_lock(&shpool->mutex);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1610-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c:1611:    ngx_http_upstream_fair_walk_status(r->pool, cl,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1612-            length,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1613-            ngx_http_upstream_fair_rbtree->root,
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1614-            ngx_http_upstream_fair_rbtree->sentinel);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1615-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1616-    ngx_shmtx_unlock(&shpool->mutex);
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1617-
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1618-    if (!cl->next || !cl->next->buf) {
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1619-        /* no upstream_fair status to report */
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1620-        return NULL;
./nginx/3party/nginx-upstream-fair/ngx_http_upstream_fair_module.c-1621-    }
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-79-    ngx_queue_buf_t *free_queue;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-80-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-81-    /* alloced by ctx->tpool */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-82-    ngx_chain_t   *line_in;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-83-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-84-    /* the temporary buffer to store the line buffer before substitution */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-85-    ngx_buf_t     *line_src;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-86-    /* the temporary buffer to store the line buffer after substitution */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-87-    ngx_buf_t     *line_dst;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-88-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:89:    /* alloced by r->pool */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-90-    ngx_chain_t   *line_out;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-91-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-92-    /* save every chain which does not find the linefeed */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-93-    ngx_chain_t   *saved;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-94-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-95-    /* 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-96-     * last_pos is the last not matched postion, the chain will
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-97-     * not be splited until a successful matching. This will reduce 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-98-     * the split frequency of the chain. 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-99-     * */
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-257-ngx_http_subs_init_context(ngx_http_request_t *r)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-258-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-259-    ngx_uint_t                 i;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-260-    ngx_http_subs_ctx_t       *ctx;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-261-    sub_pair_t                *src_pair, *dst_pair;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-262-    ngx_http_subs_loc_conf_t  *slcf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-263-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-264-    slcf = ngx_http_get_module_loc_conf(r, ngx_http_subs_filter_module);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-265-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-266-    /* Everything in ctx is NULL or 0. */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:267:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_subs_ctx_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-268-    if (ctx == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-269-        return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-270-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-271-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-272-    ngx_http_set_ctx(r, ctx, ngx_http_subs_filter_module);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-273-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:274:    ctx->sub_pairs = ngx_array_create(r->pool, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-275-            slcf->sub_pairs->nelts, sizeof(sub_pair_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-276-    if (slcf->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-277-        return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-278-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-279-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-280-    /* Deep copy sub_pairs from slcf to ctx */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-281-    src_pair = (sub_pair_t *) slcf->sub_pairs->elts;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-282-    for (i = 0; i < slcf->sub_pairs->nelts; i++) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-283-        dst_pair = ngx_array_push(ctx->sub_pairs);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-284-        if (dst_pair == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-285-            return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-286-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-287-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-288-        ngx_memcpy(dst_pair, src_pair + i, sizeof(sub_pair_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-289-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-290-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:291:    ctx->out = ngx_palloc(r->pool, sizeof(ngx_queue_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-292-    ngx_queue_init(&ctx->out->queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-293-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:294:    ctx->free_queue = ngx_palloc(r->pool, sizeof(ngx_queue_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-295-    ngx_queue_init(&ctx->free_queue->queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-296-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-297-    return NGX_OK;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-298-}
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-299-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-300-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-301-static ngx_int_t 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-302-ngx_http_subs_body_filter(ngx_http_request_t *r, ngx_chain_t *in)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-303-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-304-    ngx_buf_t                 *b = NULL;
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-338-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-339-        if (rc == NGX_DECLINED) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-340-            continue;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-341-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-342-        else if (rc == NGX_ERROR) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-343-            goto failed;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-344-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-345-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-346-        /* NGX_OK */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-347-        if (ngx_queue_empty(&ctx->out->queue)) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:348:            qb = ngx_alloc_queue_buf(r->pool, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:349:            b = create_buffer(NULL, 0, r->pool);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-350-            
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-351-            if (qb == NULL || b == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-352-                goto failed;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-353-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-354-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-355-            qb->buf = b;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-356-            
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-357-            ngx_queue_insert_tail(&ctx->out->queue, &qb->queue);     
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-358-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-359-
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-375-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-376-            /*} else {*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-377-            /*ngx_log_debug4(NGX_LOG_DEBUG_HTTP, log, 0,*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-378-            /*"[subs_filter] buffer not in memory: cl->buf=%p, cl->buf->shadow=%p, last_buf=%d, in_file=%d",*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-379-            /*cl->buf, cl->buf->shadow, cl->buf->last_buf, cl->buf->in_file);*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-380-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-381-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-382-        /* copy line_in to saved. */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-383-        if (ctx->line_in) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-384-            delete_and_free_chain(&ctx->saved, &ctx->free);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:385:            ctx->saved = duplicate_chains(ctx->line_in, &ctx->free, r->pool);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-386-            if (ctx->saved == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-387-                goto failed;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-388-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-389-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-390-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-391-        if (cl->next != NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-392-            continue;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-393-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-394-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-395-        /* Last chain */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-396-        if (cl->buf->last_buf){
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-397-            if (ctx->saved) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:398:                ngx_queue_chain_add_copy(r->pool, &ctx->out->queue, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-399-                        ctx->saved, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-400-                ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-401-                        "[subs_filter] Lost last linefeed, but output anyway.");
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-402-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-403-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-404-            q = ngx_queue_last(&ctx->out->queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-405-            qb = ngx_queue_data(q, ngx_queue_buf_t, queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-406-            b = qb->buf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-407-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-408-            if (b == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:409:                b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-410-                b->sync = 1;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-411-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-412-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-413-            b->last_buf = 1;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-414-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-415-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-416-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-417-    ngx_http_subs_body_filter_clean_context(r, ctx);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-418-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-419-    if (ngx_queue_empty(&ctx->out->queue) && ctx->busy == NULL) {
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-443-    u_char                    *charset, *p;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-444-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-445-    log = r->connection->log;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-446-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-447-    ctx = ngx_http_get_module_ctx(r, ngx_http_subs_filter_module);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-448-    if (ctx == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-449-        return ngx_http_next_body_filter(r, in);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-450-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-451-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-452-    if (in) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:453:        if (ngx_chain_add_copy(r->pool, &ctx->in, in) == NGX_ERROR) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-454-            return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-455-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-456-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-457-        pool_size = 0;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-458-        for (cl = ctx->in; cl; cl = cl->next) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-459-            if (cl->buf) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-460-                pool_size += ngx_buf_size(cl->buf);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-461-                ngx_log_debug5(NGX_LOG_DEBUG_HTTP, log, 0,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-462-                        "subs in buffer: %p, size:%uz, sync:%d, last_buf:%d, in_memory:%d", 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-463-                        cl->buf, ngx_buf_size(cl->buf), cl->buf->sync, cl->buf->last_buf,
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-575-        ctx->line_in = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-576-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-577-        if (rc < 0) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-578-            return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-579-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-580-        else if (rc > 0) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-581-            /* Matched at least 1 time*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-582-            delete_and_free_chain(&ctx->saved, &ctx->free);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-583-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-584-            if (ctx->line_out) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:585:                ngx_queue_chain_add_copy(r->pool, &ctx->out->queue, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-586-                        ctx->line_out, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-587-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:588:                ngx_free_chain(r->pool, ctx->line_out);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-589-                ctx->line_out = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-590-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-591-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-592-        else {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-593-            /* Not match, we will output the saved part of content*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-594-            if (ctx->saved) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:595:                ngx_queue_chain_add_copy(r->pool, &ctx->out->queue, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-596-                        ctx->saved, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-597-                ctx->saved = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-598-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-599-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-600-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-601-        return NGX_OK;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-602-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-603-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-604-    p = b->pos;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-605-
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-639-                return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-640-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-641-            else if (rc > 0) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-642-                /* Matched at least 1 time*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-643-                delete_and_free_chain(&ctx->saved, &ctx->free);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-644-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-645-                ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "Last_pos :%p ", ctx->last_pos);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-646-                ngx_http_subs_body_filter_greedy_split_chain(r, ctx, cl);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-647-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-648-                if (ctx->line_out) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:649:                    ngx_queue_chain_add_copy(r->pool, &ctx->out->queue, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-650-                            ctx->line_out, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-651-                    b->pos += len;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-652-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:653:                    ngx_free_chain(r->pool, ctx->line_out);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-654-                    ctx->line_out = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-655-                }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-656-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-657-            else {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-658-                /* Not match, we will output the saved part of content*/
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-659-                if (ctx->saved) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:660:                    ngx_queue_chain_add_copy(r->pool, &ctx->out->queue, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-661-                            ctx->saved, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-662-                    ctx->saved = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-663-                }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-664-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-665-                ctx->last_pos = p;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-666-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-667-        } else {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-668-            /* Not find the linefeed in this chain */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-669-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-670-                    "Buffer last, last_pos :%p ", ctx->last_pos);
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-824-        
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-825-#if SUBS_DEBUG
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-826-        ngx_str_t    line;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-827-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-828-        line.data = dst->pos;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-829-        line.len = dst->last - dst->pos;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-830-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-831-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "current line out: \"%V\"", &line);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-832-#endif
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-833-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:834:        ctx->line_out = duplicate_chain_buffer(dst->pos, dst->last - dst->pos, r->pool);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-835-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-836-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-837-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "match counts: %d ", match_count);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-838-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-839-    return match_count;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-840-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-841-failed:
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-842-    ngx_log_error(NGX_LOG_DEBUG_HTTP, log, 0,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-843-            "[subs_filter]  ngx_http_subs_match error.");
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-844-
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-878-        sub_pair_t *pair, ngx_buf_t *b, ngx_buf_t *dst, ngx_pool_t *tpool) 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-879-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-880-    ngx_str_t  line;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-881-    ngx_log_t *log;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-882-    ngx_int_t  rc, count = 0;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-883-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-884-    log = r->connection->log;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-885-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-886-    if (pair->captures == NULL || pair->ncaptures == 0) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-887-        pair->ncaptures = (NGX_HTTP_MAX_CAPTURES + 1) * 3;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:888:        pair->captures = (int *)(ngx_int_t)ngx_palloc(r->pool, 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-889-                pair->ncaptures * sizeof(int));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-890-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-891-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-892-    while (b->pos < b->last) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-893-        if (pair->once && pair->matched) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-894-            break;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-895-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-896-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-897-        line.data = b->pos;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-898-        line.len = b->last - b->pos;
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1021-static void 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1022-ngx_http_subs_body_filter_greedy_split_chain(ngx_http_request_t *r,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1023-        ngx_http_subs_ctx_t *ctx, ngx_chain_t *cl)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1024-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1025-    ngx_buf_t                 *b, *nb;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1026-    ngx_queue_buf_t           *qb;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1027-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1028-    if (ctx->last_pos) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1029-        b = cl->buf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1030-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1031:        nb = create_buffer(b->pos, ctx->last_pos - b->pos, r->pool);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1032-        if (nb == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1033-            return;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1034-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1035-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1036:        qb = ngx_alloc_queue_buf(r->pool, ctx->free_queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1037-        if (qb == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1038-            return;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1039-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1040-        qb->buf = nb;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1041-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1042-        ngx_queue_insert_tail(&ctx->out->queue, &qb->queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1043-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1044-        b->pos = ctx->last_pos;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1045-        ctx->last_pos = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1046-    }
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1066-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1067-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1068-static ngx_int_t
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1069-ngx_http_subs_output( ngx_http_request_t *r,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1070-        ngx_http_subs_ctx_t *ctx, ngx_chain_t *in)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1071-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1072-    ngx_int_t     rc, last_chain;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1073-    ngx_buf_t    *b;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1074-    ngx_chain_t  *cl, *out = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1075-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1076:    if (ngx_chain_queue_add_copy(r->pool, &out, &ctx->out->queue) != NGX_OK) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1077-        return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1078-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1079-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1080-    if (!ngx_queue_empty(&ctx->out->queue)) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1081-        ngx_free_queue(&ctx->free_queue->queue, &ctx->out->queue);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1082-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1083-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1084-    last_chain = 0;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1085-    b = NULL;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1086-    for (cl = out; cl; cl = cl->next) {
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1188-    ngx_str_t                  *value;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1189-    ngx_str_t                  *option;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1190-    sub_pair_t                 *pair;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1191-    ngx_http_subs_loc_conf_t   *slcf = conf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1192-    ngx_http_script_compile_t   sc;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1193-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1194-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1195-    value = cf->args->elts;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1196-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1197-    if (slcf->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1198:        slcf->sub_pairs = ngx_array_create(cf->pool, 4, sizeof(sub_pair_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1199-        if (slcf->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1200-            return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1201-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1202-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1203-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1204-    pair = ngx_array_push(slcf->sub_pairs);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1205-    if (pair == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1206-        return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1207-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1208-    ngx_memzero(pair, sizeof(sub_pair_t));
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1291-    err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1292-    err.data = errstr;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1293-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1294-    options = (pair->insensitive ? NGX_REGEX_CASELESS : 0);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1295-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1296-    /* make nginx-0.8.25+ happy */
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1297-#if defined(nginx_version) && nginx_version >= 8025
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1298-    ngx_regex_compile_t   rc;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1299-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1300-    rc.pattern = pair->match;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1301:    rc.pool = cf->pool;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1302-    rc.err = err; 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1303-    rc.options = options;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1304-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1305-    if (ngx_regex_compile(&rc) != NGX_OK) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1306-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc.err);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1307-        return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1308-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1309-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1310-    pair->match_regex = rc.regex;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1311-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1312-#else
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1313-    pair->match_regex = ngx_regex_compile(&pair->match,
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1314:            options, cf->pool, &err);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1315-#endif
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1316-    if (pair->match_regex == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1317-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &err);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1318-        return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1319-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1320-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1321-    n = ngx_http_subs_regex_capture_count(pair->match_regex);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1322-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1323-    if (pair->dup_capture) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1324-        mask = ((1 << (n + 1)) - 1);
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1368-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1369-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1370-static char *
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1371-ngx_http_subs_types( ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1372-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1373-    ngx_str_t                *value, *type;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1374-    ngx_uint_t                i;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1375-    ngx_http_subs_loc_conf_t *slcf = conf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1376-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1377-    if (slcf->types == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1378:        slcf->types = ngx_array_create(cf->pool, 4, sizeof(ngx_str_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1379-        if (slcf->types == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1380-            return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1381-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1382-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1383-        type = ngx_array_push(slcf->types);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1384-        if (type == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1385-            return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1386-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1387-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1388-        type->len = sizeof("text/html") - 1;
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1397-            continue;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1398-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1399-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1400-        type = ngx_array_push(slcf->types);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1401-        if (type == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1402-            return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1403-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1404-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1405-        type->len = value[i].len;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1406-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1407:        type->data = ngx_palloc(cf->pool, type->len + 1);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1408-        if (type->data == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1409-            return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1410-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1411-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1412-        ngx_cpystrn(type->data, value[i].data, type->len + 1);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1413-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1414-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1415-    return NGX_CONF_OK;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1416-}
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1417-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1418-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1419-static void *
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1420-ngx_http_subs_create_conf(ngx_conf_t *cf)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1421-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1422-    ngx_http_subs_loc_conf_t  *slcf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1423-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1424:    slcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_subs_loc_conf_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1425-    if (slcf == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1426-        return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1427-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1428-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1429-    return slcf;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1430-}
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1431-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1432-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1433-static char * 
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1434-ngx_http_subs_merge_conf(ngx_conf_t *cf, void *parent, void *child)
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1435-{
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1436-    ngx_http_subs_loc_conf_t *prev = parent;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1437-    ngx_http_subs_loc_conf_t *conf = child;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1438-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1439-    ngx_str_t  *type;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1440-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1441-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1442-    if (conf->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1443-        if (prev->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1444:            conf->sub_pairs = ngx_array_create(cf->pool, 4, sizeof(sub_pair_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1445-            if (conf->sub_pairs == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1446-                return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1447-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1448-        } else {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1449-            conf->sub_pairs = prev->sub_pairs;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1450-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1451-    } else {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1452-        int i;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1453-        sub_pair_t                *src_pair, *dst_pair;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1454-        /* Deep copy sub_pairs from slcf to ctx */
--
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1457-            dst_pair = ngx_array_push(conf->sub_pairs);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1458-            if (dst_pair == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1459-                return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1460-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1461-            ngx_memcpy(dst_pair, src_pair + i, sizeof(sub_pair_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1462-        }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1463-    }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1464-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1465-    if (conf->types == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1466-        if (prev->types == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c:1467:            conf->types = ngx_array_create(cf->pool, 1, sizeof(ngx_str_t));
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1468-            if (conf->types == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1469-                return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1470-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1471-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1472-            type = ngx_array_push(conf->types);
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1473-            if (type == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1474-                return NGX_CONF_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1475-            }
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1476-
./nginx/3party/substitutions4nginx/ngx_http_subs_filter_module.c-1477-            type->len = sizeof("text/html") - 1;
--
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-1-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-2-#include <ngx_config.h>
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-3-#include <ngx_core.h>
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-4-#include <ngx_http.h>
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-5-#include <ngx_http_chain_buffer.h>
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-6-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-7-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-8-ngx_buf_t * 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:9:buffer_append_string(ngx_buf_t *b, u_char *s, size_t len, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-10-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-11-    u_char     *p;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-12-    ngx_uint_t capacity, size;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-13-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-14-    if (len > (size_t) (b->end - b->last)) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-15-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-16-        size = b->last - b->pos;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-17-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-18-        capacity = b->end - b->start;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-19-        capacity *= 1.5;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-20-        if (capacity < (size + len)) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-21-            capacity = size + len;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-22-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-23-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:24:        p = ngx_palloc(pool, capacity);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-25-        if (p == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-26-            return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-27-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-28-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-29-        ngx_memcpy(p, b->pos, size);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-30-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-31-        b->start = b->pos = p;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-32-        b->last = p + size;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-33-        b->end = p + capacity;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-34-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-35-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-36-    ngx_memcpy(b->last, s, len);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-37-    b->last += len;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-38-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-39-    return b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-40-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-41-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-42-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-43-ngx_queue_buf_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:44:ngx_alloc_queue_buf(ngx_pool_t *pool, ngx_queue_buf_t *free)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-45-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-46-    ngx_queue_t     *q;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-47-    ngx_queue_buf_t *qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-48-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-49-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-50-    if (ngx_queue_empty(&free->queue)) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:51:        qb = ngx_palloc(pool, sizeof(ngx_queue_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-52-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-53-    else {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-54-        q = ngx_queue_last(&free->queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-55-        ngx_queue_remove(q);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-56-        qb = ngx_queue_data(q, ngx_queue_buf_t, queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-57-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-58-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-59-    return qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-60-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-61-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-62-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-63-ngx_queue_buf_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:64:ngx_calloc_queue_buf(ngx_pool_t *pool, ngx_queue_buf_t *free) 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-65-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-66-    ngx_queue_t     *q;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-67-    ngx_queue_buf_t *qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-68-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-69-    if (ngx_queue_empty(&free->queue)) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:70:        qb = ngx_pcalloc(pool, sizeof(ngx_queue_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-71-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-72-    else {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-73-        q = ngx_queue_last(&free->queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-74-        ngx_queue_remove(q);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-75-        qb = ngx_queue_data(q, ngx_queue_buf_t, queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-76-        ngx_memzero(qb, sizeof(ngx_queue_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-77-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-78-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-79-    return qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-80-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-81-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-82-/*copy from chain to queue*/
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-83-ngx_int_t 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:84:ngx_queue_chain_add_copy(ngx_pool_t *pool, ngx_queue_t *qh, 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-85-        ngx_chain_t *in, ngx_queue_buf_t *free)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-86-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-87-    ngx_queue_buf_t  *qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-88-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-89-    while (in) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:90:        qb = ngx_calloc_queue_buf(pool, free);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-91-        if (qb == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-92-            return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-93-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-94-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-95-        qb->buf = in->buf;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-96-        ngx_queue_insert_tail(qh, &qb->queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-97-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-98-        in = in->next;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-99-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-100-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-101-    return NGX_OK;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-102-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-103-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-104-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-105-/*copy from queue to chain*/
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-106-ngx_int_t 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:107:ngx_chain_queue_add_copy(ngx_pool_t *pool,  ngx_chain_t **chain, ngx_queue_t *qh)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-108-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-109-    ngx_chain_t      *cl, **ll;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-110-    ngx_queue_t      *q;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-111-    ngx_queue_buf_t  *qb;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-112-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-113-    ll = chain;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-114-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-115-    for (cl = *chain; cl; cl = cl->next) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-116-        ll = &cl->next;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-117-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-118-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-119-    for (q = ngx_queue_head(qh); q != ngx_queue_sentinel(qh); q = ngx_queue_next(q)) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-120-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-121-        qb = ngx_queue_data(q, ngx_queue_buf_t, queue);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-122-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:123:        cl = ngx_alloc_chain_link(pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-124-        if (cl == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-125-            return NGX_ERROR;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-126-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-127-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-128-        cl->buf = qb->buf;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-129-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-130-        *ll = cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-131-        ll = &cl->next;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-132-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-133-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-134-    *ll = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-135-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-136-    return NGX_OK;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-137-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-138-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-139-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-140-ngx_buf_t * 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:141:create_buffer(u_char *p, ngx_int_t len, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-142-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-143-    ngx_buf_t   *b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-144-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:145:    b = ngx_pcalloc(pool, sizeof(ngx_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-146-    if (b == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-147-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-148-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-149-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-150-    b->start = b->pos = p;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-151-    b->end = b->last = p + len;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-152-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-153-    if (len == 0) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-154-        b->sync = 1;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-155-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-156-    else {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-157-        b->memory = 1;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-158-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-159-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-160-    return b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-161-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-162-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-163-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-164-ngx_chain_t * 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:165:create_chain_buffer(u_char *p, ngx_int_t len, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-166-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-167-    ngx_chain_t *cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-168-    ngx_buf_t   *b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-169-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:170:    b = create_buffer(p, len, pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-171-    if (b == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-172-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-173-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-174-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:175:    cl = ngx_alloc_chain_link(pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-176-    if (cl == NULL)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-177-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-178-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-179-    cl->buf = b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-180-    cl->next = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-181-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-182-    return cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-183-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-184-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-185-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-186-ngx_chain_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:187:duplicate_chain_buffer(u_char *src, ngx_int_t len, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-188-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-189-    u_char *dst;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-190-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:191:    dst = ngx_palloc(pool, len);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-192-    if (dst == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-193-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-194-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-195-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-196-    ngx_memcpy(dst, src, len);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-197-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:198:    return create_chain_buffer(dst, len, pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-199-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-200-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-201-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-202-/* Fetch a chain buffer, if *p_free is NULL, then create it, 
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-203- * If not, allocates the head chain of *p_free for it.*/
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-204-ngx_chain_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:205:fetch_chain_buffer(u_char *p, ngx_int_t len, ngx_chain_t **p_free, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-206-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-207-    ngx_buf_t   *b;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-208-    ngx_chain_t *cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-209-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-210-    if (p_free != NULL && *p_free != NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-211-        cl = *p_free;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-212-        (*p_free) = (*p_free)->next;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-213-        cl->next = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-214-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-215-        b = cl->buf;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-216-        if (b == NULL){
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:217:            b = ngx_pcalloc(pool, sizeof(ngx_buf_t));
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-218-            if (b == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-219-                return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-220-            }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-221-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-222-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-223-        b->start = b->pos = p;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-224-        b->end = b->last = p + len;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-225-        if (len == 0) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-226-            b->sync = 1;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-227-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-228-        else  {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-229-            b->memory = 1;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-230-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-231-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-232-        return cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-233-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-234-    else {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:235:        return create_chain_buffer(p, len, pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-236-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-237-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-238-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-239-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-240-/* Deep copy the chain's buffer and fetch a chain and buffer*/
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-241-ngx_chain_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:242:copy_chain_buffer(ngx_chain_t *chain, ngx_chain_t **p_free, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-243-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-244-    u_char      *p = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-245-    ngx_buf_t   *b = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-246-    ngx_int_t    len;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-247-    ngx_chain_t *cl = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-248-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-249-    if (chain == NULL || chain->buf == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-250-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-251-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-252-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-253-    b = chain->buf;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-254-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-255-    len = b->last - b->pos;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-256-    if (len < 0) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-257-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-258-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-259-    else if (len > 0) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:260:        p = ngx_palloc(pool, len);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-261-        ngx_memcpy(p, b->pos, len);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-262-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-263-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:264:    cl = fetch_chain_buffer(p, len, p_free, pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-265-    cl->next = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-266-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-267-    return cl;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-268-}
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-269-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-270-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-271-/* Deep copy chains, return the duplicate chains*/
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-272-ngx_chain_t *
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:273:duplicate_chains(ngx_chain_t *chain, ngx_chain_t **p_free, ngx_pool_t *pool)
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-274-{
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-275-    ngx_chain_t *head, *cl, *copy, *last;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-276-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-277-    if (chain == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-278-        return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-279-    }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-280-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-281-    copy = last = head = NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-282-    for(cl = chain; cl; cl = cl->next) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c:283:        copy = copy_chain_buffer(cl, p_free, pool);
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-284-        if (copy == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-285-            return NULL;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-286-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-287-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-288-        if (head == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-289-            head = copy;
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-290-        }
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-291-
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-292-        if (last == NULL) {
./nginx/3party/substitutions4nginx/ngx_http_chain_buffer.c-293-            last = copy;
--
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-127-	ngx_http_flow_limit_req_timer(flcf);
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-128-    }
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-129-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-130-    return NGX_OK;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-131-}
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-132-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-133-static void *ngx_http_flow_limit_create_conf(ngx_conf_t * cf)
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-134-{
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-135-    ngx_http_flow_limit_conf_t *conf;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-136-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c:137:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_flow_limit_conf_t));
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-138-    if (conf == NULL) {
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-139-	return NULL;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-140-    }
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-141-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-142-    conf->sh = NULL;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-143-    conf->shpool = NULL;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-144-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-145-    return conf;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-146-}
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-147-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-148-static char *ngx_http_flow_limit_merge_conf(ngx_conf_t * cf, void *parent,
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-149-					    void *child)
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-150-{
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-151-    ngx_str_t zone_name;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-152-    ngx_http_server_name_t *sn;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-153-    ngx_http_flow_limit_conf_t *clcf = child;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-154-    ngx_http_core_srv_conf_t *cscf;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-155-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c:156:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (256));
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-157-    if (zone_name.data == NULL) {
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-158-	return NGX_CONF_ERROR;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-159-    }
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-160-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-161-    cscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_core_module);
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-162-
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-163-    sn = cscf->server_names.elts;
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-164-    if (cscf->server_names.nelts == 0) {
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-165-	ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/3party/nginx_flow_limit/ngx_http_flow_limit_module.c-166-			   "server_name directive reqired.");
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-150-{
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-151-    ngx_http_upstream_multiplex_cache_t     *cached;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-152-    ngx_int_t                                 i;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-153-    ngx_http_upstream_multiplex_cache_ctx_t *queue_ctx;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-154-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-155-#if 0
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-156-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-157-                   "init multiplex");
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-158-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-159-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:160:    cached = ngx_pcalloc(cf->pool,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-161-                sizeof(ngx_http_upstream_multiplex_cache_t) * umsf->max_cached);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-162-    if (cached == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-163-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-164-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-165-    
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:166:    queue_ctx = ngx_pcalloc(cf->pool,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-167-            sizeof(ngx_http_upstream_multiplex_cache_ctx_t) * nr_peers);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-168-    if (queue_ctx == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-169-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-170-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-171-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-172-    ngx_queue_init(&umsf->free);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-173-    for (i = 0; i < nr_peers; i++) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-174-        ngx_queue_init(&queue_ctx[i].cache);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-175-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-176-
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-301-    ngx_http_upstream_consistent_hash_continuum  *continuum;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-302-    ngx_http_upstream_consistent_hash_buckets    *buckets;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-303-#if (NGX_HTTP_UPSTREAM_MULTIPLEX)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-304-    ngx_http_upstream_multiplex_srv_conf_t       *umsf;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-305-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-306-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-307-#if (TEST_CONSISTENT_HASH)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-308-    ngx_http_upstream_consistent_hash_test(cf, us);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-309-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-310-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:311:    buckets = ngx_pcalloc(cf->pool,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-312-                             sizeof(ngx_http_upstream_consistent_hash_buckets));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-313-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-314-    us->peer.init = ngx_http_upstream_init_consistent_hash_peer;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-315-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-316-    us->peer.init_ctx = ngx_http_upstream_init_consistent_hash_peer_ctx;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-317-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-318-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-319-    if (!us->servers) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-320-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-321-    }
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-325-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-326-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-327-        
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-328-    server = us->servers->elts;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-329-    for (n = 0, i = 0; i < us->servers->nelts; i++) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-330-        n += server[i].naddrs;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-331-        points += server[i].naddrs * MMC_CONSISTENT_POINTS;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-332-        //points += MMC_CONSISTENT_POINTS;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-333-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-334-    
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:335:    continuum = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_consistent_hash_continuum));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-336-    if (continuum == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-337-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-338-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-339-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:340:    continuum->nodes = ngx_pcalloc(cf->pool, 
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-341-                        sizeof(ngx_http_upstream_consistent_hash_node) * points);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-342-    if (continuum->nodes == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-343-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-344-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-345-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-346-    /* ip max 80, :port max 6, maxweight is highest number of uchar */
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-347-    hash_data = malloc(sizeof(u_char) * 80);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-348-    m  = 0;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-349-    for (i = 0; i < us->servers->nelts; i++) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-350-        if (server[i].backup || server[i].down) {
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-506-}
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-507-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-508-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-509-static ngx_int_t
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-510-ngx_http_upstream_init_consistent_hash_peer(ngx_http_request_t *r,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-511-        ngx_http_upstream_srv_conf_t *us)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-512-{
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-513-    ngx_str_t evaluated_key_to_hash;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-514-    ngx_http_upstream_consistent_hash_peer_data_t     *uchpd;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-515-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:516:    uchpd = ngx_pcalloc(r->pool,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-517-             sizeof(ngx_http_upstream_consistent_hash_peer_data_t));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-518-    if (uchpd == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-519-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-520-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-521-    uchpd->rrp = NULL;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-522-    uchpd->request = r;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-523-    r->upstream->peer.data = uchpd->peers;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-524-    uchpd->peers = us->peer.data;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-525-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-526-    if (ngx_http_script_run(r, &evaluated_key_to_hash,
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-557-ngx_http_upstream_init_consistent_hash_rr_peer(ngx_http_request_t *r,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-558-    ngx_http_upstream_srv_conf_t *us)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-559-{
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-560-    ngx_uint_t                         n;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-561-    ngx_http_upstream_rr_peer_data_t  *rrp;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-562-    ngx_http_upstream_consistent_hash_peer_data_t *upchd;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-563-    ngx_http_upstream_consistent_hash_buckets *buckets;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-564-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-565-    upchd = r->upstream->peer.data;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-566-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:567:    rrp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_rr_peer_data_t));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-568-    if (rrp == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-569-        return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-570-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-571-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-572-    r->upstream->peer.data = rrp;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-573-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-574-    buckets = us->peer.data;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-575-    rrp->peers = buckets->rr_peers;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-576-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-577-    n = rrp->peers->number;
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-581-        n = rrp->peers->next->number;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-582-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-583-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-584-    if (n <= 8 * sizeof(uintptr_t)) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-585-        rrp->tried = &rrp->data;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-586-        rrp->data = 0;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-587-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-588-    } else {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-589-        n = (n + (8 * sizeof(uintptr_t) - 1)) / (8 * sizeof(uintptr_t));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-590-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:591:        rrp->tried = ngx_pcalloc(r->pool, n * sizeof(uintptr_t));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-592-        if (rrp->tried == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-593-            return NGX_ERROR;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-594-        }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-595-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-596-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-597-    r->upstream->peer.tries = rrp->peers->number;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-598-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-599-    r->upstream->peer.get = ngx_http_upstream_get_round_robin_peer_max;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-600-    r->upstream->peer.free = ngx_http_upstream_free_round_robin_peer_max;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-601-    r->upstream->peer.update_current = ngx_http_upstream_update_current_round_robin;
--
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-879-    ngx_uint_t                                    i, j, k, n, m, points = 0;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-880-    u_char                                       *hash_data;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-881-    ngx_uint_t                                    step = 0xffffffff / MMC_CONSISTENT_BUCKETS;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-882-    ngx_http_upstream_server_t                   *server;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-883-    ngx_http_upstream_consistent_hash_continuum  *continuum;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-884-    ngx_http_upstream_consistent_hash_buckets    *buckets;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-885-#if (NGX_HTTP_UPSTREAM_MULTIPLEX)
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-886-    ngx_http_upstream_multiplex_srv_conf_t       *umsf;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-887-#endif
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-888-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:889:    buckets = ngx_pcalloc(cf->pool,
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-890-                             sizeof(ngx_http_upstream_consistent_hash_buckets));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-891-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-892-    us->peer.init = ngx_http_upstream_init_consistent_hash_peer;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-893-    us->peer.init_ctx = ngx_http_upstream_init_consistent_hash_peer_ctx;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-894-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-895-    if (!us->servers) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-896-        return NULL;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-897-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-898-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-899-    server = us->servers->elts;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-900-    for (n = 0, i = 0; i < us->servers->nelts; i++) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-901-        n += server[i].naddrs;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-902-        points += server[i].naddrs * MMC_CONSISTENT_POINTS;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-903-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-904-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-905-    us->num = n;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-906-    
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:907:    continuum = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_consistent_hash_continuum));
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-908-    if (continuum == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-909-        return NULL;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-910-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-911-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c:912:    continuum->nodes = ngx_pcalloc(cf->pool, 
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-913-                        sizeof(ngx_http_upstream_consistent_hash_node) * points);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-914-    if (continuum->nodes == NULL) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-915-        return NULL;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-916-    }
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-917-
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-918-    /* ip max 64, :port max 6, maxweight is highest number of uchar */
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-919-    hash_data = malloc(sizeof(u_char) * 80);
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-920-    m  = 0;
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-921-    for (i = 0; i < us->servers->nelts; i++) {
./nginx/3party/ngx_http_consistent_hash/ngx_http_upstream_consistent_hash_module.c-922-        for (j = 0; j < server[i].naddrs; j++) {
--
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-70-    ngx_http_variable_value_t   *v2;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-71-    u_char                      *p;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-72-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-73-    v2 = v + 1;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-74-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-75-    len = v->len + v2->len;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-76-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-77-	/*
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-78-	 * NDK provided abbreviation for the following code:
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-79-	 *
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c:80:	 * p = ngx_palloc (r->pool, len);
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-81-	 * if (p == NULL)
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-82-	 * 		return  NGX_ERROR;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-83-	 *
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-84-	 * */
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c:85:	ndk_palloc_re(p, r->pool, len);
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-86-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-87-    val->data = p;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-88-    val->len = len;
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-89-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-90-    ngx_memzero (p, len);
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-91-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-92-    p = ngx_cpymem (p, v->data, v->len);
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-93-    ngx_memcpy (p, v2->data, v2->len);
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-94-
./nginx/3party/nginx_devel_kit/examples/http/set_var/ngx_http_set_var_examples_module.c-95-    return  NGX_OK;
--
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-14-    ngx_str_t *value)
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-15-{
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-16-    ngx_int_t                              n;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-17-    ngx_http_script_compile_t              sc;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-18-    ngx_http_script_value_code_t          *val;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-19-    ngx_http_script_complex_value_code_t  *complex;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-20-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-21-    n = ngx_http_script_variables_count(value);
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-22-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-23-    if (n == 0) {
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c:24:        val = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-25-                                         sizeof(ngx_http_script_value_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-26-        if (val == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-27-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-28-        }
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-29-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-30-        n = ngx_atoi(value->data, value->len);
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-31-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-32-        if (n == NGX_ERROR) {
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-33-            n = 0;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-34-        }
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-35-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-36-        val->code = ngx_http_script_value_code;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-37-        val->value = (uintptr_t) n;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-38-        val->text_len = (uintptr_t) value->len;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-39-        val->text_data = (uintptr_t) value->data;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-40-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-41-        return NGX_CONF_OK;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-42-    }
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-43-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c:44:    complex = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-45-                                 sizeof(ngx_http_script_complex_value_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-46-    if (complex == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-47-        return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-48-    }
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-49-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-50-    complex->code = ngx_http_script_complex_value_code;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-51-    complex->lengths = NULL;
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-52-
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-53-    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
./nginx/3party/nginx_devel_kit/src/ndk_rewrite.c-54-
--
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-1-
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-2-ngx_int_t
./nginx/3party/nginx_devel_kit/src/ndk_buf.c:3:ndk_copy_chain_to_str (ngx_pool_t *pool, ngx_chain_t *in, ngx_str_t *str)
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-4-{
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-5-    ngx_chain_t     *cl;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-6-    size_t           len;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-7-    u_char          *p;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-8-    ngx_buf_t       *b;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-9-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-10-    len = 0;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-11-    for (cl = in; cl; cl = cl->next)
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-12-        len += ngx_buf_size (cl->buf);
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-13-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c:14:    ndk_palloc_re (p, pool, len + 1);
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-15-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-16-    str->data = p;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-17-    str->len = len;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-18-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-19-    for (cl = in; cl; cl = cl->next) {
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-20-        
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-21-        b = cl->buf;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-22-        
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-23-        if (ngx_buf_in_memory (b)) {
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-24-            p = ngx_cpymem (p, b->pos, b->last - b->pos);
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-25-        }
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-26-    }
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-27-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-28-    *p = '\0';
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-29-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-30-    return  NGX_OK;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-31-}
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-32-
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-33-
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-34-char *
./nginx/3party/nginx_devel_kit/src/ndk_buf.c:35:ndk_copy_chain_to_charp (ngx_pool_t *pool, ngx_chain_t *in)
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-36-{
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-37-    ngx_str_t   str;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-38-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c:39:    if (ndk_copy_chain_to_str (pool, in, &str) != NGX_OK)
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-40-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-41-    
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-42-    return  (char *) str.data;
./nginx/3party/nginx_devel_kit/src/ndk_buf.c-43-}
--
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-19-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-20-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-21-ngx_array_t *
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-22-ndk_http_complex_value_array_create (ngx_conf_t *cf, char **s, ngx_int_t n)
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-23-{
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-24-    ngx_int_t                    i;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-25-    ngx_http_complex_value_t    *cv;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-26-    ngx_array_t                 *a;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-27-    ngx_str_t                    value;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-28-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c:29:    a = ngx_array_create (cf->pool, n, sizeof (ngx_http_complex_value_t));
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-30-    if (a == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-31-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-32-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-33-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-34-    for (i=0; i<n; i++, s++) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-35-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-36-        cv = ngx_array_push (a);
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-37-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-38-        value.data = (u_char *) *s;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-39-        value.len = strlen (*s);
--
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-110-    ngx_array_t                **a;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-111-    ngx_conf_post_t             *post;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-112-    ngx_int_t                    i, alloc;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-113-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-114-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-115-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-116-    if (*a == NULL || *a == NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-117-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-118-        alloc = cf->args->nelts > 4 ? cf->args->nelts : 4;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-119-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c:120:        *a = ngx_array_create (cf->pool, alloc, sizeof (ngx_http_complex_value_t));
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-121-        if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-122-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-123-        }
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-124-    }
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-125-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-126-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-127-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-128-    for (i=1; i<cf->args->nelts; i++) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-129-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-130-        cv = ngx_array_push (*a);
--
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-156-    ngx_array_t                **a;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-157-    ngx_conf_post_t             *post;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-158-    ngx_int_t                    alloc;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-159-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-160-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-161-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-162-    if (*a == NULL || *a == NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-163-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-164-        alloc = cf->args->nelts > 4 ? cf->args->nelts : 4;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-165-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c:166:        *a = ngx_array_create (cf->pool, alloc, sizeof (ndk_http_complex_keyval_t));
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-167-        if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-168-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-169-        }
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-170-    }
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-171-
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-172-    ckv = ngx_array_push (*a);
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-173-    if (ckv == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-174-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-175-    }
./nginx/3party/nginx_devel_kit/src/ndk_complex_value.c-176-
--
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-223-{
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-224-    u_char                      *p;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-225-    ngx_http_variable_value_t   *v;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-226-    ndk_set_var_size_code_t     *svs;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-227-    ndk_set_var_hash_pt          func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-228-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-229-    svs = (ndk_set_var_size_code_t *) e->ip;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-230-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-231-    e->ip += sizeof(ndk_set_var_size_code_t);
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-232-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:233:    p = ngx_palloc(e->request->pool, svs->size);
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-234-    if (p == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-235-        e->ip = ndk_http_script_exit;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-236-        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-237-        return;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-238-    }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-239-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-240-    v = e->sp - 1;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-241-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-242-    func = svs->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-243-
--
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-335-    ndk_set_var_data_code_t        *svd;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-336-    ndk_set_var_size_data_code_t   *svsd;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-337-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-338-    if (filter == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-339-        return "no filter set";
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-340-    }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-341-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-342-    switch (filter->type) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-343-    case NDK_SET_VAR_BASIC:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-344-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:345:        sv = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-346-                                         sizeof(ndk_set_var_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-347-        if (sv == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-348-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-349-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-350-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-351-        sv->code = ndk_set_var_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-352-        sv->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-353-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-354-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-355-    case NDK_SET_VAR_DATA:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-356-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:357:        svd = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-358-                                         sizeof(ndk_set_var_data_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-359-        if (svd == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-360-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-361-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-362-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-363-        svd->code = ndk_set_var_data_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-364-        svd->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-365-        svd->data = filter->data;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-366-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-367-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-368-    case NDK_SET_VAR_VALUE:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-369-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:370:        sv = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-371-                                         sizeof(ndk_set_var_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-372-        if (sv == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-373-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-374-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-375-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-376-        sv->code = ndk_set_var_value_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-377-        sv->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-378-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-379-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-380-    case NDK_SET_VAR_VALUE_DATA:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-381-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:382:        svd = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-383-                                         sizeof(ndk_set_var_data_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-384-        if (svd == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-385-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-386-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-387-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-388-        svd->code = ndk_set_var_value_data_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-389-        svd->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-390-        svd->data = filter->data;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-391-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-392-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-393-    case NDK_SET_VAR_MULTI_VALUE:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-394-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:395:        svs = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-396-                                          sizeof(ndk_set_var_size_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-397-        if (svs == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-398-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-399-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-400-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-401-        svs->code = ndk_set_var_multi_value_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-402-        svs->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-403-        svs->size = filter->size;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-404-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-405-        ndk_set_variable_value_space(rlcf, svs->size);
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-406-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-407-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-408-    case NDK_SET_VAR_MULTI_VALUE_DATA:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-409-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:410:        svsd = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-411-                                          sizeof(ndk_set_var_size_data_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-412-        if (svsd == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-413-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-414-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-415-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-416-        svsd->code = ndk_set_var_multi_value_data_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-417-        svsd->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-418-        svsd->size = filter->size;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-419-        svsd->data = filter->data;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-420-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-421-        ndk_set_variable_value_space(rlcf, svsd->size);
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-422-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-423-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-424-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-425-    case NDK_SET_VAR_HASH:
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-426-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:427:        svs = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-428-                                          sizeof(ndk_set_var_size_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-429-        if (svs == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-430-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-431-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-432-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-433-        svs->code = ndk_set_var_hash_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-434-        svs->func = filter->func;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-435-        svs->size = filter->size;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-436-        break;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-437-
--
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-456-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-457-    v = info->v;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-458-    cf = info->cf;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-459-    rlcf = info->rlcf;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-460-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-461-    if (ndk_set_var_filter(cf, rlcf, filter) != NGX_CONF_OK) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-462-        return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-463-    }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-464-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-465-    if (v->set_handler) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:466:        vhcode = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-467-                                   sizeof(ngx_http_script_var_handler_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-468-        if (vhcode == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-469-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-470-        }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-471-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-472-        vhcode->code = ngx_http_script_var_set_handler_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-473-        vhcode->handler = v->set_handler;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-474-        vhcode->data = v->data;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-475-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-476-        return NGX_CONF_OK;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-477-    }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-478-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c:479:    vcode = ngx_http_script_start_code(cf->pool, &rlcf->codes,
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-480-                                       sizeof(ngx_http_script_var_code_t));
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-481-    if (vcode == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-482-        return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-483-    }
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-484-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-485-    vcode->code = ngx_http_script_set_var_code;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-486-    vcode->index = (uintptr_t) info->index;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-487-
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-488-    return NGX_CONF_OK;
./nginx/3party/nginx_devel_kit/src/ndk_set_var.c-489-}
--
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-39-ndk_http_complex_path_create_compile (ngx_conf_t *cf, ngx_str_t *path, ngx_uint_t prefix)
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-40-{
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-41-    ndk_http_complex_path_elt_t     *cpe;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-42-    ngx_array_t                     *a;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-43-    ngx_int_t                        n;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-44-    u_char                          *m, *s, *e;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-45-    ngx_str_t                        value;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-46-
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-47-    n = ndk_strcntc (path, ':') + 1;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-48-
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c:49:    a = ngx_array_create (cf->pool, n, sizeof (ndk_http_complex_path_elt_t));
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-50-    if (a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-51-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-52-    }
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-53-
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-54-    s = path->data;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-55-    e = s + path->len;
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-56-
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-57-
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-58-    while (s < e) {
./nginx/3party/nginx_devel_kit/src/ndk_complex_path.c-59-
--
./nginx/3party/nginx_devel_kit/src/ndk_string.c-59-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-60-        s++;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-61-    }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-62-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-63-    return  n;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-64-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-65-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-66-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-67-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-68-ngx_array_t *
./nginx/3party/nginx_devel_kit/src/ndk_string.c:69:ndk_str_array_create (ngx_pool_t *pool, char **s, ngx_int_t n)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-70-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-71-    ngx_int_t        i;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-72-    ngx_str_t       *str;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-73-    ngx_array_t     *a;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-74-
./nginx/3party/nginx_devel_kit/src/ndk_string.c:75:    a = ngx_array_create (pool, n, sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_string.c-76-    if (a == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-77-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-78-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-79-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-80-    for (i=0; i<n; i++, s++) {
./nginx/3party/nginx_devel_kit/src/ndk_string.c-81-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-82-        str = ngx_array_push (a);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-83-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-84-        str->data = (u_char *) *s;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-85-        str->len = strlen (*s);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-86-    }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-87-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-88-    return  a;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-89-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-90-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-91-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-92-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-93-u_char *
./nginx/3party/nginx_devel_kit/src/ndk_string.c:94:ndk_vcatstrf (ngx_pool_t *pool, ngx_str_t *dest, const char *fmt, va_list args)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-95-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-96-    size_t          len, l, el;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-97-    int             argc;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-98-    u_char         *p, *m, *e, c, c1, *cp;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-99-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-100-    argc = strlen (fmt);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-101-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-102-    ngx_str_t      *s;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-103-    ndk_estr_t     *sp, *sp2, ss [argc];
./nginx/3party/nginx_devel_kit/src/ndk_string.c-104-    u_char        cs [argc];
--
./nginx/3party/nginx_devel_kit/src/ndk_string.c-249-            sp->data = cp;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-250-            sp->len = (size_t) 1;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-251-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-252-            len++;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-253-            cp++;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-254-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-255-            break; 
./nginx/3party/nginx_devel_kit/src/ndk_string.c-256-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-257-        default         :
./nginx/3party/nginx_devel_kit/src/ndk_string.c-258-
./nginx/3party/nginx_devel_kit/src/ndk_string.c:259:            ndk_log_alert (pool->log, 0, "catstrf () : format [%s] incorrect", fmt);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-260-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-261-            return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-262-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-263-        }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-264-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-265-        sp++;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-266-        fmt++;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-267-    }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-268-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-269-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-270-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-271-    /* create space for string (assumes no NULL's in strings) */
./nginx/3party/nginx_devel_kit/src/ndk_string.c-272-
./nginx/3party/nginx_devel_kit/src/ndk_string.c:273:    ndk_palloc_rn (p, pool, len + 1);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-274-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-275-    dest->data = p;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-276-    dest->len = len;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-277-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-278-    /* copy other strings */
./nginx/3party/nginx_devel_kit/src/ndk_string.c-279-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-280-    if (len) {
./nginx/3party/nginx_devel_kit/src/ndk_string.c-281-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-282-        while (sp2 < sp) {
./nginx/3party/nginx_devel_kit/src/ndk_string.c-283-
--
./nginx/3party/nginx_devel_kit/src/ndk_string.c-356-        }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-357-    }
./nginx/3party/nginx_devel_kit/src/ndk_string.c-358-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-359-    *p = '\0';
./nginx/3party/nginx_devel_kit/src/ndk_string.c-360-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-361-    return  dest->data;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-362-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-363-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-364-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-365-u_char *
./nginx/3party/nginx_devel_kit/src/ndk_string.c:366:ndk_catstrf (ngx_pool_t *pool, ngx_str_t *dest, const char *fmt, ...)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-367-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-368-    u_char       *p;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-369-    va_list         args;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-370-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-371-    va_start (args, fmt);
./nginx/3party/nginx_devel_kit/src/ndk_string.c:372:    p = ndk_vcatstrf (pool, dest, fmt, args);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-373-    va_end (args);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-374-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-375-    return  p;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-376-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-377-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-378-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-379-ngx_int_t
./nginx/3party/nginx_devel_kit/src/ndk_string.c-380-ndk_cmpstr (ngx_str_t *s1, ngx_str_t *s2)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-381-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-382-    ngx_int_t   rv;
--
./nginx/3party/nginx_devel_kit/src/ndk_string.c-400-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-401-    rv = ngx_strncmp (s1->data, s2->data, len1);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-402-    if (rv == 0)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-403-        return  -1;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-404-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-405-    return  rv;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-406-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-407-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-408-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-409-u_char *
./nginx/3party/nginx_devel_kit/src/ndk_string.c:410:ndk_dupstr (ngx_pool_t *pool, ngx_str_t *dest, ngx_str_t *src)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-411-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-412-    u_char       *d;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-413-    size_t       n;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-414-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-415-    n = src->len;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-416-
./nginx/3party/nginx_devel_kit/src/ndk_string.c:417:    ndk_palloc_rn (d, pool, n + 1);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-418-    ndk_strncpy (d, src->data, n);
./nginx/3party/nginx_devel_kit/src/ndk_string.c-419-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-420-    dest->data = d;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-421-    dest->len = n;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-422-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-423-    return  d;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-424-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-425-
./nginx/3party/nginx_devel_kit/src/ndk_string.c-426-/*
./nginx/3party/nginx_devel_kit/src/ndk_string.c-427-ngx_keyval_t *
./nginx/3party/nginx_devel_kit/src/ndk_string.c:428:ndk_url_args_to_keyval_list (ngx_pool_t *pool, ngx_str_t *str)
./nginx/3party/nginx_devel_kit/src/ndk_string.c-429-{
./nginx/3party/nginx_devel_kit/src/ndk_string.c-430-    ngx_keyval_t    *kv;
./nginx/3party/nginx_devel_kit/src/ndk_string.c-431-    ngx_st
./nginx/3party/nginx_devel_kit/src/ndk_string.c-432-    
./nginx/3party/nginx_devel_kit/src/ndk_string.c-433-}
./nginx/3party/nginx_devel_kit/src/ndk_string.c-434-*/
--
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-15-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-16-    if (re->name) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-17-        return  "is duplicate";
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-18-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-19-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-20-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-21-    value++;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-22-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-23-    ndk_zerov (rc);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-24-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:25:    rc.pool = cf->pool;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-26-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-27-    rc.err.data = errstr;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-28-    rc.pattern = *value;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-29-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-30-    if (ngx_regex_compile(&rc) != NGX_OK) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-31-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc.err);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-32-        return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-33-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-34-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-35-    re->regex = rc.regex;
--
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-59-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-60-    if (re->name) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-61-        return  "is duplicate";
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-62-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-63-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-64-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-65-    value++;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-66-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-67-    ndk_zerov (rc);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-68-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:69:    rc.pool = cf->pool;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-70-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-71-    rc.err.data = errstr;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-72-    rc.pattern = *value;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-73-    rc.options = NGX_REGEX_CASELESS;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-74-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-75-    if (ngx_regex_compile(&rc) != NGX_OK) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-76-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc.err);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-77-        return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-78-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-79-
--
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-102-    ngx_regex_compile_t      rc;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-103-    ngx_uint_t               i, n;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-104-    u_char                   errstr[NGX_MAX_CONF_ERRSTR];
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-105-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-106-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-107-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-108-    if (*a != NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-109-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-110-        n = cf->args->nelts > 4 ? cf->args->nelts : 4;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-111-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:112:        *a = ngx_array_create (cf->pool, n, sizeof (ngx_regex_elt_t));
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-113-        if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-114-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-115-        }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-116-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-117-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-118-    ndk_zerov (rc);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-119-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:120:    rc.pool = cf->pool;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-121-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-122-    rc.err.data = errstr;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-123-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-124-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-125-    value++;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-126-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-127-    for (i=0; i<n; i++, value++) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-128-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-129-        re = ngx_array_push (*a);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-130-        if (re == NULL)
--
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-164-    ngx_regex_compile_t      rc;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-165-    ngx_uint_t               i, n;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-166-    u_char                   errstr[NGX_MAX_CONF_ERRSTR];
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-167-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-168-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-169-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-170-    if (*a != NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-171-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-172-        n = cf->args->nelts > 4 ? cf->args->nelts : 4;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-173-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:174:        *a = ngx_array_create (cf->pool, n, sizeof (ngx_regex_elt_t));
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-175-        if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-176-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-177-        }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-178-    }
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-179-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-180-    ndk_zerov (rc);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-181-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c:182:    rc.pool = cf->pool;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-183-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-184-    rc.err.data = errstr;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-185-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-186-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-187-    value++;
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-188-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-189-    for (i=0; i<n; i++, value++) {
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-190-
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-191-        re = ngx_array_push (*a);
./nginx/3party/nginx_devel_kit/src/ndk_regex.c-192-        if (re == NULL)
--
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-69-    ndk_http_main_conf_t        *mcf;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-70-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-71-    mcf = ngx_http_conf_get_module_main_conf (cf, ndk_http_module);
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-72-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-73-    ula = mcf->upstreams;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-74-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-75-    /* create array of upstream lists it doesn't already exist */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-76-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-77-    if (ula == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-78-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c:79:        ula = ngx_array_create (cf->pool, 4, sizeof (ndk_upstream_list_t));
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-80-        if (ula == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-81-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-82-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-83-        mcf->upstreams = ula;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-84-    }
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-85-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-86-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-87-    /* check to see if the list already exists */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-88-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-89-    value = cf->args->elts;
--
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-112-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-113-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-114-    ul->name = *value;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-115-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-116-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-117-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-118-    /* copy all the upstream names */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-119-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-120-    count = cf->args->nelts - 2;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-121-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c:122:    us = ngx_palloc (cf->pool, count * sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-123-    if (us == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-124-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-125-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-126-    ngx_memcpy (us, value + 1, count * sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-127-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-128-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-129-    /* calculate the total number of buckets */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-130-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-131-    buckets = 0;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-132-
--
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-138-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-139-        if (ndk_upstream_list_parse_weight (&ulp) != NGX_OK)
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-140-            return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-141-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-142-        buckets += ulp.weight;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-143-    }
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-144-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-145-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-146-    /* allocate space for all buckets */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-147-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c:148:    bucket = ngx_palloc (cf->pool, buckets * sizeof (ngx_str_t **));
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-149-    if (bucket == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-150-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-151-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-152-    ul->elts = bucket;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-153-    ul->nelts = buckets;
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-154-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-155-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-156-    /* set values for each bucket */
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-157-
./nginx/3party/nginx_devel_kit/src/ndk_upstream_list.c-158-    us -= count;
--
./nginx/3party/nginx_devel_kit/src/ndk.c-140-};
./nginx/3party/nginx_devel_kit/src/ndk.c-141-
./nginx/3party/nginx_devel_kit/src/ndk.c-142-
./nginx/3party/nginx_devel_kit/src/ndk.c-143-
./nginx/3party/nginx_devel_kit/src/ndk.c-144-#if (NDK_HTTP_CREATE_MAIN_CONF)
./nginx/3party/nginx_devel_kit/src/ndk.c-145-static void *
./nginx/3party/nginx_devel_kit/src/ndk.c-146-ndk_http_create_main_conf (ngx_conf_t *cf)
./nginx/3party/nginx_devel_kit/src/ndk.c-147-{
./nginx/3party/nginx_devel_kit/src/ndk.c-148-    ndk_http_main_conf_t    *mcf;
./nginx/3party/nginx_devel_kit/src/ndk.c-149-
./nginx/3party/nginx_devel_kit/src/ndk.c:150:    ndk_pcallocp_rce (mcf, cf->pool);
./nginx/3party/nginx_devel_kit/src/ndk.c-151-
./nginx/3party/nginx_devel_kit/src/ndk.c-152-    return  mcf;
./nginx/3party/nginx_devel_kit/src/ndk.c-153-}
./nginx/3party/nginx_devel_kit/src/ndk.c-154-#endif
./nginx/3party/nginx_devel_kit/src/ndk.c-155-
--
./nginx/3party/nginx_devel_kit/src/ndk_path.c-362-    ngx_str_t         *str;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-363-    int                n;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-364-    u_char            *m, *s, *e;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-365-    ngx_array_t       *a; 
./nginx/3party/nginx_devel_kit/src/ndk_path.c-366-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-367-    if (path == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_path.c-368-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-369-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-370-    n = ndk_strcntc (path, ':');
./nginx/3party/nginx_devel_kit/src/ndk_path.c-371-
./nginx/3party/nginx_devel_kit/src/ndk_path.c:372:    a = ngx_array_create (cf->pool, n + 1, sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_path.c-373-    if (a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-374-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-375-    }
./nginx/3party/nginx_devel_kit/src/ndk_path.c-376-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-377-    s = path->data;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-378-    e = s + path->len;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-379-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-380-    while (s < e) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-381-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-382-        m = s;
--
./nginx/3party/nginx_devel_kit/src/ndk_path.c-413-    ngx_str_t         *str;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-414-    int                n;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-415-    char              *m, *s;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-416-    ngx_array_t       *a; 
./nginx/3party/nginx_devel_kit/src/ndk_path.c-417-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-418-    if (path == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_path.c-419-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-420-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-421-    n = ndk_strccnt (path, ':');
./nginx/3party/nginx_devel_kit/src/ndk_path.c-422-
./nginx/3party/nginx_devel_kit/src/ndk_path.c:423:    a = ngx_array_create (cf->pool, n + 1, sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_path.c-424-    if (a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-425-        return  NULL;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-426-    }
./nginx/3party/nginx_devel_kit/src/ndk_path.c-427-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-428-    s = path;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-429-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-430-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-431-    while (*s != '\0') {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-432-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-433-        m = s;
--
./nginx/3party/nginx_devel_kit/src/ndk_path.c-509-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-510-    if (*a != NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-511-        return  "is duplicate";
./nginx/3party/nginx_devel_kit/src/ndk_path.c-512-    }
./nginx/3party/nginx_devel_kit/src/ndk_path.c-513-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-514-    value = cf->args->elts;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-515-    value++;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-516-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-517-    n = ndk_strcntc (value, ':') + 1;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-518-
./nginx/3party/nginx_devel_kit/src/ndk_path.c:519:    *a = ngx_array_create (cf->pool, n, sizeof (ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_path.c-520-    if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-521-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-522-    }
./nginx/3party/nginx_devel_kit/src/ndk_path.c-523-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-524-    s = value->data;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-525-    e = s + value->len;
./nginx/3party/nginx_devel_kit/src/ndk_path.c-526-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-527-    while (s < e) {
./nginx/3party/nginx_devel_kit/src/ndk_path.c-528-
./nginx/3party/nginx_devel_kit/src/ndk_path.c-529-        m = s;
--
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-144-    char  *p = conf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-145-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-146-    ngx_str_t         *value, *s;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-147-    ngx_array_t      **a;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-148-    ngx_conf_post_t   *post;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-149-    ngx_uint_t         i;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-150-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-151-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-152-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-153-    if (*a == NGX_CONF_UNSET_PTR) {
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c:154:        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_str_t));
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-155-        if (*a == NULL) {
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-156-            return NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-157-        }
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-158-    }
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-159-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-160-    s = NULL;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-161-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-162-    for (i=cf->args->nelts-1; i; i--) {
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-163-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-164-        s = ngx_array_push(*a);
--
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-292-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-293-ngx_http_conf_ctx_t *
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-294-ndk_conf_create_http_location (ngx_conf_t *cf)
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-295-{
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-296-    ngx_http_conf_ctx_t          *ctx, *pctx;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-297-    void                         *mconf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-298-    ngx_http_core_loc_conf_t     *clcf, *pclcf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-299-    ngx_uint_t                    i;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-300-    ngx_http_module_t            *module;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-301-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c:302:    ndk_pcallocp_rce (ctx, cf->pool);
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-303-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-304-    pctx = cf->ctx;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-305-    ctx->main_conf = pctx->main_conf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-306-    ctx->srv_conf = pctx->srv_conf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-307-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c:308:    ndk_pcalloc_rce (ctx->loc_conf, cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-309-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-310-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-311-    for (i = 0; ngx_modules[i]; i++) {
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-312-        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-313-            continue;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-314-        }
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-315-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-316-        module = ngx_modules[i]->ctx;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-317-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-318-        if (module->create_loc_conf) {
--
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-348-    ngx_http_core_loc_conf_t     *clcf;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-349-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-350-    ctx = ndk_conf_create_http_location (cf);
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-351-    if (ctx == NGX_CONF_ERROR)
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-352-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-353-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-354-    clcf = ctx->loc_conf[ngx_http_core_module.ctx_index];
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-355-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-356-    /* in case the developer forgets to add '@' at the beginning of the named location */
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-357-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c:358:    if (name->data[0] != '@' && ndk_catstrf (cf->pool, name, "sS", "@", name) == NULL)
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-359-        return  NGX_CONF_ERROR;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-360-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-361-    clcf->name = *name;     /* TODO : copy? */
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-362-    clcf->noname = 0;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-363-    clcf->named = 1;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-364-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-365-    return  ctx;
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-366-}
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-367-
./nginx/3party/nginx_devel_kit/src/ndk_conf_file.c-368-
--
./nginx/src/mail/ngx_mail_smtp_handler.c-120-
./nginx/src/mail/ngx_mail_smtp_handler.c-121-        ngx_resolve_addr_done(ctx);
./nginx/src/mail/ngx_mail_smtp_handler.c-122-
./nginx/src/mail/ngx_mail_smtp_handler.c-123-        ngx_mail_smtp_greeting(s, s->connection);
./nginx/src/mail/ngx_mail_smtp_handler.c-124-
./nginx/src/mail/ngx_mail_smtp_handler.c-125-        return;
./nginx/src/mail/ngx_mail_smtp_handler.c-126-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-127-
./nginx/src/mail/ngx_mail_smtp_handler.c-128-    c->log->action = "in resolving client hostname";
./nginx/src/mail/ngx_mail_smtp_handler.c-129-
./nginx/src/mail/ngx_mail_smtp_handler.c:130:    s->host.data = ngx_pstrdup(c->pool, &ctx->name);
./nginx/src/mail/ngx_mail_smtp_handler.c-131-    if (s->host.data == NULL) {
./nginx/src/mail/ngx_mail_smtp_handler.c-132-        ngx_resolve_addr_done(ctx);
./nginx/src/mail/ngx_mail_smtp_handler.c-133-        ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_smtp_handler.c-134-        return;
./nginx/src/mail/ngx_mail_smtp_handler.c-135-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-136-
./nginx/src/mail/ngx_mail_smtp_handler.c-137-    s->host.len = ctx->name.len;
./nginx/src/mail/ngx_mail_smtp_handler.c-138-
./nginx/src/mail/ngx_mail_smtp_handler.c-139-    ngx_resolve_addr_done(ctx);
./nginx/src/mail/ngx_mail_smtp_handler.c-140-
--
./nginx/src/mail/ngx_mail_smtp_handler.c-357-
./nginx/src/mail/ngx_mail_smtp_handler.c-358-    ngx_mail_smtp_auth_state(rev);
./nginx/src/mail/ngx_mail_smtp_handler.c-359-}
./nginx/src/mail/ngx_mail_smtp_handler.c-360-
./nginx/src/mail/ngx_mail_smtp_handler.c-361-
./nginx/src/mail/ngx_mail_smtp_handler.c-362-static ngx_int_t
./nginx/src/mail/ngx_mail_smtp_handler.c-363-ngx_mail_smtp_create_buffer(ngx_mail_session_t *s, ngx_connection_t *c)
./nginx/src/mail/ngx_mail_smtp_handler.c-364-{
./nginx/src/mail/ngx_mail_smtp_handler.c-365-    ngx_mail_smtp_srv_conf_t  *sscf;
./nginx/src/mail/ngx_mail_smtp_handler.c-366-
./nginx/src/mail/ngx_mail_smtp_handler.c:367:    if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t)) == NGX_ERROR) {
./nginx/src/mail/ngx_mail_smtp_handler.c-368-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_smtp_handler.c-369-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_smtp_handler.c-370-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-371-
./nginx/src/mail/ngx_mail_smtp_handler.c-372-    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);
./nginx/src/mail/ngx_mail_smtp_handler.c-373-
./nginx/src/mail/ngx_mail_smtp_handler.c:374:    s->buffer = ngx_create_temp_buf(c->pool, sscf->client_buffer_size);
./nginx/src/mail/ngx_mail_smtp_handler.c-375-    if (s->buffer == NULL) {
./nginx/src/mail/ngx_mail_smtp_handler.c-376-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_smtp_handler.c-377-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_smtp_handler.c-378-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-379-
./nginx/src/mail/ngx_mail_smtp_handler.c-380-    return NGX_OK;
./nginx/src/mail/ngx_mail_smtp_handler.c-381-}
./nginx/src/mail/ngx_mail_smtp_handler.c-382-
./nginx/src/mail/ngx_mail_smtp_handler.c-383-
./nginx/src/mail/ngx_mail_smtp_handler.c-384-void
--
./nginx/src/mail/ngx_mail_smtp_handler.c-525-    if (s->args.nelts != 1) {
./nginx/src/mail/ngx_mail_smtp_handler.c-526-        ngx_str_set(&s->out, smtp_invalid_argument);
./nginx/src/mail/ngx_mail_smtp_handler.c-527-        s->state = 0;
./nginx/src/mail/ngx_mail_smtp_handler.c-528-        return NGX_OK;
./nginx/src/mail/ngx_mail_smtp_handler.c-529-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-530-
./nginx/src/mail/ngx_mail_smtp_handler.c-531-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_smtp_handler.c-532-
./nginx/src/mail/ngx_mail_smtp_handler.c-533-    s->smtp_helo.len = arg[0].len;
./nginx/src/mail/ngx_mail_smtp_handler.c-534-
./nginx/src/mail/ngx_mail_smtp_handler.c:535:    s->smtp_helo.data = ngx_pnalloc(c->pool, arg[0].len);
./nginx/src/mail/ngx_mail_smtp_handler.c-536-    if (s->smtp_helo.data == NULL) {
./nginx/src/mail/ngx_mail_smtp_handler.c-537-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_smtp_handler.c-538-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-539-
./nginx/src/mail/ngx_mail_smtp_handler.c-540-    ngx_memcpy(s->smtp_helo.data, arg[0].data, arg[0].len);
./nginx/src/mail/ngx_mail_smtp_handler.c-541-
./nginx/src/mail/ngx_mail_smtp_handler.c-542-    ngx_str_null(&s->smtp_from);
./nginx/src/mail/ngx_mail_smtp_handler.c-543-    ngx_str_null(&s->smtp_to);
./nginx/src/mail/ngx_mail_smtp_handler.c-544-
./nginx/src/mail/ngx_mail_smtp_handler.c-545-    sscf = ngx_mail_get_module_srv_conf(s, ngx_mail_smtp_module);
--
./nginx/src/mail/ngx_mail_smtp_handler.c-689-            break;
./nginx/src/mail/ngx_mail_smtp_handler.c-690-        }
./nginx/src/mail/ngx_mail_smtp_handler.c-691-
./nginx/src/mail/ngx_mail_smtp_handler.c-692-        i--;
./nginx/src/mail/ngx_mail_smtp_handler.c-693-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-694-
./nginx/src/mail/ngx_mail_smtp_handler.c-695-    l.len = i;
./nginx/src/mail/ngx_mail_smtp_handler.c-696-
./nginx/src/mail/ngx_mail_smtp_handler.c-697-    s->smtp_from.len = l.len;
./nginx/src/mail/ngx_mail_smtp_handler.c-698-
./nginx/src/mail/ngx_mail_smtp_handler.c:699:    s->smtp_from.data = ngx_pnalloc(c->pool, l.len);
./nginx/src/mail/ngx_mail_smtp_handler.c-700-    if (s->smtp_from.data == NULL) {
./nginx/src/mail/ngx_mail_smtp_handler.c-701-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_smtp_handler.c-702-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-703-
./nginx/src/mail/ngx_mail_smtp_handler.c-704-    ngx_memcpy(s->smtp_from.data, l.data, l.len);
./nginx/src/mail/ngx_mail_smtp_handler.c-705-
./nginx/src/mail/ngx_mail_smtp_handler.c-706-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_smtp_handler.c-707-                   "smtp mail from:\"%V\"", &s->smtp_from);
./nginx/src/mail/ngx_mail_smtp_handler.c-708-
./nginx/src/mail/ngx_mail_smtp_handler.c-709-    ngx_str_set(&s->out, smtp_ok);
--
./nginx/src/mail/ngx_mail_smtp_handler.c-742-            break;
./nginx/src/mail/ngx_mail_smtp_handler.c-743-        }
./nginx/src/mail/ngx_mail_smtp_handler.c-744-
./nginx/src/mail/ngx_mail_smtp_handler.c-745-        i--;
./nginx/src/mail/ngx_mail_smtp_handler.c-746-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-747-
./nginx/src/mail/ngx_mail_smtp_handler.c-748-    l.len = i;
./nginx/src/mail/ngx_mail_smtp_handler.c-749-
./nginx/src/mail/ngx_mail_smtp_handler.c-750-    s->smtp_to.len = l.len;
./nginx/src/mail/ngx_mail_smtp_handler.c-751-
./nginx/src/mail/ngx_mail_smtp_handler.c:752:    s->smtp_to.data = ngx_pnalloc(c->pool, l.len);
./nginx/src/mail/ngx_mail_smtp_handler.c-753-    if (s->smtp_to.data == NULL) {
./nginx/src/mail/ngx_mail_smtp_handler.c-754-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_smtp_handler.c-755-    }
./nginx/src/mail/ngx_mail_smtp_handler.c-756-
./nginx/src/mail/ngx_mail_smtp_handler.c-757-    ngx_memcpy(s->smtp_to.data, l.data, l.len);
./nginx/src/mail/ngx_mail_smtp_handler.c-758-
./nginx/src/mail/ngx_mail_smtp_handler.c-759-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_smtp_handler.c-760-                   "smtp rcpt to:\"%V\"", &s->smtp_to);
./nginx/src/mail/ngx_mail_smtp_handler.c-761-
./nginx/src/mail/ngx_mail_smtp_handler.c-762-    s->auth_method = NGX_MAIL_AUTH_NONE;
--
./nginx/src/mail/ngx_mail_pop3_handler.c-40-    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);
./nginx/src/mail/ngx_mail_pop3_handler.c-41-
./nginx/src/mail/ngx_mail_pop3_handler.c-42-    if (pscf->auth_methods
./nginx/src/mail/ngx_mail_pop3_handler.c-43-        & (NGX_MAIL_AUTH_APOP_ENABLED|NGX_MAIL_AUTH_CRAM_MD5_ENABLED))
./nginx/src/mail/ngx_mail_pop3_handler.c-44-    {
./nginx/src/mail/ngx_mail_pop3_handler.c-45-        if (ngx_mail_salt(s, c, cscf) != NGX_OK) {
./nginx/src/mail/ngx_mail_pop3_handler.c-46-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_pop3_handler.c-47-            return;
./nginx/src/mail/ngx_mail_pop3_handler.c-48-        }
./nginx/src/mail/ngx_mail_pop3_handler.c-49-
./nginx/src/mail/ngx_mail_pop3_handler.c:50:        s->out.data = ngx_pnalloc(c->pool, sizeof(pop3_greeting) + s->salt.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-51-        if (s->out.data == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-52-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_pop3_handler.c-53-            return;
./nginx/src/mail/ngx_mail_pop3_handler.c-54-        }
./nginx/src/mail/ngx_mail_pop3_handler.c-55-
./nginx/src/mail/ngx_mail_pop3_handler.c-56-        p = ngx_cpymem(s->out.data, pop3_greeting, sizeof(pop3_greeting) - 3);
./nginx/src/mail/ngx_mail_pop3_handler.c-57-        *p++ = ' ';
./nginx/src/mail/ngx_mail_pop3_handler.c-58-        p = ngx_cpymem(p, s->salt.data, s->salt.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-59-
./nginx/src/mail/ngx_mail_pop3_handler.c-60-        s->out.len = p - s->out.data;
--
./nginx/src/mail/ngx_mail_pop3_handler.c-88-    if (rev->timedout) {
./nginx/src/mail/ngx_mail_pop3_handler.c-89-        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
./nginx/src/mail/ngx_mail_pop3_handler.c-90-        c->timedout = 1;
./nginx/src/mail/ngx_mail_pop3_handler.c-91-        ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_pop3_handler.c-92-        return;
./nginx/src/mail/ngx_mail_pop3_handler.c-93-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-94-
./nginx/src/mail/ngx_mail_pop3_handler.c-95-    s = c->data;
./nginx/src/mail/ngx_mail_pop3_handler.c-96-
./nginx/src/mail/ngx_mail_pop3_handler.c-97-    if (s->buffer == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c:98:        if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t))
./nginx/src/mail/ngx_mail_pop3_handler.c-99-            == NGX_ERROR)
./nginx/src/mail/ngx_mail_pop3_handler.c-100-        {
./nginx/src/mail/ngx_mail_pop3_handler.c-101-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_pop3_handler.c-102-            return;
./nginx/src/mail/ngx_mail_pop3_handler.c-103-        }
./nginx/src/mail/ngx_mail_pop3_handler.c-104-
./nginx/src/mail/ngx_mail_pop3_handler.c:105:        s->buffer = ngx_create_temp_buf(c->pool, 128);
./nginx/src/mail/ngx_mail_pop3_handler.c-106-        if (s->buffer == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-107-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_pop3_handler.c-108-            return;
./nginx/src/mail/ngx_mail_pop3_handler.c-109-        }
./nginx/src/mail/ngx_mail_pop3_handler.c-110-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-111-
./nginx/src/mail/ngx_mail_pop3_handler.c-112-    s->mail_state = ngx_pop3_start;
./nginx/src/mail/ngx_mail_pop3_handler.c-113-    c->read->handler = ngx_mail_pop3_auth_state;
./nginx/src/mail/ngx_mail_pop3_handler.c-114-
./nginx/src/mail/ngx_mail_pop3_handler.c-115-    ngx_mail_pop3_auth_state(rev);
--
./nginx/src/mail/ngx_mail_pop3_handler.c-285-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_pop3_handler.c-286-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-287-#endif
./nginx/src/mail/ngx_mail_pop3_handler.c-288-
./nginx/src/mail/ngx_mail_pop3_handler.c-289-    if (s->args.nelts != 1) {
./nginx/src/mail/ngx_mail_pop3_handler.c-290-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_pop3_handler.c-291-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-292-
./nginx/src/mail/ngx_mail_pop3_handler.c-293-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_pop3_handler.c-294-    s->login.len = arg[0].len;
./nginx/src/mail/ngx_mail_pop3_handler.c:295:    s->login.data = ngx_pnalloc(c->pool, s->login.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-296-    if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-297-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_pop3_handler.c-298-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-299-
./nginx/src/mail/ngx_mail_pop3_handler.c-300-    ngx_memcpy(s->login.data, arg[0].data, s->login.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-301-
./nginx/src/mail/ngx_mail_pop3_handler.c-302-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_pop3_handler.c-303-                   "pop3 login: \"%V\"", &s->login);
./nginx/src/mail/ngx_mail_pop3_handler.c-304-
./nginx/src/mail/ngx_mail_pop3_handler.c-305-    s->mail_state = ngx_pop3_user;
--
./nginx/src/mail/ngx_mail_pop3_handler.c-312-ngx_mail_pop3_pass(ngx_mail_session_t *s, ngx_connection_t *c)
./nginx/src/mail/ngx_mail_pop3_handler.c-313-{
./nginx/src/mail/ngx_mail_pop3_handler.c-314-    ngx_str_t  *arg;
./nginx/src/mail/ngx_mail_pop3_handler.c-315-
./nginx/src/mail/ngx_mail_pop3_handler.c-316-    if (s->args.nelts != 1) {
./nginx/src/mail/ngx_mail_pop3_handler.c-317-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_pop3_handler.c-318-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-319-
./nginx/src/mail/ngx_mail_pop3_handler.c-320-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_pop3_handler.c-321-    s->passwd.len = arg[0].len;
./nginx/src/mail/ngx_mail_pop3_handler.c:322:    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-323-    if (s->passwd.data == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-324-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_pop3_handler.c-325-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-326-
./nginx/src/mail/ngx_mail_pop3_handler.c-327-    ngx_memcpy(s->passwd.data, arg[0].data, s->passwd.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-328-
./nginx/src/mail/ngx_mail_pop3_handler.c-329-#if (NGX_DEBUG_MAIL_PASSWD)
./nginx/src/mail/ngx_mail_pop3_handler.c-330-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_pop3_handler.c-331-                   "pop3 passwd: \"%V\"", &s->passwd);
./nginx/src/mail/ngx_mail_pop3_handler.c-332-#endif
--
./nginx/src/mail/ngx_mail_pop3_handler.c-405-
./nginx/src/mail/ngx_mail_pop3_handler.c-406-    pscf = ngx_mail_get_module_srv_conf(s, ngx_mail_pop3_module);
./nginx/src/mail/ngx_mail_pop3_handler.c-407-
./nginx/src/mail/ngx_mail_pop3_handler.c-408-    if (!(pscf->auth_methods & NGX_MAIL_AUTH_APOP_ENABLED)) {
./nginx/src/mail/ngx_mail_pop3_handler.c-409-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_pop3_handler.c-410-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-411-
./nginx/src/mail/ngx_mail_pop3_handler.c-412-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_pop3_handler.c-413-
./nginx/src/mail/ngx_mail_pop3_handler.c-414-    s->login.len = arg[0].len;
./nginx/src/mail/ngx_mail_pop3_handler.c:415:    s->login.data = ngx_pnalloc(c->pool, s->login.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-416-    if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-417-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_pop3_handler.c-418-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-419-
./nginx/src/mail/ngx_mail_pop3_handler.c-420-    ngx_memcpy(s->login.data, arg[0].data, s->login.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-421-
./nginx/src/mail/ngx_mail_pop3_handler.c-422-    s->passwd.len = arg[1].len;
./nginx/src/mail/ngx_mail_pop3_handler.c:423:    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-424-    if (s->passwd.data == NULL) {
./nginx/src/mail/ngx_mail_pop3_handler.c-425-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_pop3_handler.c-426-    }
./nginx/src/mail/ngx_mail_pop3_handler.c-427-
./nginx/src/mail/ngx_mail_pop3_handler.c-428-    ngx_memcpy(s->passwd.data, arg[1].data, s->passwd.len);
./nginx/src/mail/ngx_mail_pop3_handler.c-429-
./nginx/src/mail/ngx_mail_pop3_handler.c-430-    ngx_log_debug2(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_pop3_handler.c-431-                   "pop3 apop: \"%V\" \"%V\"", &s->login, &s->passwd);
./nginx/src/mail/ngx_mail_pop3_handler.c-432-
./nginx/src/mail/ngx_mail_pop3_handler.c-433-    s->auth_method = NGX_MAIL_AUTH_APOP;
--
./nginx/src/mail/ngx_mail_handler.c-106-            break;
./nginx/src/mail/ngx_mail_handler.c-107-#endif
./nginx/src/mail/ngx_mail_handler.c-108-
./nginx/src/mail/ngx_mail_handler.c-109-        default: /* AF_INET */
./nginx/src/mail/ngx_mail_handler.c-110-            addr = port->addrs;
./nginx/src/mail/ngx_mail_handler.c-111-            addr_conf = &addr[0].conf;
./nginx/src/mail/ngx_mail_handler.c-112-            break;
./nginx/src/mail/ngx_mail_handler.c-113-        }
./nginx/src/mail/ngx_mail_handler.c-114-    }
./nginx/src/mail/ngx_mail_handler.c-115-
./nginx/src/mail/ngx_mail_handler.c:116:    s = ngx_pcalloc(c->pool, sizeof(ngx_mail_session_t));
./nginx/src/mail/ngx_mail_handler.c-117-    if (s == NULL) {
./nginx/src/mail/ngx_mail_handler.c-118-        ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_handler.c-119-        return;
./nginx/src/mail/ngx_mail_handler.c-120-    }
./nginx/src/mail/ngx_mail_handler.c-121-
./nginx/src/mail/ngx_mail_handler.c-122-    s->main_conf = addr_conf->ctx->main_conf;
./nginx/src/mail/ngx_mail_handler.c-123-    s->srv_conf = addr_conf->ctx->srv_conf;
./nginx/src/mail/ngx_mail_handler.c-124-
./nginx/src/mail/ngx_mail_handler.c-125-    s->addr_text = &addr_conf->addr_text;
./nginx/src/mail/ngx_mail_handler.c-126-
./nginx/src/mail/ngx_mail_handler.c-127-    c->data = s;
./nginx/src/mail/ngx_mail_handler.c-128-    s->connection = c;
./nginx/src/mail/ngx_mail_handler.c-129-
./nginx/src/mail/ngx_mail_handler.c-130-    ngx_log_error(NGX_LOG_INFO, c->log, 0, "*%ui client %V connected to %V",
./nginx/src/mail/ngx_mail_handler.c-131-                  c->number, &c->addr_text, s->addr_text);
./nginx/src/mail/ngx_mail_handler.c-132-
./nginx/src/mail/ngx_mail_handler.c:133:    ctx = ngx_palloc(c->pool, sizeof(ngx_mail_log_ctx_t));
./nginx/src/mail/ngx_mail_handler.c-134-    if (ctx == NULL) {
./nginx/src/mail/ngx_mail_handler.c-135-        ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_handler.c-136-        return;
./nginx/src/mail/ngx_mail_handler.c-137-    }
./nginx/src/mail/ngx_mail_handler.c-138-
./nginx/src/mail/ngx_mail_handler.c-139-    ctx->client = &c->addr_text;
./nginx/src/mail/ngx_mail_handler.c-140-    ctx->session = s;
./nginx/src/mail/ngx_mail_handler.c-141-
./nginx/src/mail/ngx_mail_handler.c-142-    c->log->connection = c->number;
./nginx/src/mail/ngx_mail_handler.c-143-    c->log->handler = ngx_mail_log_error;
--
./nginx/src/mail/ngx_mail_handler.c-269-{
./nginx/src/mail/ngx_mail_handler.c-270-    ngx_mail_session_t        *s;
./nginx/src/mail/ngx_mail_handler.c-271-    ngx_mail_core_srv_conf_t  *cscf;
./nginx/src/mail/ngx_mail_handler.c-272-
./nginx/src/mail/ngx_mail_handler.c-273-    s = c->data;
./nginx/src/mail/ngx_mail_handler.c-274-
./nginx/src/mail/ngx_mail_handler.c-275-    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);
./nginx/src/mail/ngx_mail_handler.c-276-
./nginx/src/mail/ngx_mail_handler.c-277-    s->protocol = cscf->protocol->type;
./nginx/src/mail/ngx_mail_handler.c-278-
./nginx/src/mail/ngx_mail_handler.c:279:    s->ctx = ngx_pcalloc(c->pool, sizeof(void *) * ngx_mail_max_module);
./nginx/src/mail/ngx_mail_handler.c-280-    if (s->ctx == NULL) {
./nginx/src/mail/ngx_mail_handler.c-281-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_handler.c-282-        return;
./nginx/src/mail/ngx_mail_handler.c-283-    }
./nginx/src/mail/ngx_mail_handler.c-284-
./nginx/src/mail/ngx_mail_handler.c-285-    c->write->handler = ngx_mail_send;
./nginx/src/mail/ngx_mail_handler.c-286-
./nginx/src/mail/ngx_mail_handler.c-287-    cscf->protocol->init_session(s, c);
./nginx/src/mail/ngx_mail_handler.c-288-}
./nginx/src/mail/ngx_mail_handler.c-289-
./nginx/src/mail/ngx_mail_handler.c-290-
./nginx/src/mail/ngx_mail_handler.c-291-ngx_int_t
./nginx/src/mail/ngx_mail_handler.c-292-ngx_mail_salt(ngx_mail_session_t *s, ngx_connection_t *c,
./nginx/src/mail/ngx_mail_handler.c-293-    ngx_mail_core_srv_conf_t *cscf)
./nginx/src/mail/ngx_mail_handler.c-294-{
./nginx/src/mail/ngx_mail_handler.c:295:    s->salt.data = ngx_pnalloc(c->pool,
./nginx/src/mail/ngx_mail_handler.c-296-                               sizeof(" <18446744073709551616.@>" CRLF) - 1
./nginx/src/mail/ngx_mail_handler.c-297-                               + NGX_TIME_T_LEN
./nginx/src/mail/ngx_mail_handler.c-298-                               + cscf->server_name.len);
./nginx/src/mail/ngx_mail_handler.c-299-    if (s->salt.data == NULL) {
./nginx/src/mail/ngx_mail_handler.c-300-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-301-    }
./nginx/src/mail/ngx_mail_handler.c-302-
./nginx/src/mail/ngx_mail_handler.c-303-    s->salt.len = ngx_sprintf(s->salt.data, "<%ul.%T@%V>" CRLF,
./nginx/src/mail/ngx_mail_handler.c-304-                              ngx_random(), ngx_time(), &cscf->server_name)
./nginx/src/mail/ngx_mail_handler.c-305-                  - s->salt.data;
--
./nginx/src/mail/ngx_mail_handler.c-337-    u_char     *p, *last;
./nginx/src/mail/ngx_mail_handler.c-338-    ngx_str_t  *arg, plain;
./nginx/src/mail/ngx_mail_handler.c-339-
./nginx/src/mail/ngx_mail_handler.c-340-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_handler.c-341-
./nginx/src/mail/ngx_mail_handler.c-342-#if (NGX_DEBUG_MAIL_PASSWD)
./nginx/src/mail/ngx_mail_handler.c-343-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-344-                   "mail auth plain: \"%V\"", &arg[n]);
./nginx/src/mail/ngx_mail_handler.c-345-#endif
./nginx/src/mail/ngx_mail_handler.c-346-
./nginx/src/mail/ngx_mail_handler.c:347:    plain.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[n].len));
./nginx/src/mail/ngx_mail_handler.c-348-    if (plain.data == NULL) {
./nginx/src/mail/ngx_mail_handler.c-349-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-350-    }
./nginx/src/mail/ngx_mail_handler.c-351-
./nginx/src/mail/ngx_mail_handler.c-352-    if (ngx_decode_base64(&plain, &arg[n]) != NGX_OK) {
./nginx/src/mail/ngx_mail_handler.c-353-        ngx_log_error(NGX_LOG_INFO, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-354-            "client sent invalid base64 encoding in AUTH PLAIN command");
./nginx/src/mail/ngx_mail_handler.c-355-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_handler.c-356-    }
./nginx/src/mail/ngx_mail_handler.c-357-
--
./nginx/src/mail/ngx_mail_handler.c-394-ngx_mail_auth_login_username(ngx_mail_session_t *s, ngx_connection_t *c,
./nginx/src/mail/ngx_mail_handler.c-395-    ngx_uint_t n)
./nginx/src/mail/ngx_mail_handler.c-396-{
./nginx/src/mail/ngx_mail_handler.c-397-    ngx_str_t  *arg;
./nginx/src/mail/ngx_mail_handler.c-398-
./nginx/src/mail/ngx_mail_handler.c-399-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_handler.c-400-
./nginx/src/mail/ngx_mail_handler.c-401-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-402-                   "mail auth login username: \"%V\"", &arg[n]);
./nginx/src/mail/ngx_mail_handler.c-403-
./nginx/src/mail/ngx_mail_handler.c:404:    s->login.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[n].len));
./nginx/src/mail/ngx_mail_handler.c-405-    if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_handler.c-406-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-407-    }
./nginx/src/mail/ngx_mail_handler.c-408-
./nginx/src/mail/ngx_mail_handler.c-409-    if (ngx_decode_base64(&s->login, &arg[n]) != NGX_OK) {
./nginx/src/mail/ngx_mail_handler.c-410-        ngx_log_error(NGX_LOG_INFO, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-411-            "client sent invalid base64 encoding in AUTH LOGIN command");
./nginx/src/mail/ngx_mail_handler.c-412-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_handler.c-413-    }
./nginx/src/mail/ngx_mail_handler.c-414-
--
./nginx/src/mail/ngx_mail_handler.c-424-{
./nginx/src/mail/ngx_mail_handler.c-425-    ngx_str_t  *arg;
./nginx/src/mail/ngx_mail_handler.c-426-
./nginx/src/mail/ngx_mail_handler.c-427-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_handler.c-428-
./nginx/src/mail/ngx_mail_handler.c-429-#if (NGX_DEBUG_MAIL_PASSWD)
./nginx/src/mail/ngx_mail_handler.c-430-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-431-                   "mail auth login password: \"%V\"", &arg[0]);
./nginx/src/mail/ngx_mail_handler.c-432-#endif
./nginx/src/mail/ngx_mail_handler.c-433-
./nginx/src/mail/ngx_mail_handler.c:434:    s->passwd.data = ngx_pnalloc(c->pool,
./nginx/src/mail/ngx_mail_handler.c-435-                                 ngx_base64_decoded_length(arg[0].len));
./nginx/src/mail/ngx_mail_handler.c-436-    if (s->passwd.data == NULL) {
./nginx/src/mail/ngx_mail_handler.c-437-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-438-    }
./nginx/src/mail/ngx_mail_handler.c-439-
./nginx/src/mail/ngx_mail_handler.c-440-    if (ngx_decode_base64(&s->passwd, &arg[0]) != NGX_OK) {
./nginx/src/mail/ngx_mail_handler.c-441-        ngx_log_error(NGX_LOG_INFO, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-442-            "client sent invalid base64 encoding in AUTH LOGIN command");
./nginx/src/mail/ngx_mail_handler.c-443-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_handler.c-444-    }
--
./nginx/src/mail/ngx_mail_handler.c-453-
./nginx/src/mail/ngx_mail_handler.c-454-
./nginx/src/mail/ngx_mail_handler.c-455-ngx_int_t
./nginx/src/mail/ngx_mail_handler.c-456-ngx_mail_auth_cram_md5_salt(ngx_mail_session_t *s, ngx_connection_t *c,
./nginx/src/mail/ngx_mail_handler.c-457-    char *prefix, size_t len)
./nginx/src/mail/ngx_mail_handler.c-458-{
./nginx/src/mail/ngx_mail_handler.c-459-    u_char      *p;
./nginx/src/mail/ngx_mail_handler.c-460-    ngx_str_t    salt;
./nginx/src/mail/ngx_mail_handler.c-461-    ngx_uint_t   n;
./nginx/src/mail/ngx_mail_handler.c-462-
./nginx/src/mail/ngx_mail_handler.c:463:    p = ngx_pnalloc(c->pool, len + ngx_base64_encoded_length(s->salt.len) + 2);
./nginx/src/mail/ngx_mail_handler.c-464-    if (p == NULL) {
./nginx/src/mail/ngx_mail_handler.c-465-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-466-    }
./nginx/src/mail/ngx_mail_handler.c-467-
./nginx/src/mail/ngx_mail_handler.c-468-    salt.data = ngx_cpymem(p, prefix, len);
./nginx/src/mail/ngx_mail_handler.c-469-    s->salt.len -= 2;
./nginx/src/mail/ngx_mail_handler.c-470-
./nginx/src/mail/ngx_mail_handler.c-471-    ngx_encode_base64(&salt, &s->salt);
./nginx/src/mail/ngx_mail_handler.c-472-
./nginx/src/mail/ngx_mail_handler.c-473-    s->salt.len += 2;
--
./nginx/src/mail/ngx_mail_handler.c-485-ngx_mail_auth_cram_md5(ngx_mail_session_t *s, ngx_connection_t *c)
./nginx/src/mail/ngx_mail_handler.c-486-{
./nginx/src/mail/ngx_mail_handler.c-487-    u_char     *p, *last;
./nginx/src/mail/ngx_mail_handler.c-488-    ngx_str_t  *arg;
./nginx/src/mail/ngx_mail_handler.c-489-
./nginx/src/mail/ngx_mail_handler.c-490-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_handler.c-491-
./nginx/src/mail/ngx_mail_handler.c-492-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-493-                   "mail auth cram-md5: \"%V\"", &arg[0]);
./nginx/src/mail/ngx_mail_handler.c-494-
./nginx/src/mail/ngx_mail_handler.c:495:    s->login.data = ngx_pnalloc(c->pool, ngx_base64_decoded_length(arg[0].len));
./nginx/src/mail/ngx_mail_handler.c-496-    if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_handler.c-497-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_handler.c-498-    }
./nginx/src/mail/ngx_mail_handler.c-499-
./nginx/src/mail/ngx_mail_handler.c-500-    if (ngx_decode_base64(&s->login, &arg[0]) != NGX_OK) {
./nginx/src/mail/ngx_mail_handler.c-501-        ngx_log_error(NGX_LOG_INFO, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-502-            "client sent invalid base64 encoding in AUTH CRAM-MD5 command");
./nginx/src/mail/ngx_mail_handler.c-503-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_handler.c-504-    }
./nginx/src/mail/ngx_mail_handler.c-505-
--
./nginx/src/mail/ngx_mail_handler.c-685-    s->out = cscf->protocol->internal_server_error;
./nginx/src/mail/ngx_mail_handler.c-686-    s->quit = 1;
./nginx/src/mail/ngx_mail_handler.c-687-
./nginx/src/mail/ngx_mail_handler.c-688-    ngx_mail_send(s->connection->write);
./nginx/src/mail/ngx_mail_handler.c-689-}
./nginx/src/mail/ngx_mail_handler.c-690-
./nginx/src/mail/ngx_mail_handler.c-691-
./nginx/src/mail/ngx_mail_handler.c-692-void
./nginx/src/mail/ngx_mail_handler.c-693-ngx_mail_close_connection(ngx_connection_t *c)
./nginx/src/mail/ngx_mail_handler.c-694-{
./nginx/src/mail/ngx_mail_handler.c:695:    ngx_pool_t  *pool;
./nginx/src/mail/ngx_mail_handler.c-696-
./nginx/src/mail/ngx_mail_handler.c-697-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_handler.c-698-                   "close mail connection: %d", c->fd);
./nginx/src/mail/ngx_mail_handler.c-699-
./nginx/src/mail/ngx_mail_handler.c-700-#if (NGX_MAIL_SSL)
./nginx/src/mail/ngx_mail_handler.c-701-
./nginx/src/mail/ngx_mail_handler.c-702-    if (c->ssl) {
./nginx/src/mail/ngx_mail_handler.c-703-        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
./nginx/src/mail/ngx_mail_handler.c-704-            c->ssl->handler = ngx_mail_close_connection;
./nginx/src/mail/ngx_mail_handler.c-705-            return;
--
./nginx/src/mail/ngx_mail_handler.c-707-    }
./nginx/src/mail/ngx_mail_handler.c-708-
./nginx/src/mail/ngx_mail_handler.c-709-#endif
./nginx/src/mail/ngx_mail_handler.c-710-
./nginx/src/mail/ngx_mail_handler.c-711-#if (NGX_STAT_STUB)
./nginx/src/mail/ngx_mail_handler.c-712-    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
./nginx/src/mail/ngx_mail_handler.c-713-#endif
./nginx/src/mail/ngx_mail_handler.c-714-
./nginx/src/mail/ngx_mail_handler.c-715-    c->destroyed = 1;
./nginx/src/mail/ngx_mail_handler.c-716-
./nginx/src/mail/ngx_mail_handler.c:717:    pool = c->pool;
./nginx/src/mail/ngx_mail_handler.c-718-
./nginx/src/mail/ngx_mail_handler.c-719-    ngx_close_connection(c);
./nginx/src/mail/ngx_mail_handler.c-720-
./nginx/src/mail/ngx_mail_handler.c:721:    ngx_destroy_pool(pool);
./nginx/src/mail/ngx_mail_handler.c-722-}
./nginx/src/mail/ngx_mail_handler.c-723-
./nginx/src/mail/ngx_mail_handler.c-724-
./nginx/src/mail/ngx_mail_handler.c-725-u_char *
./nginx/src/mail/ngx_mail_handler.c-726-ngx_mail_log_error(ngx_log_t *log, u_char *buf, size_t len)
./nginx/src/mail/ngx_mail_handler.c-727-{
./nginx/src/mail/ngx_mail_handler.c-728-    u_char              *p;
./nginx/src/mail/ngx_mail_handler.c-729-    ngx_mail_session_t  *s;
./nginx/src/mail/ngx_mail_handler.c-730-    ngx_mail_log_ctx_t  *ctx;
./nginx/src/mail/ngx_mail_handler.c-731-
--
./nginx/src/mail/ngx_mail_imap_module.c-108-    NULL,                                  /* exit master */
./nginx/src/mail/ngx_mail_imap_module.c-109-    NGX_MODULE_V1_PADDING
./nginx/src/mail/ngx_mail_imap_module.c-110-};
./nginx/src/mail/ngx_mail_imap_module.c-111-
./nginx/src/mail/ngx_mail_imap_module.c-112-
./nginx/src/mail/ngx_mail_imap_module.c-113-static void *
./nginx/src/mail/ngx_mail_imap_module.c-114-ngx_mail_imap_create_srv_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_imap_module.c-115-{
./nginx/src/mail/ngx_mail_imap_module.c-116-    ngx_mail_imap_srv_conf_t  *iscf;
./nginx/src/mail/ngx_mail_imap_module.c-117-
./nginx/src/mail/ngx_mail_imap_module.c:118:    iscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_imap_srv_conf_t));
./nginx/src/mail/ngx_mail_imap_module.c-119-    if (iscf == NULL) {
./nginx/src/mail/ngx_mail_imap_module.c-120-        return NULL;
./nginx/src/mail/ngx_mail_imap_module.c-121-    }
./nginx/src/mail/ngx_mail_imap_module.c-122-
./nginx/src/mail/ngx_mail_imap_module.c-123-    iscf->client_buffer_size = NGX_CONF_UNSET_SIZE;
./nginx/src/mail/ngx_mail_imap_module.c-124-
./nginx/src/mail/ngx_mail_imap_module.c:125:    if (ngx_array_init(&iscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
./nginx/src/mail/ngx_mail_imap_module.c-126-        != NGX_OK)
./nginx/src/mail/ngx_mail_imap_module.c-127-    {
./nginx/src/mail/ngx_mail_imap_module.c-128-        return NULL;
./nginx/src/mail/ngx_mail_imap_module.c-129-    }
./nginx/src/mail/ngx_mail_imap_module.c-130-
./nginx/src/mail/ngx_mail_imap_module.c-131-    return iscf;
./nginx/src/mail/ngx_mail_imap_module.c-132-}
./nginx/src/mail/ngx_mail_imap_module.c-133-
./nginx/src/mail/ngx_mail_imap_module.c-134-
./nginx/src/mail/ngx_mail_imap_module.c-135-static char *
--
./nginx/src/mail/ngx_mail_imap_module.c-178-
./nginx/src/mail/ngx_mail_imap_module.c-179-    for (m = NGX_MAIL_AUTH_PLAIN_ENABLED, i = 0;
./nginx/src/mail/ngx_mail_imap_module.c-180-         m <= NGX_MAIL_AUTH_CRAM_MD5_ENABLED;
./nginx/src/mail/ngx_mail_imap_module.c-181-         m <<= 1, i++)
./nginx/src/mail/ngx_mail_imap_module.c-182-    {
./nginx/src/mail/ngx_mail_imap_module.c-183-        if (m & conf->auth_methods) {
./nginx/src/mail/ngx_mail_imap_module.c-184-            size += 1 + ngx_mail_imap_auth_methods_names[i].len;
./nginx/src/mail/ngx_mail_imap_module.c-185-        }
./nginx/src/mail/ngx_mail_imap_module.c-186-    }
./nginx/src/mail/ngx_mail_imap_module.c-187-
./nginx/src/mail/ngx_mail_imap_module.c:188:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_imap_module.c-189-    if (p == NULL) {
./nginx/src/mail/ngx_mail_imap_module.c-190-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_imap_module.c-191-    }
./nginx/src/mail/ngx_mail_imap_module.c-192-
./nginx/src/mail/ngx_mail_imap_module.c-193-    conf->capability.len = size;
./nginx/src/mail/ngx_mail_imap_module.c-194-    conf->capability.data = p;
./nginx/src/mail/ngx_mail_imap_module.c-195-
./nginx/src/mail/ngx_mail_imap_module.c-196-    p = ngx_cpymem(p, "* CAPABILITY", sizeof("* CAPABILITY") - 1);
./nginx/src/mail/ngx_mail_imap_module.c-197-
./nginx/src/mail/ngx_mail_imap_module.c-198-    for (i = 0; i < conf->capabilities.nelts; i++) {
--
./nginx/src/mail/ngx_mail_imap_module.c-211-            p = ngx_cpymem(p, ngx_mail_imap_auth_methods_names[i].data,
./nginx/src/mail/ngx_mail_imap_module.c-212-                           ngx_mail_imap_auth_methods_names[i].len);
./nginx/src/mail/ngx_mail_imap_module.c-213-        }
./nginx/src/mail/ngx_mail_imap_module.c-214-    }
./nginx/src/mail/ngx_mail_imap_module.c-215-
./nginx/src/mail/ngx_mail_imap_module.c-216-    *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_imap_module.c-217-
./nginx/src/mail/ngx_mail_imap_module.c-218-
./nginx/src/mail/ngx_mail_imap_module.c-219-    size += sizeof(" STARTTLS") - 1;
./nginx/src/mail/ngx_mail_imap_module.c-220-
./nginx/src/mail/ngx_mail_imap_module.c:221:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_imap_module.c-222-    if (p == NULL) {
./nginx/src/mail/ngx_mail_imap_module.c-223-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_imap_module.c-224-    }
./nginx/src/mail/ngx_mail_imap_module.c-225-
./nginx/src/mail/ngx_mail_imap_module.c-226-    conf->starttls_capability.len = size;
./nginx/src/mail/ngx_mail_imap_module.c-227-    conf->starttls_capability.data = p;
./nginx/src/mail/ngx_mail_imap_module.c-228-
./nginx/src/mail/ngx_mail_imap_module.c-229-    p = ngx_cpymem(p, conf->capability.data,
./nginx/src/mail/ngx_mail_imap_module.c-230-                   conf->capability.len - (sizeof(CRLF) - 1));
./nginx/src/mail/ngx_mail_imap_module.c-231-    p = ngx_cpymem(p, " STARTTLS", sizeof(" STARTTLS") - 1);
./nginx/src/mail/ngx_mail_imap_module.c-232-    *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_imap_module.c-233-
./nginx/src/mail/ngx_mail_imap_module.c-234-
./nginx/src/mail/ngx_mail_imap_module.c-235-    size = (auth - conf->capability.data) + sizeof(CRLF) - 1
./nginx/src/mail/ngx_mail_imap_module.c-236-            + sizeof(" STARTTLS LOGINDISABLED") - 1;
./nginx/src/mail/ngx_mail_imap_module.c-237-
./nginx/src/mail/ngx_mail_imap_module.c:238:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_imap_module.c-239-    if (p == NULL) {
./nginx/src/mail/ngx_mail_imap_module.c-240-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_imap_module.c-241-    }
./nginx/src/mail/ngx_mail_imap_module.c-242-
./nginx/src/mail/ngx_mail_imap_module.c-243-    conf->starttls_only_capability.len = size;
./nginx/src/mail/ngx_mail_imap_module.c-244-    conf->starttls_only_capability.data = p;
./nginx/src/mail/ngx_mail_imap_module.c-245-
./nginx/src/mail/ngx_mail_imap_module.c-246-    p = ngx_cpymem(p, conf->capability.data,
./nginx/src/mail/ngx_mail_imap_module.c-247-                   auth - conf->capability.data);
./nginx/src/mail/ngx_mail_imap_module.c-248-    p = ngx_cpymem(p, " STARTTLS LOGINDISABLED",
--
./nginx/src/mail/ngx_mail_smtp_module.c-108-    NULL,                                  /* exit master */
./nginx/src/mail/ngx_mail_smtp_module.c-109-    NGX_MODULE_V1_PADDING
./nginx/src/mail/ngx_mail_smtp_module.c-110-};
./nginx/src/mail/ngx_mail_smtp_module.c-111-
./nginx/src/mail/ngx_mail_smtp_module.c-112-
./nginx/src/mail/ngx_mail_smtp_module.c-113-static void *
./nginx/src/mail/ngx_mail_smtp_module.c-114-ngx_mail_smtp_create_srv_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_smtp_module.c-115-{
./nginx/src/mail/ngx_mail_smtp_module.c-116-    ngx_mail_smtp_srv_conf_t  *sscf;
./nginx/src/mail/ngx_mail_smtp_module.c-117-
./nginx/src/mail/ngx_mail_smtp_module.c:118:    sscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_smtp_srv_conf_t));
./nginx/src/mail/ngx_mail_smtp_module.c-119-    if (sscf == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-120-        return NULL;
./nginx/src/mail/ngx_mail_smtp_module.c-121-    }
./nginx/src/mail/ngx_mail_smtp_module.c-122-
./nginx/src/mail/ngx_mail_smtp_module.c-123-    sscf->client_buffer_size = NGX_CONF_UNSET_SIZE;
./nginx/src/mail/ngx_mail_smtp_module.c-124-    sscf->greeting_delay = NGX_CONF_UNSET_MSEC;
./nginx/src/mail/ngx_mail_smtp_module.c-125-
./nginx/src/mail/ngx_mail_smtp_module.c:126:    if (ngx_array_init(&sscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
./nginx/src/mail/ngx_mail_smtp_module.c-127-        != NGX_OK)
./nginx/src/mail/ngx_mail_smtp_module.c-128-    {
./nginx/src/mail/ngx_mail_smtp_module.c-129-        return NULL;
./nginx/src/mail/ngx_mail_smtp_module.c-130-    }
./nginx/src/mail/ngx_mail_smtp_module.c-131-
./nginx/src/mail/ngx_mail_smtp_module.c-132-    return sscf;
./nginx/src/mail/ngx_mail_smtp_module.c-133-}
./nginx/src/mail/ngx_mail_smtp_module.c-134-
./nginx/src/mail/ngx_mail_smtp_module.c-135-
./nginx/src/mail/ngx_mail_smtp_module.c-136-static char *
--
./nginx/src/mail/ngx_mail_smtp_module.c-156-                              prev->auth_methods,
./nginx/src/mail/ngx_mail_smtp_module.c-157-                              (NGX_CONF_BITMASK_SET
./nginx/src/mail/ngx_mail_smtp_module.c-158-                               |NGX_MAIL_AUTH_PLAIN_ENABLED
./nginx/src/mail/ngx_mail_smtp_module.c-159-                               |NGX_MAIL_AUTH_LOGIN_ENABLED));
./nginx/src/mail/ngx_mail_smtp_module.c-160-
./nginx/src/mail/ngx_mail_smtp_module.c-161-
./nginx/src/mail/ngx_mail_smtp_module.c-162-    cscf = ngx_mail_conf_get_module_srv_conf(cf, ngx_mail_core_module);
./nginx/src/mail/ngx_mail_smtp_module.c-163-
./nginx/src/mail/ngx_mail_smtp_module.c-164-    size = sizeof("220  ESMTP ready" CRLF) - 1 + cscf->server_name.len;
./nginx/src/mail/ngx_mail_smtp_module.c-165-
./nginx/src/mail/ngx_mail_smtp_module.c:166:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_smtp_module.c-167-    if (p == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-168-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_smtp_module.c-169-    }
./nginx/src/mail/ngx_mail_smtp_module.c-170-
./nginx/src/mail/ngx_mail_smtp_module.c-171-    conf->greeting.len = size;
./nginx/src/mail/ngx_mail_smtp_module.c-172-    conf->greeting.data = p;
./nginx/src/mail/ngx_mail_smtp_module.c-173-
./nginx/src/mail/ngx_mail_smtp_module.c-174-    *p++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';
./nginx/src/mail/ngx_mail_smtp_module.c-175-    p = ngx_cpymem(p, cscf->server_name.data, cscf->server_name.len);
./nginx/src/mail/ngx_mail_smtp_module.c-176-    ngx_memcpy(p, " ESMTP ready" CRLF, sizeof(" ESMTP ready" CRLF) - 1);
./nginx/src/mail/ngx_mail_smtp_module.c-177-
./nginx/src/mail/ngx_mail_smtp_module.c-178-
./nginx/src/mail/ngx_mail_smtp_module.c-179-    size = sizeof("250 " CRLF) - 1 + cscf->server_name.len;
./nginx/src/mail/ngx_mail_smtp_module.c-180-
./nginx/src/mail/ngx_mail_smtp_module.c:181:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_smtp_module.c-182-    if (p == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-183-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_smtp_module.c-184-    }
./nginx/src/mail/ngx_mail_smtp_module.c-185-
./nginx/src/mail/ngx_mail_smtp_module.c-186-    conf->server_name.len = size;
./nginx/src/mail/ngx_mail_smtp_module.c-187-    conf->server_name.data = p;
./nginx/src/mail/ngx_mail_smtp_module.c-188-
./nginx/src/mail/ngx_mail_smtp_module.c-189-    *p++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';
./nginx/src/mail/ngx_mail_smtp_module.c-190-    p = ngx_cpymem(p, cscf->server_name.data, cscf->server_name.len);
./nginx/src/mail/ngx_mail_smtp_module.c-191-    *p++ = CR; *p = LF;
--
./nginx/src/mail/ngx_mail_smtp_module.c-211-        if (m & conf->auth_methods) {
./nginx/src/mail/ngx_mail_smtp_module.c-212-            size += 1 + ngx_mail_smtp_auth_methods_names[i].len;
./nginx/src/mail/ngx_mail_smtp_module.c-213-            auth_enabled = 1;
./nginx/src/mail/ngx_mail_smtp_module.c-214-        }
./nginx/src/mail/ngx_mail_smtp_module.c-215-    }
./nginx/src/mail/ngx_mail_smtp_module.c-216-
./nginx/src/mail/ngx_mail_smtp_module.c-217-    if (auth_enabled) {
./nginx/src/mail/ngx_mail_smtp_module.c-218-        size += sizeof("250 AUTH") - 1 + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_smtp_module.c-219-    }
./nginx/src/mail/ngx_mail_smtp_module.c-220-
./nginx/src/mail/ngx_mail_smtp_module.c:221:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_smtp_module.c-222-    if (p == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-223-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_smtp_module.c-224-    }
./nginx/src/mail/ngx_mail_smtp_module.c-225-
./nginx/src/mail/ngx_mail_smtp_module.c-226-    conf->capability.len = size;
./nginx/src/mail/ngx_mail_smtp_module.c-227-    conf->capability.data = p;
./nginx/src/mail/ngx_mail_smtp_module.c-228-
./nginx/src/mail/ngx_mail_smtp_module.c-229-    last = p;
./nginx/src/mail/ngx_mail_smtp_module.c-230-
./nginx/src/mail/ngx_mail_smtp_module.c-231-    *p++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';
--
./nginx/src/mail/ngx_mail_smtp_module.c-259-        }
./nginx/src/mail/ngx_mail_smtp_module.c-260-
./nginx/src/mail/ngx_mail_smtp_module.c-261-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_smtp_module.c-262-
./nginx/src/mail/ngx_mail_smtp_module.c-263-    } else {
./nginx/src/mail/ngx_mail_smtp_module.c-264-        last[3] = ' ';
./nginx/src/mail/ngx_mail_smtp_module.c-265-    }
./nginx/src/mail/ngx_mail_smtp_module.c-266-
./nginx/src/mail/ngx_mail_smtp_module.c-267-    size += sizeof("250 STARTTLS" CRLF) - 1;
./nginx/src/mail/ngx_mail_smtp_module.c-268-
./nginx/src/mail/ngx_mail_smtp_module.c:269:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_smtp_module.c-270-    if (p == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-271-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_smtp_module.c-272-    }
./nginx/src/mail/ngx_mail_smtp_module.c-273-
./nginx/src/mail/ngx_mail_smtp_module.c-274-    conf->starttls_capability.len = size;
./nginx/src/mail/ngx_mail_smtp_module.c-275-    conf->starttls_capability.data = p;
./nginx/src/mail/ngx_mail_smtp_module.c-276-
./nginx/src/mail/ngx_mail_smtp_module.c-277-    p = ngx_cpymem(p, conf->capability.data, conf->capability.len);
./nginx/src/mail/ngx_mail_smtp_module.c-278-
./nginx/src/mail/ngx_mail_smtp_module.c-279-    p = ngx_cpymem(p, "250 STARTTLS" CRLF, sizeof("250 STARTTLS" CRLF) - 1);
./nginx/src/mail/ngx_mail_smtp_module.c-280-    *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_smtp_module.c-281-
./nginx/src/mail/ngx_mail_smtp_module.c-282-    p = conf->starttls_capability.data
./nginx/src/mail/ngx_mail_smtp_module.c-283-        + (last - conf->capability.data) + 3;
./nginx/src/mail/ngx_mail_smtp_module.c-284-    *p = '-';
./nginx/src/mail/ngx_mail_smtp_module.c-285-
./nginx/src/mail/ngx_mail_smtp_module.c-286-    size = (auth - conf->capability.data)
./nginx/src/mail/ngx_mail_smtp_module.c-287-            + sizeof("250 STARTTLS" CRLF) - 1;
./nginx/src/mail/ngx_mail_smtp_module.c-288-
./nginx/src/mail/ngx_mail_smtp_module.c:289:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_smtp_module.c-290-    if (p == NULL) {
./nginx/src/mail/ngx_mail_smtp_module.c-291-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_smtp_module.c-292-    }
./nginx/src/mail/ngx_mail_smtp_module.c-293-
./nginx/src/mail/ngx_mail_smtp_module.c-294-    conf->starttls_only_capability.len = size;
./nginx/src/mail/ngx_mail_smtp_module.c-295-    conf->starttls_only_capability.data = p;
./nginx/src/mail/ngx_mail_smtp_module.c-296-
./nginx/src/mail/ngx_mail_smtp_module.c-297-    p = ngx_cpymem(p, conf->capability.data, auth - conf->capability.data);
./nginx/src/mail/ngx_mail_smtp_module.c-298-
./nginx/src/mail/ngx_mail_smtp_module.c-299-    ngx_memcpy(p, "250 STARTTLS" CRLF, sizeof("250 STARTTLS" CRLF) - 1);
--
./nginx/src/mail/ngx_mail_pop3_module.c-107-    NULL,                                  /* exit master */
./nginx/src/mail/ngx_mail_pop3_module.c-108-    NGX_MODULE_V1_PADDING
./nginx/src/mail/ngx_mail_pop3_module.c-109-};
./nginx/src/mail/ngx_mail_pop3_module.c-110-
./nginx/src/mail/ngx_mail_pop3_module.c-111-
./nginx/src/mail/ngx_mail_pop3_module.c-112-static void *
./nginx/src/mail/ngx_mail_pop3_module.c-113-ngx_mail_pop3_create_srv_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_pop3_module.c-114-{
./nginx/src/mail/ngx_mail_pop3_module.c-115-    ngx_mail_pop3_srv_conf_t  *pscf;
./nginx/src/mail/ngx_mail_pop3_module.c-116-
./nginx/src/mail/ngx_mail_pop3_module.c:117:    pscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_pop3_srv_conf_t));
./nginx/src/mail/ngx_mail_pop3_module.c-118-    if (pscf == NULL) {
./nginx/src/mail/ngx_mail_pop3_module.c-119-        return NULL;
./nginx/src/mail/ngx_mail_pop3_module.c-120-    }
./nginx/src/mail/ngx_mail_pop3_module.c-121-
./nginx/src/mail/ngx_mail_pop3_module.c:122:    if (ngx_array_init(&pscf->capabilities, cf->pool, 4, sizeof(ngx_str_t))
./nginx/src/mail/ngx_mail_pop3_module.c-123-        != NGX_OK)
./nginx/src/mail/ngx_mail_pop3_module.c-124-    {
./nginx/src/mail/ngx_mail_pop3_module.c-125-        return NULL;
./nginx/src/mail/ngx_mail_pop3_module.c-126-    }
./nginx/src/mail/ngx_mail_pop3_module.c-127-
./nginx/src/mail/ngx_mail_pop3_module.c-128-    return pscf;
./nginx/src/mail/ngx_mail_pop3_module.c-129-}
./nginx/src/mail/ngx_mail_pop3_module.c-130-
./nginx/src/mail/ngx_mail_pop3_module.c-131-
./nginx/src/mail/ngx_mail_pop3_module.c-132-static char *
--
./nginx/src/mail/ngx_mail_pop3_module.c-177-        stls_only_size += c[i].len + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_pop3_module.c-178-    }
./nginx/src/mail/ngx_mail_pop3_module.c-179-
./nginx/src/mail/ngx_mail_pop3_module.c-180-    if (conf->auth_methods & NGX_MAIL_AUTH_CRAM_MD5_ENABLED) {
./nginx/src/mail/ngx_mail_pop3_module.c-181-        size += sizeof("SASL LOGIN PLAIN CRAM-MD5" CRLF) - 1;
./nginx/src/mail/ngx_mail_pop3_module.c-182-
./nginx/src/mail/ngx_mail_pop3_module.c-183-    } else {
./nginx/src/mail/ngx_mail_pop3_module.c-184-        size += sizeof("SASL LOGIN PLAIN" CRLF) - 1;
./nginx/src/mail/ngx_mail_pop3_module.c-185-    }
./nginx/src/mail/ngx_mail_pop3_module.c-186-
./nginx/src/mail/ngx_mail_pop3_module.c:187:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_pop3_module.c-188-    if (p == NULL) {
./nginx/src/mail/ngx_mail_pop3_module.c-189-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_pop3_module.c-190-    }
./nginx/src/mail/ngx_mail_pop3_module.c-191-
./nginx/src/mail/ngx_mail_pop3_module.c-192-    conf->capability.len = size;
./nginx/src/mail/ngx_mail_pop3_module.c-193-    conf->capability.data = p;
./nginx/src/mail/ngx_mail_pop3_module.c-194-
./nginx/src/mail/ngx_mail_pop3_module.c-195-    p = ngx_cpymem(p, "+OK Capability list follows" CRLF,
./nginx/src/mail/ngx_mail_pop3_module.c-196-                   sizeof("+OK Capability list follows" CRLF) - 1);
./nginx/src/mail/ngx_mail_pop3_module.c-197-
--
./nginx/src/mail/ngx_mail_pop3_module.c-207-    } else {
./nginx/src/mail/ngx_mail_pop3_module.c-208-        p = ngx_cpymem(p, "SASL LOGIN PLAIN" CRLF,
./nginx/src/mail/ngx_mail_pop3_module.c-209-                       sizeof("SASL LOGIN PLAIN" CRLF) - 1);
./nginx/src/mail/ngx_mail_pop3_module.c-210-    }
./nginx/src/mail/ngx_mail_pop3_module.c-211-
./nginx/src/mail/ngx_mail_pop3_module.c-212-    *p++ = '.'; *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_pop3_module.c-213-
./nginx/src/mail/ngx_mail_pop3_module.c-214-
./nginx/src/mail/ngx_mail_pop3_module.c-215-    size += sizeof("STLS" CRLF) - 1;
./nginx/src/mail/ngx_mail_pop3_module.c-216-
./nginx/src/mail/ngx_mail_pop3_module.c:217:    p = ngx_pnalloc(cf->pool, size);
./nginx/src/mail/ngx_mail_pop3_module.c-218-    if (p == NULL) {
./nginx/src/mail/ngx_mail_pop3_module.c-219-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_pop3_module.c-220-    }
./nginx/src/mail/ngx_mail_pop3_module.c-221-
./nginx/src/mail/ngx_mail_pop3_module.c-222-    conf->starttls_capability.len = size;
./nginx/src/mail/ngx_mail_pop3_module.c-223-    conf->starttls_capability.data = p;
./nginx/src/mail/ngx_mail_pop3_module.c-224-
./nginx/src/mail/ngx_mail_pop3_module.c-225-    p = ngx_cpymem(p, conf->capability.data,
./nginx/src/mail/ngx_mail_pop3_module.c-226-                   conf->capability.len - (sizeof("." CRLF) - 1));
./nginx/src/mail/ngx_mail_pop3_module.c-227-
--
./nginx/src/mail/ngx_mail_pop3_module.c-230-
./nginx/src/mail/ngx_mail_pop3_module.c-231-
./nginx/src/mail/ngx_mail_pop3_module.c-232-    if (conf->auth_methods & NGX_MAIL_AUTH_CRAM_MD5_ENABLED) {
./nginx/src/mail/ngx_mail_pop3_module.c-233-        conf->auth_capability = ngx_mail_pop3_auth_cram_md5_capability;
./nginx/src/mail/ngx_mail_pop3_module.c-234-
./nginx/src/mail/ngx_mail_pop3_module.c-235-    } else {
./nginx/src/mail/ngx_mail_pop3_module.c-236-        conf->auth_capability = ngx_mail_pop3_auth_plain_capability;
./nginx/src/mail/ngx_mail_pop3_module.c-237-    }
./nginx/src/mail/ngx_mail_pop3_module.c-238-
./nginx/src/mail/ngx_mail_pop3_module.c-239-
./nginx/src/mail/ngx_mail_pop3_module.c:240:    p = ngx_pnalloc(cf->pool, stls_only_size);
./nginx/src/mail/ngx_mail_pop3_module.c-241-    if (p == NULL) {
./nginx/src/mail/ngx_mail_pop3_module.c-242-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_pop3_module.c-243-    }
./nginx/src/mail/ngx_mail_pop3_module.c-244-
./nginx/src/mail/ngx_mail_pop3_module.c-245-    conf->starttls_only_capability.len = stls_only_size;
./nginx/src/mail/ngx_mail_pop3_module.c-246-    conf->starttls_only_capability.data = p;
./nginx/src/mail/ngx_mail_pop3_module.c-247-
./nginx/src/mail/ngx_mail_pop3_module.c-248-    p = ngx_cpymem(p, "+OK Capability list follows" CRLF,
./nginx/src/mail/ngx_mail_pop3_module.c-249-                   sizeof("+OK Capability list follows" CRLF) - 1);
./nginx/src/mail/ngx_mail_pop3_module.c-250-
--
./nginx/src/mail/ngx_mail.c-84-    ngx_mail_core_main_conf_t   *cmcf;
./nginx/src/mail/ngx_mail.c-85-
./nginx/src/mail/ngx_mail.c-86-    if (cmd->name.data[0] == 'i') {
./nginx/src/mail/ngx_mail.c-87-        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
./nginx/src/mail/ngx_mail.c-88-                           "the \"imap\" directive is deprecated, "
./nginx/src/mail/ngx_mail.c-89-                           "use the \"mail\" directive instead");
./nginx/src/mail/ngx_mail.c-90-    }
./nginx/src/mail/ngx_mail.c-91-
./nginx/src/mail/ngx_mail.c-92-    /* the main mail context */
./nginx/src/mail/ngx_mail.c-93-
./nginx/src/mail/ngx_mail.c:94:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_mail_conf_ctx_t));
./nginx/src/mail/ngx_mail.c-95-    if (ctx == NULL) {
./nginx/src/mail/ngx_mail.c-96-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail.c-97-    }
./nginx/src/mail/ngx_mail.c-98-
./nginx/src/mail/ngx_mail.c-99-    *(ngx_mail_conf_ctx_t **) conf = ctx;
./nginx/src/mail/ngx_mail.c-100-
./nginx/src/mail/ngx_mail.c-101-    /* count the number of the http modules and set up their indices */
./nginx/src/mail/ngx_mail.c-102-
./nginx/src/mail/ngx_mail.c-103-    ngx_mail_max_module = 0;
./nginx/src/mail/ngx_mail.c-104-    for (m = 0; ngx_modules[m]; m++) {
./nginx/src/mail/ngx_mail.c-105-        if (ngx_modules[m]->type != NGX_MAIL_MODULE) {
./nginx/src/mail/ngx_mail.c-106-            continue;
./nginx/src/mail/ngx_mail.c-107-        }
./nginx/src/mail/ngx_mail.c-108-
./nginx/src/mail/ngx_mail.c-109-        ngx_modules[m]->ctx_index = ngx_mail_max_module++;
./nginx/src/mail/ngx_mail.c-110-    }
./nginx/src/mail/ngx_mail.c-111-
./nginx/src/mail/ngx_mail.c-112-
./nginx/src/mail/ngx_mail.c-113-    /* the mail main_conf context, it is the same in the all mail contexts */
./nginx/src/mail/ngx_mail.c-114-
./nginx/src/mail/ngx_mail.c:115:    ctx->main_conf = ngx_pcalloc(cf->pool,
./nginx/src/mail/ngx_mail.c-116-                                 sizeof(void *) * ngx_mail_max_module);
./nginx/src/mail/ngx_mail.c-117-    if (ctx->main_conf == NULL) {
./nginx/src/mail/ngx_mail.c-118-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail.c-119-    }
./nginx/src/mail/ngx_mail.c-120-
./nginx/src/mail/ngx_mail.c-121-
./nginx/src/mail/ngx_mail.c-122-    /*
./nginx/src/mail/ngx_mail.c-123-     * the mail null srv_conf context, it is used to merge
./nginx/src/mail/ngx_mail.c-124-     * the server{}s' srv_conf's
./nginx/src/mail/ngx_mail.c-125-     */
./nginx/src/mail/ngx_mail.c-126-
./nginx/src/mail/ngx_mail.c:127:    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_mail_max_module);
./nginx/src/mail/ngx_mail.c-128-    if (ctx->srv_conf == NULL) {
./nginx/src/mail/ngx_mail.c-129-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail.c-130-    }
./nginx/src/mail/ngx_mail.c-131-
./nginx/src/mail/ngx_mail.c-132-
./nginx/src/mail/ngx_mail.c-133-    /*
./nginx/src/mail/ngx_mail.c-134-     * create the main_conf's, the null srv_conf's, and the null loc_conf's
./nginx/src/mail/ngx_mail.c-135-     * of the all mail modules
./nginx/src/mail/ngx_mail.c-136-     */
./nginx/src/mail/ngx_mail.c-137-
--
./nginx/src/mail/ngx_mail.c-390-#if (NGX_HAVE_KEEPALIVE_TUNABLE)
./nginx/src/mail/ngx_mail.c-391-            ls->keepidle = addr[i].tcp_keepidle;
./nginx/src/mail/ngx_mail.c-392-            ls->keepintvl = addr[i].tcp_keepintvl;
./nginx/src/mail/ngx_mail.c-393-            ls->keepcnt = addr[i].tcp_keepcnt;
./nginx/src/mail/ngx_mail.c-394-#endif
./nginx/src/mail/ngx_mail.c-395-
./nginx/src/mail/ngx_mail.c-396-#if (NGX_HAVE_INET6 && defined IPV6_V6ONLY)
./nginx/src/mail/ngx_mail.c-397-            ls->ipv6only = addr[i].ipv6only;
./nginx/src/mail/ngx_mail.c-398-#endif
./nginx/src/mail/ngx_mail.c-399-
./nginx/src/mail/ngx_mail.c:400:            mport = ngx_palloc(cf->pool, sizeof(ngx_mail_port_t));
./nginx/src/mail/ngx_mail.c-401-            if (mport == NULL) {
./nginx/src/mail/ngx_mail.c-402-                return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail.c-403-            }
./nginx/src/mail/ngx_mail.c-404-
./nginx/src/mail/ngx_mail.c-405-            ls->servers = mport;
./nginx/src/mail/ngx_mail.c-406-
./nginx/src/mail/ngx_mail.c-407-            if (i == last - 1) {
./nginx/src/mail/ngx_mail.c-408-                mport->naddrs = last;
./nginx/src/mail/ngx_mail.c-409-
./nginx/src/mail/ngx_mail.c-410-            } else {
--
./nginx/src/mail/ngx_mail.c-440-ngx_mail_add_addrs(ngx_conf_t *cf, ngx_mail_port_t *mport,
./nginx/src/mail/ngx_mail.c-441-    ngx_mail_conf_addr_t *addr)
./nginx/src/mail/ngx_mail.c-442-{
./nginx/src/mail/ngx_mail.c-443-    u_char              *p;
./nginx/src/mail/ngx_mail.c-444-    size_t               len;
./nginx/src/mail/ngx_mail.c-445-    ngx_uint_t           i;
./nginx/src/mail/ngx_mail.c-446-    ngx_mail_in_addr_t  *addrs;
./nginx/src/mail/ngx_mail.c-447-    struct sockaddr_in  *sin;
./nginx/src/mail/ngx_mail.c-448-    u_char               buf[NGX_SOCKADDR_STRLEN];
./nginx/src/mail/ngx_mail.c-449-
./nginx/src/mail/ngx_mail.c:450:    mport->addrs = ngx_pcalloc(cf->pool,
./nginx/src/mail/ngx_mail.c-451-                               mport->naddrs * sizeof(ngx_mail_in_addr_t));
./nginx/src/mail/ngx_mail.c-452-    if (mport->addrs == NULL) {
./nginx/src/mail/ngx_mail.c-453-        return NGX_ERROR;
./nginx/src/mail/ngx_mail.c-454-    }
./nginx/src/mail/ngx_mail.c-455-
./nginx/src/mail/ngx_mail.c-456-    addrs = mport->addrs;
./nginx/src/mail/ngx_mail.c-457-
./nginx/src/mail/ngx_mail.c-458-    for (i = 0; i < mport->naddrs; i++) {
./nginx/src/mail/ngx_mail.c-459-
./nginx/src/mail/ngx_mail.c-460-        sin = (struct sockaddr_in *) addr[i].sockaddr;
./nginx/src/mail/ngx_mail.c-461-        addrs[i].addr = sin->sin_addr.s_addr;
./nginx/src/mail/ngx_mail.c-462-
./nginx/src/mail/ngx_mail.c-463-        addrs[i].conf.ctx = addr[i].ctx;
./nginx/src/mail/ngx_mail.c-464-#if (NGX_MAIL_SSL)
./nginx/src/mail/ngx_mail.c-465-        addrs[i].conf.ssl = addr[i].ssl;
./nginx/src/mail/ngx_mail.c-466-#endif
./nginx/src/mail/ngx_mail.c-467-
./nginx/src/mail/ngx_mail.c-468-        len = ngx_sock_ntop(addr[i].sockaddr, buf, NGX_SOCKADDR_STRLEN, 1);
./nginx/src/mail/ngx_mail.c-469-
./nginx/src/mail/ngx_mail.c:470:        p = ngx_pnalloc(cf->pool, len);
./nginx/src/mail/ngx_mail.c-471-        if (p == NULL) {
./nginx/src/mail/ngx_mail.c-472-            return NGX_ERROR;
./nginx/src/mail/ngx_mail.c-473-        }
./nginx/src/mail/ngx_mail.c-474-
./nginx/src/mail/ngx_mail.c-475-        ngx_memcpy(p, buf, len);
./nginx/src/mail/ngx_mail.c-476-
./nginx/src/mail/ngx_mail.c-477-        addrs[i].conf.addr_text.len = len;
./nginx/src/mail/ngx_mail.c-478-        addrs[i].conf.addr_text.data = p;
./nginx/src/mail/ngx_mail.c-479-    }
./nginx/src/mail/ngx_mail.c-480-
--
./nginx/src/mail/ngx_mail.c-488-ngx_mail_add_addrs6(ngx_conf_t *cf, ngx_mail_port_t *mport,
./nginx/src/mail/ngx_mail.c-489-    ngx_mail_conf_addr_t *addr)
./nginx/src/mail/ngx_mail.c-490-{
./nginx/src/mail/ngx_mail.c-491-    u_char               *p;
./nginx/src/mail/ngx_mail.c-492-    size_t                len;
./nginx/src/mail/ngx_mail.c-493-    ngx_uint_t            i;
./nginx/src/mail/ngx_mail.c-494-    ngx_mail_in6_addr_t  *addrs6;
./nginx/src/mail/ngx_mail.c-495-    struct sockaddr_in6  *sin6;
./nginx/src/mail/ngx_mail.c-496-    u_char                buf[NGX_SOCKADDR_STRLEN];
./nginx/src/mail/ngx_mail.c-497-
./nginx/src/mail/ngx_mail.c:498:    mport->addrs = ngx_pcalloc(cf->pool,
./nginx/src/mail/ngx_mail.c-499-                               mport->naddrs * sizeof(ngx_mail_in6_addr_t));
./nginx/src/mail/ngx_mail.c-500-    if (mport->addrs == NULL) {
./nginx/src/mail/ngx_mail.c-501-        return NGX_ERROR;
./nginx/src/mail/ngx_mail.c-502-    }
./nginx/src/mail/ngx_mail.c-503-
./nginx/src/mail/ngx_mail.c-504-    addrs6 = mport->addrs;
./nginx/src/mail/ngx_mail.c-505-
./nginx/src/mail/ngx_mail.c-506-    for (i = 0; i < mport->naddrs; i++) {
./nginx/src/mail/ngx_mail.c-507-
./nginx/src/mail/ngx_mail.c-508-        sin6 = (struct sockaddr_in6 *) addr[i].sockaddr;
./nginx/src/mail/ngx_mail.c-509-        addrs6[i].addr6 = sin6->sin6_addr;
./nginx/src/mail/ngx_mail.c-510-
./nginx/src/mail/ngx_mail.c-511-        addrs6[i].conf.ctx = addr[i].ctx;
./nginx/src/mail/ngx_mail.c-512-#if (NGX_MAIL_SSL)
./nginx/src/mail/ngx_mail.c-513-        addrs6[i].conf.ssl = addr[i].ssl;
./nginx/src/mail/ngx_mail.c-514-#endif
./nginx/src/mail/ngx_mail.c-515-
./nginx/src/mail/ngx_mail.c-516-        len = ngx_sock_ntop(addr[i].sockaddr, buf, NGX_SOCKADDR_STRLEN, 1);
./nginx/src/mail/ngx_mail.c-517-
./nginx/src/mail/ngx_mail.c:518:        p = ngx_pnalloc(cf->pool, len);
./nginx/src/mail/ngx_mail.c-519-        if (p == NULL) {
./nginx/src/mail/ngx_mail.c-520-            return NGX_ERROR;
./nginx/src/mail/ngx_mail.c-521-        }
./nginx/src/mail/ngx_mail.c-522-
./nginx/src/mail/ngx_mail.c-523-        ngx_memcpy(p, buf, len);
./nginx/src/mail/ngx_mail.c-524-
./nginx/src/mail/ngx_mail.c-525-        addrs6[i].conf.addr_text.len = len;
./nginx/src/mail/ngx_mail.c-526-        addrs6[i].conf.addr_text.data = p;
./nginx/src/mail/ngx_mail.c-527-    }
./nginx/src/mail/ngx_mail.c-528-
--
./nginx/src/mail/ngx_mail_proxy_module.c-126-
./nginx/src/mail/ngx_mail_proxy_module.c-127-        if (setsockopt(s->connection->fd, SOL_SOCKET, SO_KEEPALIVE,
./nginx/src/mail/ngx_mail_proxy_module.c-128-                       (const void *) &keepalive, sizeof(int))
./nginx/src/mail/ngx_mail_proxy_module.c-129-                == -1)
./nginx/src/mail/ngx_mail_proxy_module.c-130-        {
./nginx/src/mail/ngx_mail_proxy_module.c-131-            ngx_log_error(NGX_LOG_ALERT, s->connection->log, ngx_socket_errno,
./nginx/src/mail/ngx_mail_proxy_module.c-132-                          "setsockopt(SO_KEEPALIVE) failed");
./nginx/src/mail/ngx_mail_proxy_module.c-133-        }
./nginx/src/mail/ngx_mail_proxy_module.c-134-    }
./nginx/src/mail/ngx_mail_proxy_module.c-135-
./nginx/src/mail/ngx_mail_proxy_module.c:136:    p = ngx_pcalloc(s->connection->pool, sizeof(ngx_mail_proxy_ctx_t));
./nginx/src/mail/ngx_mail_proxy_module.c-137-    if (p == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-138-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-139-        return;
./nginx/src/mail/ngx_mail_proxy_module.c-140-    }
./nginx/src/mail/ngx_mail_proxy_module.c-141-
./nginx/src/mail/ngx_mail_proxy_module.c-142-    s->proxy = p;
./nginx/src/mail/ngx_mail_proxy_module.c-143-
./nginx/src/mail/ngx_mail_proxy_module.c-144-    p->upstream.sockaddr = peer->sockaddr;
./nginx/src/mail/ngx_mail_proxy_module.c-145-    p->upstream.socklen = peer->socklen;
./nginx/src/mail/ngx_mail_proxy_module.c-146-    p->upstream.name = &peer->name;
--
./nginx/src/mail/ngx_mail_proxy_module.c-151-    rc = ngx_event_connect_peer(&p->upstream);
./nginx/src/mail/ngx_mail_proxy_module.c-152-
./nginx/src/mail/ngx_mail_proxy_module.c-153-    if (rc == NGX_ERROR || rc == NGX_BUSY || rc == NGX_DECLINED) {
./nginx/src/mail/ngx_mail_proxy_module.c-154-        ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-155-        return;
./nginx/src/mail/ngx_mail_proxy_module.c-156-    }
./nginx/src/mail/ngx_mail_proxy_module.c-157-
./nginx/src/mail/ngx_mail_proxy_module.c-158-    ngx_add_timer(p->upstream.connection->read, cscf->timeout);
./nginx/src/mail/ngx_mail_proxy_module.c-159-
./nginx/src/mail/ngx_mail_proxy_module.c-160-    p->upstream.connection->data = s;
./nginx/src/mail/ngx_mail_proxy_module.c:161:    p->upstream.connection->pool = s->connection->pool;
./nginx/src/mail/ngx_mail_proxy_module.c-162-
./nginx/src/mail/ngx_mail_proxy_module.c-163-    s->connection->read->handler = ngx_mail_proxy_block_read;
./nginx/src/mail/ngx_mail_proxy_module.c-164-    p->upstream.connection->write->handler = ngx_mail_proxy_dummy_handler;
./nginx/src/mail/ngx_mail_proxy_module.c-165-
./nginx/src/mail/ngx_mail_proxy_module.c-166-    pcf = ngx_mail_get_module_srv_conf(s, ngx_mail_proxy_module);
./nginx/src/mail/ngx_mail_proxy_module.c-167-
./nginx/src/mail/ngx_mail_proxy_module.c:168:    s->proxy->buffer = ngx_create_temp_buf(s->connection->pool,
./nginx/src/mail/ngx_mail_proxy_module.c-169-                                           pcf->buffer_size);
./nginx/src/mail/ngx_mail_proxy_module.c-170-    if (s->proxy->buffer == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-171-        ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-172-        return;
./nginx/src/mail/ngx_mail_proxy_module.c-173-    }
./nginx/src/mail/ngx_mail_proxy_module.c-174-
./nginx/src/mail/ngx_mail_proxy_module.c-175-    s->out.len = 0;
./nginx/src/mail/ngx_mail_proxy_module.c-176-
./nginx/src/mail/ngx_mail_proxy_module.c-177-    switch (s->protocol) {
./nginx/src/mail/ngx_mail_proxy_module.c-178-
--
./nginx/src/mail/ngx_mail_proxy_module.c-247-    }
./nginx/src/mail/ngx_mail_proxy_module.c-248-
./nginx/src/mail/ngx_mail_proxy_module.c-249-    switch (s->mail_state) {
./nginx/src/mail/ngx_mail_proxy_module.c-250-
./nginx/src/mail/ngx_mail_proxy_module.c-251-    case ngx_pop3_start:
./nginx/src/mail/ngx_mail_proxy_module.c-252-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send user");
./nginx/src/mail/ngx_mail_proxy_module.c-253-
./nginx/src/mail/ngx_mail_proxy_module.c-254-        s->connection->log->action = "sending user name to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-255-
./nginx/src/mail/ngx_mail_proxy_module.c-256-        line.len = sizeof("USER ")  - 1 + s->login.len + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:257:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-258-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-259-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-260-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-261-        }
./nginx/src/mail/ngx_mail_proxy_module.c-262-
./nginx/src/mail/ngx_mail_proxy_module.c-263-        p = ngx_cpymem(line.data, "USER ", sizeof("USER ") - 1);
./nginx/src/mail/ngx_mail_proxy_module.c-264-        p = ngx_cpymem(p, s->login.data, s->login.len);
./nginx/src/mail/ngx_mail_proxy_module.c-265-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_proxy_module.c-266-
./nginx/src/mail/ngx_mail_proxy_module.c-267-        s->mail_state = ngx_pop3_user;
./nginx/src/mail/ngx_mail_proxy_module.c-268-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-269-
./nginx/src/mail/ngx_mail_proxy_module.c-270-    case ngx_pop3_user:
./nginx/src/mail/ngx_mail_proxy_module.c-271-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send pass");
./nginx/src/mail/ngx_mail_proxy_module.c-272-
./nginx/src/mail/ngx_mail_proxy_module.c-273-        s->connection->log->action = "sending password to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-274-
./nginx/src/mail/ngx_mail_proxy_module.c-275-        line.len = sizeof("PASS ")  - 1 + s->passwd.len + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:276:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-277-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-278-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-279-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-280-        }
./nginx/src/mail/ngx_mail_proxy_module.c-281-
./nginx/src/mail/ngx_mail_proxy_module.c-282-        p = ngx_cpymem(line.data, "PASS ", sizeof("PASS ") - 1);
./nginx/src/mail/ngx_mail_proxy_module.c-283-        p = ngx_cpymem(p, s->passwd.data, s->passwd.len);
./nginx/src/mail/ngx_mail_proxy_module.c-284-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_proxy_module.c-285-
./nginx/src/mail/ngx_mail_proxy_module.c-286-        s->mail_state = ngx_pop3_passwd;
--
./nginx/src/mail/ngx_mail_proxy_module.c-362-    switch (s->mail_state) {
./nginx/src/mail/ngx_mail_proxy_module.c-363-
./nginx/src/mail/ngx_mail_proxy_module.c-364-    case ngx_imap_start:
./nginx/src/mail/ngx_mail_proxy_module.c-365-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-366-                       "mail proxy send login");
./nginx/src/mail/ngx_mail_proxy_module.c-367-
./nginx/src/mail/ngx_mail_proxy_module.c-368-        s->connection->log->action = "sending LOGIN command to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-369-
./nginx/src/mail/ngx_mail_proxy_module.c-370-        line.len = s->tag.len + sizeof("LOGIN ") - 1
./nginx/src/mail/ngx_mail_proxy_module.c-371-                   + 1 + NGX_SIZE_T_LEN + 1 + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:372:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-373-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-374-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-375-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-376-        }
./nginx/src/mail/ngx_mail_proxy_module.c-377-
./nginx/src/mail/ngx_mail_proxy_module.c-378-        line.len = ngx_sprintf(line.data, "%VLOGIN {%uz}" CRLF,
./nginx/src/mail/ngx_mail_proxy_module.c-379-                               &s->tag, s->login.len)
./nginx/src/mail/ngx_mail_proxy_module.c-380-                   - line.data;
./nginx/src/mail/ngx_mail_proxy_module.c-381-
./nginx/src/mail/ngx_mail_proxy_module.c-382-        s->mail_state = ngx_imap_login;
./nginx/src/mail/ngx_mail_proxy_module.c-383-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-384-
./nginx/src/mail/ngx_mail_proxy_module.c-385-    case ngx_imap_login:
./nginx/src/mail/ngx_mail_proxy_module.c-386-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send user");
./nginx/src/mail/ngx_mail_proxy_module.c-387-
./nginx/src/mail/ngx_mail_proxy_module.c-388-        s->connection->log->action = "sending user name to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-389-
./nginx/src/mail/ngx_mail_proxy_module.c-390-        line.len = s->login.len + 1 + 1 + NGX_SIZE_T_LEN + 1 + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:391:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-392-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-393-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-394-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-395-        }
./nginx/src/mail/ngx_mail_proxy_module.c-396-
./nginx/src/mail/ngx_mail_proxy_module.c-397-        line.len = ngx_sprintf(line.data, "%V {%uz}" CRLF,
./nginx/src/mail/ngx_mail_proxy_module.c-398-                               &s->login, s->passwd.len)
./nginx/src/mail/ngx_mail_proxy_module.c-399-                   - line.data;
./nginx/src/mail/ngx_mail_proxy_module.c-400-
./nginx/src/mail/ngx_mail_proxy_module.c-401-        s->mail_state = ngx_imap_user;
./nginx/src/mail/ngx_mail_proxy_module.c-402-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-403-
./nginx/src/mail/ngx_mail_proxy_module.c-404-    case ngx_imap_user:
./nginx/src/mail/ngx_mail_proxy_module.c-405-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-406-                       "mail proxy send passwd");
./nginx/src/mail/ngx_mail_proxy_module.c-407-
./nginx/src/mail/ngx_mail_proxy_module.c-408-        s->connection->log->action = "sending password to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-409-
./nginx/src/mail/ngx_mail_proxy_module.c-410-        line.len = s->passwd.len + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:411:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-412-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-413-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-414-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-415-        }
./nginx/src/mail/ngx_mail_proxy_module.c-416-
./nginx/src/mail/ngx_mail_proxy_module.c-417-        p = ngx_cpymem(line.data, s->passwd.data, s->passwd.len);
./nginx/src/mail/ngx_mail_proxy_module.c-418-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_proxy_module.c-419-
./nginx/src/mail/ngx_mail_proxy_module.c-420-        s->mail_state = ngx_imap_passwd;
./nginx/src/mail/ngx_mail_proxy_module.c-421-        break;
--
./nginx/src/mail/ngx_mail_proxy_module.c-498-    switch (s->mail_state) {
./nginx/src/mail/ngx_mail_proxy_module.c-499-
./nginx/src/mail/ngx_mail_proxy_module.c-500-    case ngx_smtp_start:
./nginx/src/mail/ngx_mail_proxy_module.c-501-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0, "mail proxy send ehlo");
./nginx/src/mail/ngx_mail_proxy_module.c-502-
./nginx/src/mail/ngx_mail_proxy_module.c-503-        s->connection->log->action = "sending HELO/EHLO to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-504-
./nginx/src/mail/ngx_mail_proxy_module.c-505-        cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);
./nginx/src/mail/ngx_mail_proxy_module.c-506-
./nginx/src/mail/ngx_mail_proxy_module.c-507-        line.len = sizeof("HELO ")  - 1 + cscf->server_name.len + 2;
./nginx/src/mail/ngx_mail_proxy_module.c:508:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-509-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-510-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-511-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-512-        }
./nginx/src/mail/ngx_mail_proxy_module.c-513-
./nginx/src/mail/ngx_mail_proxy_module.c-514-        pcf = ngx_mail_get_module_srv_conf(s, ngx_mail_proxy_module);
./nginx/src/mail/ngx_mail_proxy_module.c-515-
./nginx/src/mail/ngx_mail_proxy_module.c-516-        p = ngx_cpymem(line.data,
./nginx/src/mail/ngx_mail_proxy_module.c-517-                       ((s->esmtp || pcf->xclient) ? "EHLO " : "HELO "),
./nginx/src/mail/ngx_mail_proxy_module.c-518-                       sizeof("HELO ") - 1);
--
./nginx/src/mail/ngx_mail_proxy_module.c-535-    case ngx_smtp_helo_xclient:
./nginx/src/mail/ngx_mail_proxy_module.c-536-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-537-                       "mail proxy send xclient");
./nginx/src/mail/ngx_mail_proxy_module.c-538-
./nginx/src/mail/ngx_mail_proxy_module.c-539-        s->connection->log->action = "sending XCLIENT to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-540-
./nginx/src/mail/ngx_mail_proxy_module.c-541-        line.len = sizeof("XCLIENT ADDR= LOGIN= NAME="
./nginx/src/mail/ngx_mail_proxy_module.c-542-                          CRLF) - 1
./nginx/src/mail/ngx_mail_proxy_module.c-543-                   + s->connection->addr_text.len + s->login.len + s->host.len;
./nginx/src/mail/ngx_mail_proxy_module.c-544-
./nginx/src/mail/ngx_mail_proxy_module.c:545:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-546-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-547-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-548-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-549-        }
./nginx/src/mail/ngx_mail_proxy_module.c-550-
./nginx/src/mail/ngx_mail_proxy_module.c-551-        line.len = ngx_sprintf(line.data,
./nginx/src/mail/ngx_mail_proxy_module.c-552-                       "XCLIENT ADDR=%V%s%V NAME=%V" CRLF,
./nginx/src/mail/ngx_mail_proxy_module.c-553-                       &s->connection->addr_text,
./nginx/src/mail/ngx_mail_proxy_module.c-554-                       (s->login.len ? " LOGIN=" : ""), &s->login, &s->host)
./nginx/src/mail/ngx_mail_proxy_module.c-555-                   - line.data;
--
./nginx/src/mail/ngx_mail_proxy_module.c-567-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-568-
./nginx/src/mail/ngx_mail_proxy_module.c-569-    case ngx_smtp_xclient_helo:
./nginx/src/mail/ngx_mail_proxy_module.c-570-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-571-                       "mail proxy send client ehlo");
./nginx/src/mail/ngx_mail_proxy_module.c-572-
./nginx/src/mail/ngx_mail_proxy_module.c-573-        s->connection->log->action = "sending client HELO/EHLO to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-574-
./nginx/src/mail/ngx_mail_proxy_module.c-575-        line.len = sizeof("HELO " CRLF) - 1 + s->smtp_helo.len;
./nginx/src/mail/ngx_mail_proxy_module.c-576-
./nginx/src/mail/ngx_mail_proxy_module.c:577:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-578-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-579-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-580-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-581-        }
./nginx/src/mail/ngx_mail_proxy_module.c-582-
./nginx/src/mail/ngx_mail_proxy_module.c-583-        line.len = ngx_sprintf(line.data,
./nginx/src/mail/ngx_mail_proxy_module.c-584-                       ((s->esmtp) ? "EHLO %V" CRLF : "HELO %V" CRLF),
./nginx/src/mail/ngx_mail_proxy_module.c-585-                       &s->smtp_helo)
./nginx/src/mail/ngx_mail_proxy_module.c-586-                   - line.data;
./nginx/src/mail/ngx_mail_proxy_module.c-587-
--
./nginx/src/mail/ngx_mail_proxy_module.c-591-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-592-
./nginx/src/mail/ngx_mail_proxy_module.c-593-    case ngx_smtp_helo_from:
./nginx/src/mail/ngx_mail_proxy_module.c-594-    case ngx_smtp_xclient_from:
./nginx/src/mail/ngx_mail_proxy_module.c-595-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-596-                       "mail proxy send mail from");
./nginx/src/mail/ngx_mail_proxy_module.c-597-
./nginx/src/mail/ngx_mail_proxy_module.c-598-        s->connection->log->action = "sending MAIL FROM to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-599-
./nginx/src/mail/ngx_mail_proxy_module.c-600-        line.len = s->smtp_from.len + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_proxy_module.c:601:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-602-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-603-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-604-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-605-        }
./nginx/src/mail/ngx_mail_proxy_module.c-606-
./nginx/src/mail/ngx_mail_proxy_module.c-607-        p = ngx_cpymem(line.data, s->smtp_from.data, s->smtp_from.len);
./nginx/src/mail/ngx_mail_proxy_module.c-608-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_proxy_module.c-609-
./nginx/src/mail/ngx_mail_proxy_module.c-610-        s->mail_state = ngx_smtp_from;
./nginx/src/mail/ngx_mail_proxy_module.c-611-
./nginx/src/mail/ngx_mail_proxy_module.c-612-        break;
./nginx/src/mail/ngx_mail_proxy_module.c-613-
./nginx/src/mail/ngx_mail_proxy_module.c-614-    case ngx_smtp_from:
./nginx/src/mail/ngx_mail_proxy_module.c-615-        ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_proxy_module.c-616-                       "mail proxy send rcpt to");
./nginx/src/mail/ngx_mail_proxy_module.c-617-
./nginx/src/mail/ngx_mail_proxy_module.c-618-        s->connection->log->action = "sending RCPT TO to upstream";
./nginx/src/mail/ngx_mail_proxy_module.c-619-
./nginx/src/mail/ngx_mail_proxy_module.c-620-        line.len = s->smtp_to.len + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_proxy_module.c:621:        line.data = ngx_pnalloc(c->pool, line.len);
./nginx/src/mail/ngx_mail_proxy_module.c-622-        if (line.data == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-623-            ngx_mail_proxy_internal_server_error(s);
./nginx/src/mail/ngx_mail_proxy_module.c-624-            return;
./nginx/src/mail/ngx_mail_proxy_module.c-625-        }
./nginx/src/mail/ngx_mail_proxy_module.c-626-
./nginx/src/mail/ngx_mail_proxy_module.c-627-        p = ngx_cpymem(line.data, s->smtp_to.data, s->smtp_to.len);
./nginx/src/mail/ngx_mail_proxy_module.c-628-        *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_proxy_module.c-629-
./nginx/src/mail/ngx_mail_proxy_module.c-630-        s->mail_state = ngx_smtp_to;
./nginx/src/mail/ngx_mail_proxy_module.c-631-
--
./nginx/src/mail/ngx_mail_proxy_module.c-1050-
./nginx/src/mail/ngx_mail_proxy_module.c-1051-    ngx_mail_close_connection(s->connection);
./nginx/src/mail/ngx_mail_proxy_module.c-1052-}
./nginx/src/mail/ngx_mail_proxy_module.c-1053-
./nginx/src/mail/ngx_mail_proxy_module.c-1054-
./nginx/src/mail/ngx_mail_proxy_module.c-1055-static void *
./nginx/src/mail/ngx_mail_proxy_module.c-1056-ngx_mail_proxy_create_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_proxy_module.c-1057-{
./nginx/src/mail/ngx_mail_proxy_module.c-1058-    ngx_mail_proxy_conf_t  *pcf;
./nginx/src/mail/ngx_mail_proxy_module.c-1059-
./nginx/src/mail/ngx_mail_proxy_module.c:1060:    pcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_proxy_conf_t));
./nginx/src/mail/ngx_mail_proxy_module.c-1061-    if (pcf == NULL) {
./nginx/src/mail/ngx_mail_proxy_module.c-1062-        return NULL;
./nginx/src/mail/ngx_mail_proxy_module.c-1063-    }
./nginx/src/mail/ngx_mail_proxy_module.c-1064-
./nginx/src/mail/ngx_mail_proxy_module.c-1065-    pcf->enable = NGX_CONF_UNSET;
./nginx/src/mail/ngx_mail_proxy_module.c-1066-    pcf->pass_error_message = NGX_CONF_UNSET;
./nginx/src/mail/ngx_mail_proxy_module.c-1067-    pcf->xclient = NGX_CONF_UNSET;
./nginx/src/mail/ngx_mail_proxy_module.c-1068-    pcf->buffer_size = NGX_CONF_UNSET_SIZE;
./nginx/src/mail/ngx_mail_proxy_module.c-1069-    pcf->timeout = NGX_CONF_UNSET_MSEC;
./nginx/src/mail/ngx_mail_proxy_module.c-1070-
--
./nginx/src/mail/ngx_mail_ssl_module.c-162-
./nginx/src/mail/ngx_mail_ssl_module.c-163-
./nginx/src/mail/ngx_mail_ssl_module.c-164-static ngx_str_t ngx_mail_ssl_sess_id_ctx = ngx_string("MAIL");
./nginx/src/mail/ngx_mail_ssl_module.c-165-
./nginx/src/mail/ngx_mail_ssl_module.c-166-
./nginx/src/mail/ngx_mail_ssl_module.c-167-static void *
./nginx/src/mail/ngx_mail_ssl_module.c-168-ngx_mail_ssl_create_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_ssl_module.c-169-{
./nginx/src/mail/ngx_mail_ssl_module.c-170-    ngx_mail_ssl_conf_t  *scf;
./nginx/src/mail/ngx_mail_ssl_module.c-171-
./nginx/src/mail/ngx_mail_ssl_module.c:172:    scf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_ssl_conf_t));
./nginx/src/mail/ngx_mail_ssl_module.c-173-    if (scf == NULL) {
./nginx/src/mail/ngx_mail_ssl_module.c-174-        return NULL;
./nginx/src/mail/ngx_mail_ssl_module.c-175-    }
./nginx/src/mail/ngx_mail_ssl_module.c-176-
./nginx/src/mail/ngx_mail_ssl_module.c-177-    /*
./nginx/src/mail/ngx_mail_ssl_module.c-178-     * set by ngx_pcalloc():
./nginx/src/mail/ngx_mail_ssl_module.c-179-     *
./nginx/src/mail/ngx_mail_ssl_module.c-180-     *     scf->protocols = 0;
./nginx/src/mail/ngx_mail_ssl_module.c-181-     *     scf->certificate = { 0, NULL };
./nginx/src/mail/ngx_mail_ssl_module.c-182-     *     scf->certificate_key = { 0, NULL };
--
./nginx/src/mail/ngx_mail_ssl_module.c-273-                          "for certificate \"%V\"",
./nginx/src/mail/ngx_mail_ssl_module.c-274-                          &conf->certificate);
./nginx/src/mail/ngx_mail_ssl_module.c-275-            return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_ssl_module.c-276-        }
./nginx/src/mail/ngx_mail_ssl_module.c-277-    }
./nginx/src/mail/ngx_mail_ssl_module.c-278-
./nginx/src/mail/ngx_mail_ssl_module.c-279-    if (ngx_ssl_create(&conf->ssl, conf->protocols, NULL) != NGX_OK) {
./nginx/src/mail/ngx_mail_ssl_module.c-280-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_ssl_module.c-281-    }
./nginx/src/mail/ngx_mail_ssl_module.c-282-
./nginx/src/mail/ngx_mail_ssl_module.c:283:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/mail/ngx_mail_ssl_module.c-284-    if (cln == NULL) {
./nginx/src/mail/ngx_mail_ssl_module.c-285-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_ssl_module.c-286-    }
./nginx/src/mail/ngx_mail_ssl_module.c-287-
./nginx/src/mail/ngx_mail_ssl_module.c-288-    cln->handler = ngx_ssl_cleanup_ctx;
./nginx/src/mail/ngx_mail_ssl_module.c-289-    cln->data = &conf->ssl;
./nginx/src/mail/ngx_mail_ssl_module.c-290-
./nginx/src/mail/ngx_mail_ssl_module.c-291-    if (ngx_ssl_certificate(cf, &conf->ssl, &conf->certificate,
./nginx/src/mail/ngx_mail_ssl_module.c-292-                            &conf->certificate_key,
./nginx/src/mail/ngx_mail_ssl_module.c-293-                            &conf->certificate_key_password)
--
./nginx/src/mail/ngx_mail_imap_handler.c-68-    if (rev->timedout) {
./nginx/src/mail/ngx_mail_imap_handler.c-69-        ngx_log_error(NGX_LOG_INFO, c->log, NGX_ETIMEDOUT, "client timed out");
./nginx/src/mail/ngx_mail_imap_handler.c-70-        c->timedout = 1;
./nginx/src/mail/ngx_mail_imap_handler.c-71-        ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_imap_handler.c-72-        return;
./nginx/src/mail/ngx_mail_imap_handler.c-73-    }
./nginx/src/mail/ngx_mail_imap_handler.c-74-
./nginx/src/mail/ngx_mail_imap_handler.c-75-    s = c->data;
./nginx/src/mail/ngx_mail_imap_handler.c-76-
./nginx/src/mail/ngx_mail_imap_handler.c-77-    if (s->buffer == NULL) {
./nginx/src/mail/ngx_mail_imap_handler.c:78:        if (ngx_array_init(&s->args, c->pool, 2, sizeof(ngx_str_t))
./nginx/src/mail/ngx_mail_imap_handler.c-79-            == NGX_ERROR)
./nginx/src/mail/ngx_mail_imap_handler.c-80-        {
./nginx/src/mail/ngx_mail_imap_handler.c-81-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_imap_handler.c-82-            return;
./nginx/src/mail/ngx_mail_imap_handler.c-83-        }
./nginx/src/mail/ngx_mail_imap_handler.c-84-
./nginx/src/mail/ngx_mail_imap_handler.c-85-        iscf = ngx_mail_get_module_srv_conf(s, ngx_mail_imap_module);
./nginx/src/mail/ngx_mail_imap_handler.c-86-
./nginx/src/mail/ngx_mail_imap_handler.c:87:        s->buffer = ngx_create_temp_buf(c->pool, iscf->client_buffer_size);
./nginx/src/mail/ngx_mail_imap_handler.c-88-        if (s->buffer == NULL) {
./nginx/src/mail/ngx_mail_imap_handler.c-89-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_imap_handler.c-90-            return;
./nginx/src/mail/ngx_mail_imap_handler.c-91-        }
./nginx/src/mail/ngx_mail_imap_handler.c-92-    }
./nginx/src/mail/ngx_mail_imap_handler.c-93-
./nginx/src/mail/ngx_mail_imap_handler.c-94-    s->mail_state = ngx_imap_start;
./nginx/src/mail/ngx_mail_imap_handler.c-95-    c->read->handler = ngx_mail_imap_auth_state;
./nginx/src/mail/ngx_mail_imap_handler.c-96-
./nginx/src/mail/ngx_mail_imap_handler.c-97-    ngx_mail_imap_auth_state(rev);
--
./nginx/src/mail/ngx_mail_imap_handler.c-246-        break;
./nginx/src/mail/ngx_mail_imap_handler.c-247-    }
./nginx/src/mail/ngx_mail_imap_handler.c-248-
./nginx/src/mail/ngx_mail_imap_handler.c-249-    if (tag) {
./nginx/src/mail/ngx_mail_imap_handler.c-250-        if (s->tag.len == 0) {
./nginx/src/mail/ngx_mail_imap_handler.c-251-            ngx_str_set(&s->tag, imap_star);
./nginx/src/mail/ngx_mail_imap_handler.c-252-        }
./nginx/src/mail/ngx_mail_imap_handler.c-253-
./nginx/src/mail/ngx_mail_imap_handler.c-254-        if (s->tagged_line.len < s->tag.len + s->text.len + s->out.len) {
./nginx/src/mail/ngx_mail_imap_handler.c-255-            s->tagged_line.len = s->tag.len + s->text.len + s->out.len;
./nginx/src/mail/ngx_mail_imap_handler.c:256:            s->tagged_line.data = ngx_pnalloc(c->pool, s->tagged_line.len);
./nginx/src/mail/ngx_mail_imap_handler.c-257-            if (s->tagged_line.data == NULL) {
./nginx/src/mail/ngx_mail_imap_handler.c-258-                ngx_mail_close_connection(c);
./nginx/src/mail/ngx_mail_imap_handler.c-259-                return;
./nginx/src/mail/ngx_mail_imap_handler.c-260-            }
./nginx/src/mail/ngx_mail_imap_handler.c-261-        }
./nginx/src/mail/ngx_mail_imap_handler.c-262-
./nginx/src/mail/ngx_mail_imap_handler.c-263-        p = s->tagged_line.data;
./nginx/src/mail/ngx_mail_imap_handler.c-264-
./nginx/src/mail/ngx_mail_imap_handler.c-265-        if (s->text.len) {
./nginx/src/mail/ngx_mail_imap_handler.c-266-            p = ngx_cpymem(p, s->text.data, s->text.len);
--
./nginx/src/mail/ngx_mail_imap_handler.c-304-    }
./nginx/src/mail/ngx_mail_imap_handler.c-305-#endif
./nginx/src/mail/ngx_mail_imap_handler.c-306-
./nginx/src/mail/ngx_mail_imap_handler.c-307-    arg = s->args.elts;
./nginx/src/mail/ngx_mail_imap_handler.c-308-
./nginx/src/mail/ngx_mail_imap_handler.c-309-    if (s->args.nelts != 2 || arg[0].len == 0) {
./nginx/src/mail/ngx_mail_imap_handler.c-310-        return NGX_MAIL_PARSE_INVALID_COMMAND;
./nginx/src/mail/ngx_mail_imap_handler.c-311-    }
./nginx/src/mail/ngx_mail_imap_handler.c-312-
./nginx/src/mail/ngx_mail_imap_handler.c-313-    s->login.len = arg[0].len;
./nginx/src/mail/ngx_mail_imap_handler.c:314:    s->login.data = ngx_pnalloc(c->pool, s->login.len);
./nginx/src/mail/ngx_mail_imap_handler.c-315-    if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_imap_handler.c-316-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_imap_handler.c-317-    }
./nginx/src/mail/ngx_mail_imap_handler.c-318-
./nginx/src/mail/ngx_mail_imap_handler.c-319-    ngx_memcpy(s->login.data, arg[0].data, s->login.len);
./nginx/src/mail/ngx_mail_imap_handler.c-320-
./nginx/src/mail/ngx_mail_imap_handler.c-321-    s->passwd.len = arg[1].len;
./nginx/src/mail/ngx_mail_imap_handler.c:322:    s->passwd.data = ngx_pnalloc(c->pool, s->passwd.len);
./nginx/src/mail/ngx_mail_imap_handler.c-323-    if (s->passwd.data == NULL) {
./nginx/src/mail/ngx_mail_imap_handler.c-324-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_imap_handler.c-325-    }
./nginx/src/mail/ngx_mail_imap_handler.c-326-
./nginx/src/mail/ngx_mail_imap_handler.c-327-    ngx_memcpy(s->passwd.data, arg[1].data, s->passwd.len);
./nginx/src/mail/ngx_mail_imap_handler.c-328-
./nginx/src/mail/ngx_mail_imap_handler.c-329-#if (NGX_DEBUG_MAIL_PASSWD)
./nginx/src/mail/ngx_mail_imap_handler.c-330-    ngx_log_debug2(NGX_LOG_DEBUG_MAIL, c->log, 0,
./nginx/src/mail/ngx_mail_imap_handler.c-331-                   "imap login:\"%V\" passwd:\"%V\"",
./nginx/src/mail/ngx_mail_imap_handler.c-332-                   &s->login, &s->passwd);
--
./nginx/src/mail/ngx_mail_core_module.c-118-    NULL,                                  /* exit master */
./nginx/src/mail/ngx_mail_core_module.c-119-    NGX_MODULE_V1_PADDING
./nginx/src/mail/ngx_mail_core_module.c-120-};
./nginx/src/mail/ngx_mail_core_module.c-121-
./nginx/src/mail/ngx_mail_core_module.c-122-
./nginx/src/mail/ngx_mail_core_module.c-123-static void *
./nginx/src/mail/ngx_mail_core_module.c-124-ngx_mail_core_create_main_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_core_module.c-125-{
./nginx/src/mail/ngx_mail_core_module.c-126-    ngx_mail_core_main_conf_t  *cmcf;
./nginx/src/mail/ngx_mail_core_module.c-127-
./nginx/src/mail/ngx_mail_core_module.c:128:    cmcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_core_main_conf_t));
./nginx/src/mail/ngx_mail_core_module.c-129-    if (cmcf == NULL) {
./nginx/src/mail/ngx_mail_core_module.c-130-        return NULL;
./nginx/src/mail/ngx_mail_core_module.c-131-    }
./nginx/src/mail/ngx_mail_core_module.c-132-
./nginx/src/mail/ngx_mail_core_module.c:133:    if (ngx_array_init(&cmcf->servers, cf->pool, 4,
./nginx/src/mail/ngx_mail_core_module.c-134-                       sizeof(ngx_mail_core_srv_conf_t *))
./nginx/src/mail/ngx_mail_core_module.c-135-        != NGX_OK)
./nginx/src/mail/ngx_mail_core_module.c-136-    {
./nginx/src/mail/ngx_mail_core_module.c-137-        return NULL;
./nginx/src/mail/ngx_mail_core_module.c-138-    }
./nginx/src/mail/ngx_mail_core_module.c-139-
./nginx/src/mail/ngx_mail_core_module.c:140:    if (ngx_array_init(&cmcf->listen, cf->pool, 4, sizeof(ngx_mail_listen_t))
./nginx/src/mail/ngx_mail_core_module.c-141-        != NGX_OK)
./nginx/src/mail/ngx_mail_core_module.c-142-    {
./nginx/src/mail/ngx_mail_core_module.c-143-        return NULL;
./nginx/src/mail/ngx_mail_core_module.c-144-    }
./nginx/src/mail/ngx_mail_core_module.c-145-
./nginx/src/mail/ngx_mail_core_module.c-146-    return cmcf;
./nginx/src/mail/ngx_mail_core_module.c-147-}
./nginx/src/mail/ngx_mail_core_module.c-148-
./nginx/src/mail/ngx_mail_core_module.c-149-
./nginx/src/mail/ngx_mail_core_module.c-150-static void *
./nginx/src/mail/ngx_mail_core_module.c-151-ngx_mail_core_create_srv_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_core_module.c-152-{
./nginx/src/mail/ngx_mail_core_module.c-153-    ngx_mail_core_srv_conf_t  *cscf;
./nginx/src/mail/ngx_mail_core_module.c-154-
./nginx/src/mail/ngx_mail_core_module.c:155:    cscf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_core_srv_conf_t));
./nginx/src/mail/ngx_mail_core_module.c-156-    if (cscf == NULL) {
./nginx/src/mail/ngx_mail_core_module.c-157-        return NULL;
./nginx/src/mail/ngx_mail_core_module.c-158-    }
./nginx/src/mail/ngx_mail_core_module.c-159-
./nginx/src/mail/ngx_mail_core_module.c-160-    /*
./nginx/src/mail/ngx_mail_core_module.c-161-     * set by ngx_pcalloc():
./nginx/src/mail/ngx_mail_core_module.c-162-     *
./nginx/src/mail/ngx_mail_core_module.c-163-     *     cscf->protocol = NULL;
./nginx/src/mail/ngx_mail_core_module.c-164-     */
./nginx/src/mail/ngx_mail_core_module.c-165-
--
./nginx/src/mail/ngx_mail_core_module.c-213-{
./nginx/src/mail/ngx_mail_core_module.c-214-    char                       *rv;
./nginx/src/mail/ngx_mail_core_module.c-215-    void                       *mconf;
./nginx/src/mail/ngx_mail_core_module.c-216-    ngx_uint_t                  m;
./nginx/src/mail/ngx_mail_core_module.c-217-    ngx_conf_t                  pcf;
./nginx/src/mail/ngx_mail_core_module.c-218-    ngx_mail_module_t          *module;
./nginx/src/mail/ngx_mail_core_module.c-219-    ngx_mail_conf_ctx_t        *ctx, *mail_ctx;
./nginx/src/mail/ngx_mail_core_module.c-220-    ngx_mail_core_srv_conf_t   *cscf, **cscfp;
./nginx/src/mail/ngx_mail_core_module.c-221-    ngx_mail_core_main_conf_t  *cmcf;
./nginx/src/mail/ngx_mail_core_module.c-222-
./nginx/src/mail/ngx_mail_core_module.c:223:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_mail_conf_ctx_t));
./nginx/src/mail/ngx_mail_core_module.c-224-    if (ctx == NULL) {
./nginx/src/mail/ngx_mail_core_module.c-225-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_core_module.c-226-    }
./nginx/src/mail/ngx_mail_core_module.c-227-
./nginx/src/mail/ngx_mail_core_module.c-228-    mail_ctx = cf->ctx;
./nginx/src/mail/ngx_mail_core_module.c-229-    ctx->main_conf = mail_ctx->main_conf;
./nginx/src/mail/ngx_mail_core_module.c-230-
./nginx/src/mail/ngx_mail_core_module.c-231-    /* the server{}'s srv_conf */
./nginx/src/mail/ngx_mail_core_module.c-232-
./nginx/src/mail/ngx_mail_core_module.c:233:    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_mail_max_module);
./nginx/src/mail/ngx_mail_core_module.c-234-    if (ctx->srv_conf == NULL) {
./nginx/src/mail/ngx_mail_core_module.c-235-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_core_module.c-236-    }
./nginx/src/mail/ngx_mail_core_module.c-237-
./nginx/src/mail/ngx_mail_core_module.c-238-    for (m = 0; ngx_modules[m]; m++) {
./nginx/src/mail/ngx_mail_core_module.c-239-        if (ngx_modules[m]->type != NGX_MAIL_MODULE) {
./nginx/src/mail/ngx_mail_core_module.c-240-            continue;
./nginx/src/mail/ngx_mail_core_module.c-241-        }
./nginx/src/mail/ngx_mail_core_module.c-242-
./nginx/src/mail/ngx_mail_core_module.c-243-        module = ngx_modules[m]->ctx;
--
./nginx/src/mail/ngx_mail_core_module.c-300-    struct sockaddr_in6        *sin6;
./nginx/src/mail/ngx_mail_core_module.c-301-#endif
./nginx/src/mail/ngx_mail_core_module.c-302-
./nginx/src/mail/ngx_mail_core_module.c-303-    value = cf->args->elts;
./nginx/src/mail/ngx_mail_core_module.c-304-
./nginx/src/mail/ngx_mail_core_module.c-305-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/mail/ngx_mail_core_module.c-306-
./nginx/src/mail/ngx_mail_core_module.c-307-    u.url = value[1];
./nginx/src/mail/ngx_mail_core_module.c-308-    u.listen = 1;
./nginx/src/mail/ngx_mail_core_module.c-309-
./nginx/src/mail/ngx_mail_core_module.c:310:    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
./nginx/src/mail/ngx_mail_core_module.c-311-        if (u.err) {
./nginx/src/mail/ngx_mail_core_module.c-312-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/mail/ngx_mail_core_module.c-313-                               "%s in \"%V\" of the \"listen\" directive",
./nginx/src/mail/ngx_mail_core_module.c-314-                               u.err, &u.url);
./nginx/src/mail/ngx_mail_core_module.c-315-        }
./nginx/src/mail/ngx_mail_core_module.c-316-
./nginx/src/mail/ngx_mail_core_module.c-317-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_core_module.c-318-    }
./nginx/src/mail/ngx_mail_core_module.c-319-
./nginx/src/mail/ngx_mail_core_module.c-320-    cmcf = ngx_mail_conf_get_module_main_conf(cf, ngx_mail_core_module);
--
./nginx/src/mail/ngx_mail_auth_http_module.c-48-    u_char                         *header_end;
./nginx/src/mail/ngx_mail_auth_http_module.c-49-
./nginx/src/mail/ngx_mail_auth_http_module.c-50-    ngx_str_t                       addr;
./nginx/src/mail/ngx_mail_auth_http_module.c-51-    ngx_str_t                       port;
./nginx/src/mail/ngx_mail_auth_http_module.c-52-    ngx_str_t                       err;
./nginx/src/mail/ngx_mail_auth_http_module.c-53-    ngx_str_t                       errmsg;
./nginx/src/mail/ngx_mail_auth_http_module.c-54-    ngx_str_t                       errcode;
./nginx/src/mail/ngx_mail_auth_http_module.c-55-
./nginx/src/mail/ngx_mail_auth_http_module.c-56-    time_t                          sleep;
./nginx/src/mail/ngx_mail_auth_http_module.c-57-
./nginx/src/mail/ngx_mail_auth_http_module.c:58:    ngx_pool_t                     *pool;
./nginx/src/mail/ngx_mail_auth_http_module.c-59-};
./nginx/src/mail/ngx_mail_auth_http_module.c-60-
./nginx/src/mail/ngx_mail_auth_http_module.c-61-
./nginx/src/mail/ngx_mail_auth_http_module.c-62-static void ngx_mail_auth_http_write_handler(ngx_event_t *wev);
./nginx/src/mail/ngx_mail_auth_http_module.c-63-static void ngx_mail_auth_http_read_handler(ngx_event_t *rev);
./nginx/src/mail/ngx_mail_auth_http_module.c-64-static void ngx_mail_auth_http_ignore_status_line(ngx_mail_session_t *s,
./nginx/src/mail/ngx_mail_auth_http_module.c-65-    ngx_mail_auth_http_ctx_t *ctx);
./nginx/src/mail/ngx_mail_auth_http_module.c-66-static void ngx_mail_auth_http_process_headers(ngx_mail_session_t *s,
./nginx/src/mail/ngx_mail_auth_http_module.c-67-    ngx_mail_auth_http_ctx_t *ctx);
./nginx/src/mail/ngx_mail_auth_http_module.c-68-static void ngx_mail_auth_sleep_handler(ngx_event_t *rev);
./nginx/src/mail/ngx_mail_auth_http_module.c-69-static ngx_int_t ngx_mail_auth_http_parse_header_line(ngx_mail_session_t *s,
./nginx/src/mail/ngx_mail_auth_http_module.c-70-    ngx_mail_auth_http_ctx_t *ctx);
./nginx/src/mail/ngx_mail_auth_http_module.c-71-static void ngx_mail_auth_http_block_read(ngx_event_t *rev);
./nginx/src/mail/ngx_mail_auth_http_module.c-72-static void ngx_mail_auth_http_dummy_handler(ngx_event_t *ev);
./nginx/src/mail/ngx_mail_auth_http_module.c-73-static ngx_buf_t *ngx_mail_auth_http_create_request(ngx_mail_session_t *s,
./nginx/src/mail/ngx_mail_auth_http_module.c:74:    ngx_pool_t *pool, ngx_mail_auth_http_conf_t *ahcf);
./nginx/src/mail/ngx_mail_auth_http_module.c:75:static ngx_int_t ngx_mail_auth_http_escape(ngx_pool_t *pool, ngx_str_t *text,
./nginx/src/mail/ngx_mail_auth_http_module.c-76-    ngx_str_t *escaped);
./nginx/src/mail/ngx_mail_auth_http_module.c-77-
./nginx/src/mail/ngx_mail_auth_http_module.c-78-static void *ngx_mail_auth_http_create_conf(ngx_conf_t *cf);
./nginx/src/mail/ngx_mail_auth_http_module.c-79-static char *ngx_mail_auth_http_merge_conf(ngx_conf_t *cf, void *parent,
./nginx/src/mail/ngx_mail_auth_http_module.c-80-    void *child);
./nginx/src/mail/ngx_mail_auth_http_module.c-81-static char *ngx_mail_auth_http(ngx_conf_t *cf, ngx_command_t *cmd, void *conf);
./nginx/src/mail/ngx_mail_auth_http_module.c-82-static char *ngx_mail_auth_http_header(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/mail/ngx_mail_auth_http_module.c-83-    void *conf);
./nginx/src/mail/ngx_mail_auth_http_module.c-84-
./nginx/src/mail/ngx_mail_auth_http_module.c-85-
--
./nginx/src/mail/ngx_mail_auth_http_module.c-146-    ngx_string("none")
./nginx/src/mail/ngx_mail_auth_http_module.c-147-};
./nginx/src/mail/ngx_mail_auth_http_module.c-148-
./nginx/src/mail/ngx_mail_auth_http_module.c-149-static ngx_str_t   ngx_mail_smtp_errcode = ngx_string("535 5.7.0");
./nginx/src/mail/ngx_mail_auth_http_module.c-150-
./nginx/src/mail/ngx_mail_auth_http_module.c-151-
./nginx/src/mail/ngx_mail_auth_http_module.c-152-void
./nginx/src/mail/ngx_mail_auth_http_module.c-153-ngx_mail_auth_http_init(ngx_mail_session_t *s)
./nginx/src/mail/ngx_mail_auth_http_module.c-154-{
./nginx/src/mail/ngx_mail_auth_http_module.c-155-    ngx_int_t                   rc;
./nginx/src/mail/ngx_mail_auth_http_module.c:156:    ngx_pool_t                 *pool;
./nginx/src/mail/ngx_mail_auth_http_module.c-157-    ngx_mail_auth_http_ctx_t   *ctx;
./nginx/src/mail/ngx_mail_auth_http_module.c-158-    ngx_mail_auth_http_conf_t  *ahcf;
./nginx/src/mail/ngx_mail_auth_http_module.c-159-
./nginx/src/mail/ngx_mail_auth_http_module.c-160-    s->connection->log->action = "in http auth state";
./nginx/src/mail/ngx_mail_auth_http_module.c-161-
./nginx/src/mail/ngx_mail_auth_http_module.c:162:    pool = ngx_create_pool(2048, s->connection->log);
./nginx/src/mail/ngx_mail_auth_http_module.c:163:    if (pool == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-164-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-165-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-166-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-167-
./nginx/src/mail/ngx_mail_auth_http_module.c:168:    ctx = ngx_pcalloc(pool, sizeof(ngx_mail_auth_http_ctx_t));
./nginx/src/mail/ngx_mail_auth_http_module.c-169-    if (ctx == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:170:        ngx_destroy_pool(pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-171-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-172-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-173-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-174-
./nginx/src/mail/ngx_mail_auth_http_module.c:175:    ctx->pool = pool;
./nginx/src/mail/ngx_mail_auth_http_module.c-176-
./nginx/src/mail/ngx_mail_auth_http_module.c-177-    ahcf = ngx_mail_get_module_srv_conf(s, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-178-
./nginx/src/mail/ngx_mail_auth_http_module.c:179:    ctx->request = ngx_mail_auth_http_create_request(s, pool, ahcf);
./nginx/src/mail/ngx_mail_auth_http_module.c-180-    if (ctx->request == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:181:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-182-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-183-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-184-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-185-
./nginx/src/mail/ngx_mail_auth_http_module.c-186-    ngx_mail_set_ctx(s, ctx, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-187-
./nginx/src/mail/ngx_mail_auth_http_module.c-188-    ctx->peer.sockaddr = ahcf->peer->sockaddr;
./nginx/src/mail/ngx_mail_auth_http_module.c-189-    ctx->peer.socklen = ahcf->peer->socklen;
./nginx/src/mail/ngx_mail_auth_http_module.c-190-    ctx->peer.name = &ahcf->peer->name;
./nginx/src/mail/ngx_mail_auth_http_module.c-191-    ctx->peer.get = ngx_event_get_peer;
./nginx/src/mail/ngx_mail_auth_http_module.c-192-    ctx->peer.log = s->connection->log;
./nginx/src/mail/ngx_mail_auth_http_module.c-193-    ctx->peer.log_error = NGX_ERROR_ERR;
./nginx/src/mail/ngx_mail_auth_http_module.c-194-
./nginx/src/mail/ngx_mail_auth_http_module.c-195-    rc = ngx_event_connect_peer(&ctx->peer);
./nginx/src/mail/ngx_mail_auth_http_module.c-196-
./nginx/src/mail/ngx_mail_auth_http_module.c-197-    if (rc == NGX_ERROR || rc == NGX_BUSY || rc == NGX_DECLINED) {
./nginx/src/mail/ngx_mail_auth_http_module.c-198-        if (ctx->peer.connection) {
./nginx/src/mail/ngx_mail_auth_http_module.c-199-            ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c-200-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-201-
./nginx/src/mail/ngx_mail_auth_http_module.c:202:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-203-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-204-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-205-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-206-
./nginx/src/mail/ngx_mail_auth_http_module.c-207-    ctx->peer.connection->data = s;
./nginx/src/mail/ngx_mail_auth_http_module.c:208:    ctx->peer.connection->pool = s->connection->pool;
./nginx/src/mail/ngx_mail_auth_http_module.c-209-
./nginx/src/mail/ngx_mail_auth_http_module.c-210-    s->connection->read->handler = ngx_mail_auth_http_block_read;
./nginx/src/mail/ngx_mail_auth_http_module.c-211-    ctx->peer.connection->read->handler = ngx_mail_auth_http_read_handler;
./nginx/src/mail/ngx_mail_auth_http_module.c-212-    ctx->peer.connection->write->handler = ngx_mail_auth_http_write_handler;
./nginx/src/mail/ngx_mail_auth_http_module.c-213-
./nginx/src/mail/ngx_mail_auth_http_module.c-214-    ctx->handler = ngx_mail_auth_http_ignore_status_line;
./nginx/src/mail/ngx_mail_auth_http_module.c-215-
./nginx/src/mail/ngx_mail_auth_http_module.c-216-    ngx_add_timer(ctx->peer.connection->read, ahcf->timeout);
./nginx/src/mail/ngx_mail_auth_http_module.c-217-    ngx_add_timer(ctx->peer.connection->write, ahcf->timeout);
./nginx/src/mail/ngx_mail_auth_http_module.c-218-
--
./nginx/src/mail/ngx_mail_auth_http_module.c-237-
./nginx/src/mail/ngx_mail_auth_http_module.c-238-    ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-239-
./nginx/src/mail/ngx_mail_auth_http_module.c-240-    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, wev->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-241-                   "mail auth http write handler");
./nginx/src/mail/ngx_mail_auth_http_module.c-242-
./nginx/src/mail/ngx_mail_auth_http_module.c-243-    if (wev->timedout) {
./nginx/src/mail/ngx_mail_auth_http_module.c-244-        ngx_log_error(NGX_LOG_ERR, wev->log, NGX_ETIMEDOUT,
./nginx/src/mail/ngx_mail_auth_http_module.c-245-                      "auth http server %V timed out", ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c-246-        ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:247:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-248-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-249-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-250-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-251-
./nginx/src/mail/ngx_mail_auth_http_module.c-252-    size = ctx->request->last - ctx->request->pos;
./nginx/src/mail/ngx_mail_auth_http_module.c-253-
./nginx/src/mail/ngx_mail_auth_http_module.c-254-    n = ngx_send(c, ctx->request->pos, size);
./nginx/src/mail/ngx_mail_auth_http_module.c-255-
./nginx/src/mail/ngx_mail_auth_http_module.c-256-    if (n == NGX_ERROR) {
./nginx/src/mail/ngx_mail_auth_http_module.c-257-        ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:258:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-259-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-260-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-261-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-262-
./nginx/src/mail/ngx_mail_auth_http_module.c-263-    if (n > 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-264-        ctx->request->pos += n;
./nginx/src/mail/ngx_mail_auth_http_module.c-265-
./nginx/src/mail/ngx_mail_auth_http_module.c-266-        if (n == size) {
./nginx/src/mail/ngx_mail_auth_http_module.c-267-            wev->handler = ngx_mail_auth_http_dummy_handler;
./nginx/src/mail/ngx_mail_auth_http_module.c-268-
./nginx/src/mail/ngx_mail_auth_http_module.c-269-            if (wev->timer_set) {
./nginx/src/mail/ngx_mail_auth_http_module.c-270-                ngx_del_timer(wev);
./nginx/src/mail/ngx_mail_auth_http_module.c-271-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-272-
./nginx/src/mail/ngx_mail_auth_http_module.c-273-            if (ngx_handle_write_event(wev, 0) != NGX_OK) {
./nginx/src/mail/ngx_mail_auth_http_module.c-274-                ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:275:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-276-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-277-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-278-
./nginx/src/mail/ngx_mail_auth_http_module.c-279-            return;
./nginx/src/mail/ngx_mail_auth_http_module.c-280-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-281-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-282-
./nginx/src/mail/ngx_mail_auth_http_module.c-283-    if (!wev->timer_set) {
./nginx/src/mail/ngx_mail_auth_http_module.c-284-        ahcf = ngx_mail_get_module_srv_conf(s, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-285-        ngx_add_timer(wev, ahcf->timeout);
--
./nginx/src/mail/ngx_mail_auth_http_module.c-300-
./nginx/src/mail/ngx_mail_auth_http_module.c-301-    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-302-                   "mail auth http read handler");
./nginx/src/mail/ngx_mail_auth_http_module.c-303-
./nginx/src/mail/ngx_mail_auth_http_module.c-304-    ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-305-
./nginx/src/mail/ngx_mail_auth_http_module.c-306-    if (rev->timedout) {
./nginx/src/mail/ngx_mail_auth_http_module.c-307-        ngx_log_error(NGX_LOG_ERR, rev->log, NGX_ETIMEDOUT,
./nginx/src/mail/ngx_mail_auth_http_module.c-308-                      "auth http server %V timed out", ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c-309-        ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:310:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-311-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-312-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-313-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-314-
./nginx/src/mail/ngx_mail_auth_http_module.c-315-    if (ctx->response == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:316:        ctx->response = ngx_create_temp_buf(ctx->pool, 1024);
./nginx/src/mail/ngx_mail_auth_http_module.c-317-        if (ctx->response == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-318-            ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:319:            ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-320-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-321-            return;
./nginx/src/mail/ngx_mail_auth_http_module.c-322-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-323-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-324-
./nginx/src/mail/ngx_mail_auth_http_module.c-325-    size = ctx->response->end - ctx->response->last;
./nginx/src/mail/ngx_mail_auth_http_module.c-326-
./nginx/src/mail/ngx_mail_auth_http_module.c-327-    n = ngx_recv(c, ctx->response->pos, size);
./nginx/src/mail/ngx_mail_auth_http_module.c-328-
./nginx/src/mail/ngx_mail_auth_http_module.c-329-    if (n > 0) {
--
./nginx/src/mail/ngx_mail_auth_http_module.c-331-
./nginx/src/mail/ngx_mail_auth_http_module.c-332-        ctx->handler(s, ctx);
./nginx/src/mail/ngx_mail_auth_http_module.c-333-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-334-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-335-
./nginx/src/mail/ngx_mail_auth_http_module.c-336-    if (n == NGX_AGAIN) {
./nginx/src/mail/ngx_mail_auth_http_module.c-337-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-338-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-339-
./nginx/src/mail/ngx_mail_auth_http_module.c-340-    ngx_close_connection(c);
./nginx/src/mail/ngx_mail_auth_http_module.c:341:    ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-342-    ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-343-}
./nginx/src/mail/ngx_mail_auth_http_module.c-344-
./nginx/src/mail/ngx_mail_auth_http_module.c-345-
./nginx/src/mail/ngx_mail_auth_http_module.c-346-static void
./nginx/src/mail/ngx_mail_auth_http_module.c-347-ngx_mail_auth_http_ignore_status_line(ngx_mail_session_t *s,
./nginx/src/mail/ngx_mail_auth_http_module.c-348-    ngx_mail_auth_http_ctx_t *ctx)
./nginx/src/mail/ngx_mail_auth_http_module.c-349-{
./nginx/src/mail/ngx_mail_auth_http_module.c-350-    u_char  *p, ch;
./nginx/src/mail/ngx_mail_auth_http_module.c-351-    enum  {
--
./nginx/src/mail/ngx_mail_auth_http_module.c-419-        /* end of status line */
./nginx/src/mail/ngx_mail_auth_http_module.c-420-        case sw_almost_done:
./nginx/src/mail/ngx_mail_auth_http_module.c-421-            if (ch == LF) {
./nginx/src/mail/ngx_mail_auth_http_module.c-422-                goto done;
./nginx/src/mail/ngx_mail_auth_http_module.c-423-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-424-
./nginx/src/mail/ngx_mail_auth_http_module.c-425-            ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-426-                          "auth http server &V sent invalid response",
./nginx/src/mail/ngx_mail_auth_http_module.c-427-                          ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c-428-            ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:429:            ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-430-            ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-431-            return;
./nginx/src/mail/ngx_mail_auth_http_module.c-432-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-433-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-434-
./nginx/src/mail/ngx_mail_auth_http_module.c-435-    ctx->response->pos = p;
./nginx/src/mail/ngx_mail_auth_http_module.c-436-    ctx->state = state;
./nginx/src/mail/ngx_mail_auth_http_module.c-437-
./nginx/src/mail/ngx_mail_auth_http_module.c-438-    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-439-
--
./nginx/src/mail/ngx_mail_auth_http_module.c-523-                case NGX_MAIL_IMAP_PROTOCOL:
./nginx/src/mail/ngx_mail_auth_http_module.c-524-                    size = s->tag.len + sizeof("NO ") - 1 + len
./nginx/src/mail/ngx_mail_auth_http_module.c-525-                           + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-526-                    break;
./nginx/src/mail/ngx_mail_auth_http_module.c-527-
./nginx/src/mail/ngx_mail_auth_http_module.c-528-                default: /* NGX_MAIL_SMTP_PROTOCOL */
./nginx/src/mail/ngx_mail_auth_http_module.c-529-                    ctx->err = ctx->errmsg;
./nginx/src/mail/ngx_mail_auth_http_module.c-530-                    continue;
./nginx/src/mail/ngx_mail_auth_http_module.c-531-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-532-
./nginx/src/mail/ngx_mail_auth_http_module.c:533:                p = ngx_pnalloc(s->connection->pool, size);
./nginx/src/mail/ngx_mail_auth_http_module.c-534-                if (p == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-535-                    ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:536:                    ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-537-                    ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-538-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-539-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-540-
./nginx/src/mail/ngx_mail_auth_http_module.c-541-                ctx->err.data = p;
./nginx/src/mail/ngx_mail_auth_http_module.c-542-
./nginx/src/mail/ngx_mail_auth_http_module.c-543-                switch (s->protocol) {
./nginx/src/mail/ngx_mail_auth_http_module.c-544-
./nginx/src/mail/ngx_mail_auth_http_module.c-545-                case NGX_MAIL_POP3_PROTOCOL:
./nginx/src/mail/ngx_mail_auth_http_module.c-546-                    *p++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';
--
./nginx/src/mail/ngx_mail_auth_http_module.c-588-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-589-
./nginx/src/mail/ngx_mail_auth_http_module.c-590-            if (len == sizeof("Auth-User") - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-591-                && ngx_strncasecmp(ctx->header_name_start,
./nginx/src/mail/ngx_mail_auth_http_module.c-592-                                   (u_char *) "Auth-User",
./nginx/src/mail/ngx_mail_auth_http_module.c-593-                                   sizeof("Auth-User") - 1)
./nginx/src/mail/ngx_mail_auth_http_module.c-594-                   == 0)
./nginx/src/mail/ngx_mail_auth_http_module.c-595-            {
./nginx/src/mail/ngx_mail_auth_http_module.c-596-                s->login.len = ctx->header_end - ctx->header_start;
./nginx/src/mail/ngx_mail_auth_http_module.c-597-
./nginx/src/mail/ngx_mail_auth_http_module.c:598:                s->login.data = ngx_pnalloc(s->connection->pool, s->login.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-599-                if (s->login.data == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-600-                    ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:601:                    ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-602-                    ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-603-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-604-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-605-
./nginx/src/mail/ngx_mail_auth_http_module.c-606-                ngx_memcpy(s->login.data, ctx->header_start, s->login.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-607-
./nginx/src/mail/ngx_mail_auth_http_module.c-608-                continue;
./nginx/src/mail/ngx_mail_auth_http_module.c-609-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-610-
./nginx/src/mail/ngx_mail_auth_http_module.c-611-            if (len == sizeof("Auth-Pass") - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-612-                && ngx_strncasecmp(ctx->header_name_start,
./nginx/src/mail/ngx_mail_auth_http_module.c-613-                                   (u_char *) "Auth-Pass",
./nginx/src/mail/ngx_mail_auth_http_module.c-614-                                   sizeof("Auth-Pass") - 1)
./nginx/src/mail/ngx_mail_auth_http_module.c-615-                   == 0)
./nginx/src/mail/ngx_mail_auth_http_module.c-616-            {
./nginx/src/mail/ngx_mail_auth_http_module.c-617-                s->passwd.len = ctx->header_end - ctx->header_start;
./nginx/src/mail/ngx_mail_auth_http_module.c-618-
./nginx/src/mail/ngx_mail_auth_http_module.c:619:                s->passwd.data = ngx_pnalloc(s->connection->pool,
./nginx/src/mail/ngx_mail_auth_http_module.c-620-                                             s->passwd.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-621-                if (s->passwd.data == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-622-                    ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:623:                    ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-624-                    ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-625-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-626-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-627-
./nginx/src/mail/ngx_mail_auth_http_module.c-628-                ngx_memcpy(s->passwd.data, ctx->header_start, s->passwd.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-629-
./nginx/src/mail/ngx_mail_auth_http_module.c-630-                continue;
./nginx/src/mail/ngx_mail_auth_http_module.c-631-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-632-
./nginx/src/mail/ngx_mail_auth_http_module.c-633-            if (len == sizeof("Auth-Wait") - 1
--
./nginx/src/mail/ngx_mail_auth_http_module.c-647-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-648-
./nginx/src/mail/ngx_mail_auth_http_module.c-649-            if (len == sizeof("Auth-Error-Code") - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-650-                && ngx_strncasecmp(ctx->header_name_start,
./nginx/src/mail/ngx_mail_auth_http_module.c-651-                                   (u_char *) "Auth-Error-Code",
./nginx/src/mail/ngx_mail_auth_http_module.c-652-                                   sizeof("Auth-Error-Code") - 1)
./nginx/src/mail/ngx_mail_auth_http_module.c-653-                   == 0)
./nginx/src/mail/ngx_mail_auth_http_module.c-654-            {
./nginx/src/mail/ngx_mail_auth_http_module.c-655-                ctx->errcode.len = ctx->header_end - ctx->header_start;
./nginx/src/mail/ngx_mail_auth_http_module.c-656-
./nginx/src/mail/ngx_mail_auth_http_module.c:657:                ctx->errcode.data = ngx_pnalloc(s->connection->pool,
./nginx/src/mail/ngx_mail_auth_http_module.c-658-                                                ctx->errcode.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-659-                if (ctx->errcode.data == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-660-                    ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:661:                    ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-662-                    ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-663-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-664-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-665-
./nginx/src/mail/ngx_mail_auth_http_module.c-666-                ngx_memcpy(ctx->errcode.data, ctx->header_start,
./nginx/src/mail/ngx_mail_auth_http_module.c-667-                           ctx->errcode.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-668-
./nginx/src/mail/ngx_mail_auth_http_module.c-669-                continue;
./nginx/src/mail/ngx_mail_auth_http_module.c-670-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-671-
--
./nginx/src/mail/ngx_mail_auth_http_module.c-687-
./nginx/src/mail/ngx_mail_auth_http_module.c-688-                if (s->protocol == NGX_MAIL_SMTP_PROTOCOL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-689-
./nginx/src/mail/ngx_mail_auth_http_module.c-690-                    if (ctx->errcode.len == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-691-                        ctx->errcode = ngx_mail_smtp_errcode;
./nginx/src/mail/ngx_mail_auth_http_module.c-692-                    }
./nginx/src/mail/ngx_mail_auth_http_module.c-693-
./nginx/src/mail/ngx_mail_auth_http_module.c-694-                    ctx->err.len = ctx->errcode.len + ctx->errmsg.len
./nginx/src/mail/ngx_mail_auth_http_module.c-695-                                   + sizeof(" " CRLF) - 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-696-
./nginx/src/mail/ngx_mail_auth_http_module.c:697:                    p = ngx_pnalloc(s->connection->pool, ctx->err.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-698-                    if (p == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-699-                        ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:700:                        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-701-                        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-702-                        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-703-                    }
./nginx/src/mail/ngx_mail_auth_http_module.c-704-
./nginx/src/mail/ngx_mail_auth_http_module.c-705-                    ctx->err.data = p;
./nginx/src/mail/ngx_mail_auth_http_module.c-706-
./nginx/src/mail/ngx_mail_auth_http_module.c-707-                    p = ngx_cpymem(p, ctx->errcode.data, ctx->errcode.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-708-                    *p++ = ' ';
./nginx/src/mail/ngx_mail_auth_http_module.c-709-                    p = ngx_cpymem(p, ctx->errmsg.data, ctx->errmsg.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-710-                    *p++ = CR; *p = LF;
./nginx/src/mail/ngx_mail_auth_http_module.c-711-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-712-
./nginx/src/mail/ngx_mail_auth_http_module.c-713-                s->out = ctx->err;
./nginx/src/mail/ngx_mail_auth_http_module.c-714-                timer = ctx->sleep;
./nginx/src/mail/ngx_mail_auth_http_module.c-715-
./nginx/src/mail/ngx_mail_auth_http_module.c:716:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-717-
./nginx/src/mail/ngx_mail_auth_http_module.c-718-                if (timer == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-719-                    s->quit = 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-720-                    ngx_mail_send(s->connection->write);
./nginx/src/mail/ngx_mail_auth_http_module.c-721-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-722-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-723-
./nginx/src/mail/ngx_mail_auth_http_module.c-724-                ngx_add_timer(s->connection->read, (ngx_msec_t) (timer * 1000));
./nginx/src/mail/ngx_mail_auth_http_module.c-725-
./nginx/src/mail/ngx_mail_auth_http_module.c-726-                s->connection->read->handler = ngx_mail_auth_sleep_handler;
./nginx/src/mail/ngx_mail_auth_http_module.c-727-
./nginx/src/mail/ngx_mail_auth_http_module.c-728-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-729-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-730-
./nginx/src/mail/ngx_mail_auth_http_module.c-731-            if (s->auth_wait) {
./nginx/src/mail/ngx_mail_auth_http_module.c-732-                timer = ctx->sleep;
./nginx/src/mail/ngx_mail_auth_http_module.c-733-
./nginx/src/mail/ngx_mail_auth_http_module.c:734:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-735-
./nginx/src/mail/ngx_mail_auth_http_module.c-736-                if (timer == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-737-                    ngx_mail_auth_http_init(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-738-                    return;
./nginx/src/mail/ngx_mail_auth_http_module.c-739-                }
./nginx/src/mail/ngx_mail_auth_http_module.c-740-
./nginx/src/mail/ngx_mail_auth_http_module.c-741-                ngx_add_timer(s->connection->read, (ngx_msec_t) (timer * 1000));
./nginx/src/mail/ngx_mail_auth_http_module.c-742-
./nginx/src/mail/ngx_mail_auth_http_module.c-743-                s->connection->read->handler = ngx_mail_auth_sleep_handler;
./nginx/src/mail/ngx_mail_auth_http_module.c-744-
./nginx/src/mail/ngx_mail_auth_http_module.c-745-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-746-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-747-
./nginx/src/mail/ngx_mail_auth_http_module.c-748-            if (ctx->addr.len == 0 || ctx->port.len == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-749-                ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-750-                              "auth http server %V did not send server or port",
./nginx/src/mail/ngx_mail_auth_http_module.c-751-                              ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c:752:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-753-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-754-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-755-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-756-
./nginx/src/mail/ngx_mail_auth_http_module.c-757-            if (s->passwd.data == NULL
./nginx/src/mail/ngx_mail_auth_http_module.c-758-                && s->protocol != NGX_MAIL_SMTP_PROTOCOL)
./nginx/src/mail/ngx_mail_auth_http_module.c-759-            {
./nginx/src/mail/ngx_mail_auth_http_module.c-760-                ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-761-                              "auth http server %V did not send password",
./nginx/src/mail/ngx_mail_auth_http_module.c-762-                              ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c:763:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-764-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-765-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-766-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-767-
./nginx/src/mail/ngx_mail_auth_http_module.c:768:            peer = ngx_pcalloc(s->connection->pool, sizeof(ngx_addr_t));
./nginx/src/mail/ngx_mail_auth_http_module.c-769-            if (peer == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:770:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-771-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-772-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-773-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-774-
./nginx/src/mail/ngx_mail_auth_http_module.c-775-            /* AF_INET only */
./nginx/src/mail/ngx_mail_auth_http_module.c-776-
./nginx/src/mail/ngx_mail_auth_http_module.c:777:            sin = ngx_pcalloc(s->connection->pool, sizeof(struct sockaddr_in));
./nginx/src/mail/ngx_mail_auth_http_module.c-778-            if (sin == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:779:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-780-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-781-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-782-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-783-
./nginx/src/mail/ngx_mail_auth_http_module.c-784-            sin->sin_family = AF_INET;
./nginx/src/mail/ngx_mail_auth_http_module.c-785-
./nginx/src/mail/ngx_mail_auth_http_module.c-786-            port = ngx_atoi(ctx->port.data, ctx->port.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-787-            if (port == NGX_ERROR || port < 1 || port > 65535) {
./nginx/src/mail/ngx_mail_auth_http_module.c-788-                ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-789-                              "auth http server %V sent invalid server "
./nginx/src/mail/ngx_mail_auth_http_module.c-790-                              "port:\"%V\"",
./nginx/src/mail/ngx_mail_auth_http_module.c-791-                              ctx->peer.name, &ctx->port);
./nginx/src/mail/ngx_mail_auth_http_module.c:792:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-793-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-794-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-795-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-796-
./nginx/src/mail/ngx_mail_auth_http_module.c-797-            sin->sin_port = htons((in_port_t) port);
./nginx/src/mail/ngx_mail_auth_http_module.c-798-
./nginx/src/mail/ngx_mail_auth_http_module.c-799-            sin->sin_addr.s_addr = ngx_inet_addr(ctx->addr.data, ctx->addr.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-800-            if (sin->sin_addr.s_addr == INADDR_NONE) {
./nginx/src/mail/ngx_mail_auth_http_module.c-801-                ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-802-                              "auth http server %V sent invalid server "
./nginx/src/mail/ngx_mail_auth_http_module.c-803-                              "address:\"%V\"",
./nginx/src/mail/ngx_mail_auth_http_module.c-804-                              ctx->peer.name, &ctx->addr);
./nginx/src/mail/ngx_mail_auth_http_module.c:805:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-806-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-807-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-808-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-809-
./nginx/src/mail/ngx_mail_auth_http_module.c-810-            peer->sockaddr = (struct sockaddr *) sin;
./nginx/src/mail/ngx_mail_auth_http_module.c-811-            peer->socklen = sizeof(struct sockaddr_in);
./nginx/src/mail/ngx_mail_auth_http_module.c-812-
./nginx/src/mail/ngx_mail_auth_http_module.c-813-            len = ctx->addr.len + 1 + ctx->port.len;
./nginx/src/mail/ngx_mail_auth_http_module.c-814-
./nginx/src/mail/ngx_mail_auth_http_module.c-815-            peer->name.len = len;
./nginx/src/mail/ngx_mail_auth_http_module.c-816-
./nginx/src/mail/ngx_mail_auth_http_module.c:817:            peer->name.data = ngx_pnalloc(s->connection->pool, len);
./nginx/src/mail/ngx_mail_auth_http_module.c-818-            if (peer->name.data == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:819:                ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-820-                ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-821-                return;
./nginx/src/mail/ngx_mail_auth_http_module.c-822-            }
./nginx/src/mail/ngx_mail_auth_http_module.c-823-
./nginx/src/mail/ngx_mail_auth_http_module.c-824-            len = ctx->addr.len;
./nginx/src/mail/ngx_mail_auth_http_module.c-825-
./nginx/src/mail/ngx_mail_auth_http_module.c-826-            ngx_memcpy(peer->name.data, ctx->addr.data, len);
./nginx/src/mail/ngx_mail_auth_http_module.c-827-
./nginx/src/mail/ngx_mail_auth_http_module.c-828-            peer->name.data[len++] = ':';
./nginx/src/mail/ngx_mail_auth_http_module.c-829-
./nginx/src/mail/ngx_mail_auth_http_module.c-830-            ngx_memcpy(peer->name.data + len, ctx->port.data, ctx->port.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-831-
./nginx/src/mail/ngx_mail_auth_http_module.c:832:            ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-833-            ngx_mail_proxy_init(s, peer);
./nginx/src/mail/ngx_mail_auth_http_module.c-834-
./nginx/src/mail/ngx_mail_auth_http_module.c-835-            return;
./nginx/src/mail/ngx_mail_auth_http_module.c-836-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-837-
./nginx/src/mail/ngx_mail_auth_http_module.c-838-        if (rc == NGX_AGAIN ) {
./nginx/src/mail/ngx_mail_auth_http_module.c-839-            return;
./nginx/src/mail/ngx_mail_auth_http_module.c-840-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-841-
./nginx/src/mail/ngx_mail_auth_http_module.c-842-        /* rc == NGX_ERROR */
./nginx/src/mail/ngx_mail_auth_http_module.c-843-
./nginx/src/mail/ngx_mail_auth_http_module.c-844-        ngx_log_error(NGX_LOG_ERR, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-845-                      "auth http server %V sent invalid header in response",
./nginx/src/mail/ngx_mail_auth_http_module.c-846-                      ctx->peer.name);
./nginx/src/mail/ngx_mail_auth_http_module.c-847-        ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:848:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-849-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-850-
./nginx/src/mail/ngx_mail_auth_http_module.c-851-        return;
./nginx/src/mail/ngx_mail_auth_http_module.c-852-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-853-}
./nginx/src/mail/ngx_mail_auth_http_module.c-854-
./nginx/src/mail/ngx_mail_auth_http_module.c-855-
./nginx/src/mail/ngx_mail_auth_http_module.c-856-static void
./nginx/src/mail/ngx_mail_auth_http_module.c-857-ngx_mail_auth_sleep_handler(ngx_event_t *rev)
./nginx/src/mail/ngx_mail_auth_http_module.c-858-{
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1105-    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, rev->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-1106-                   "mail auth http block read");
./nginx/src/mail/ngx_mail_auth_http_module.c-1107-
./nginx/src/mail/ngx_mail_auth_http_module.c-1108-    if (ngx_handle_read_event(rev, 0) != NGX_OK) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1109-        c = rev->data;
./nginx/src/mail/ngx_mail_auth_http_module.c-1110-        s = c->data;
./nginx/src/mail/ngx_mail_auth_http_module.c-1111-
./nginx/src/mail/ngx_mail_auth_http_module.c-1112-        ctx = ngx_mail_get_module_ctx(s, ngx_mail_auth_http_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-1113-
./nginx/src/mail/ngx_mail_auth_http_module.c-1114-        ngx_close_connection(ctx->peer.connection);
./nginx/src/mail/ngx_mail_auth_http_module.c:1115:        ngx_destroy_pool(ctx->pool);
./nginx/src/mail/ngx_mail_auth_http_module.c-1116-        ngx_mail_session_internal_server_error(s);
./nginx/src/mail/ngx_mail_auth_http_module.c-1117-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1118-}
./nginx/src/mail/ngx_mail_auth_http_module.c-1119-
./nginx/src/mail/ngx_mail_auth_http_module.c-1120-
./nginx/src/mail/ngx_mail_auth_http_module.c-1121-static void
./nginx/src/mail/ngx_mail_auth_http_module.c-1122-ngx_mail_auth_http_dummy_handler(ngx_event_t *ev)
./nginx/src/mail/ngx_mail_auth_http_module.c-1123-{
./nginx/src/mail/ngx_mail_auth_http_module.c-1124-    ngx_log_debug0(NGX_LOG_DEBUG_MAIL, ev->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-1125-                   "mail auth http dummy handler");
./nginx/src/mail/ngx_mail_auth_http_module.c-1126-}
./nginx/src/mail/ngx_mail_auth_http_module.c-1127-
./nginx/src/mail/ngx_mail_auth_http_module.c-1128-
./nginx/src/mail/ngx_mail_auth_http_module.c-1129-static ngx_buf_t *
./nginx/src/mail/ngx_mail_auth_http_module.c:1130:ngx_mail_auth_http_create_request(ngx_mail_session_t *s, ngx_pool_t *pool,
./nginx/src/mail/ngx_mail_auth_http_module.c-1131-    ngx_mail_auth_http_conf_t *ahcf)
./nginx/src/mail/ngx_mail_auth_http_module.c-1132-{
./nginx/src/mail/ngx_mail_auth_http_module.c-1133-    size_t                     len;
./nginx/src/mail/ngx_mail_auth_http_module.c-1134-    ngx_buf_t                 *b;
./nginx/src/mail/ngx_mail_auth_http_module.c-1135-    ngx_str_t                  login, passwd;
./nginx/src/mail/ngx_mail_auth_http_module.c-1136-    ngx_mail_core_srv_conf_t  *cscf;
./nginx/src/mail/ngx_mail_auth_http_module.c-1137-
./nginx/src/mail/ngx_mail_auth_http_module.c:1138:    if (ngx_mail_auth_http_escape(pool, &s->login, &login) != NGX_OK) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1139-        return NULL;
./nginx/src/mail/ngx_mail_auth_http_module.c-1140-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1141-
./nginx/src/mail/ngx_mail_auth_http_module.c:1142:    if (ngx_mail_auth_http_escape(pool, &s->passwd, &passwd) != NGX_OK) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1143-        return NULL;
./nginx/src/mail/ngx_mail_auth_http_module.c-1144-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1145-
./nginx/src/mail/ngx_mail_auth_http_module.c-1146-    cscf = ngx_mail_get_module_srv_conf(s, ngx_mail_core_module);
./nginx/src/mail/ngx_mail_auth_http_module.c-1147-
./nginx/src/mail/ngx_mail_auth_http_module.c-1148-    len = sizeof("GET ") - 1 + ahcf->uri.len + sizeof(" HTTP/1.0" CRLF) - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1149-          + sizeof("Host: ") - 1 + ahcf->host_header.len + sizeof(CRLF) - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1150-          + sizeof("Auth-Method: ") - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1151-                + ngx_mail_auth_http_method[s->auth_method].len
./nginx/src/mail/ngx_mail_auth_http_module.c-1152-                + sizeof(CRLF) - 1
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1159-                + sizeof(CRLF) - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1160-          + sizeof("Client-IP: ") - 1 + s->connection->addr_text.len
./nginx/src/mail/ngx_mail_auth_http_module.c-1161-                + sizeof(CRLF) - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1162-          + sizeof("Client-Host: ") - 1 + s->host.len + sizeof(CRLF) - 1
./nginx/src/mail/ngx_mail_auth_http_module.c-1163-          + sizeof("Auth-SMTP-Helo: ") - 1 + s->smtp_helo.len
./nginx/src/mail/ngx_mail_auth_http_module.c-1164-          + sizeof("Auth-SMTP-From: ") - 1 + s->smtp_from.len
./nginx/src/mail/ngx_mail_auth_http_module.c-1165-          + sizeof("Auth-SMTP-To: ") - 1 + s->smtp_to.len
./nginx/src/mail/ngx_mail_auth_http_module.c-1166-          + ahcf->header.len
./nginx/src/mail/ngx_mail_auth_http_module.c-1167-          + sizeof(CRLF) - 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-1168-
./nginx/src/mail/ngx_mail_auth_http_module.c:1169:    b = ngx_create_temp_buf(pool, len);
./nginx/src/mail/ngx_mail_auth_http_module.c-1170-    if (b == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1171-        return NULL;
./nginx/src/mail/ngx_mail_auth_http_module.c-1172-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1173-
./nginx/src/mail/ngx_mail_auth_http_module.c-1174-    b->last = ngx_cpymem(b->last, "GET ", sizeof("GET ") - 1);
./nginx/src/mail/ngx_mail_auth_http_module.c-1175-    b->last = ngx_copy(b->last, ahcf->uri.data, ahcf->uri.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-1176-    b->last = ngx_cpymem(b->last, " HTTP/1.0" CRLF,
./nginx/src/mail/ngx_mail_auth_http_module.c-1177-                         sizeof(" HTTP/1.0" CRLF) - 1);
./nginx/src/mail/ngx_mail_auth_http_module.c-1178-
./nginx/src/mail/ngx_mail_auth_http_module.c-1179-    b->last = ngx_cpymem(b->last, "Host: ", sizeof("Host: ") - 1);
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1261-    ngx_log_debug1(NGX_LOG_DEBUG_MAIL, s->connection->log, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-1262-                   "mail auth http header:\n\"%V\"", &l);
./nginx/src/mail/ngx_mail_auth_http_module.c-1263-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1264-#endif
./nginx/src/mail/ngx_mail_auth_http_module.c-1265-
./nginx/src/mail/ngx_mail_auth_http_module.c-1266-    return b;
./nginx/src/mail/ngx_mail_auth_http_module.c-1267-}
./nginx/src/mail/ngx_mail_auth_http_module.c-1268-
./nginx/src/mail/ngx_mail_auth_http_module.c-1269-
./nginx/src/mail/ngx_mail_auth_http_module.c-1270-static ngx_int_t
./nginx/src/mail/ngx_mail_auth_http_module.c:1271:ngx_mail_auth_http_escape(ngx_pool_t *pool, ngx_str_t *text, ngx_str_t *escaped)
./nginx/src/mail/ngx_mail_auth_http_module.c-1272-{
./nginx/src/mail/ngx_mail_auth_http_module.c-1273-    u_char     *p;
./nginx/src/mail/ngx_mail_auth_http_module.c-1274-    uintptr_t   n;
./nginx/src/mail/ngx_mail_auth_http_module.c-1275-
./nginx/src/mail/ngx_mail_auth_http_module.c-1276-    n = ngx_escape_uri(NULL, text->data, text->len, NGX_ESCAPE_MAIL_AUTH);
./nginx/src/mail/ngx_mail_auth_http_module.c-1277-
./nginx/src/mail/ngx_mail_auth_http_module.c-1278-    if (n == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1279-        *escaped = *text;
./nginx/src/mail/ngx_mail_auth_http_module.c-1280-        return NGX_OK;
./nginx/src/mail/ngx_mail_auth_http_module.c-1281-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1282-
./nginx/src/mail/ngx_mail_auth_http_module.c-1283-    escaped->len = text->len + n * 2;
./nginx/src/mail/ngx_mail_auth_http_module.c-1284-
./nginx/src/mail/ngx_mail_auth_http_module.c:1285:    p = ngx_pnalloc(pool, escaped->len);
./nginx/src/mail/ngx_mail_auth_http_module.c-1286-    if (p == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1287-        return NGX_ERROR;
./nginx/src/mail/ngx_mail_auth_http_module.c-1288-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1289-
./nginx/src/mail/ngx_mail_auth_http_module.c-1290-    (void) ngx_escape_uri(p, text->data, text->len, NGX_ESCAPE_MAIL_AUTH);
./nginx/src/mail/ngx_mail_auth_http_module.c-1291-
./nginx/src/mail/ngx_mail_auth_http_module.c-1292-    escaped->data = p;
./nginx/src/mail/ngx_mail_auth_http_module.c-1293-
./nginx/src/mail/ngx_mail_auth_http_module.c-1294-    return NGX_OK;
./nginx/src/mail/ngx_mail_auth_http_module.c-1295-}
./nginx/src/mail/ngx_mail_auth_http_module.c-1296-
./nginx/src/mail/ngx_mail_auth_http_module.c-1297-
./nginx/src/mail/ngx_mail_auth_http_module.c-1298-static void *
./nginx/src/mail/ngx_mail_auth_http_module.c-1299-ngx_mail_auth_http_create_conf(ngx_conf_t *cf)
./nginx/src/mail/ngx_mail_auth_http_module.c-1300-{
./nginx/src/mail/ngx_mail_auth_http_module.c-1301-    ngx_mail_auth_http_conf_t  *ahcf;
./nginx/src/mail/ngx_mail_auth_http_module.c-1302-
./nginx/src/mail/ngx_mail_auth_http_module.c:1303:    ahcf = ngx_pcalloc(cf->pool, sizeof(ngx_mail_auth_http_conf_t));
./nginx/src/mail/ngx_mail_auth_http_module.c-1304-    if (ahcf == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1305-        return NULL;
./nginx/src/mail/ngx_mail_auth_http_module.c-1306-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1307-
./nginx/src/mail/ngx_mail_auth_http_module.c-1308-    ahcf->timeout = NGX_CONF_UNSET_MSEC;
./nginx/src/mail/ngx_mail_auth_http_module.c-1309-
./nginx/src/mail/ngx_mail_auth_http_module.c-1310-    ahcf->file = cf->conf_file->file.name.data;
./nginx/src/mail/ngx_mail_auth_http_module.c-1311-    ahcf->line = cf->conf_file->line;
./nginx/src/mail/ngx_mail_auth_http_module.c-1312-
./nginx/src/mail/ngx_mail_auth_http_module.c-1313-    return ahcf;
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1346-        conf->header = prev->header;
./nginx/src/mail/ngx_mail_auth_http_module.c-1347-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1348-
./nginx/src/mail/ngx_mail_auth_http_module.c-1349-    if (conf->headers && conf->header.len == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1350-        len = 0;
./nginx/src/mail/ngx_mail_auth_http_module.c-1351-        header = conf->headers->elts;
./nginx/src/mail/ngx_mail_auth_http_module.c-1352-        for (i = 0; i < conf->headers->nelts; i++) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1353-            len += header[i].key.len + 2 + header[i].value.len + 2;
./nginx/src/mail/ngx_mail_auth_http_module.c-1354-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-1355-
./nginx/src/mail/ngx_mail_auth_http_module.c:1356:        p = ngx_pnalloc(cf->pool, len);
./nginx/src/mail/ngx_mail_auth_http_module.c-1357-        if (p == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1358-            return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_auth_http_module.c-1359-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-1360-
./nginx/src/mail/ngx_mail_auth_http_module.c-1361-        conf->header.len = len;
./nginx/src/mail/ngx_mail_auth_http_module.c-1362-        conf->header.data = p;
./nginx/src/mail/ngx_mail_auth_http_module.c-1363-
./nginx/src/mail/ngx_mail_auth_http_module.c-1364-        for (i = 0; i < conf->headers->nelts; i++) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1365-            p = ngx_cpymem(p, header[i].key.data, header[i].key.len);
./nginx/src/mail/ngx_mail_auth_http_module.c-1366-            *p++ = ':'; *p++ = ' ';
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1388-    u.url = value[1];
./nginx/src/mail/ngx_mail_auth_http_module.c-1389-    u.default_port = 80;
./nginx/src/mail/ngx_mail_auth_http_module.c-1390-    u.uri_part = 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-1391-    u.one_addr = 1;
./nginx/src/mail/ngx_mail_auth_http_module.c-1392-
./nginx/src/mail/ngx_mail_auth_http_module.c-1393-    if (ngx_strncmp(u.url.data, "http://", 7) == 0) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1394-        u.url.len -= 7;
./nginx/src/mail/ngx_mail_auth_http_module.c-1395-        u.url.data += 7;
./nginx/src/mail/ngx_mail_auth_http_module.c-1396-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1397-
./nginx/src/mail/ngx_mail_auth_http_module.c:1398:    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1399-        if (u.err) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1400-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/mail/ngx_mail_auth_http_module.c-1401-                               "%s in auth_http \"%V\"", u.err, &u.url);
./nginx/src/mail/ngx_mail_auth_http_module.c-1402-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-1403-
./nginx/src/mail/ngx_mail_auth_http_module.c-1404-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_auth_http_module.c-1405-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1406-
./nginx/src/mail/ngx_mail_auth_http_module.c-1407-    ahcf->peer = u.addrs;
./nginx/src/mail/ngx_mail_auth_http_module.c-1408-
--
./nginx/src/mail/ngx_mail_auth_http_module.c-1425-
./nginx/src/mail/ngx_mail_auth_http_module.c-1426-static char *
./nginx/src/mail/ngx_mail_auth_http_module.c-1427-ngx_mail_auth_http_header(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/mail/ngx_mail_auth_http_module.c-1428-{
./nginx/src/mail/ngx_mail_auth_http_module.c-1429-    ngx_mail_auth_http_conf_t *ahcf = conf;
./nginx/src/mail/ngx_mail_auth_http_module.c-1430-
./nginx/src/mail/ngx_mail_auth_http_module.c-1431-    ngx_str_t        *value;
./nginx/src/mail/ngx_mail_auth_http_module.c-1432-    ngx_table_elt_t  *header;
./nginx/src/mail/ngx_mail_auth_http_module.c-1433-
./nginx/src/mail/ngx_mail_auth_http_module.c-1434-    if (ahcf->headers == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c:1435:        ahcf->headers = ngx_array_create(cf->pool, 1, sizeof(ngx_table_elt_t));
./nginx/src/mail/ngx_mail_auth_http_module.c-1436-        if (ahcf->headers == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1437-            return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_auth_http_module.c-1438-        }
./nginx/src/mail/ngx_mail_auth_http_module.c-1439-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1440-
./nginx/src/mail/ngx_mail_auth_http_module.c-1441-    header = ngx_array_push(ahcf->headers);
./nginx/src/mail/ngx_mail_auth_http_module.c-1442-    if (header == NULL) {
./nginx/src/mail/ngx_mail_auth_http_module.c-1443-        return NGX_CONF_ERROR;
./nginx/src/mail/ngx_mail_auth_http_module.c-1444-    }
./nginx/src/mail/ngx_mail_auth_http_module.c-1445-
--
./nginx/src/misc/ngx_google_perftools_module.c-61-    NULL,                                  /* exit master */
./nginx/src/misc/ngx_google_perftools_module.c-62-    NGX_MODULE_V1_PADDING
./nginx/src/misc/ngx_google_perftools_module.c-63-};
./nginx/src/misc/ngx_google_perftools_module.c-64-
./nginx/src/misc/ngx_google_perftools_module.c-65-
./nginx/src/misc/ngx_google_perftools_module.c-66-static void *
./nginx/src/misc/ngx_google_perftools_module.c-67-ngx_google_perftools_create_conf(ngx_cycle_t *cycle)
./nginx/src/misc/ngx_google_perftools_module.c-68-{
./nginx/src/misc/ngx_google_perftools_module.c-69-    ngx_google_perftools_conf_t  *gptcf;
./nginx/src/misc/ngx_google_perftools_module.c-70-
./nginx/src/misc/ngx_google_perftools_module.c:71:    gptcf = ngx_pcalloc(cycle->pool, sizeof(ngx_google_perftools_conf_t));
./nginx/src/misc/ngx_google_perftools_module.c-72-    if (gptcf == NULL) {
./nginx/src/misc/ngx_google_perftools_module.c-73-        return NULL;
./nginx/src/misc/ngx_google_perftools_module.c-74-    }
./nginx/src/misc/ngx_google_perftools_module.c-75-
./nginx/src/misc/ngx_google_perftools_module.c-76-    /*
./nginx/src/misc/ngx_google_perftools_module.c-77-     * set by ngx_pcalloc()
./nginx/src/misc/ngx_google_perftools_module.c-78-     *
./nginx/src/misc/ngx_google_perftools_module.c-79-     *     gptcf->profiles = { 0, NULL };
./nginx/src/misc/ngx_google_perftools_module.c-80-     */
./nginx/src/misc/ngx_google_perftools_module.c-81-
--
./nginx/src/core/ngx_crypt.c-8-#include <ngx_core.h>
./nginx/src/core/ngx_crypt.c-9-#include <ngx_crypt.h>
./nginx/src/core/ngx_crypt.c-10-#include <ngx_md5.h>
./nginx/src/core/ngx_crypt.c-11-#if (NGX_HAVE_SHA1)
./nginx/src/core/ngx_crypt.c-12-#include <ngx_sha1.h>
./nginx/src/core/ngx_crypt.c-13-#endif
./nginx/src/core/ngx_crypt.c-14-
./nginx/src/core/ngx_crypt.c-15-
./nginx/src/core/ngx_crypt.c-16-#if (NGX_CRYPT)
./nginx/src/core/ngx_crypt.c-17-
./nginx/src/core/ngx_crypt.c:18:static ngx_int_t ngx_crypt_apr1(ngx_pool_t *pool, u_char *key, u_char *salt,
./nginx/src/core/ngx_crypt.c-19-    u_char **encrypted);
./nginx/src/core/ngx_crypt.c:20:static ngx_int_t ngx_crypt_plain(ngx_pool_t *pool, u_char *key, u_char *salt,
./nginx/src/core/ngx_crypt.c-21-    u_char **encrypted);
./nginx/src/core/ngx_crypt.c-22-
./nginx/src/core/ngx_crypt.c-23-#if (NGX_HAVE_SHA1)
./nginx/src/core/ngx_crypt.c-24-
./nginx/src/core/ngx_crypt.c:25:static ngx_int_t ngx_crypt_ssha(ngx_pool_t *pool, u_char *key, u_char *salt,
./nginx/src/core/ngx_crypt.c-26-    u_char **encrypted);
./nginx/src/core/ngx_crypt.c-27-
./nginx/src/core/ngx_crypt.c-28-#endif
./nginx/src/core/ngx_crypt.c-29-
./nginx/src/core/ngx_crypt.c-30-
./nginx/src/core/ngx_crypt.c-31-static u_char *ngx_crypt_to64(u_char *p, uint32_t v, size_t n);
./nginx/src/core/ngx_crypt.c-32-
./nginx/src/core/ngx_crypt.c-33-
./nginx/src/core/ngx_crypt.c-34-ngx_int_t
./nginx/src/core/ngx_crypt.c:35:ngx_crypt(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/core/ngx_crypt.c-36-{
./nginx/src/core/ngx_crypt.c-37-    if (ngx_strncmp(salt, "$apr1$", sizeof("$apr1$") - 1) == 0) {
./nginx/src/core/ngx_crypt.c:38:        return ngx_crypt_apr1(pool, key, salt, encrypted);
./nginx/src/core/ngx_crypt.c-39-
./nginx/src/core/ngx_crypt.c-40-    } else if (ngx_strncmp(salt, "{PLAIN}", sizeof("{PLAIN}") - 1) == 0) {
./nginx/src/core/ngx_crypt.c:41:        return ngx_crypt_plain(pool, key, salt, encrypted);
./nginx/src/core/ngx_crypt.c-42-
./nginx/src/core/ngx_crypt.c-43-#if (NGX_HAVE_SHA1)
./nginx/src/core/ngx_crypt.c-44-    } else if (ngx_strncmp(salt, "{SSHA}", sizeof("{SSHA}") - 1) == 0) {
./nginx/src/core/ngx_crypt.c:45:        return ngx_crypt_ssha(pool, key, salt, encrypted);
./nginx/src/core/ngx_crypt.c-46-#endif
./nginx/src/core/ngx_crypt.c-47-    }
./nginx/src/core/ngx_crypt.c-48-
./nginx/src/core/ngx_crypt.c-49-    /* fallback to libc crypt() */
./nginx/src/core/ngx_crypt.c-50-
./nginx/src/core/ngx_crypt.c:51:    return ngx_libc_crypt(pool, key, salt, encrypted);
./nginx/src/core/ngx_crypt.c-52-}
./nginx/src/core/ngx_crypt.c-53-
./nginx/src/core/ngx_crypt.c-54-
./nginx/src/core/ngx_crypt.c-55-static ngx_int_t
./nginx/src/core/ngx_crypt.c:56:ngx_crypt_apr1(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/core/ngx_crypt.c-57-{
./nginx/src/core/ngx_crypt.c-58-    ngx_int_t          n;
./nginx/src/core/ngx_crypt.c-59-    ngx_uint_t         i;
./nginx/src/core/ngx_crypt.c-60-    u_char            *p, *last, final[16];
./nginx/src/core/ngx_crypt.c-61-    size_t             saltlen, keylen;
./nginx/src/core/ngx_crypt.c-62-    ngx_md5_t          md5, ctx1;
./nginx/src/core/ngx_crypt.c-63-
./nginx/src/core/ngx_crypt.c-64-    /* Apache's apr1 crypt is Paul-Henning Kamp's md5 crypt with $apr1$ magic */
./nginx/src/core/ngx_crypt.c-65-
./nginx/src/core/ngx_crypt.c-66-    keylen = ngx_strlen(key);
--
./nginx/src/core/ngx_crypt.c-125-
./nginx/src/core/ngx_crypt.c-126-        } else {
./nginx/src/core/ngx_crypt.c-127-            ngx_md5_update(&ctx1, key, keylen);
./nginx/src/core/ngx_crypt.c-128-        }
./nginx/src/core/ngx_crypt.c-129-
./nginx/src/core/ngx_crypt.c-130-        ngx_md5_final(final, &ctx1);
./nginx/src/core/ngx_crypt.c-131-    }
./nginx/src/core/ngx_crypt.c-132-
./nginx/src/core/ngx_crypt.c-133-    /* output */
./nginx/src/core/ngx_crypt.c-134-
./nginx/src/core/ngx_crypt.c:135:    *encrypted = ngx_pnalloc(pool, sizeof("$apr1$") - 1 + saltlen + 16 + 1);
./nginx/src/core/ngx_crypt.c-136-    if (*encrypted == NULL) {
./nginx/src/core/ngx_crypt.c-137-        return NGX_ERROR;
./nginx/src/core/ngx_crypt.c-138-    }
./nginx/src/core/ngx_crypt.c-139-
./nginx/src/core/ngx_crypt.c-140-    p = ngx_cpymem(*encrypted, "$apr1$", sizeof("$apr1$") - 1);
./nginx/src/core/ngx_crypt.c-141-    p = ngx_copy(p, salt, saltlen);
./nginx/src/core/ngx_crypt.c-142-    *p++ = '$';
./nginx/src/core/ngx_crypt.c-143-
./nginx/src/core/ngx_crypt.c-144-    p = ngx_crypt_to64(p, (final[ 0]<<16) | (final[ 6]<<8) | final[12], 4);
./nginx/src/core/ngx_crypt.c-145-    p = ngx_crypt_to64(p, (final[ 1]<<16) | (final[ 7]<<8) | final[13], 4);
--
./nginx/src/core/ngx_crypt.c-162-    while (n--) {
./nginx/src/core/ngx_crypt.c-163-       *p++ = itoa64[v & 0x3f];
./nginx/src/core/ngx_crypt.c-164-       v >>= 6;
./nginx/src/core/ngx_crypt.c-165-    }
./nginx/src/core/ngx_crypt.c-166-
./nginx/src/core/ngx_crypt.c-167-    return p;
./nginx/src/core/ngx_crypt.c-168-}
./nginx/src/core/ngx_crypt.c-169-
./nginx/src/core/ngx_crypt.c-170-
./nginx/src/core/ngx_crypt.c-171-static ngx_int_t
./nginx/src/core/ngx_crypt.c:172:ngx_crypt_plain(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/core/ngx_crypt.c-173-{
./nginx/src/core/ngx_crypt.c-174-    size_t   len;
./nginx/src/core/ngx_crypt.c-175-    u_char  *p;
./nginx/src/core/ngx_crypt.c-176-
./nginx/src/core/ngx_crypt.c-177-    len = ngx_strlen(key);
./nginx/src/core/ngx_crypt.c-178-
./nginx/src/core/ngx_crypt.c:179:    *encrypted = ngx_pnalloc(pool, sizeof("{PLAIN}") - 1 + len + 1);
./nginx/src/core/ngx_crypt.c-180-    if (*encrypted == NULL) {
./nginx/src/core/ngx_crypt.c-181-        return NGX_ERROR;
./nginx/src/core/ngx_crypt.c-182-    }
./nginx/src/core/ngx_crypt.c-183-
./nginx/src/core/ngx_crypt.c-184-    p = ngx_cpymem(*encrypted, "{PLAIN}", sizeof("{PLAIN}") - 1);
./nginx/src/core/ngx_crypt.c-185-    ngx_memcpy(p, key, len + 1);
./nginx/src/core/ngx_crypt.c-186-
./nginx/src/core/ngx_crypt.c-187-    return NGX_OK;
./nginx/src/core/ngx_crypt.c-188-}
./nginx/src/core/ngx_crypt.c-189-
./nginx/src/core/ngx_crypt.c-190-
./nginx/src/core/ngx_crypt.c-191-#if (NGX_HAVE_SHA1)
./nginx/src/core/ngx_crypt.c-192-
./nginx/src/core/ngx_crypt.c-193-static ngx_int_t
./nginx/src/core/ngx_crypt.c:194:ngx_crypt_ssha(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/core/ngx_crypt.c-195-{
./nginx/src/core/ngx_crypt.c-196-    size_t       len;
./nginx/src/core/ngx_crypt.c-197-    ngx_int_t    rc;
./nginx/src/core/ngx_crypt.c-198-    ngx_str_t    encoded, decoded;
./nginx/src/core/ngx_crypt.c-199-    ngx_sha1_t   sha1;
./nginx/src/core/ngx_crypt.c-200-
./nginx/src/core/ngx_crypt.c-201-    /* "{SSHA}" base64(SHA1(key salt) salt) */
./nginx/src/core/ngx_crypt.c-202-
./nginx/src/core/ngx_crypt.c-203-    /* decode base64 salt to find out true salt */
./nginx/src/core/ngx_crypt.c-204-
./nginx/src/core/ngx_crypt.c-205-    encoded.data = salt + sizeof("{SSHA}") - 1;
./nginx/src/core/ngx_crypt.c-206-    encoded.len = ngx_strlen(encoded.data);
./nginx/src/core/ngx_crypt.c-207-
./nginx/src/core/ngx_crypt.c-208-    len = ngx_max(ngx_base64_decoded_length(encoded.len), 20);
./nginx/src/core/ngx_crypt.c-209-
./nginx/src/core/ngx_crypt.c:210:    decoded.data = ngx_pnalloc(pool, len);
./nginx/src/core/ngx_crypt.c-211-    if (decoded.data == NULL) {
./nginx/src/core/ngx_crypt.c-212-        return NGX_ERROR;
./nginx/src/core/ngx_crypt.c-213-    }
./nginx/src/core/ngx_crypt.c-214-
./nginx/src/core/ngx_crypt.c-215-    rc = ngx_decode_base64(&decoded, &encoded);
./nginx/src/core/ngx_crypt.c-216-
./nginx/src/core/ngx_crypt.c-217-    if (rc != NGX_OK || decoded.len < 20) {
./nginx/src/core/ngx_crypt.c-218-        decoded.len = 20;
./nginx/src/core/ngx_crypt.c-219-    }
./nginx/src/core/ngx_crypt.c-220-
--
./nginx/src/core/ngx_crypt.c-222-
./nginx/src/core/ngx_crypt.c-223-    ngx_sha1_init(&sha1);
./nginx/src/core/ngx_crypt.c-224-    ngx_sha1_update(&sha1, key, ngx_strlen(key));
./nginx/src/core/ngx_crypt.c-225-    ngx_sha1_update(&sha1, decoded.data + 20, decoded.len - 20);
./nginx/src/core/ngx_crypt.c-226-    ngx_sha1_final(decoded.data, &sha1);
./nginx/src/core/ngx_crypt.c-227-
./nginx/src/core/ngx_crypt.c-228-    /* encode it back to base64 */
./nginx/src/core/ngx_crypt.c-229-
./nginx/src/core/ngx_crypt.c-230-    len = sizeof("{SSHA}") - 1 + ngx_base64_encoded_length(decoded.len) + 1;
./nginx/src/core/ngx_crypt.c-231-
./nginx/src/core/ngx_crypt.c:232:    *encrypted = ngx_pnalloc(pool, len);
./nginx/src/core/ngx_crypt.c-233-    if (*encrypted == NULL) {
./nginx/src/core/ngx_crypt.c-234-        return NGX_ERROR;
./nginx/src/core/ngx_crypt.c-235-    }
./nginx/src/core/ngx_crypt.c-236-
./nginx/src/core/ngx_crypt.c-237-    encoded.data = ngx_cpymem(*encrypted, "{SSHA}", sizeof("{SSHA}") - 1);
./nginx/src/core/ngx_crypt.c-238-    ngx_encode_base64(&encoded, &decoded);
./nginx/src/core/ngx_crypt.c-239-    encoded.data[encoded.len] = '\0';
./nginx/src/core/ngx_crypt.c-240-
./nginx/src/core/ngx_crypt.c-241-    return NGX_OK;
./nginx/src/core/ngx_crypt.c-242-}
--
./nginx/src/core/ngx_cycle.c-44-
./nginx/src/core/ngx_cycle.c-45-ngx_cycle_t *
./nginx/src/core/ngx_cycle.c-46-ngx_init_cycle(ngx_cycle_t *old_cycle)
./nginx/src/core/ngx_cycle.c-47-{
./nginx/src/core/ngx_cycle.c-48-    void                *rv;
./nginx/src/core/ngx_cycle.c-49-    char               **senv, **env;
./nginx/src/core/ngx_cycle.c-50-    ngx_uint_t           i, n;
./nginx/src/core/ngx_cycle.c-51-    ngx_log_t           *log;
./nginx/src/core/ngx_cycle.c-52-    ngx_time_t          *tp;
./nginx/src/core/ngx_cycle.c-53-    ngx_conf_t           conf;
./nginx/src/core/ngx_cycle.c:54:    ngx_pool_t          *pool;
./nginx/src/core/ngx_cycle.c-55-    ngx_cycle_t         *cycle, **old;
./nginx/src/core/ngx_cycle.c-56-    ngx_shm_zone_t      *shm_zone, *oshm_zone;
./nginx/src/core/ngx_cycle.c-57-    ngx_list_part_t     *part, *opart;
./nginx/src/core/ngx_cycle.c-58-    ngx_open_file_t     *file;
./nginx/src/core/ngx_cycle.c-59-    ngx_listening_t     *ls, *nls;
./nginx/src/core/ngx_cycle.c-60-    ngx_core_conf_t     *ccf, *old_ccf;
./nginx/src/core/ngx_cycle.c-61-    ngx_core_module_t   *module;
./nginx/src/core/ngx_cycle.c-62-    char                 hostname[NGX_MAXHOSTNAMELEN];
./nginx/src/core/ngx_cycle.c-63-
./nginx/src/core/ngx_cycle.c-64-    ngx_timezone_update();
--
./nginx/src/core/ngx_cycle.c-66-    /* force localtime update with a new timezone */
./nginx/src/core/ngx_cycle.c-67-
./nginx/src/core/ngx_cycle.c-68-    tp = ngx_timeofday();
./nginx/src/core/ngx_cycle.c-69-    tp->sec = 0;
./nginx/src/core/ngx_cycle.c-70-
./nginx/src/core/ngx_cycle.c-71-    ngx_time_update();
./nginx/src/core/ngx_cycle.c-72-
./nginx/src/core/ngx_cycle.c-73-
./nginx/src/core/ngx_cycle.c-74-    log = old_cycle->log;
./nginx/src/core/ngx_cycle.c-75-
./nginx/src/core/ngx_cycle.c:76:    pool = ngx_create_pool(NGX_CYCLE_POOL_SIZE, log);
./nginx/src/core/ngx_cycle.c:77:    if (pool == NULL) {
./nginx/src/core/ngx_cycle.c-78-        return NULL;
./nginx/src/core/ngx_cycle.c-79-    }
./nginx/src/core/ngx_cycle.c:80:    pool->log = log;
./nginx/src/core/ngx_cycle.c-81-
./nginx/src/core/ngx_cycle.c:82:    cycle = ngx_pcalloc(pool, sizeof(ngx_cycle_t));
./nginx/src/core/ngx_cycle.c-83-    if (cycle == NULL) {
./nginx/src/core/ngx_cycle.c:84:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-85-        return NULL;
./nginx/src/core/ngx_cycle.c-86-    }
./nginx/src/core/ngx_cycle.c-87-
./nginx/src/core/ngx_cycle.c:88:    cycle->pool = pool;
./nginx/src/core/ngx_cycle.c-89-    cycle->log = log;
./nginx/src/core/ngx_cycle.c-90-    cycle->new_log.log_level = NGX_LOG_ERR;
./nginx/src/core/ngx_cycle.c-91-#if (NGX_ENABLE_SYSLOG)
./nginx/src/core/ngx_cycle.c-92-    cycle->new_log.facility = SYSLOG_FACILITY;
./nginx/src/core/ngx_cycle.c-93-    cycle->new_log.facility = ERR_SYSLOG_PRIORITY;
./nginx/src/core/ngx_cycle.c-94-    cycle->new_log.syslog_on = 0;
./nginx/src/core/ngx_cycle.c-95-    cycle->new_log.syslog_set = 0;
./nginx/src/core/ngx_cycle.c-96-#endif
./nginx/src/core/ngx_cycle.c-97-    cycle->old_cycle = old_cycle;
./nginx/src/core/ngx_cycle.c-98-
./nginx/src/core/ngx_cycle.c-99-    cycle->conf_prefix.len = old_cycle->conf_prefix.len;
./nginx/src/core/ngx_cycle.c:100:    cycle->conf_prefix.data = ngx_pstrdup(pool, &old_cycle->conf_prefix);
./nginx/src/core/ngx_cycle.c-101-    if (cycle->conf_prefix.data == NULL) {
./nginx/src/core/ngx_cycle.c:102:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-103-        return NULL;
./nginx/src/core/ngx_cycle.c-104-    }
./nginx/src/core/ngx_cycle.c-105-
./nginx/src/core/ngx_cycle.c-106-    cycle->prefix.len = old_cycle->prefix.len;
./nginx/src/core/ngx_cycle.c:107:    cycle->prefix.data = ngx_pstrdup(pool, &old_cycle->prefix);
./nginx/src/core/ngx_cycle.c-108-    if (cycle->prefix.data == NULL) {
./nginx/src/core/ngx_cycle.c:109:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-110-        return NULL;
./nginx/src/core/ngx_cycle.c-111-    }
./nginx/src/core/ngx_cycle.c-112-
./nginx/src/core/ngx_cycle.c-113-    cycle->conf_file.len = old_cycle->conf_file.len;
./nginx/src/core/ngx_cycle.c:114:    cycle->conf_file.data = ngx_pnalloc(pool, old_cycle->conf_file.len + 1);
./nginx/src/core/ngx_cycle.c-115-    if (cycle->conf_file.data == NULL) {
./nginx/src/core/ngx_cycle.c:116:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-117-        return NULL;
./nginx/src/core/ngx_cycle.c-118-    }
./nginx/src/core/ngx_cycle.c-119-    ngx_cpystrn(cycle->conf_file.data, old_cycle->conf_file.data,
./nginx/src/core/ngx_cycle.c-120-                old_cycle->conf_file.len + 1);
./nginx/src/core/ngx_cycle.c-121-
./nginx/src/core/ngx_cycle.c-122-    cycle->conf_param.len = old_cycle->conf_param.len;
./nginx/src/core/ngx_cycle.c:123:    cycle->conf_param.data = ngx_pstrdup(pool, &old_cycle->conf_param);
./nginx/src/core/ngx_cycle.c-124-    if (cycle->conf_param.data == NULL) {
./nginx/src/core/ngx_cycle.c:125:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-126-        return NULL;
./nginx/src/core/ngx_cycle.c-127-    }
./nginx/src/core/ngx_cycle.c-128-
./nginx/src/core/ngx_cycle.c-129-
./nginx/src/core/ngx_cycle.c-130-    n = old_cycle->paths.nelts ? old_cycle->paths.nelts : 10;
./nginx/src/core/ngx_cycle.c-131-
./nginx/src/core/ngx_cycle.c:132:    cycle->paths.elts = ngx_pcalloc(pool, n * sizeof(ngx_path_t *));
./nginx/src/core/ngx_cycle.c-133-    if (cycle->paths.elts == NULL) {
./nginx/src/core/ngx_cycle.c:134:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-135-        return NULL;
./nginx/src/core/ngx_cycle.c-136-    }
./nginx/src/core/ngx_cycle.c-137-
./nginx/src/core/ngx_cycle.c-138-    cycle->paths.nelts = 0;
./nginx/src/core/ngx_cycle.c-139-    cycle->paths.size = sizeof(ngx_path_t *);
./nginx/src/core/ngx_cycle.c-140-    cycle->paths.nalloc = n;
./nginx/src/core/ngx_cycle.c:141:    cycle->paths.pool = pool;
./nginx/src/core/ngx_cycle.c-142-
./nginx/src/core/ngx_cycle.c-143-
./nginx/src/core/ngx_cycle.c-144-    if (old_cycle->open_files.part.nelts) {
./nginx/src/core/ngx_cycle.c-145-        n = old_cycle->open_files.part.nelts;
./nginx/src/core/ngx_cycle.c-146-        for (part = old_cycle->open_files.part.next; part; part = part->next) {
./nginx/src/core/ngx_cycle.c-147-            n += part->nelts;
./nginx/src/core/ngx_cycle.c-148-        }
./nginx/src/core/ngx_cycle.c-149-
./nginx/src/core/ngx_cycle.c-150-    } else {
./nginx/src/core/ngx_cycle.c-151-        n = 20;
./nginx/src/core/ngx_cycle.c-152-    }
./nginx/src/core/ngx_cycle.c-153-
./nginx/src/core/ngx_cycle.c:154:    if (ngx_list_init(&cycle->open_files, pool, n, sizeof(ngx_open_file_t))
./nginx/src/core/ngx_cycle.c-155-        != NGX_OK)
./nginx/src/core/ngx_cycle.c-156-    {
./nginx/src/core/ngx_cycle.c:157:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-158-        return NULL;
./nginx/src/core/ngx_cycle.c-159-    }
./nginx/src/core/ngx_cycle.c-160-
./nginx/src/core/ngx_cycle.c-161-
./nginx/src/core/ngx_cycle.c-162-    if (old_cycle->shared_memory.part.nelts) {
./nginx/src/core/ngx_cycle.c-163-        n = old_cycle->shared_memory.part.nelts;
./nginx/src/core/ngx_cycle.c-164-        for (part = old_cycle->shared_memory.part.next; part; part = part->next)
./nginx/src/core/ngx_cycle.c-165-        {
./nginx/src/core/ngx_cycle.c-166-            n += part->nelts;
./nginx/src/core/ngx_cycle.c-167-        }
./nginx/src/core/ngx_cycle.c-168-
./nginx/src/core/ngx_cycle.c-169-    } else {
./nginx/src/core/ngx_cycle.c-170-        n = 1;
./nginx/src/core/ngx_cycle.c-171-    }
./nginx/src/core/ngx_cycle.c-172-
./nginx/src/core/ngx_cycle.c:173:    if (ngx_list_init(&cycle->shared_memory, pool, n, sizeof(ngx_shm_zone_t))
./nginx/src/core/ngx_cycle.c-174-        != NGX_OK)
./nginx/src/core/ngx_cycle.c-175-    {
./nginx/src/core/ngx_cycle.c:176:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-177-        return NULL;
./nginx/src/core/ngx_cycle.c-178-    }
./nginx/src/core/ngx_cycle.c-179-
./nginx/src/core/ngx_cycle.c-180-    n = old_cycle->listening.nelts ? old_cycle->listening.nelts : 10;
./nginx/src/core/ngx_cycle.c-181-
./nginx/src/core/ngx_cycle.c:182:    cycle->listening.elts = ngx_pcalloc(pool, n * sizeof(ngx_listening_t));
./nginx/src/core/ngx_cycle.c-183-    if (cycle->listening.elts == NULL) {
./nginx/src/core/ngx_cycle.c:184:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-185-        return NULL;
./nginx/src/core/ngx_cycle.c-186-    }
./nginx/src/core/ngx_cycle.c-187-
./nginx/src/core/ngx_cycle.c-188-    cycle->listening.nelts = 0;
./nginx/src/core/ngx_cycle.c-189-    cycle->listening.size = sizeof(ngx_listening_t);
./nginx/src/core/ngx_cycle.c-190-    cycle->listening.nalloc = n;
./nginx/src/core/ngx_cycle.c:191:    cycle->listening.pool = pool;
./nginx/src/core/ngx_cycle.c-192-
./nginx/src/core/ngx_cycle.c-193-
./nginx/src/core/ngx_cycle.c-194-    ngx_queue_init(&cycle->reusable_connections_queue);
./nginx/src/core/ngx_cycle.c-195-
./nginx/src/core/ngx_cycle.c-196-
./nginx/src/core/ngx_cycle.c:197:    cycle->conf_ctx = ngx_pcalloc(pool, ngx_max_module * sizeof(void *));
./nginx/src/core/ngx_cycle.c-198-    if (cycle->conf_ctx == NULL) {
./nginx/src/core/ngx_cycle.c:199:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-200-        return NULL;
./nginx/src/core/ngx_cycle.c-201-    }
./nginx/src/core/ngx_cycle.c-202-
./nginx/src/core/ngx_cycle.c-203-
./nginx/src/core/ngx_cycle.c-204-    if (gethostname(hostname, NGX_MAXHOSTNAMELEN) == -1) {
./nginx/src/core/ngx_cycle.c-205-        ngx_log_error(NGX_LOG_EMERG, log, ngx_errno, "gethostname() failed");
./nginx/src/core/ngx_cycle.c:206:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-207-        return NULL;
./nginx/src/core/ngx_cycle.c-208-    }
./nginx/src/core/ngx_cycle.c-209-
./nginx/src/core/ngx_cycle.c-210-    /* on Linux gethostname() silently truncates name that does not fit */
./nginx/src/core/ngx_cycle.c-211-
./nginx/src/core/ngx_cycle.c-212-    hostname[NGX_MAXHOSTNAMELEN - 1] = '\0';
./nginx/src/core/ngx_cycle.c-213-    cycle->hostname.len = ngx_strlen(hostname);
./nginx/src/core/ngx_cycle.c-214-
./nginx/src/core/ngx_cycle.c:215:    cycle->hostname.data = ngx_pnalloc(pool, cycle->hostname.len);
./nginx/src/core/ngx_cycle.c-216-    if (cycle->hostname.data == NULL) {
./nginx/src/core/ngx_cycle.c:217:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-218-        return NULL;
./nginx/src/core/ngx_cycle.c-219-    }
./nginx/src/core/ngx_cycle.c-220-
./nginx/src/core/ngx_cycle.c-221-    ngx_strlow(cycle->hostname.data, (u_char *) hostname, cycle->hostname.len);
./nginx/src/core/ngx_cycle.c-222-
./nginx/src/core/ngx_cycle.c-223-
./nginx/src/core/ngx_cycle.c-224-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/core/ngx_cycle.c-225-        if (ngx_modules[i]->type != NGX_CORE_MODULE) {
./nginx/src/core/ngx_cycle.c-226-            continue;
./nginx/src/core/ngx_cycle.c-227-        }
./nginx/src/core/ngx_cycle.c-228-
./nginx/src/core/ngx_cycle.c-229-        module = ngx_modules[i]->ctx;
./nginx/src/core/ngx_cycle.c-230-
./nginx/src/core/ngx_cycle.c-231-        if (module->create_conf) {
./nginx/src/core/ngx_cycle.c-232-            rv = module->create_conf(cycle);
./nginx/src/core/ngx_cycle.c-233-            if (rv == NULL) {
./nginx/src/core/ngx_cycle.c:234:                ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-235-                return NULL;
./nginx/src/core/ngx_cycle.c-236-            }
./nginx/src/core/ngx_cycle.c-237-            cycle->conf_ctx[ngx_modules[i]->index] = rv;
./nginx/src/core/ngx_cycle.c-238-        }
./nginx/src/core/ngx_cycle.c-239-    }
./nginx/src/core/ngx_cycle.c-240-
./nginx/src/core/ngx_cycle.c-241-
./nginx/src/core/ngx_cycle.c-242-    senv = environ;
./nginx/src/core/ngx_cycle.c-243-
./nginx/src/core/ngx_cycle.c-244-
./nginx/src/core/ngx_cycle.c-245-    ngx_memzero(&conf, sizeof(ngx_conf_t));
./nginx/src/core/ngx_cycle.c-246-    /* STUB: init array ? */
./nginx/src/core/ngx_cycle.c:247:    conf.args = ngx_array_create(pool, 10, sizeof(ngx_str_t));
./nginx/src/core/ngx_cycle.c-248-    if (conf.args == NULL) {
./nginx/src/core/ngx_cycle.c:249:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-250-        return NULL;
./nginx/src/core/ngx_cycle.c-251-    }
./nginx/src/core/ngx_cycle.c-252-
./nginx/src/core/ngx_cycle.c-253-    conf.temp_pool = ngx_create_pool(NGX_CYCLE_POOL_SIZE, log);
./nginx/src/core/ngx_cycle.c-254-    if (conf.temp_pool == NULL) {
./nginx/src/core/ngx_cycle.c:255:        ngx_destroy_pool(pool);
./nginx/src/core/ngx_cycle.c-256-        return NULL;
./nginx/src/core/ngx_cycle.c-257-    }
./nginx/src/core/ngx_cycle.c-258-
./nginx/src/core/ngx_cycle.c-259-
./nginx/src/core/ngx_cycle.c-260-    conf.ctx = cycle->conf_ctx;
./nginx/src/core/ngx_cycle.c-261-    conf.cycle = cycle;
./nginx/src/core/ngx_cycle.c:262:    conf.pool = pool;
./nginx/src/core/ngx_cycle.c-263-    conf.log = log;
./nginx/src/core/ngx_cycle.c-264-    conf.module_type = NGX_CORE_MODULE;
./nginx/src/core/ngx_cycle.c-265-    conf.cmd_type = NGX_MAIN_CONF;
./nginx/src/core/ngx_cycle.c-266-
./nginx/src/core/ngx_cycle.c-267-#if 0
./nginx/src/core/ngx_cycle.c-268-    log->log_level = NGX_LOG_DEBUG_ALL;
./nginx/src/core/ngx_cycle.c-269-#endif
./nginx/src/core/ngx_cycle.c-270-
./nginx/src/core/ngx_cycle.c-271-    if (ngx_conf_param(&conf) != NGX_CONF_OK) {
./nginx/src/core/ngx_cycle.c-272-        environ = senv;
--
./nginx/src/core/ngx_cycle.c-395-        if (fcntl(file[i].fd, F_SETFD, FD_CLOEXEC) == -1) {
./nginx/src/core/ngx_cycle.c-396-            ngx_log_error(NGX_LOG_EMERG, log, ngx_errno,
./nginx/src/core/ngx_cycle.c-397-                          "fcntl(FD_CLOEXEC) \"%s\" failed",
./nginx/src/core/ngx_cycle.c-398-                          file[i].name.data);
./nginx/src/core/ngx_cycle.c-399-            goto failed;
./nginx/src/core/ngx_cycle.c-400-        }
./nginx/src/core/ngx_cycle.c-401-#endif
./nginx/src/core/ngx_cycle.c-402-    }
./nginx/src/core/ngx_cycle.c-403-
./nginx/src/core/ngx_cycle.c-404-    cycle->log = &cycle->new_log;
./nginx/src/core/ngx_cycle.c:405:    pool->log = &cycle->new_log;
./nginx/src/core/ngx_cycle.c-406-
./nginx/src/core/ngx_cycle.c-407-
./nginx/src/core/ngx_cycle.c-408-    /* create shared memory */
./nginx/src/core/ngx_cycle.c-409-
./nginx/src/core/ngx_cycle.c-410-    part = &cycle->shared_memory.part;
./nginx/src/core/ngx_cycle.c-411-    shm_zone = part->elts;
./nginx/src/core/ngx_cycle.c-412-
./nginx/src/core/ngx_cycle.c-413-    for (i = 0; /* void */ ; i++) {
./nginx/src/core/ngx_cycle.c-414-
./nginx/src/core/ngx_cycle.c-415-        if (i >= part->nelts) {
--
./nginx/src/core/ngx_cycle.c-592-    /* commit the new cycle configuration */
./nginx/src/core/ngx_cycle.c-593-
./nginx/src/core/ngx_cycle.c-594-    if (!ngx_use_stderr && cycle->log->file->fd != ngx_stderr) {
./nginx/src/core/ngx_cycle.c-595-
./nginx/src/core/ngx_cycle.c-596-        if (ngx_set_stderr(cycle->log->file->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_cycle.c-597-            ngx_log_error(NGX_LOG_ALERT, cycle->log, ngx_errno,
./nginx/src/core/ngx_cycle.c-598-                          ngx_set_stderr_n " failed");
./nginx/src/core/ngx_cycle.c-599-        }
./nginx/src/core/ngx_cycle.c-600-    }
./nginx/src/core/ngx_cycle.c-601-
./nginx/src/core/ngx_cycle.c:602:    pool->log = cycle->log;
./nginx/src/core/ngx_cycle.c-603-
./nginx/src/core/ngx_cycle.c-604-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/core/ngx_cycle.c-605-        if (ngx_modules[i]->init_module) {
./nginx/src/core/ngx_cycle.c-606-            if (ngx_modules[i]->init_module(cycle) != NGX_OK) {
./nginx/src/core/ngx_cycle.c-607-                /* fatal */
./nginx/src/core/ngx_cycle.c-608-                exit(1);
./nginx/src/core/ngx_cycle.c-609-            }
./nginx/src/core/ngx_cycle.c-610-        }
./nginx/src/core/ngx_cycle.c-611-    }
./nginx/src/core/ngx_cycle.c-612-
--
./nginx/src/core/ngx_cycle.c-741-
./nginx/src/core/ngx_cycle.c-742-        /*
./nginx/src/core/ngx_cycle.c-743-         * perl_destruct() frees environ, if it is not the same as it was at
./nginx/src/core/ngx_cycle.c-744-         * perl_construct() time, therefore we save the previous cycle
./nginx/src/core/ngx_cycle.c-745-         * environment before ngx_conf_parse() where it will be changed.
./nginx/src/core/ngx_cycle.c-746-         */
./nginx/src/core/ngx_cycle.c-747-
./nginx/src/core/ngx_cycle.c-748-        env = environ;
./nginx/src/core/ngx_cycle.c-749-        environ = senv;
./nginx/src/core/ngx_cycle.c-750-
./nginx/src/core/ngx_cycle.c:751:        ngx_destroy_pool(old_cycle->pool);
./nginx/src/core/ngx_cycle.c-752-        cycle->old_cycle = NULL;
./nginx/src/core/ngx_cycle.c-753-
./nginx/src/core/ngx_cycle.c-754-        environ = env;
./nginx/src/core/ngx_cycle.c-755-
./nginx/src/core/ngx_cycle.c-756-        return cycle;
./nginx/src/core/ngx_cycle.c-757-    }
./nginx/src/core/ngx_cycle.c-758-
./nginx/src/core/ngx_cycle.c-759-
./nginx/src/core/ngx_cycle.c-760-    if (ngx_temp_pool == NULL) {
./nginx/src/core/ngx_cycle.c-761-        ngx_temp_pool = ngx_create_pool(128, cycle->log);
--
./nginx/src/core/ngx_cycle.c-767-
./nginx/src/core/ngx_cycle.c-768-        n = 10;
./nginx/src/core/ngx_cycle.c-769-        ngx_old_cycles.elts = ngx_pcalloc(ngx_temp_pool,
./nginx/src/core/ngx_cycle.c-770-                                          n * sizeof(ngx_cycle_t *));
./nginx/src/core/ngx_cycle.c-771-        if (ngx_old_cycles.elts == NULL) {
./nginx/src/core/ngx_cycle.c-772-            exit(1);
./nginx/src/core/ngx_cycle.c-773-        }
./nginx/src/core/ngx_cycle.c-774-        ngx_old_cycles.nelts = 0;
./nginx/src/core/ngx_cycle.c-775-        ngx_old_cycles.size = sizeof(ngx_cycle_t *);
./nginx/src/core/ngx_cycle.c-776-        ngx_old_cycles.nalloc = n;
./nginx/src/core/ngx_cycle.c:777:        ngx_old_cycles.pool = ngx_temp_pool;
./nginx/src/core/ngx_cycle.c-778-
./nginx/src/core/ngx_cycle.c-779-        ngx_cleaner_event.handler = ngx_clean_old_cycles;
./nginx/src/core/ngx_cycle.c-780-        ngx_cleaner_event.log = cycle->log;
./nginx/src/core/ngx_cycle.c-781-        ngx_cleaner_event.data = &dumb;
./nginx/src/core/ngx_cycle.c-782-        dumb.fd = (ngx_socket_t) -1;
./nginx/src/core/ngx_cycle.c-783-    }
./nginx/src/core/ngx_cycle.c-784-
./nginx/src/core/ngx_cycle.c-785-    ngx_temp_pool->log = cycle->log;
./nginx/src/core/ngx_cycle.c-786-
./nginx/src/core/ngx_cycle.c-787-    old = ngx_array_push(&ngx_old_cycles);
--
./nginx/src/core/ngx_cycle.c-856-    ngx_destroy_cycle_pools(&conf);
./nginx/src/core/ngx_cycle.c-857-
./nginx/src/core/ngx_cycle.c-858-    return NULL;
./nginx/src/core/ngx_cycle.c-859-}
./nginx/src/core/ngx_cycle.c-860-
./nginx/src/core/ngx_cycle.c-861-
./nginx/src/core/ngx_cycle.c-862-static void
./nginx/src/core/ngx_cycle.c-863-ngx_destroy_cycle_pools(ngx_conf_t *conf)
./nginx/src/core/ngx_cycle.c-864-{
./nginx/src/core/ngx_cycle.c-865-    ngx_destroy_pool(conf->temp_pool);
./nginx/src/core/ngx_cycle.c:866:    ngx_destroy_pool(conf->pool);
./nginx/src/core/ngx_cycle.c-867-}
./nginx/src/core/ngx_cycle.c-868-
./nginx/src/core/ngx_cycle.c-869-
./nginx/src/core/ngx_cycle.c-870-static ngx_int_t
./nginx/src/core/ngx_cycle.c-871-ngx_cmp_sockaddr(struct sockaddr *sa1, struct sockaddr *sa2)
./nginx/src/core/ngx_cycle.c-872-{
./nginx/src/core/ngx_cycle.c-873-    struct sockaddr_in   *sin1, *sin2;
./nginx/src/core/ngx_cycle.c-874-#if (NGX_HAVE_INET6)
./nginx/src/core/ngx_cycle.c-875-    struct sockaddr_in6  *sin61, *sin62;
./nginx/src/core/ngx_cycle.c-876-#endif
--
./nginx/src/core/ngx_cycle.c-958-    sp->end = zn->shm.addr + zn->shm.size;
./nginx/src/core/ngx_cycle.c-959-    sp->min_shift = 3;
./nginx/src/core/ngx_cycle.c-960-    sp->addr = zn->shm.addr;
./nginx/src/core/ngx_cycle.c-961-
./nginx/src/core/ngx_cycle.c-962-#if (NGX_HAVE_ATOMIC_OPS)
./nginx/src/core/ngx_cycle.c-963-
./nginx/src/core/ngx_cycle.c-964-    file = NULL;
./nginx/src/core/ngx_cycle.c-965-
./nginx/src/core/ngx_cycle.c-966-#else
./nginx/src/core/ngx_cycle.c-967-
./nginx/src/core/ngx_cycle.c:968:    file = ngx_pnalloc(cycle->pool, cycle->lock_file.len + zn->shm.name.len);
./nginx/src/core/ngx_cycle.c-969-    if (file == NULL) {
./nginx/src/core/ngx_cycle.c-970-        return NGX_ERROR;
./nginx/src/core/ngx_cycle.c-971-    }
./nginx/src/core/ngx_cycle.c-972-
./nginx/src/core/ngx_cycle.c-973-    (void) ngx_sprintf(file, "%V%V%Z", &cycle->lock_file, &zn->shm.name);
./nginx/src/core/ngx_cycle.c-974-
./nginx/src/core/ngx_cycle.c-975-#endif
./nginx/src/core/ngx_cycle.c-976-
./nginx/src/core/ngx_cycle.c-977-    if (ngx_shmtx_create(&sp->mutex, &sp->lock, file) != NGX_OK) {
./nginx/src/core/ngx_cycle.c-978-        return NGX_ERROR;
--
./nginx/src/core/ngx_cycle.c-1406-                    "$sticky_value_", 14) == 0)) {
./nginx/src/core/ngx_cycle.c-1407-                seq = ngx_atoi(&shm_zone->shm.name.data[14],
./nginx/src/core/ngx_cycle.c-1408-                                                 shm_zone->shm.name.len-14);
./nginx/src/core/ngx_cycle.c-1409-                if (seq < 0 || seq != cycle[i]->current_seq) {
./nginx/src/core/ngx_cycle.c-1410-                    continue;
./nginx/src/core/ngx_cycle.c-1411-                }
./nginx/src/core/ngx_cycle.c-1412-                ngx_shm_free(&shm_zone->shm);
./nginx/src/core/ngx_cycle.c-1413-            }
./nginx/src/core/ngx_cycle.c-1414-        }
./nginx/src/core/ngx_cycle.c-1415-#endif
./nginx/src/core/ngx_cycle.c:1416:        ngx_destroy_pool(cycle[i]->pool);
./nginx/src/core/ngx_cycle.c-1417-        cycle[i] = NULL;
./nginx/src/core/ngx_cycle.c-1418-    }
./nginx/src/core/ngx_cycle.c-1419-
./nginx/src/core/ngx_cycle.c-1420-    ngx_log_debug1(NGX_LOG_DEBUG_CORE, log, 0, "old cycles status: %d", live);
./nginx/src/core/ngx_cycle.c-1421-
./nginx/src/core/ngx_cycle.c-1422-    if (live) {
./nginx/src/core/ngx_cycle.c-1423-        /*ngx_add_timer(ev, 30000);*/
./nginx/src/core/ngx_cycle.c-1424-        ngx_add_timer(ev, 3000);
./nginx/src/core/ngx_cycle.c-1425-
./nginx/src/core/ngx_cycle.c-1426-    } else {
--
./nginx/src/core/ngx_open_file_cache.c-43-    ngx_uint_t n, ngx_log_t *log);
./nginx/src/core/ngx_open_file_cache.c-44-static void ngx_open_file_cache_rbtree_insert_value(ngx_rbtree_node_t *temp,
./nginx/src/core/ngx_open_file_cache.c-45-    ngx_rbtree_node_t *node, ngx_rbtree_node_t *sentinel);
./nginx/src/core/ngx_open_file_cache.c-46-static ngx_cached_open_file_t *
./nginx/src/core/ngx_open_file_cache.c-47-    ngx_open_file_lookup(ngx_open_file_cache_t *cache, ngx_str_t *name,
./nginx/src/core/ngx_open_file_cache.c-48-    uint32_t hash);
./nginx/src/core/ngx_open_file_cache.c-49-static void ngx_open_file_cache_remove(ngx_event_t *ev);
./nginx/src/core/ngx_open_file_cache.c-50-
./nginx/src/core/ngx_open_file_cache.c-51-
./nginx/src/core/ngx_open_file_cache.c-52-ngx_open_file_cache_t *
./nginx/src/core/ngx_open_file_cache.c:53:ngx_open_file_cache_init(ngx_pool_t *pool, ngx_uint_t max, time_t inactive)
./nginx/src/core/ngx_open_file_cache.c-54-{
./nginx/src/core/ngx_open_file_cache.c-55-    ngx_pool_cleanup_t     *cln;
./nginx/src/core/ngx_open_file_cache.c-56-    ngx_open_file_cache_t  *cache;
./nginx/src/core/ngx_open_file_cache.c-57-
./nginx/src/core/ngx_open_file_cache.c:58:    cache = ngx_palloc(pool, sizeof(ngx_open_file_cache_t));
./nginx/src/core/ngx_open_file_cache.c-59-    if (cache == NULL) {
./nginx/src/core/ngx_open_file_cache.c-60-        return NULL;
./nginx/src/core/ngx_open_file_cache.c-61-    }
./nginx/src/core/ngx_open_file_cache.c-62-
./nginx/src/core/ngx_open_file_cache.c-63-    ngx_rbtree_init(&cache->rbtree, &cache->sentinel,
./nginx/src/core/ngx_open_file_cache.c-64-                    ngx_open_file_cache_rbtree_insert_value);
./nginx/src/core/ngx_open_file_cache.c-65-
./nginx/src/core/ngx_open_file_cache.c-66-    ngx_queue_init(&cache->expire_queue);
./nginx/src/core/ngx_open_file_cache.c-67-
./nginx/src/core/ngx_open_file_cache.c-68-    cache->current = 0;
./nginx/src/core/ngx_open_file_cache.c-69-    cache->max = max;
./nginx/src/core/ngx_open_file_cache.c-70-    cache->inactive = inactive;
./nginx/src/core/ngx_open_file_cache.c-71-
./nginx/src/core/ngx_open_file_cache.c:72:    cln = ngx_pool_cleanup_add(pool, 0);
./nginx/src/core/ngx_open_file_cache.c-73-    if (cln == NULL) {
./nginx/src/core/ngx_open_file_cache.c-74-        return NULL;
./nginx/src/core/ngx_open_file_cache.c-75-    }
./nginx/src/core/ngx_open_file_cache.c-76-
./nginx/src/core/ngx_open_file_cache.c-77-    cln->handler = ngx_open_file_cache_cleanup;
./nginx/src/core/ngx_open_file_cache.c-78-    cln->data = cache;
./nginx/src/core/ngx_open_file_cache.c-79-
./nginx/src/core/ngx_open_file_cache.c-80-    return cache;
./nginx/src/core/ngx_open_file_cache.c-81-}
./nginx/src/core/ngx_open_file_cache.c-82-
--
./nginx/src/core/ngx_open_file_cache.c-131-    if (cache->rbtree.root != cache->rbtree.sentinel) {
./nginx/src/core/ngx_open_file_cache.c-132-        ngx_log_error(NGX_LOG_ALERT, ngx_cycle->log, 0,
./nginx/src/core/ngx_open_file_cache.c-133-                      "rbtree still is not empty in open file cache");
./nginx/src/core/ngx_open_file_cache.c-134-
./nginx/src/core/ngx_open_file_cache.c-135-    }
./nginx/src/core/ngx_open_file_cache.c-136-}
./nginx/src/core/ngx_open_file_cache.c-137-
./nginx/src/core/ngx_open_file_cache.c-138-
./nginx/src/core/ngx_open_file_cache.c-139-ngx_int_t
./nginx/src/core/ngx_open_file_cache.c-140-ngx_open_cached_file(ngx_open_file_cache_t *cache, ngx_str_t *name,
./nginx/src/core/ngx_open_file_cache.c:141:    ngx_open_file_info_t *of, ngx_pool_t *pool)
./nginx/src/core/ngx_open_file_cache.c-142-{
./nginx/src/core/ngx_open_file_cache.c-143-    time_t                          now;
./nginx/src/core/ngx_open_file_cache.c-144-    uint32_t                        hash;
./nginx/src/core/ngx_open_file_cache.c-145-    ngx_int_t                       rc;
./nginx/src/core/ngx_open_file_cache.c-146-    ngx_file_info_t                 fi;
./nginx/src/core/ngx_open_file_cache.c-147-    ngx_pool_cleanup_t             *cln;
./nginx/src/core/ngx_open_file_cache.c-148-    ngx_cached_open_file_t         *file;
./nginx/src/core/ngx_open_file_cache.c-149-    ngx_pool_cleanup_file_t        *clnf;
./nginx/src/core/ngx_open_file_cache.c-150-    ngx_open_file_cache_cleanup_t  *ofcln;
./nginx/src/core/ngx_open_file_cache.c-151-
./nginx/src/core/ngx_open_file_cache.c-152-    of->fd = NGX_INVALID_FILE;
./nginx/src/core/ngx_open_file_cache.c-153-    of->err = 0;
./nginx/src/core/ngx_open_file_cache.c-154-
./nginx/src/core/ngx_open_file_cache.c-155-    if (cache == NULL) {
./nginx/src/core/ngx_open_file_cache.c-156-
./nginx/src/core/ngx_open_file_cache.c-157-        if (of->test_only) {
./nginx/src/core/ngx_open_file_cache.c-158-
./nginx/src/core/ngx_open_file_cache.c:159:            if (ngx_file_info_wrapper(name, of, &fi, pool->log)
./nginx/src/core/ngx_open_file_cache.c-160-                == NGX_FILE_ERROR)
./nginx/src/core/ngx_open_file_cache.c-161-            {
./nginx/src/core/ngx_open_file_cache.c-162-                return NGX_ERROR;
./nginx/src/core/ngx_open_file_cache.c-163-            }
./nginx/src/core/ngx_open_file_cache.c-164-
./nginx/src/core/ngx_open_file_cache.c-165-            of->uniq = ngx_file_uniq(&fi);
./nginx/src/core/ngx_open_file_cache.c-166-            of->mtime = ngx_file_mtime(&fi);
./nginx/src/core/ngx_open_file_cache.c-167-            of->size = ngx_file_size(&fi);
./nginx/src/core/ngx_open_file_cache.c-168-            of->fs_size = ngx_file_fs_size(&fi);
./nginx/src/core/ngx_open_file_cache.c-169-            of->is_dir = ngx_is_dir(&fi);
./nginx/src/core/ngx_open_file_cache.c-170-            of->is_file = ngx_is_file(&fi);
./nginx/src/core/ngx_open_file_cache.c-171-            of->is_link = ngx_is_link(&fi);
./nginx/src/core/ngx_open_file_cache.c-172-            of->is_exec = ngx_is_exec(&fi);
./nginx/src/core/ngx_open_file_cache.c-173-
./nginx/src/core/ngx_open_file_cache.c-174-            return NGX_OK;
./nginx/src/core/ngx_open_file_cache.c-175-        }
./nginx/src/core/ngx_open_file_cache.c-176-
./nginx/src/core/ngx_open_file_cache.c:177:        cln = ngx_pool_cleanup_add(pool, sizeof(ngx_pool_cleanup_file_t));
./nginx/src/core/ngx_open_file_cache.c-178-        if (cln == NULL) {
./nginx/src/core/ngx_open_file_cache.c-179-            return NGX_ERROR;
./nginx/src/core/ngx_open_file_cache.c-180-        }
./nginx/src/core/ngx_open_file_cache.c-181-
./nginx/src/core/ngx_open_file_cache.c:182:        rc = ngx_open_and_stat_file(name, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-183-
./nginx/src/core/ngx_open_file_cache.c-184-        if (rc == NGX_OK && !of->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-185-            cln->handler = ngx_pool_cleanup_file;
./nginx/src/core/ngx_open_file_cache.c-186-            clnf = cln->data;
./nginx/src/core/ngx_open_file_cache.c-187-
./nginx/src/core/ngx_open_file_cache.c-188-            clnf->fd = of->fd;
./nginx/src/core/ngx_open_file_cache.c-189-            clnf->name = name->data;
./nginx/src/core/ngx_open_file_cache.c:190:            clnf->log = pool->log;
./nginx/src/core/ngx_open_file_cache.c-191-        }
./nginx/src/core/ngx_open_file_cache.c-192-
./nginx/src/core/ngx_open_file_cache.c-193-        return rc;
./nginx/src/core/ngx_open_file_cache.c-194-    }
./nginx/src/core/ngx_open_file_cache.c-195-
./nginx/src/core/ngx_open_file_cache.c:196:    cln = ngx_pool_cleanup_add(pool, sizeof(ngx_open_file_cache_cleanup_t));
./nginx/src/core/ngx_open_file_cache.c-197-    if (cln == NULL) {
./nginx/src/core/ngx_open_file_cache.c-198-        return NGX_ERROR;
./nginx/src/core/ngx_open_file_cache.c-199-    }
./nginx/src/core/ngx_open_file_cache.c-200-
./nginx/src/core/ngx_open_file_cache.c-201-    now = ngx_time();
./nginx/src/core/ngx_open_file_cache.c-202-
./nginx/src/core/ngx_open_file_cache.c-203-    hash = ngx_crc32_long(name->data, name->len);
./nginx/src/core/ngx_open_file_cache.c-204-
./nginx/src/core/ngx_open_file_cache.c-205-    file = ngx_open_file_lookup(cache, name, hash);
./nginx/src/core/ngx_open_file_cache.c-206-
./nginx/src/core/ngx_open_file_cache.c-207-    if (file) {
./nginx/src/core/ngx_open_file_cache.c-208-
./nginx/src/core/ngx_open_file_cache.c-209-        file->uses++;
./nginx/src/core/ngx_open_file_cache.c-210-
./nginx/src/core/ngx_open_file_cache.c-211-        ngx_queue_remove(&file->queue);
./nginx/src/core/ngx_open_file_cache.c-212-
./nginx/src/core/ngx_open_file_cache.c-213-        if (file->fd == NGX_INVALID_FILE && file->err == 0 && !file->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-214-
./nginx/src/core/ngx_open_file_cache.c-215-            /* file was not used often enough to keep open */
./nginx/src/core/ngx_open_file_cache.c-216-
./nginx/src/core/ngx_open_file_cache.c:217:            rc = ngx_open_and_stat_file(name, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-218-
./nginx/src/core/ngx_open_file_cache.c-219-            if (rc != NGX_OK && (of->err == 0 || !of->errors)) {
./nginx/src/core/ngx_open_file_cache.c-220-                goto failed;
./nginx/src/core/ngx_open_file_cache.c-221-            }
./nginx/src/core/ngx_open_file_cache.c-222-
./nginx/src/core/ngx_open_file_cache.c-223-            goto add_event;
./nginx/src/core/ngx_open_file_cache.c-224-        }
./nginx/src/core/ngx_open_file_cache.c-225-
./nginx/src/core/ngx_open_file_cache.c-226-        if (file->use_event
./nginx/src/core/ngx_open_file_cache.c-227-            || (file->event == NULL
--
./nginx/src/core/ngx_open_file_cache.c-241-                of->size = file->size;
./nginx/src/core/ngx_open_file_cache.c-242-
./nginx/src/core/ngx_open_file_cache.c-243-                of->is_dir = file->is_dir;
./nginx/src/core/ngx_open_file_cache.c-244-                of->is_file = file->is_file;
./nginx/src/core/ngx_open_file_cache.c-245-                of->is_link = file->is_link;
./nginx/src/core/ngx_open_file_cache.c-246-                of->is_exec = file->is_exec;
./nginx/src/core/ngx_open_file_cache.c-247-                of->is_directio = file->is_directio;
./nginx/src/core/ngx_open_file_cache.c-248-
./nginx/src/core/ngx_open_file_cache.c-249-                if (!file->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-250-                    file->count++;
./nginx/src/core/ngx_open_file_cache.c:251:                    ngx_open_file_add_event(cache, file, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-252-                }
./nginx/src/core/ngx_open_file_cache.c-253-
./nginx/src/core/ngx_open_file_cache.c-254-            } else {
./nginx/src/core/ngx_open_file_cache.c-255-                of->err = file->err;
./nginx/src/core/ngx_open_file_cache.c-256-#if (NGX_HAVE_OPENAT)
./nginx/src/core/ngx_open_file_cache.c-257-                of->failed = file->disable_symlinks ? ngx_openat_file_n
./nginx/src/core/ngx_open_file_cache.c-258-                                                    : ngx_open_file_n;
./nginx/src/core/ngx_open_file_cache.c-259-#else
./nginx/src/core/ngx_open_file_cache.c-260-                of->failed = ngx_open_file_n;
./nginx/src/core/ngx_open_file_cache.c-261-#endif
./nginx/src/core/ngx_open_file_cache.c-262-            }
./nginx/src/core/ngx_open_file_cache.c-263-
./nginx/src/core/ngx_open_file_cache.c-264-            goto found;
./nginx/src/core/ngx_open_file_cache.c-265-        }
./nginx/src/core/ngx_open_file_cache.c-266-
./nginx/src/core/ngx_open_file_cache.c:267:        ngx_log_debug4(NGX_LOG_DEBUG_CORE, pool->log, 0,
./nginx/src/core/ngx_open_file_cache.c-268-                       "retest open file: %s, fd:%d, c:%d, e:%d",
./nginx/src/core/ngx_open_file_cache.c-269-                       file->name, file->fd, file->count, file->err);
./nginx/src/core/ngx_open_file_cache.c-270-
./nginx/src/core/ngx_open_file_cache.c-271-        if (file->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-272-
./nginx/src/core/ngx_open_file_cache.c-273-            /*
./nginx/src/core/ngx_open_file_cache.c-274-             * chances that directory became file are very small
./nginx/src/core/ngx_open_file_cache.c-275-             * so test_dir flag allows to use a single syscall
./nginx/src/core/ngx_open_file_cache.c-276-             * in ngx_file_info() instead of three syscalls
./nginx/src/core/ngx_open_file_cache.c-277-             */
./nginx/src/core/ngx_open_file_cache.c-278-
./nginx/src/core/ngx_open_file_cache.c-279-            of->test_dir = 1;
./nginx/src/core/ngx_open_file_cache.c-280-        }
./nginx/src/core/ngx_open_file_cache.c-281-
./nginx/src/core/ngx_open_file_cache.c-282-        of->fd = file->fd;
./nginx/src/core/ngx_open_file_cache.c-283-        of->uniq = file->uniq;
./nginx/src/core/ngx_open_file_cache.c-284-
./nginx/src/core/ngx_open_file_cache.c:285:        rc = ngx_open_and_stat_file(name, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-286-
./nginx/src/core/ngx_open_file_cache.c-287-        if (rc != NGX_OK && (of->err == 0 || !of->errors)) {
./nginx/src/core/ngx_open_file_cache.c-288-            goto failed;
./nginx/src/core/ngx_open_file_cache.c-289-        }
./nginx/src/core/ngx_open_file_cache.c-290-
./nginx/src/core/ngx_open_file_cache.c-291-        if (of->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-292-
./nginx/src/core/ngx_open_file_cache.c-293-            if (file->is_dir || file->err) {
./nginx/src/core/ngx_open_file_cache.c-294-                goto update;
./nginx/src/core/ngx_open_file_cache.c-295-            }
--
./nginx/src/core/ngx_open_file_cache.c-322-            }
./nginx/src/core/ngx_open_file_cache.c-323-
./nginx/src/core/ngx_open_file_cache.c-324-            /* file was removed, etc. */
./nginx/src/core/ngx_open_file_cache.c-325-        }
./nginx/src/core/ngx_open_file_cache.c-326-
./nginx/src/core/ngx_open_file_cache.c-327-        if (file->count == 0) {
./nginx/src/core/ngx_open_file_cache.c-328-
./nginx/src/core/ngx_open_file_cache.c-329-            ngx_open_file_del_event(file);
./nginx/src/core/ngx_open_file_cache.c-330-
./nginx/src/core/ngx_open_file_cache.c-331-            if (ngx_close_file(file->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_open_file_cache.c:332:                ngx_log_error(NGX_LOG_ALERT, pool->log, ngx_errno,
./nginx/src/core/ngx_open_file_cache.c-333-                              ngx_close_file_n " \"%V\" failed", name);
./nginx/src/core/ngx_open_file_cache.c-334-            }
./nginx/src/core/ngx_open_file_cache.c-335-
./nginx/src/core/ngx_open_file_cache.c-336-            goto add_event;
./nginx/src/core/ngx_open_file_cache.c-337-        }
./nginx/src/core/ngx_open_file_cache.c-338-
./nginx/src/core/ngx_open_file_cache.c-339-        ngx_rbtree_delete(&cache->rbtree, &file->node);
./nginx/src/core/ngx_open_file_cache.c-340-
./nginx/src/core/ngx_open_file_cache.c-341-        cache->current--;
./nginx/src/core/ngx_open_file_cache.c-342-
./nginx/src/core/ngx_open_file_cache.c-343-        file->close = 1;
./nginx/src/core/ngx_open_file_cache.c-344-
./nginx/src/core/ngx_open_file_cache.c-345-        goto create;
./nginx/src/core/ngx_open_file_cache.c-346-    }
./nginx/src/core/ngx_open_file_cache.c-347-
./nginx/src/core/ngx_open_file_cache.c-348-    /* not found */
./nginx/src/core/ngx_open_file_cache.c-349-
./nginx/src/core/ngx_open_file_cache.c:350:    rc = ngx_open_and_stat_file(name, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-351-
./nginx/src/core/ngx_open_file_cache.c-352-    if (rc != NGX_OK && (of->err == 0 || !of->errors)) {
./nginx/src/core/ngx_open_file_cache.c-353-        goto failed;
./nginx/src/core/ngx_open_file_cache.c-354-    }
./nginx/src/core/ngx_open_file_cache.c-355-
./nginx/src/core/ngx_open_file_cache.c-356-create:
./nginx/src/core/ngx_open_file_cache.c-357-
./nginx/src/core/ngx_open_file_cache.c-358-    if (cache->current >= cache->max) {
./nginx/src/core/ngx_open_file_cache.c:359:        ngx_expire_old_cached_files(cache, 0, pool->log);
./nginx/src/core/ngx_open_file_cache.c-360-    }
./nginx/src/core/ngx_open_file_cache.c-361-
./nginx/src/core/ngx_open_file_cache.c:362:    file = ngx_alloc(sizeof(ngx_cached_open_file_t), pool->log);
./nginx/src/core/ngx_open_file_cache.c-363-
./nginx/src/core/ngx_open_file_cache.c-364-    if (file == NULL) {
./nginx/src/core/ngx_open_file_cache.c-365-        goto failed;
./nginx/src/core/ngx_open_file_cache.c-366-    }
./nginx/src/core/ngx_open_file_cache.c-367-
./nginx/src/core/ngx_open_file_cache.c:368:    file->name = ngx_alloc(name->len + 1, pool->log);
./nginx/src/core/ngx_open_file_cache.c-369-
./nginx/src/core/ngx_open_file_cache.c-370-    if (file->name == NULL) {
./nginx/src/core/ngx_open_file_cache.c-371-        ngx_free(file);
./nginx/src/core/ngx_open_file_cache.c-372-        file = NULL;
./nginx/src/core/ngx_open_file_cache.c-373-        goto failed;
./nginx/src/core/ngx_open_file_cache.c-374-    }
./nginx/src/core/ngx_open_file_cache.c-375-
./nginx/src/core/ngx_open_file_cache.c-376-    ngx_cpystrn(file->name, name->data, name->len + 1);
./nginx/src/core/ngx_open_file_cache.c-377-
./nginx/src/core/ngx_open_file_cache.c-378-    file->node.key = hash;
--
./nginx/src/core/ngx_open_file_cache.c-381-
./nginx/src/core/ngx_open_file_cache.c-382-    cache->current++;
./nginx/src/core/ngx_open_file_cache.c-383-
./nginx/src/core/ngx_open_file_cache.c-384-    file->uses = 1;
./nginx/src/core/ngx_open_file_cache.c-385-    file->count = 0;
./nginx/src/core/ngx_open_file_cache.c-386-    file->use_event = 0;
./nginx/src/core/ngx_open_file_cache.c-387-    file->event = NULL;
./nginx/src/core/ngx_open_file_cache.c-388-
./nginx/src/core/ngx_open_file_cache.c-389-add_event:
./nginx/src/core/ngx_open_file_cache.c-390-
./nginx/src/core/ngx_open_file_cache.c:391:    ngx_open_file_add_event(cache, file, of, pool->log);
./nginx/src/core/ngx_open_file_cache.c-392-
./nginx/src/core/ngx_open_file_cache.c-393-update:
./nginx/src/core/ngx_open_file_cache.c-394-
./nginx/src/core/ngx_open_file_cache.c-395-    file->fd = of->fd;
./nginx/src/core/ngx_open_file_cache.c-396-    file->err = of->err;
./nginx/src/core/ngx_open_file_cache.c-397-#if (NGX_HAVE_OPENAT)
./nginx/src/core/ngx_open_file_cache.c-398-    file->disable_symlinks = of->disable_symlinks;
./nginx/src/core/ngx_open_file_cache.c-399-    file->disable_symlinks_from = of->disable_symlinks_from;
./nginx/src/core/ngx_open_file_cache.c-400-#endif
./nginx/src/core/ngx_open_file_cache.c-401-
--
./nginx/src/core/ngx_open_file_cache.c-418-    }
./nginx/src/core/ngx_open_file_cache.c-419-
./nginx/src/core/ngx_open_file_cache.c-420-    file->created = now;
./nginx/src/core/ngx_open_file_cache.c-421-
./nginx/src/core/ngx_open_file_cache.c-422-found:
./nginx/src/core/ngx_open_file_cache.c-423-
./nginx/src/core/ngx_open_file_cache.c-424-    file->accessed = now;
./nginx/src/core/ngx_open_file_cache.c-425-
./nginx/src/core/ngx_open_file_cache.c-426-    ngx_queue_insert_head(&cache->expire_queue, &file->queue);
./nginx/src/core/ngx_open_file_cache.c-427-
./nginx/src/core/ngx_open_file_cache.c:428:    ngx_log_debug5(NGX_LOG_DEBUG_CORE, pool->log, 0,
./nginx/src/core/ngx_open_file_cache.c-429-                   "cached open file: %s, fd:%d, c:%d, e:%d, u:%d",
./nginx/src/core/ngx_open_file_cache.c-430-                   file->name, file->fd, file->count, file->err, file->uses);
./nginx/src/core/ngx_open_file_cache.c-431-
./nginx/src/core/ngx_open_file_cache.c-432-    if (of->err == 0) {
./nginx/src/core/ngx_open_file_cache.c-433-
./nginx/src/core/ngx_open_file_cache.c-434-        if (!of->is_dir) {
./nginx/src/core/ngx_open_file_cache.c-435-            cln->handler = ngx_open_file_cleanup;
./nginx/src/core/ngx_open_file_cache.c-436-            ofcln = cln->data;
./nginx/src/core/ngx_open_file_cache.c-437-
./nginx/src/core/ngx_open_file_cache.c-438-            ofcln->cache = cache;
./nginx/src/core/ngx_open_file_cache.c-439-            ofcln->file = file;
./nginx/src/core/ngx_open_file_cache.c-440-            ofcln->min_uses = of->min_uses;
./nginx/src/core/ngx_open_file_cache.c:441:            ofcln->log = pool->log;
./nginx/src/core/ngx_open_file_cache.c-442-        }
./nginx/src/core/ngx_open_file_cache.c-443-
./nginx/src/core/ngx_open_file_cache.c-444-        return NGX_OK;
./nginx/src/core/ngx_open_file_cache.c-445-    }
./nginx/src/core/ngx_open_file_cache.c-446-
./nginx/src/core/ngx_open_file_cache.c-447-    return NGX_ERROR;
./nginx/src/core/ngx_open_file_cache.c-448-
./nginx/src/core/ngx_open_file_cache.c-449-failed:
./nginx/src/core/ngx_open_file_cache.c-450-
./nginx/src/core/ngx_open_file_cache.c-451-    if (file) {
./nginx/src/core/ngx_open_file_cache.c-452-        ngx_rbtree_delete(&cache->rbtree, &file->node);
./nginx/src/core/ngx_open_file_cache.c-453-
./nginx/src/core/ngx_open_file_cache.c-454-        cache->current--;
./nginx/src/core/ngx_open_file_cache.c-455-
./nginx/src/core/ngx_open_file_cache.c-456-        if (file->count == 0) {
./nginx/src/core/ngx_open_file_cache.c-457-
./nginx/src/core/ngx_open_file_cache.c-458-            if (file->fd != NGX_INVALID_FILE) {
./nginx/src/core/ngx_open_file_cache.c-459-                if (ngx_close_file(file->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_open_file_cache.c:460:                    ngx_log_error(NGX_LOG_ALERT, pool->log, ngx_errno,
./nginx/src/core/ngx_open_file_cache.c-461-                                  ngx_close_file_n " \"%s\" failed",
./nginx/src/core/ngx_open_file_cache.c-462-                                  file->name);
./nginx/src/core/ngx_open_file_cache.c-463-                }
./nginx/src/core/ngx_open_file_cache.c-464-            }
./nginx/src/core/ngx_open_file_cache.c-465-
./nginx/src/core/ngx_open_file_cache.c-466-            ngx_free(file->name);
./nginx/src/core/ngx_open_file_cache.c-467-            ngx_free(file);
./nginx/src/core/ngx_open_file_cache.c-468-
./nginx/src/core/ngx_open_file_cache.c-469-        } else {
./nginx/src/core/ngx_open_file_cache.c-470-            file->close = 1;
./nginx/src/core/ngx_open_file_cache.c-471-        }
./nginx/src/core/ngx_open_file_cache.c-472-    }
./nginx/src/core/ngx_open_file_cache.c-473-
./nginx/src/core/ngx_open_file_cache.c-474-    if (of->fd != NGX_INVALID_FILE) {
./nginx/src/core/ngx_open_file_cache.c-475-        if (ngx_close_file(of->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_open_file_cache.c:476:            ngx_log_error(NGX_LOG_ALERT, pool->log, ngx_errno,
./nginx/src/core/ngx_open_file_cache.c-477-                          ngx_close_file_n " \"%V\" failed", name);
./nginx/src/core/ngx_open_file_cache.c-478-        }
./nginx/src/core/ngx_open_file_cache.c-479-    }
./nginx/src/core/ngx_open_file_cache.c-480-
./nginx/src/core/ngx_open_file_cache.c-481-    return NGX_ERROR;
./nginx/src/core/ngx_open_file_cache.c-482-}
./nginx/src/core/ngx_open_file_cache.c-483-
./nginx/src/core/ngx_open_file_cache.c-484-
./nginx/src/core/ngx_open_file_cache.c-485-#if (NGX_HAVE_OPENAT)
./nginx/src/core/ngx_open_file_cache.c-486-
--
./nginx/src/core/ngx_inet.c-2-/*
./nginx/src/core/ngx_inet.c-3- * Copyright (C) Igor Sysoev
./nginx/src/core/ngx_inet.c-4- * Copyright (C) Nginx, Inc.
./nginx/src/core/ngx_inet.c-5- */
./nginx/src/core/ngx_inet.c-6-
./nginx/src/core/ngx_inet.c-7-
./nginx/src/core/ngx_inet.c-8-#include <ngx_config.h>
./nginx/src/core/ngx_inet.c-9-#include <ngx_core.h>
./nginx/src/core/ngx_inet.c-10-
./nginx/src/core/ngx_inet.c-11-
./nginx/src/core/ngx_inet.c:12:static ngx_int_t ngx_parse_unix_domain_url(ngx_pool_t *pool, ngx_url_t *u);
./nginx/src/core/ngx_inet.c:13:static ngx_int_t ngx_parse_inet_url(ngx_pool_t *pool, ngx_url_t *u);
./nginx/src/core/ngx_inet.c:14:static ngx_int_t ngx_parse_inet6_url(ngx_pool_t *pool, ngx_url_t *u);
./nginx/src/core/ngx_inet.c-15-
./nginx/src/core/ngx_inet.c-16-
./nginx/src/core/ngx_inet.c-17-in_addr_t
./nginx/src/core/ngx_inet.c-18-ngx_inet_addr(u_char *text, size_t len)
./nginx/src/core/ngx_inet.c-19-{
./nginx/src/core/ngx_inet.c-20-    u_char      *p, c;
./nginx/src/core/ngx_inet.c-21-    in_addr_t    addr;
./nginx/src/core/ngx_inet.c-22-    ngx_uint_t   octet, n;
./nginx/src/core/ngx_inet.c-23-
./nginx/src/core/ngx_inet.c-24-    addr = 0;
--
./nginx/src/core/ngx_inet.c-445-        }
./nginx/src/core/ngx_inet.c-446-
./nginx/src/core/ngx_inet.c-447-        cidr->u.in.addr &= cidr->u.in.mask;
./nginx/src/core/ngx_inet.c-448-
./nginx/src/core/ngx_inet.c-449-        return NGX_DONE;
./nginx/src/core/ngx_inet.c-450-    }
./nginx/src/core/ngx_inet.c-451-}
./nginx/src/core/ngx_inet.c-452-
./nginx/src/core/ngx_inet.c-453-
./nginx/src/core/ngx_inet.c-454-ngx_int_t
./nginx/src/core/ngx_inet.c:455:ngx_parse_addr(ngx_pool_t *pool, ngx_addr_t *addr, u_char *text, size_t len)
./nginx/src/core/ngx_inet.c-456-{
./nginx/src/core/ngx_inet.c-457-    in_addr_t             inaddr;
./nginx/src/core/ngx_inet.c-458-    ngx_uint_t            family;
./nginx/src/core/ngx_inet.c-459-    struct sockaddr_in   *sin;
./nginx/src/core/ngx_inet.c-460-#if (NGX_HAVE_INET6)
./nginx/src/core/ngx_inet.c-461-    struct in6_addr       inaddr6;
./nginx/src/core/ngx_inet.c-462-    struct sockaddr_in6  *sin6;
./nginx/src/core/ngx_inet.c-463-
./nginx/src/core/ngx_inet.c-464-    /*
./nginx/src/core/ngx_inet.c-465-     * prevent MSVC8 warning:
--
./nginx/src/core/ngx_inet.c-477-#if (NGX_HAVE_INET6)
./nginx/src/core/ngx_inet.c-478-    } else if (ngx_inet6_addr(text, len, inaddr6.s6_addr) == NGX_OK) {
./nginx/src/core/ngx_inet.c-479-        family = AF_INET6;
./nginx/src/core/ngx_inet.c-480-        len = sizeof(struct sockaddr_in6);
./nginx/src/core/ngx_inet.c-481-
./nginx/src/core/ngx_inet.c-482-#endif
./nginx/src/core/ngx_inet.c-483-    } else {
./nginx/src/core/ngx_inet.c-484-        return NGX_DECLINED;
./nginx/src/core/ngx_inet.c-485-    }
./nginx/src/core/ngx_inet.c-486-
./nginx/src/core/ngx_inet.c:487:    addr->sockaddr = ngx_pcalloc(pool, len);
./nginx/src/core/ngx_inet.c-488-    if (addr->sockaddr == NULL) {
./nginx/src/core/ngx_inet.c-489-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-490-    }
./nginx/src/core/ngx_inet.c-491-
./nginx/src/core/ngx_inet.c-492-    addr->sockaddr->sa_family = (u_char) family;
./nginx/src/core/ngx_inet.c-493-    addr->socklen = len;
./nginx/src/core/ngx_inet.c-494-
./nginx/src/core/ngx_inet.c-495-    switch (family) {
./nginx/src/core/ngx_inet.c-496-
./nginx/src/core/ngx_inet.c-497-#if (NGX_HAVE_INET6)
--
./nginx/src/core/ngx_inet.c-505-        sin = (struct sockaddr_in *) addr->sockaddr;
./nginx/src/core/ngx_inet.c-506-        sin->sin_addr.s_addr = inaddr;
./nginx/src/core/ngx_inet.c-507-        break;
./nginx/src/core/ngx_inet.c-508-    }
./nginx/src/core/ngx_inet.c-509-
./nginx/src/core/ngx_inet.c-510-    return NGX_OK;
./nginx/src/core/ngx_inet.c-511-}
./nginx/src/core/ngx_inet.c-512-
./nginx/src/core/ngx_inet.c-513-
./nginx/src/core/ngx_inet.c-514-ngx_int_t
./nginx/src/core/ngx_inet.c:515:ngx_parse_url(ngx_pool_t *pool, ngx_url_t *u)
./nginx/src/core/ngx_inet.c-516-{
./nginx/src/core/ngx_inet.c-517-    u_char  *p;
./nginx/src/core/ngx_inet.c-518-
./nginx/src/core/ngx_inet.c-519-    p = u->url.data;
./nginx/src/core/ngx_inet.c-520-
./nginx/src/core/ngx_inet.c-521-    if (ngx_strncasecmp(p, (u_char *) "unix:", 5) == 0) {
./nginx/src/core/ngx_inet.c:522:        return ngx_parse_unix_domain_url(pool, u);
./nginx/src/core/ngx_inet.c-523-    }
./nginx/src/core/ngx_inet.c-524-
./nginx/src/core/ngx_inet.c-525-    if (p[0] == '[') {
./nginx/src/core/ngx_inet.c:526:        return ngx_parse_inet6_url(pool, u);
./nginx/src/core/ngx_inet.c-527-    }
./nginx/src/core/ngx_inet.c-528-
./nginx/src/core/ngx_inet.c:529:    return ngx_parse_inet_url(pool, u);
./nginx/src/core/ngx_inet.c-530-}
./nginx/src/core/ngx_inet.c-531-
./nginx/src/core/ngx_inet.c-532-
./nginx/src/core/ngx_inet.c-533-static ngx_int_t
./nginx/src/core/ngx_inet.c:534:ngx_parse_unix_domain_url(ngx_pool_t *pool, ngx_url_t *u)
./nginx/src/core/ngx_inet.c-535-{
./nginx/src/core/ngx_inet.c-536-#if (NGX_HAVE_UNIX_DOMAIN)
./nginx/src/core/ngx_inet.c-537-    u_char              *path, *uri, *last;
./nginx/src/core/ngx_inet.c-538-    size_t               len;
./nginx/src/core/ngx_inet.c-539-    struct sockaddr_un  *saun;
./nginx/src/core/ngx_inet.c-540-
./nginx/src/core/ngx_inet.c-541-    len = u->url.len;
./nginx/src/core/ngx_inet.c-542-    path = u->url.data;
./nginx/src/core/ngx_inet.c-543-
./nginx/src/core/ngx_inet.c-544-    path += 5;
--
./nginx/src/core/ngx_inet.c-568-    if (len > sizeof(saun->sun_path)) {
./nginx/src/core/ngx_inet.c-569-        u->err = "too long path in the unix domain socket";
./nginx/src/core/ngx_inet.c-570-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-571-    }
./nginx/src/core/ngx_inet.c-572-
./nginx/src/core/ngx_inet.c-573-    u->socklen = sizeof(struct sockaddr_un);
./nginx/src/core/ngx_inet.c-574-    saun = (struct sockaddr_un *) &u->sockaddr;
./nginx/src/core/ngx_inet.c-575-    saun->sun_family = AF_UNIX;
./nginx/src/core/ngx_inet.c-576-    (void) ngx_cpystrn((u_char *) saun->sun_path, path, len);
./nginx/src/core/ngx_inet.c-577-
./nginx/src/core/ngx_inet.c:578:    u->addrs = ngx_pcalloc(pool, sizeof(ngx_addr_t));
./nginx/src/core/ngx_inet.c-579-    if (u->addrs == NULL) {
./nginx/src/core/ngx_inet.c-580-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-581-    }
./nginx/src/core/ngx_inet.c-582-
./nginx/src/core/ngx_inet.c:583:    saun = ngx_pcalloc(pool, sizeof(struct sockaddr_un));
./nginx/src/core/ngx_inet.c-584-    if (saun == NULL) {
./nginx/src/core/ngx_inet.c-585-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-586-    }
./nginx/src/core/ngx_inet.c-587-
./nginx/src/core/ngx_inet.c-588-    u->family = AF_UNIX;
./nginx/src/core/ngx_inet.c-589-    u->naddrs = 1;
./nginx/src/core/ngx_inet.c-590-
./nginx/src/core/ngx_inet.c-591-    saun->sun_family = AF_UNIX;
./nginx/src/core/ngx_inet.c-592-    (void) ngx_cpystrn((u_char *) saun->sun_path, path, len);
./nginx/src/core/ngx_inet.c-593-
--
./nginx/src/core/ngx_inet.c-602-
./nginx/src/core/ngx_inet.c-603-    u->err = "the unix domain sockets are not supported on this platform";
./nginx/src/core/ngx_inet.c-604-
./nginx/src/core/ngx_inet.c-605-    return NGX_ERROR;
./nginx/src/core/ngx_inet.c-606-
./nginx/src/core/ngx_inet.c-607-#endif
./nginx/src/core/ngx_inet.c-608-}
./nginx/src/core/ngx_inet.c-609-
./nginx/src/core/ngx_inet.c-610-
./nginx/src/core/ngx_inet.c-611-static ngx_int_t
./nginx/src/core/ngx_inet.c:612:ngx_parse_inet_url(ngx_pool_t *pool, ngx_url_t *u)
./nginx/src/core/ngx_inet.c-613-{
./nginx/src/core/ngx_inet.c-614-    u_char              *p, *host, *port, *last, *uri, *args;
./nginx/src/core/ngx_inet.c-615-    size_t               len;
./nginx/src/core/ngx_inet.c-616-    ngx_int_t            n;
./nginx/src/core/ngx_inet.c-617-    struct hostent      *h;
./nginx/src/core/ngx_inet.c-618-    struct sockaddr_in  *sin;
./nginx/src/core/ngx_inet.c-619-
./nginx/src/core/ngx_inet.c-620-    u->socklen = sizeof(struct sockaddr_in);
./nginx/src/core/ngx_inet.c-621-    sin = (struct sockaddr_in *) &u->sockaddr;
./nginx/src/core/ngx_inet.c-622-    sin->sin_family = AF_INET;
--
./nginx/src/core/ngx_inet.c-722-    u->host.data = host;
./nginx/src/core/ngx_inet.c-723-
./nginx/src/core/ngx_inet.c-724-    if (u->no_resolve) {
./nginx/src/core/ngx_inet.c-725-        return NGX_OK;
./nginx/src/core/ngx_inet.c-726-    }
./nginx/src/core/ngx_inet.c-727-
./nginx/src/core/ngx_inet.c-728-    if (len) {
./nginx/src/core/ngx_inet.c-729-        sin->sin_addr.s_addr = ngx_inet_addr(host, len);
./nginx/src/core/ngx_inet.c-730-
./nginx/src/core/ngx_inet.c-731-        if (sin->sin_addr.s_addr == INADDR_NONE) {
./nginx/src/core/ngx_inet.c:732:            p = ngx_alloc(++len, pool->log);
./nginx/src/core/ngx_inet.c-733-            if (p == NULL) {
./nginx/src/core/ngx_inet.c-734-                return NGX_ERROR;
./nginx/src/core/ngx_inet.c-735-            }
./nginx/src/core/ngx_inet.c-736-
./nginx/src/core/ngx_inet.c-737-            (void) ngx_cpystrn(p, host, len);
./nginx/src/core/ngx_inet.c-738-
./nginx/src/core/ngx_inet.c-739-            h = gethostbyname((const char *) p);
./nginx/src/core/ngx_inet.c-740-
./nginx/src/core/ngx_inet.c-741-            ngx_free(p);
./nginx/src/core/ngx_inet.c-742-
--
./nginx/src/core/ngx_inet.c-759-
./nginx/src/core/ngx_inet.c-760-    if (u->no_port) {
./nginx/src/core/ngx_inet.c-761-        u->port = u->default_port;
./nginx/src/core/ngx_inet.c-762-        sin->sin_port = htons(u->default_port);
./nginx/src/core/ngx_inet.c-763-    }
./nginx/src/core/ngx_inet.c-764-
./nginx/src/core/ngx_inet.c-765-    if (u->listen) {
./nginx/src/core/ngx_inet.c-766-        return NGX_OK;
./nginx/src/core/ngx_inet.c-767-    }
./nginx/src/core/ngx_inet.c-768-
./nginx/src/core/ngx_inet.c:769:    return ngx_inet_resolve_host(pool, u);
./nginx/src/core/ngx_inet.c-770-}
./nginx/src/core/ngx_inet.c-771-
./nginx/src/core/ngx_inet.c-772-
./nginx/src/core/ngx_inet.c-773-static ngx_int_t
./nginx/src/core/ngx_inet.c:774:ngx_parse_inet6_url(ngx_pool_t *pool, ngx_url_t *u)
./nginx/src/core/ngx_inet.c-775-{
./nginx/src/core/ngx_inet.c-776-#if (NGX_HAVE_INET6)
./nginx/src/core/ngx_inet.c-777-    u_char               *p, *host, *port, *last, *uri;
./nginx/src/core/ngx_inet.c-778-    size_t                len;
./nginx/src/core/ngx_inet.c-779-    ngx_int_t             n;
./nginx/src/core/ngx_inet.c-780-    struct sockaddr_in6  *sin6;
./nginx/src/core/ngx_inet.c-781-
./nginx/src/core/ngx_inet.c-782-    u->socklen = sizeof(struct sockaddr_in6);
./nginx/src/core/ngx_inet.c-783-    sin6 = (struct sockaddr_in6 *) &u->sockaddr;
./nginx/src/core/ngx_inet.c-784-    sin6->sin6_family = AF_INET6;
--
./nginx/src/core/ngx_inet.c-855-    }
./nginx/src/core/ngx_inet.c-856-
./nginx/src/core/ngx_inet.c-857-    if (u->no_port) {
./nginx/src/core/ngx_inet.c-858-        u->port = u->default_port;
./nginx/src/core/ngx_inet.c-859-        sin6->sin6_port = htons(u->default_port);
./nginx/src/core/ngx_inet.c-860-    }
./nginx/src/core/ngx_inet.c-861-
./nginx/src/core/ngx_inet.c-862-    u->family = AF_INET6;
./nginx/src/core/ngx_inet.c-863-    u->naddrs = 1;
./nginx/src/core/ngx_inet.c-864-
./nginx/src/core/ngx_inet.c:865:    u->addrs = ngx_pcalloc(pool, sizeof(ngx_addr_t));
./nginx/src/core/ngx_inet.c-866-    if (u->addrs == NULL) {
./nginx/src/core/ngx_inet.c-867-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-868-    }
./nginx/src/core/ngx_inet.c-869-
./nginx/src/core/ngx_inet.c:870:    sin6 = ngx_pcalloc(pool, sizeof(struct sockaddr_in6));
./nginx/src/core/ngx_inet.c-871-    if (sin6 == NULL) {
./nginx/src/core/ngx_inet.c-872-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-873-    }
./nginx/src/core/ngx_inet.c-874-
./nginx/src/core/ngx_inet.c-875-    ngx_memcpy(sin6, u->sockaddr, sizeof(struct sockaddr_in6));
./nginx/src/core/ngx_inet.c-876-
./nginx/src/core/ngx_inet.c-877-    u->addrs[0].sockaddr = (struct sockaddr *) sin6;
./nginx/src/core/ngx_inet.c-878-    u->addrs[0].socklen = sizeof(struct sockaddr_in6);
./nginx/src/core/ngx_inet.c-879-
./nginx/src/core/ngx_inet.c:880:    p = ngx_pnalloc(pool, u->host.len + sizeof(":65535") - 1);
./nginx/src/core/ngx_inet.c-881-    if (p == NULL) {
./nginx/src/core/ngx_inet.c-882-        return NGX_ERROR;
./nginx/src/core/ngx_inet.c-883-    }
./nginx/src/core/ngx_inet.c-884-
./nginx/src/core/ngx_inet.c-885-    u->addrs[0].name.len = ngx_sprintf(p, "%V:%d",
./nginx/src/core/ngx_inet.c-886-                                       &u->host, u->port) - p;
./nginx/src/core/ngx_inet.c-887-    u->addrs[0].name.data = p;
./nginx/src/core/ngx_inet.c-888-
./nginx/src/core/ngx_inet.c-889-    return NGX_OK;
./nginx/src/core/ngx_inet.c-890-
--
./nginx/src/core/ngx_inet.c-892-
./nginx/src/core/ngx_inet.c-893-    u->err = "the INET6 sockets are not supported on this platform";
./nginx/src/core/ngx_inet.c-894-
./nginx/src/core/ngx_inet.c-895-    return NGX_ERROR;
./nginx/src/core/ngx_inet.c-896-
./nginx/src/core/ngx_inet.c-897-#endif
./nginx/src/core/ngx_inet.c-898-}
./nginx/src/core/ngx_inet.c-899-
./nginx/src/core/ngx_inet.c-900-
./nginx/src/core/ngx_inet.c-901-ngx_int_t
./nginx/src/core/ngx_inet.c:902:ngx_inet_resolve_host(ngx_pool_t *pool, ngx_url_t *u)
./nginx/src/core/ngx_inet.c-903-{
./nginx/src/core/ngx_inet.c-904-    u_char              *p, *host;
./nginx/src/core/ngx_inet.c-905-    size_t               len;
./nginx/src/core/ngx_inet.c-906-    in_port_t            port;
./nginx/src/core/ngx_inet.c-907-    in_addr_t            in_addr;
./nginx/src/core/ngx_inet.c-908-    ngx_uint_t           i;
./nginx/src/core/ngx_inet.c-909-    struct hostent      *h;
./nginx/src/core/ngx_inet.c-910-    struct sockaddr_in  *sin;
./nginx/src/core/ngx_inet.c-911-
./nginx/src/core/ngx_inet.c-912-    /* AF_INET only */
./nginx/src/core/ngx_inet.c-913-
./nginx/src/core/ngx_inet.c-914-    port = htons(u->port);
./nginx/src/core/ngx_inet.c-915-
./nginx/src/core/ngx_inet.c-916-    in_addr = ngx_inet_addr(u->host.data, u->host.len);
./nginx/src/core/ngx_inet.c-917-
./nginx/src/core/ngx_inet.c-918-    if (in_addr == INADDR_NONE) {
./nginx/src/core/ngx_inet.c:919:        host = ngx_alloc(u->host.len + 1, pool->log);
./nginx/src/core/ngx_inet.c-920-        if (host == NULL) {
./nginx/src/core/ngx_inet.c-921-            return NGX_ERROR;
./nginx/src/core/ngx_inet.c-922-        }
./nginx/src/core/ngx_inet.c-923-
./nginx/src/core/ngx_inet.c-924-        (void) ngx_cpystrn(host, u->host.data, u->host.len + 1);
./nginx/src/core/ngx_inet.c-925-
./nginx/src/core/ngx_inet.c-926-        h = gethostbyname((char *) host);
./nginx/src/core/ngx_inet.c-927-
./nginx/src/core/ngx_inet.c-928-        ngx_free(host);
./nginx/src/core/ngx_inet.c-929-
--
./nginx/src/core/ngx_inet.c-934-
./nginx/src/core/ngx_inet.c-935-        if (u->one_addr == 0) {
./nginx/src/core/ngx_inet.c-936-            for (i = 0; h->h_addr_list[i] != NULL; i++) { /* void */ }
./nginx/src/core/ngx_inet.c-937-
./nginx/src/core/ngx_inet.c-938-        } else {
./nginx/src/core/ngx_inet.c-939-            i = 1;
./nginx/src/core/ngx_inet.c-940-        }
./nginx/src/core/ngx_inet.c-941-
./nginx/src/core/ngx_inet.c-942-        /* MP: ngx_shared_palloc() */
./nginx/src/core/ngx_inet.c-943-
./nginx/src/core/ngx_inet.c:944:        u->addrs = ngx_pcalloc(pool, i * sizeof(ngx_addr_t));
./nginx/src/core/ngx_inet.c-945-        if (u->addrs == NULL) {
./nginx/src/core/ngx_inet.c-946-            return NGX_ERROR;
./nginx/src/core/ngx_inet.c-947-        }
./nginx/src/core/ngx_inet.c-948-
./nginx/src/core/ngx_inet.c-949-        u->naddrs = i;
./nginx/src/core/ngx_inet.c-950-
./nginx/src/core/ngx_inet.c-951-        for (i = 0; i < u->naddrs; i++) {
./nginx/src/core/ngx_inet.c-952-
./nginx/src/core/ngx_inet.c:953:            sin = ngx_pcalloc(pool, sizeof(struct sockaddr_in));
./nginx/src/core/ngx_inet.c-954-            if (sin == NULL) {
./nginx/src/core/ngx_inet.c-955-                return NGX_ERROR;
./nginx/src/core/ngx_inet.c-956-            }
./nginx/src/core/ngx_inet.c-957-
./nginx/src/core/ngx_inet.c-958-            sin->sin_family = AF_INET;
./nginx/src/core/ngx_inet.c-959-            sin->sin_port = port;
./nginx/src/core/ngx_inet.c-960-            sin->sin_addr.s_addr = *(in_addr_t *) (h->h_addr_list[i]);
./nginx/src/core/ngx_inet.c-961-
./nginx/src/core/ngx_inet.c-962-            u->addrs[i].sockaddr = (struct sockaddr *) sin;
./nginx/src/core/ngx_inet.c-963-            u->addrs[i].socklen = sizeof(struct sockaddr_in);
./nginx/src/core/ngx_inet.c-964-
./nginx/src/core/ngx_inet.c-965-            len = NGX_INET_ADDRSTRLEN + sizeof(":65535") - 1;
./nginx/src/core/ngx_inet.c-966-
./nginx/src/core/ngx_inet.c:967:            p = ngx_pnalloc(pool, len);
./nginx/src/core/ngx_inet.c-968-            if (p == NULL) {
./nginx/src/core/ngx_inet.c-969-                return NGX_ERROR;
./nginx/src/core/ngx_inet.c-970-            }
./nginx/src/core/ngx_inet.c-971-
./nginx/src/core/ngx_inet.c-972-            len = ngx_sock_ntop((struct sockaddr *) sin, p, len, 1);
./nginx/src/core/ngx_inet.c-973-
./nginx/src/core/ngx_inet.c-974-            u->addrs[i].name.len = len;
./nginx/src/core/ngx_inet.c-975-            u->addrs[i].name.data = p;
./nginx/src/core/ngx_inet.c-976-        }
./nginx/src/core/ngx_inet.c-977-
./nginx/src/core/ngx_inet.c-978-    } else {
./nginx/src/core/ngx_inet.c-979-
./nginx/src/core/ngx_inet.c-980-        /* MP: ngx_shared_palloc() */
./nginx/src/core/ngx_inet.c-981-
./nginx/src/core/ngx_inet.c:982:        u->addrs = ngx_pcalloc(pool, sizeof(ngx_addr_t));
./nginx/src/core/ngx_inet.c-983-        if (u->addrs == NULL) {
./nginx/src/core/ngx_inet.c-984-            return NGX_ERROR;
./nginx/src/core/ngx_inet.c-985-        }
./nginx/src/core/ngx_inet.c-986-
./nginx/src/core/ngx_inet.c:987:        sin = ngx_pcalloc(pool, sizeof(struct sockaddr_in));
./nginx/src/core/ngx_inet.c-988-        if (sin == NULL) {
./nginx/src/core/ngx_inet.c-989-            return NGX_ERROR;
./nginx/src/core/ngx_inet.c-990-        }
./nginx/src/core/ngx_inet.c-991-
./nginx/src/core/ngx_inet.c-992-        u->naddrs = 1;
./nginx/src/core/ngx_inet.c-993-
./nginx/src/core/ngx_inet.c-994-        sin->sin_family = AF_INET;
./nginx/src/core/ngx_inet.c-995-        sin->sin_port = port;
./nginx/src/core/ngx_inet.c-996-        sin->sin_addr.s_addr = in_addr;
./nginx/src/core/ngx_inet.c-997-
./nginx/src/core/ngx_inet.c-998-        u->addrs[0].sockaddr = (struct sockaddr *) sin;
./nginx/src/core/ngx_inet.c-999-        u->addrs[0].socklen = sizeof(struct sockaddr_in);
./nginx/src/core/ngx_inet.c-1000-
./nginx/src/core/ngx_inet.c:1001:        p = ngx_pnalloc(pool, u->host.len + sizeof(":65535") - 1);
./nginx/src/core/ngx_inet.c-1002-        if (p == NULL) {
./nginx/src/core/ngx_inet.c-1003-            return NGX_ERROR;
./nginx/src/core/ngx_inet.c-1004-        }
./nginx/src/core/ngx_inet.c-1005-
./nginx/src/core/ngx_inet.c-1006-        u->addrs[0].name.len = ngx_sprintf(p, "%V:%d",
./nginx/src/core/ngx_inet.c-1007-                                           &u->host, ntohs(port)) - p;
./nginx/src/core/ngx_inet.c-1008-        u->addrs[0].name.data = p;
./nginx/src/core/ngx_inet.c-1009-    }
./nginx/src/core/ngx_inet.c-1010-
./nginx/src/core/ngx_inet.c-1011-    return NGX_OK;
--
./nginx/src/core/ngx_log.c-474-
./nginx/src/core/ngx_log.c-475-    return &ngx_log;
./nginx/src/core/ngx_log.c-476-}
./nginx/src/core/ngx_log.c-477-
./nginx/src/core/ngx_log.c-478-
./nginx/src/core/ngx_log.c-479-ngx_log_t *
./nginx/src/core/ngx_log.c-480-ngx_log_create(ngx_cycle_t *cycle, ngx_str_t *name)
./nginx/src/core/ngx_log.c-481-{
./nginx/src/core/ngx_log.c-482-    ngx_log_t  *log;
./nginx/src/core/ngx_log.c-483-
./nginx/src/core/ngx_log.c:484:    log = ngx_pcalloc(cycle->pool, sizeof(ngx_log_t));
./nginx/src/core/ngx_log.c-485-    if (log == NULL) {
./nginx/src/core/ngx_log.c-486-        return NULL;
./nginx/src/core/ngx_log.c-487-    }
./nginx/src/core/ngx_log.c-488-
./nginx/src/core/ngx_log.c-489-    log->file = ngx_conf_open_file(cycle, name);
./nginx/src/core/ngx_log.c-490-    if (log->file == NULL) {
./nginx/src/core/ngx_log.c-491-        return NULL;
./nginx/src/core/ngx_log.c-492-    }
./nginx/src/core/ngx_log.c-493-
./nginx/src/core/ngx_log.c-494-    return log;
--
./nginx/src/core/ngx_palloc.c-2-/*
./nginx/src/core/ngx_palloc.c-3- * Copyright (C) Igor Sysoev
./nginx/src/core/ngx_palloc.c-4- * Copyright (C) Nginx, Inc.
./nginx/src/core/ngx_palloc.c-5- */
./nginx/src/core/ngx_palloc.c-6-
./nginx/src/core/ngx_palloc.c-7-
./nginx/src/core/ngx_palloc.c-8-#include <ngx_config.h>
./nginx/src/core/ngx_palloc.c-9-#include <ngx_core.h>
./nginx/src/core/ngx_palloc.c-10-
./nginx/src/core/ngx_palloc.c-11-
./nginx/src/core/ngx_palloc.c:12:static void *ngx_palloc_block(ngx_pool_t *pool, size_t size);
./nginx/src/core/ngx_palloc.c:13:static void *ngx_palloc_large(ngx_pool_t *pool, size_t size);
./nginx/src/core/ngx_palloc.c-14-
./nginx/src/core/ngx_palloc.c-15-
./nginx/src/core/ngx_palloc.c-16-ngx_pool_t *
./nginx/src/core/ngx_palloc.c-17-ngx_create_pool(size_t size, ngx_log_t *log)
./nginx/src/core/ngx_palloc.c-18-{
./nginx/src/core/ngx_palloc.c-19-    ngx_pool_t  *p;
./nginx/src/core/ngx_palloc.c-20-
./nginx/src/core/ngx_palloc.c-21-    p = ngx_memalign(NGX_POOL_ALIGNMENT, size, log);
./nginx/src/core/ngx_palloc.c-22-    if (p == NULL) {
./nginx/src/core/ngx_palloc.c-23-        return NULL;
--
./nginx/src/core/ngx_palloc.c-35-    p->chain = NULL;
./nginx/src/core/ngx_palloc.c-36-    p->large = NULL;
./nginx/src/core/ngx_palloc.c-37-    p->cleanup = NULL;
./nginx/src/core/ngx_palloc.c-38-    p->log = log;
./nginx/src/core/ngx_palloc.c-39-
./nginx/src/core/ngx_palloc.c-40-    return p;
./nginx/src/core/ngx_palloc.c-41-}
./nginx/src/core/ngx_palloc.c-42-
./nginx/src/core/ngx_palloc.c-43-
./nginx/src/core/ngx_palloc.c-44-void
./nginx/src/core/ngx_palloc.c:45:ngx_destroy_pool(ngx_pool_t *pool)
./nginx/src/core/ngx_palloc.c-46-{
./nginx/src/core/ngx_palloc.c-47-    ngx_pool_t          *p, *n;
./nginx/src/core/ngx_palloc.c-48-    ngx_pool_large_t    *l;
./nginx/src/core/ngx_palloc.c-49-    ngx_pool_cleanup_t  *c;
./nginx/src/core/ngx_palloc.c-50-
./nginx/src/core/ngx_palloc.c:51:    for (c = pool->cleanup; c; c = c->next) {
./nginx/src/core/ngx_palloc.c-52-        if (c->handler) {
./nginx/src/core/ngx_palloc.c:53:            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
./nginx/src/core/ngx_palloc.c-54-                           "run cleanup: %p", c);
./nginx/src/core/ngx_palloc.c-55-            c->handler(c->data);
./nginx/src/core/ngx_palloc.c-56-        }
./nginx/src/core/ngx_palloc.c-57-    }
./nginx/src/core/ngx_palloc.c-58-
./nginx/src/core/ngx_palloc.c:59:    for (l = pool->large; l; l = l->next) {
./nginx/src/core/ngx_palloc.c-60-
./nginx/src/core/ngx_palloc.c:61:        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0, "free: %p", l->alloc);
./nginx/src/core/ngx_palloc.c-62-
./nginx/src/core/ngx_palloc.c-63-        if (l->alloc) {
./nginx/src/core/ngx_palloc.c-64-            ngx_free(l->alloc);
./nginx/src/core/ngx_palloc.c-65-        }
./nginx/src/core/ngx_palloc.c-66-    }
./nginx/src/core/ngx_palloc.c-67-
./nginx/src/core/ngx_palloc.c-68-#if (NGX_DEBUG)
./nginx/src/core/ngx_palloc.c-69-
./nginx/src/core/ngx_palloc.c-70-    /*
./nginx/src/core/ngx_palloc.c:71:     * we could allocate the pool->log from this pool
./nginx/src/core/ngx_palloc.c:72:     * so we cannot use this log while free()ing the pool
./nginx/src/core/ngx_palloc.c-73-     */
./nginx/src/core/ngx_palloc.c-74-
./nginx/src/core/ngx_palloc.c:75:    for (p = pool, n = pool->d.next; /* void */; p = n, n = n->d.next) {
./nginx/src/core/ngx_palloc.c:76:        ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
./nginx/src/core/ngx_palloc.c-77-                       "free: %p, unused: %uz", p, p->d.end - p->d.last);
./nginx/src/core/ngx_palloc.c-78-
./nginx/src/core/ngx_palloc.c-79-        if (n == NULL) {
./nginx/src/core/ngx_palloc.c-80-            break;
./nginx/src/core/ngx_palloc.c-81-        }
./nginx/src/core/ngx_palloc.c-82-    }
./nginx/src/core/ngx_palloc.c-83-
./nginx/src/core/ngx_palloc.c-84-#endif
./nginx/src/core/ngx_palloc.c-85-
./nginx/src/core/ngx_palloc.c:86:    for (p = pool, n = pool->d.next; /* void */; p = n, n = n->d.next) {
./nginx/src/core/ngx_palloc.c-87-        ngx_free(p);
./nginx/src/core/ngx_palloc.c-88-
./nginx/src/core/ngx_palloc.c-89-        if (n == NULL) {
./nginx/src/core/ngx_palloc.c-90-            break;
./nginx/src/core/ngx_palloc.c-91-        }
./nginx/src/core/ngx_palloc.c-92-    }
./nginx/src/core/ngx_palloc.c-93-}
./nginx/src/core/ngx_palloc.c-94-
./nginx/src/core/ngx_palloc.c-95-
./nginx/src/core/ngx_palloc.c-96-void
./nginx/src/core/ngx_palloc.c:97:ngx_reset_pool(ngx_pool_t *pool)
./nginx/src/core/ngx_palloc.c-98-{
./nginx/src/core/ngx_palloc.c-99-    ngx_pool_t        *p;
./nginx/src/core/ngx_palloc.c-100-    ngx_pool_large_t  *l;
./nginx/src/core/ngx_palloc.c-101-
./nginx/src/core/ngx_palloc.c:102:    for (l = pool->large; l; l = l->next) {
./nginx/src/core/ngx_palloc.c-103-        if (l->alloc) {
./nginx/src/core/ngx_palloc.c-104-            ngx_free(l->alloc);
./nginx/src/core/ngx_palloc.c-105-        }
./nginx/src/core/ngx_palloc.c-106-    }
./nginx/src/core/ngx_palloc.c-107-
./nginx/src/core/ngx_palloc.c:108:    pool->large = NULL;
./nginx/src/core/ngx_palloc.c-109-
./nginx/src/core/ngx_palloc.c:110:    for (p = pool; p; p = p->d.next) {
./nginx/src/core/ngx_palloc.c-111-        p->d.last = (u_char *) p + sizeof(ngx_pool_t);
./nginx/src/core/ngx_palloc.c-112-    }
./nginx/src/core/ngx_palloc.c-113-}
./nginx/src/core/ngx_palloc.c-114-
./nginx/src/core/ngx_palloc.c-115-
./nginx/src/core/ngx_palloc.c-116-void *
./nginx/src/core/ngx_palloc.c:117:ngx_palloc(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_palloc.c-118-{
./nginx/src/core/ngx_palloc.c-119-    u_char      *m;
./nginx/src/core/ngx_palloc.c-120-    ngx_pool_t  *p;
./nginx/src/core/ngx_palloc.c-121-
./nginx/src/core/ngx_palloc.c:122:    if (size <= pool->max) {
./nginx/src/core/ngx_palloc.c-123-
./nginx/src/core/ngx_palloc.c:124:        p = pool->current;
./nginx/src/core/ngx_palloc.c-125-
./nginx/src/core/ngx_palloc.c-126-        do {
./nginx/src/core/ngx_palloc.c-127-            m = ngx_align_ptr(p->d.last, NGX_ALIGNMENT);
./nginx/src/core/ngx_palloc.c-128-
./nginx/src/core/ngx_palloc.c-129-            if ((size_t) (p->d.end - m) >= size) {
./nginx/src/core/ngx_palloc.c-130-                p->d.last = m + size;
./nginx/src/core/ngx_palloc.c-131-
./nginx/src/core/ngx_palloc.c-132-                return m;
./nginx/src/core/ngx_palloc.c-133-            }
./nginx/src/core/ngx_palloc.c-134-
./nginx/src/core/ngx_palloc.c-135-            p = p->d.next;
./nginx/src/core/ngx_palloc.c-136-
./nginx/src/core/ngx_palloc.c-137-        } while (p);
./nginx/src/core/ngx_palloc.c-138-
./nginx/src/core/ngx_palloc.c:139:        return ngx_palloc_block(pool, size);
./nginx/src/core/ngx_palloc.c-140-    }
./nginx/src/core/ngx_palloc.c-141-
./nginx/src/core/ngx_palloc.c:142:    return ngx_palloc_large(pool, size);
./nginx/src/core/ngx_palloc.c-143-}
./nginx/src/core/ngx_palloc.c-144-
./nginx/src/core/ngx_palloc.c-145-
./nginx/src/core/ngx_palloc.c-146-void *
./nginx/src/core/ngx_palloc.c:147:ngx_pnalloc(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_palloc.c-148-{
./nginx/src/core/ngx_palloc.c-149-    u_char      *m;
./nginx/src/core/ngx_palloc.c-150-    ngx_pool_t  *p;
./nginx/src/core/ngx_palloc.c-151-
./nginx/src/core/ngx_palloc.c:152:    if (size <= pool->max) {
./nginx/src/core/ngx_palloc.c-153-
./nginx/src/core/ngx_palloc.c:154:        p = pool->current;
./nginx/src/core/ngx_palloc.c-155-
./nginx/src/core/ngx_palloc.c-156-        do {
./nginx/src/core/ngx_palloc.c-157-            m = p->d.last;
./nginx/src/core/ngx_palloc.c-158-
./nginx/src/core/ngx_palloc.c-159-            if ((size_t) (p->d.end - m) >= size) {
./nginx/src/core/ngx_palloc.c-160-                p->d.last = m + size;
./nginx/src/core/ngx_palloc.c-161-
./nginx/src/core/ngx_palloc.c-162-                return m;
./nginx/src/core/ngx_palloc.c-163-            }
./nginx/src/core/ngx_palloc.c-164-
./nginx/src/core/ngx_palloc.c-165-            p = p->d.next;
./nginx/src/core/ngx_palloc.c-166-
./nginx/src/core/ngx_palloc.c-167-        } while (p);
./nginx/src/core/ngx_palloc.c-168-
./nginx/src/core/ngx_palloc.c:169:        return ngx_palloc_block(pool, size);
./nginx/src/core/ngx_palloc.c-170-    }
./nginx/src/core/ngx_palloc.c-171-
./nginx/src/core/ngx_palloc.c:172:    return ngx_palloc_large(pool, size);
./nginx/src/core/ngx_palloc.c-173-}
./nginx/src/core/ngx_palloc.c-174-
./nginx/src/core/ngx_palloc.c-175-
./nginx/src/core/ngx_palloc.c-176-static void *
./nginx/src/core/ngx_palloc.c:177:ngx_palloc_block(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_palloc.c-178-{
./nginx/src/core/ngx_palloc.c-179-    u_char      *m;
./nginx/src/core/ngx_palloc.c-180-    size_t       psize;
./nginx/src/core/ngx_palloc.c-181-    ngx_pool_t  *p, *new, *current;
./nginx/src/core/ngx_palloc.c-182-
./nginx/src/core/ngx_palloc.c:183:    psize = (size_t) (pool->d.end - (u_char *) pool);
./nginx/src/core/ngx_palloc.c-184-
./nginx/src/core/ngx_palloc.c:185:    m = ngx_memalign(NGX_POOL_ALIGNMENT, psize, pool->log);
./nginx/src/core/ngx_palloc.c-186-    if (m == NULL) {
./nginx/src/core/ngx_palloc.c-187-        return NULL;
./nginx/src/core/ngx_palloc.c-188-    }
./nginx/src/core/ngx_palloc.c-189-
./nginx/src/core/ngx_palloc.c-190-    new = (ngx_pool_t *) m;
./nginx/src/core/ngx_palloc.c-191-
./nginx/src/core/ngx_palloc.c-192-    new->d.end = m + psize;
./nginx/src/core/ngx_palloc.c-193-    new->d.next = NULL;
./nginx/src/core/ngx_palloc.c-194-    new->d.failed = 0;
./nginx/src/core/ngx_palloc.c-195-
./nginx/src/core/ngx_palloc.c-196-    m += sizeof(ngx_pool_data_t);
./nginx/src/core/ngx_palloc.c-197-    m = ngx_align_ptr(m, NGX_ALIGNMENT);
./nginx/src/core/ngx_palloc.c-198-    new->d.last = m + size;
./nginx/src/core/ngx_palloc.c-199-
./nginx/src/core/ngx_palloc.c:200:    current = pool->current;
./nginx/src/core/ngx_palloc.c-201-
./nginx/src/core/ngx_palloc.c-202-    for (p = current; p->d.next; p = p->d.next) {
./nginx/src/core/ngx_palloc.c-203-        if (p->d.failed++ > 4) {
./nginx/src/core/ngx_palloc.c-204-            current = p->d.next;
./nginx/src/core/ngx_palloc.c-205-        }
./nginx/src/core/ngx_palloc.c-206-    }
./nginx/src/core/ngx_palloc.c-207-
./nginx/src/core/ngx_palloc.c-208-    p->d.next = new;
./nginx/src/core/ngx_palloc.c-209-
./nginx/src/core/ngx_palloc.c:210:    pool->current = current ? current : new;
./nginx/src/core/ngx_palloc.c-211-
./nginx/src/core/ngx_palloc.c-212-    return m;
./nginx/src/core/ngx_palloc.c-213-}
./nginx/src/core/ngx_palloc.c-214-
./nginx/src/core/ngx_palloc.c-215-
./nginx/src/core/ngx_palloc.c-216-static void *
./nginx/src/core/ngx_palloc.c:217:ngx_palloc_large(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_palloc.c-218-{
./nginx/src/core/ngx_palloc.c-219-    void              *p;
./nginx/src/core/ngx_palloc.c-220-    ngx_uint_t         n;
./nginx/src/core/ngx_palloc.c-221-    ngx_pool_large_t  *large;
./nginx/src/core/ngx_palloc.c-222-
./nginx/src/core/ngx_palloc.c:223:    p = ngx_alloc(size, pool->log);
./nginx/src/core/ngx_palloc.c-224-    if (p == NULL) {
./nginx/src/core/ngx_palloc.c-225-        return NULL;
./nginx/src/core/ngx_palloc.c-226-    }
./nginx/src/core/ngx_palloc.c-227-
./nginx/src/core/ngx_palloc.c-228-    n = 0;
./nginx/src/core/ngx_palloc.c-229-
./nginx/src/core/ngx_palloc.c:230:    for (large = pool->large; large; large = large->next) {
./nginx/src/core/ngx_palloc.c-231-        if (large->alloc == NULL) {
./nginx/src/core/ngx_palloc.c-232-            large->alloc = p;
./nginx/src/core/ngx_palloc.c-233-            return p;
./nginx/src/core/ngx_palloc.c-234-        }
./nginx/src/core/ngx_palloc.c-235-
./nginx/src/core/ngx_palloc.c-236-        if (n++ > 3) {
./nginx/src/core/ngx_palloc.c-237-            break;
./nginx/src/core/ngx_palloc.c-238-        }
./nginx/src/core/ngx_palloc.c-239-    }
./nginx/src/core/ngx_palloc.c-240-
./nginx/src/core/ngx_palloc.c:241:    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));
./nginx/src/core/ngx_palloc.c-242-    if (large == NULL) {
./nginx/src/core/ngx_palloc.c-243-        ngx_free(p);
./nginx/src/core/ngx_palloc.c-244-        return NULL;
./nginx/src/core/ngx_palloc.c-245-    }
./nginx/src/core/ngx_palloc.c-246-
./nginx/src/core/ngx_palloc.c-247-    large->alloc = p;
./nginx/src/core/ngx_palloc.c:248:    large->next = pool->large;
./nginx/src/core/ngx_palloc.c:249:    pool->large = large;
./nginx/src/core/ngx_palloc.c-250-
./nginx/src/core/ngx_palloc.c-251-    return p;
./nginx/src/core/ngx_palloc.c-252-}
./nginx/src/core/ngx_palloc.c-253-
./nginx/src/core/ngx_palloc.c-254-
./nginx/src/core/ngx_palloc.c-255-void *
./nginx/src/core/ngx_palloc.c:256:ngx_pmemalign(ngx_pool_t *pool, size_t size, size_t alignment)
./nginx/src/core/ngx_palloc.c-257-{
./nginx/src/core/ngx_palloc.c-258-    void              *p;
./nginx/src/core/ngx_palloc.c-259-    ngx_pool_large_t  *large;
./nginx/src/core/ngx_palloc.c-260-
./nginx/src/core/ngx_palloc.c:261:    p = ngx_memalign(alignment, size, pool->log);
./nginx/src/core/ngx_palloc.c-262-    if (p == NULL) {
./nginx/src/core/ngx_palloc.c-263-        return NULL;
./nginx/src/core/ngx_palloc.c-264-    }
./nginx/src/core/ngx_palloc.c-265-
./nginx/src/core/ngx_palloc.c:266:    large = ngx_palloc(pool, sizeof(ngx_pool_large_t));
./nginx/src/core/ngx_palloc.c-267-    if (large == NULL) {
./nginx/src/core/ngx_palloc.c-268-        ngx_free(p);
./nginx/src/core/ngx_palloc.c-269-        return NULL;
./nginx/src/core/ngx_palloc.c-270-    }
./nginx/src/core/ngx_palloc.c-271-
./nginx/src/core/ngx_palloc.c-272-    large->alloc = p;
./nginx/src/core/ngx_palloc.c:273:    large->next = pool->large;
./nginx/src/core/ngx_palloc.c:274:    pool->large = large;
./nginx/src/core/ngx_palloc.c-275-
./nginx/src/core/ngx_palloc.c-276-    return p;
./nginx/src/core/ngx_palloc.c-277-}
./nginx/src/core/ngx_palloc.c-278-
./nginx/src/core/ngx_palloc.c-279-
./nginx/src/core/ngx_palloc.c-280-ngx_int_t
./nginx/src/core/ngx_palloc.c:281:ngx_pfree(ngx_pool_t *pool, void *p)
./nginx/src/core/ngx_palloc.c-282-{
./nginx/src/core/ngx_palloc.c-283-    ngx_pool_large_t  *l;
./nginx/src/core/ngx_palloc.c-284-
./nginx/src/core/ngx_palloc.c:285:    for (l = pool->large; l; l = l->next) {
./nginx/src/core/ngx_palloc.c-286-        if (p == l->alloc) {
./nginx/src/core/ngx_palloc.c:287:            ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, pool->log, 0,
./nginx/src/core/ngx_palloc.c-288-                           "free: %p", l->alloc);
./nginx/src/core/ngx_palloc.c-289-            ngx_free(l->alloc);
./nginx/src/core/ngx_palloc.c-290-            l->alloc = NULL;
./nginx/src/core/ngx_palloc.c-291-
./nginx/src/core/ngx_palloc.c-292-            return NGX_OK;
./nginx/src/core/ngx_palloc.c-293-        }
./nginx/src/core/ngx_palloc.c-294-    }
./nginx/src/core/ngx_palloc.c-295-
./nginx/src/core/ngx_palloc.c-296-    return NGX_DECLINED;
./nginx/src/core/ngx_palloc.c-297-}
./nginx/src/core/ngx_palloc.c-298-
./nginx/src/core/ngx_palloc.c-299-
./nginx/src/core/ngx_palloc.c-300-void *
./nginx/src/core/ngx_palloc.c:301:ngx_pcalloc(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_palloc.c-302-{
./nginx/src/core/ngx_palloc.c-303-    void *p;
./nginx/src/core/ngx_palloc.c-304-
./nginx/src/core/ngx_palloc.c:305:    p = ngx_palloc(pool, size);
./nginx/src/core/ngx_palloc.c-306-    if (p) {
./nginx/src/core/ngx_palloc.c-307-        ngx_memzero(p, size);
./nginx/src/core/ngx_palloc.c-308-    }
./nginx/src/core/ngx_palloc.c-309-
./nginx/src/core/ngx_palloc.c-310-    return p;
./nginx/src/core/ngx_palloc.c-311-}
./nginx/src/core/ngx_palloc.c-312-
./nginx/src/core/ngx_palloc.c-313-
./nginx/src/core/ngx_palloc.c-314-ngx_pool_cleanup_t *
./nginx/src/core/ngx_palloc.c-315-ngx_pool_cleanup_add(ngx_pool_t *p, size_t size)
--
./nginx/src/core/ngx_radix_tree.c-6-
./nginx/src/core/ngx_radix_tree.c-7-
./nginx/src/core/ngx_radix_tree.c-8-#include <ngx_config.h>
./nginx/src/core/ngx_radix_tree.c-9-#include <ngx_core.h>
./nginx/src/core/ngx_radix_tree.c-10-
./nginx/src/core/ngx_radix_tree.c-11-
./nginx/src/core/ngx_radix_tree.c-12-static ngx_radix_node_t *ngx_radix_alloc(ngx_radix_tree_t *tree);
./nginx/src/core/ngx_radix_tree.c-13-
./nginx/src/core/ngx_radix_tree.c-14-
./nginx/src/core/ngx_radix_tree.c-15-ngx_radix_tree_t *
./nginx/src/core/ngx_radix_tree.c:16:ngx_radix_tree_create(ngx_pool_t *pool, ngx_int_t preallocate)
./nginx/src/core/ngx_radix_tree.c-17-{
./nginx/src/core/ngx_radix_tree.c-18-    uint32_t           key, mask, inc;
./nginx/src/core/ngx_radix_tree.c-19-    ngx_radix_tree_t  *tree;
./nginx/src/core/ngx_radix_tree.c-20-
./nginx/src/core/ngx_radix_tree.c:21:    tree = ngx_palloc(pool, sizeof(ngx_radix_tree_t));
./nginx/src/core/ngx_radix_tree.c-22-    if (tree == NULL) {
./nginx/src/core/ngx_radix_tree.c-23-        return NULL;
./nginx/src/core/ngx_radix_tree.c-24-    }
./nginx/src/core/ngx_radix_tree.c-25-
./nginx/src/core/ngx_radix_tree.c:26:    tree->pool = pool;
./nginx/src/core/ngx_radix_tree.c-27-    tree->free = NULL;
./nginx/src/core/ngx_radix_tree.c-28-    tree->start = NULL;
./nginx/src/core/ngx_radix_tree.c-29-    tree->size = 0;
./nginx/src/core/ngx_radix_tree.c-30-
./nginx/src/core/ngx_radix_tree.c-31-    tree->root = ngx_radix_alloc(tree);
./nginx/src/core/ngx_radix_tree.c-32-    if (tree->root == NULL) {
./nginx/src/core/ngx_radix_tree.c-33-        return NULL;
./nginx/src/core/ngx_radix_tree.c-34-    }
./nginx/src/core/ngx_radix_tree.c-35-
./nginx/src/core/ngx_radix_tree.c-36-    tree->root->right = NULL;
--
./nginx/src/core/ngx_radix_tree.c-465-{
./nginx/src/core/ngx_radix_tree.c-466-    ngx_radix_node_t  *p;
./nginx/src/core/ngx_radix_tree.c-467-
./nginx/src/core/ngx_radix_tree.c-468-    if (tree->free) {
./nginx/src/core/ngx_radix_tree.c-469-        p = tree->free;
./nginx/src/core/ngx_radix_tree.c-470-        tree->free = tree->free->right;
./nginx/src/core/ngx_radix_tree.c-471-        return p;
./nginx/src/core/ngx_radix_tree.c-472-    }
./nginx/src/core/ngx_radix_tree.c-473-
./nginx/src/core/ngx_radix_tree.c-474-    if (tree->size < sizeof(ngx_radix_node_t)) {
./nginx/src/core/ngx_radix_tree.c:475:        tree->start = ngx_pmemalign(tree->pool, ngx_pagesize, ngx_pagesize);
./nginx/src/core/ngx_radix_tree.c-476-        if (tree->start == NULL) {
./nginx/src/core/ngx_radix_tree.c-477-            return NULL;
./nginx/src/core/ngx_radix_tree.c-478-        }
./nginx/src/core/ngx_radix_tree.c-479-
./nginx/src/core/ngx_radix_tree.c-480-        tree->size = ngx_pagesize;
./nginx/src/core/ngx_radix_tree.c-481-    }
./nginx/src/core/ngx_radix_tree.c-482-
./nginx/src/core/ngx_radix_tree.c-483-    p = (ngx_radix_node_t *) tree->start;
./nginx/src/core/ngx_radix_tree.c-484-    tree->start += sizeof(ngx_radix_node_t);
./nginx/src/core/ngx_radix_tree.c-485-    tree->size -= sizeof(ngx_radix_node_t);
--
./nginx/src/core/ngx_slab.c-49-
./nginx/src/core/ngx_slab.c-50-#define ngx_slab_junk(p, size)                                                \
./nginx/src/core/ngx_slab.c-51-    if (ngx_debug_malloc)          ngx_memset(p, 0xA5, size)
./nginx/src/core/ngx_slab.c-52-
./nginx/src/core/ngx_slab.c-53-#else
./nginx/src/core/ngx_slab.c-54-
./nginx/src/core/ngx_slab.c-55-#define ngx_slab_junk(p, size)
./nginx/src/core/ngx_slab.c-56-
./nginx/src/core/ngx_slab.c-57-#endif
./nginx/src/core/ngx_slab.c-58-
./nginx/src/core/ngx_slab.c:59:static ngx_slab_page_t *ngx_slab_alloc_pages(ngx_slab_pool_t *pool,
./nginx/src/core/ngx_slab.c-60-    ngx_uint_t pages);
./nginx/src/core/ngx_slab.c:61:static void ngx_slab_free_pages(ngx_slab_pool_t *pool, ngx_slab_page_t *page,
./nginx/src/core/ngx_slab.c-62-    ngx_uint_t pages);
./nginx/src/core/ngx_slab.c:63:static void ngx_slab_error(ngx_slab_pool_t *pool, ngx_uint_t level,
./nginx/src/core/ngx_slab.c-64-    char *text);
./nginx/src/core/ngx_slab.c-65-
./nginx/src/core/ngx_slab.c-66-
./nginx/src/core/ngx_slab.c-67-static ngx_uint_t  ngx_slab_max_size;
./nginx/src/core/ngx_slab.c-68-static ngx_uint_t  ngx_slab_exact_size;
./nginx/src/core/ngx_slab.c-69-static ngx_uint_t  ngx_slab_exact_shift;
./nginx/src/core/ngx_slab.c-70-
./nginx/src/core/ngx_slab.c-71-
./nginx/src/core/ngx_slab.c-72-void
./nginx/src/core/ngx_slab.c:73:ngx_slab_init(ngx_slab_pool_t *pool)
./nginx/src/core/ngx_slab.c-74-{
./nginx/src/core/ngx_slab.c-75-    u_char           *p;
./nginx/src/core/ngx_slab.c-76-    size_t            size;
./nginx/src/core/ngx_slab.c-77-    ngx_int_t         m;
./nginx/src/core/ngx_slab.c-78-    ngx_uint_t        i, n, pages;
./nginx/src/core/ngx_slab.c-79-    ngx_slab_page_t  *slots;
./nginx/src/core/ngx_slab.c-80-
./nginx/src/core/ngx_slab.c-81-    /* STUB */
./nginx/src/core/ngx_slab.c-82-    if (ngx_slab_max_size == 0) {
./nginx/src/core/ngx_slab.c-83-        ngx_slab_max_size = ngx_pagesize / 2;
./nginx/src/core/ngx_slab.c-84-        ngx_slab_exact_size = ngx_pagesize / (8 * sizeof(uintptr_t));
./nginx/src/core/ngx_slab.c-85-        for (n = ngx_slab_exact_size; n >>= 1; ngx_slab_exact_shift++) {
./nginx/src/core/ngx_slab.c-86-            /* void */
./nginx/src/core/ngx_slab.c-87-        }
./nginx/src/core/ngx_slab.c-88-    }
./nginx/src/core/ngx_slab.c-89-    /**/
./nginx/src/core/ngx_slab.c-90-
./nginx/src/core/ngx_slab.c:91:    pool->min_size = 1 << pool->min_shift;
./nginx/src/core/ngx_slab.c-92-
./nginx/src/core/ngx_slab.c:93:    p = (u_char *) pool + sizeof(ngx_slab_pool_t);
./nginx/src/core/ngx_slab.c:94:    size = pool->end - p;
./nginx/src/core/ngx_slab.c-95-
./nginx/src/core/ngx_slab.c-96-    ngx_slab_junk(p, size);
./nginx/src/core/ngx_slab.c-97-
./nginx/src/core/ngx_slab.c-98-    slots = (ngx_slab_page_t *) p;
./nginx/src/core/ngx_slab.c:99:    n = ngx_pagesize_shift - pool->min_shift;
./nginx/src/core/ngx_slab.c-100-
./nginx/src/core/ngx_slab.c-101-    for (i = 0; i < n; i++) {
./nginx/src/core/ngx_slab.c-102-        slots[i].slab = 0;
./nginx/src/core/ngx_slab.c-103-        slots[i].next = &slots[i];
./nginx/src/core/ngx_slab.c-104-        slots[i].prev = 0;
./nginx/src/core/ngx_slab.c-105-    }
./nginx/src/core/ngx_slab.c-106-
./nginx/src/core/ngx_slab.c-107-    p += n * sizeof(ngx_slab_page_t);
./nginx/src/core/ngx_slab.c-108-
./nginx/src/core/ngx_slab.c-109-    pages = (ngx_uint_t) (size / (ngx_pagesize + sizeof(ngx_slab_page_t)));
./nginx/src/core/ngx_slab.c-110-
./nginx/src/core/ngx_slab.c-111-    ngx_memzero(p, pages * sizeof(ngx_slab_page_t));
./nginx/src/core/ngx_slab.c-112-
./nginx/src/core/ngx_slab.c:113:    pool->pages = (ngx_slab_page_t *) p;
./nginx/src/core/ngx_slab.c-114-
./nginx/src/core/ngx_slab.c:115:    pool->free.prev = 0;
./nginx/src/core/ngx_slab.c:116:    pool->free.next = (ngx_slab_page_t *) p;
./nginx/src/core/ngx_slab.c-117-
./nginx/src/core/ngx_slab.c:118:    pool->pages->slab = pages;
./nginx/src/core/ngx_slab.c:119:    pool->pages->next = &pool->free;
./nginx/src/core/ngx_slab.c:120:    pool->pages->prev = (uintptr_t) &pool->free;
./nginx/src/core/ngx_slab.c-121-
./nginx/src/core/ngx_slab.c:122:    pool->start = (u_char *)
./nginx/src/core/ngx_slab.c-123-                  ngx_align_ptr((uintptr_t) p + pages * sizeof(ngx_slab_page_t),
./nginx/src/core/ngx_slab.c-124-                                 ngx_pagesize);
./nginx/src/core/ngx_slab.c-125-
./nginx/src/core/ngx_slab.c:126:    m = pages - (pool->end - pool->start) / ngx_pagesize;
./nginx/src/core/ngx_slab.c-127-    if (m > 0) {
./nginx/src/core/ngx_slab.c-128-        pages -= m;
./nginx/src/core/ngx_slab.c:129:        pool->pages->slab = pages;
./nginx/src/core/ngx_slab.c-130-    }
./nginx/src/core/ngx_slab.c-131-
./nginx/src/core/ngx_slab.c:132:    pool->log_ctx = &pool->zero;
./nginx/src/core/ngx_slab.c:133:    pool->zero = '\0';
./nginx/src/core/ngx_slab.c-134-}
./nginx/src/core/ngx_slab.c-135-
./nginx/src/core/ngx_slab.c-136-
./nginx/src/core/ngx_slab.c-137-void *
./nginx/src/core/ngx_slab.c:138:ngx_slab_alloc(ngx_slab_pool_t *pool, size_t size)
./nginx/src/core/ngx_slab.c-139-{
./nginx/src/core/ngx_slab.c-140-    void  *p;
./nginx/src/core/ngx_slab.c-141-
./nginx/src/core/ngx_slab.c:142:    ngx_shmtx_lock(&pool->mutex);
./nginx/src/core/ngx_slab.c-143-
./nginx/src/core/ngx_slab.c:144:    p = ngx_slab_alloc_locked(pool, size);
./nginx/src/core/ngx_slab.c-145-
./nginx/src/core/ngx_slab.c:146:    ngx_shmtx_unlock(&pool->mutex);
./nginx/src/core/ngx_slab.c-147-
./nginx/src/core/ngx_slab.c-148-    return p;
./nginx/src/core/ngx_slab.c-149-}
./nginx/src/core/ngx_slab.c-150-
./nginx/src/core/ngx_slab.c-151-
./nginx/src/core/ngx_slab.c-152-void *
./nginx/src/core/ngx_slab.c:153:ngx_slab_alloc_locked(ngx_slab_pool_t *pool, size_t size)
./nginx/src/core/ngx_slab.c-154-{
./nginx/src/core/ngx_slab.c-155-    size_t            s;
./nginx/src/core/ngx_slab.c-156-    uintptr_t         p, n, m, mask, *bitmap;
./nginx/src/core/ngx_slab.c-157-    ngx_uint_t        i, slot, shift, map;
./nginx/src/core/ngx_slab.c-158-    ngx_slab_page_t  *page, *prev, *slots;
./nginx/src/core/ngx_slab.c-159-
./nginx/src/core/ngx_slab.c-160-    if (size >= ngx_slab_max_size) {
./nginx/src/core/ngx_slab.c-161-
./nginx/src/core/ngx_slab.c-162-        ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0,
./nginx/src/core/ngx_slab.c-163-                       "slab alloc: %uz", size);
./nginx/src/core/ngx_slab.c-164-
./nginx/src/core/ngx_slab.c:165:        page = ngx_slab_alloc_pages(pool, (size >> ngx_pagesize_shift)
./nginx/src/core/ngx_slab.c-166-                                          + ((size % ngx_pagesize) ? 1 : 0));
./nginx/src/core/ngx_slab.c-167-        if (page) {
./nginx/src/core/ngx_slab.c:168:            p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:169:            p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-170-
./nginx/src/core/ngx_slab.c-171-        } else {
./nginx/src/core/ngx_slab.c-172-            p = 0;
./nginx/src/core/ngx_slab.c-173-        }
./nginx/src/core/ngx_slab.c-174-
./nginx/src/core/ngx_slab.c-175-        goto done;
./nginx/src/core/ngx_slab.c-176-    }
./nginx/src/core/ngx_slab.c-177-
./nginx/src/core/ngx_slab.c:178:    if (size > pool->min_size) {
./nginx/src/core/ngx_slab.c-179-        shift = 1;
./nginx/src/core/ngx_slab.c-180-        for (s = size - 1; s >>= 1; shift++) { /* void */ }
./nginx/src/core/ngx_slab.c:181:        slot = shift - pool->min_shift;
./nginx/src/core/ngx_slab.c-182-
./nginx/src/core/ngx_slab.c-183-    } else {
./nginx/src/core/ngx_slab.c:184:        size = pool->min_size;
./nginx/src/core/ngx_slab.c:185:        shift = pool->min_shift;
./nginx/src/core/ngx_slab.c-186-        slot = 0;
./nginx/src/core/ngx_slab.c-187-    }
./nginx/src/core/ngx_slab.c-188-
./nginx/src/core/ngx_slab.c-189-    ngx_log_debug2(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0,
./nginx/src/core/ngx_slab.c-190-                   "slab alloc: %uz slot: %ui", size, slot);
./nginx/src/core/ngx_slab.c-191-
./nginx/src/core/ngx_slab.c:192:    slots = (ngx_slab_page_t *) ((u_char *) pool + sizeof(ngx_slab_pool_t));
./nginx/src/core/ngx_slab.c-193-    page = slots[slot].next;
./nginx/src/core/ngx_slab.c-194-
./nginx/src/core/ngx_slab.c-195-    if (page->next != page) {
./nginx/src/core/ngx_slab.c-196-
./nginx/src/core/ngx_slab.c-197-        if (shift < ngx_slab_exact_shift) {
./nginx/src/core/ngx_slab.c-198-
./nginx/src/core/ngx_slab.c-199-            do {
./nginx/src/core/ngx_slab.c:200:                p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:201:                bitmap = (uintptr_t *) (pool->start + p);
./nginx/src/core/ngx_slab.c-202-
./nginx/src/core/ngx_slab.c-203-                map = (1 << (ngx_pagesize_shift - shift))
./nginx/src/core/ngx_slab.c-204-                          / (sizeof(uintptr_t) * 8);
./nginx/src/core/ngx_slab.c-205-
./nginx/src/core/ngx_slab.c-206-                for (n = 0; n < map; n++) {
./nginx/src/core/ngx_slab.c-207-
./nginx/src/core/ngx_slab.c-208-                    if (bitmap[n] != NGX_SLAB_BUSY) {
./nginx/src/core/ngx_slab.c-209-
./nginx/src/core/ngx_slab.c-210-                        for (m = 1, i = 0; m; m <<= 1, i++) {
./nginx/src/core/ngx_slab.c-211-                            if ((bitmap[n] & m)) {
--
./nginx/src/core/ngx_slab.c-261-                        if (page->slab == NGX_SLAB_BUSY) {
./nginx/src/core/ngx_slab.c-262-                            prev = (ngx_slab_page_t *)
./nginx/src/core/ngx_slab.c-263-                                            (page->prev & ~NGX_SLAB_PAGE_MASK);
./nginx/src/core/ngx_slab.c-264-                            prev->next = page->next;
./nginx/src/core/ngx_slab.c-265-                            page->next->prev = page->prev;
./nginx/src/core/ngx_slab.c-266-
./nginx/src/core/ngx_slab.c-267-                            page->next = NULL;
./nginx/src/core/ngx_slab.c-268-                            page->prev = NGX_SLAB_EXACT;
./nginx/src/core/ngx_slab.c-269-                        }
./nginx/src/core/ngx_slab.c-270-
./nginx/src/core/ngx_slab.c:271:                        p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c-272-                        p += i << shift;
./nginx/src/core/ngx_slab.c:273:                        p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-274-
./nginx/src/core/ngx_slab.c-275-                        goto done;
./nginx/src/core/ngx_slab.c-276-                    }
./nginx/src/core/ngx_slab.c-277-                }
./nginx/src/core/ngx_slab.c-278-
./nginx/src/core/ngx_slab.c-279-                page = page->next;
./nginx/src/core/ngx_slab.c-280-
./nginx/src/core/ngx_slab.c-281-            } while (page);
./nginx/src/core/ngx_slab.c-282-
./nginx/src/core/ngx_slab.c-283-        } else { /* shift > ngx_slab_exact_shift */
--
./nginx/src/core/ngx_slab.c-303-                        if ((page->slab & NGX_SLAB_MAP_MASK) == mask) {
./nginx/src/core/ngx_slab.c-304-                            prev = (ngx_slab_page_t *)
./nginx/src/core/ngx_slab.c-305-                                            (page->prev & ~NGX_SLAB_PAGE_MASK);
./nginx/src/core/ngx_slab.c-306-                            prev->next = page->next;
./nginx/src/core/ngx_slab.c-307-                            page->next->prev = page->prev;
./nginx/src/core/ngx_slab.c-308-
./nginx/src/core/ngx_slab.c-309-                            page->next = NULL;
./nginx/src/core/ngx_slab.c-310-                            page->prev = NGX_SLAB_BIG;
./nginx/src/core/ngx_slab.c-311-                        }
./nginx/src/core/ngx_slab.c-312-
./nginx/src/core/ngx_slab.c:313:                        p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c-314-                        p += i << shift;
./nginx/src/core/ngx_slab.c:315:                        p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-316-
./nginx/src/core/ngx_slab.c-317-                        goto done;
./nginx/src/core/ngx_slab.c-318-                    }
./nginx/src/core/ngx_slab.c-319-                }
./nginx/src/core/ngx_slab.c-320-
./nginx/src/core/ngx_slab.c-321-                page = page->next;
./nginx/src/core/ngx_slab.c-322-
./nginx/src/core/ngx_slab.c-323-            } while (page);
./nginx/src/core/ngx_slab.c-324-        }
./nginx/src/core/ngx_slab.c-325-    }
./nginx/src/core/ngx_slab.c-326-
./nginx/src/core/ngx_slab.c:327:    page = ngx_slab_alloc_pages(pool, 1);
./nginx/src/core/ngx_slab.c-328-
./nginx/src/core/ngx_slab.c-329-    if (page) {
./nginx/src/core/ngx_slab.c-330-        if (shift < ngx_slab_exact_shift) {
./nginx/src/core/ngx_slab.c:331:            p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:332:            bitmap = (uintptr_t *) (pool->start + p);
./nginx/src/core/ngx_slab.c-333-
./nginx/src/core/ngx_slab.c-334-            s = 1 << shift;
./nginx/src/core/ngx_slab.c-335-            n = (1 << (ngx_pagesize_shift - shift)) / 8 / s;
./nginx/src/core/ngx_slab.c-336-
./nginx/src/core/ngx_slab.c-337-            if (n == 0) {
./nginx/src/core/ngx_slab.c-338-                n = 1;
./nginx/src/core/ngx_slab.c-339-            }
./nginx/src/core/ngx_slab.c-340-
./nginx/src/core/ngx_slab.c-341-            bitmap[0] = (2 << n) - 1;
./nginx/src/core/ngx_slab.c-342-
--
./nginx/src/core/ngx_slab.c-345-            for (i = 1; i < map; i++) {
./nginx/src/core/ngx_slab.c-346-                bitmap[i] = 0;
./nginx/src/core/ngx_slab.c-347-            }
./nginx/src/core/ngx_slab.c-348-
./nginx/src/core/ngx_slab.c-349-            page->slab = shift;
./nginx/src/core/ngx_slab.c-350-            page->next = &slots[slot];
./nginx/src/core/ngx_slab.c-351-            page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_SMALL;
./nginx/src/core/ngx_slab.c-352-
./nginx/src/core/ngx_slab.c-353-            slots[slot].next = page;
./nginx/src/core/ngx_slab.c-354-
./nginx/src/core/ngx_slab.c:355:            p = ((page - pool->pages) << ngx_pagesize_shift) + s * n;
./nginx/src/core/ngx_slab.c:356:            p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-357-
./nginx/src/core/ngx_slab.c-358-            goto done;
./nginx/src/core/ngx_slab.c-359-
./nginx/src/core/ngx_slab.c-360-        } else if (shift == ngx_slab_exact_shift) {
./nginx/src/core/ngx_slab.c-361-
./nginx/src/core/ngx_slab.c-362-            page->slab = 1;
./nginx/src/core/ngx_slab.c-363-            page->next = &slots[slot];
./nginx/src/core/ngx_slab.c-364-            page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_EXACT;
./nginx/src/core/ngx_slab.c-365-
./nginx/src/core/ngx_slab.c-366-            slots[slot].next = page;
./nginx/src/core/ngx_slab.c-367-
./nginx/src/core/ngx_slab.c:368:            p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:369:            p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-370-
./nginx/src/core/ngx_slab.c-371-            goto done;
./nginx/src/core/ngx_slab.c-372-
./nginx/src/core/ngx_slab.c-373-        } else { /* shift > ngx_slab_exact_shift */
./nginx/src/core/ngx_slab.c-374-
./nginx/src/core/ngx_slab.c-375-            page->slab = ((uintptr_t) 1 << NGX_SLAB_MAP_SHIFT) | shift;
./nginx/src/core/ngx_slab.c-376-            page->next = &slots[slot];
./nginx/src/core/ngx_slab.c-377-            page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_BIG;
./nginx/src/core/ngx_slab.c-378-
./nginx/src/core/ngx_slab.c-379-            slots[slot].next = page;
./nginx/src/core/ngx_slab.c-380-
./nginx/src/core/ngx_slab.c:381:            p = (page - pool->pages) << ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:382:            p += (uintptr_t) pool->start;
./nginx/src/core/ngx_slab.c-383-
./nginx/src/core/ngx_slab.c-384-            goto done;
./nginx/src/core/ngx_slab.c-385-        }
./nginx/src/core/ngx_slab.c-386-    }
./nginx/src/core/ngx_slab.c-387-
./nginx/src/core/ngx_slab.c-388-    p = 0;
./nginx/src/core/ngx_slab.c-389-
./nginx/src/core/ngx_slab.c-390-done:
./nginx/src/core/ngx_slab.c-391-
./nginx/src/core/ngx_slab.c-392-    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0, "slab alloc: %p", p);
./nginx/src/core/ngx_slab.c-393-
./nginx/src/core/ngx_slab.c-394-    return (void *) p;
./nginx/src/core/ngx_slab.c-395-}
./nginx/src/core/ngx_slab.c-396-
./nginx/src/core/ngx_slab.c-397-
./nginx/src/core/ngx_slab.c-398-void
./nginx/src/core/ngx_slab.c:399:ngx_slab_free(ngx_slab_pool_t *pool, void *p)
./nginx/src/core/ngx_slab.c-400-{
./nginx/src/core/ngx_slab.c:401:    ngx_shmtx_lock(&pool->mutex);
./nginx/src/core/ngx_slab.c-402-
./nginx/src/core/ngx_slab.c:403:    ngx_slab_free_locked(pool, p);
./nginx/src/core/ngx_slab.c-404-
./nginx/src/core/ngx_slab.c:405:    ngx_shmtx_unlock(&pool->mutex);
./nginx/src/core/ngx_slab.c-406-}
./nginx/src/core/ngx_slab.c-407-
./nginx/src/core/ngx_slab.c-408-
./nginx/src/core/ngx_slab.c-409-void
./nginx/src/core/ngx_slab.c:410:ngx_slab_free_locked(ngx_slab_pool_t *pool, void *p)
./nginx/src/core/ngx_slab.c-411-{
./nginx/src/core/ngx_slab.c-412-    size_t            size;
./nginx/src/core/ngx_slab.c-413-    uintptr_t         slab, m, *bitmap;
./nginx/src/core/ngx_slab.c-414-    ngx_uint_t        n, type, slot, shift, map;
./nginx/src/core/ngx_slab.c-415-    ngx_slab_page_t  *slots, *page;
./nginx/src/core/ngx_slab.c-416-
./nginx/src/core/ngx_slab.c-417-    ngx_log_debug1(NGX_LOG_DEBUG_ALLOC, ngx_cycle->log, 0, "slab free: %p", p);
./nginx/src/core/ngx_slab.c-418-
./nginx/src/core/ngx_slab.c:419:    if ((u_char *) p < pool->start || (u_char *) p > pool->end) {
./nginx/src/core/ngx_slab.c:420:        ngx_slab_error(pool, NGX_LOG_ALERT, "ngx_slab_free(): outside of pool");
./nginx/src/core/ngx_slab.c-421-        goto fail;
./nginx/src/core/ngx_slab.c-422-    }
./nginx/src/core/ngx_slab.c-423-
./nginx/src/core/ngx_slab.c:424:    n = ((u_char *) p - pool->start) >> ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c:425:    page = &pool->pages[n];
./nginx/src/core/ngx_slab.c-426-    slab = page->slab;
./nginx/src/core/ngx_slab.c-427-    type = page->prev & NGX_SLAB_PAGE_MASK;
./nginx/src/core/ngx_slab.c-428-
./nginx/src/core/ngx_slab.c-429-    switch (type) {
./nginx/src/core/ngx_slab.c-430-
./nginx/src/core/ngx_slab.c-431-    case NGX_SLAB_SMALL:
./nginx/src/core/ngx_slab.c-432-
./nginx/src/core/ngx_slab.c-433-        shift = slab & NGX_SLAB_SHIFT_MASK;
./nginx/src/core/ngx_slab.c-434-        size = 1 << shift;
./nginx/src/core/ngx_slab.c-435-
--
./nginx/src/core/ngx_slab.c-439-
./nginx/src/core/ngx_slab.c-440-        n = ((uintptr_t) p & (ngx_pagesize - 1)) >> shift;
./nginx/src/core/ngx_slab.c-441-        m = (uintptr_t) 1 << (n & (sizeof(uintptr_t) * 8 - 1));
./nginx/src/core/ngx_slab.c-442-        n /= (sizeof(uintptr_t) * 8);
./nginx/src/core/ngx_slab.c-443-        bitmap = (uintptr_t *) ((uintptr_t) p & ~(ngx_pagesize - 1));
./nginx/src/core/ngx_slab.c-444-
./nginx/src/core/ngx_slab.c-445-        if (bitmap[n] & m) {
./nginx/src/core/ngx_slab.c-446-
./nginx/src/core/ngx_slab.c-447-            if (page->next == NULL) {
./nginx/src/core/ngx_slab.c-448-                slots = (ngx_slab_page_t *)
./nginx/src/core/ngx_slab.c:449:                                   ((u_char *) pool + sizeof(ngx_slab_pool_t));
./nginx/src/core/ngx_slab.c:450:                slot = shift - pool->min_shift;
./nginx/src/core/ngx_slab.c-451-
./nginx/src/core/ngx_slab.c-452-                page->next = slots[slot].next;
./nginx/src/core/ngx_slab.c-453-                slots[slot].next = page;
./nginx/src/core/ngx_slab.c-454-
./nginx/src/core/ngx_slab.c-455-                page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_SMALL;
./nginx/src/core/ngx_slab.c-456-                page->next->prev = (uintptr_t) page | NGX_SLAB_SMALL;
./nginx/src/core/ngx_slab.c-457-            }
./nginx/src/core/ngx_slab.c-458-
./nginx/src/core/ngx_slab.c-459-            bitmap[n] &= ~m;
./nginx/src/core/ngx_slab.c-460-
--
./nginx/src/core/ngx_slab.c-469-            }
./nginx/src/core/ngx_slab.c-470-
./nginx/src/core/ngx_slab.c-471-            map = (1 << (ngx_pagesize_shift - shift)) / (sizeof(uintptr_t) * 8);
./nginx/src/core/ngx_slab.c-472-
./nginx/src/core/ngx_slab.c-473-            for (n = 1; n < map; n++) {
./nginx/src/core/ngx_slab.c-474-                if (bitmap[n]) {
./nginx/src/core/ngx_slab.c-475-                    goto done;
./nginx/src/core/ngx_slab.c-476-                }
./nginx/src/core/ngx_slab.c-477-            }
./nginx/src/core/ngx_slab.c-478-
./nginx/src/core/ngx_slab.c:479:            ngx_slab_free_pages(pool, page, 1);
./nginx/src/core/ngx_slab.c-480-
./nginx/src/core/ngx_slab.c-481-            goto done;
./nginx/src/core/ngx_slab.c-482-        }
./nginx/src/core/ngx_slab.c-483-
./nginx/src/core/ngx_slab.c-484-        goto chunk_already_free;
./nginx/src/core/ngx_slab.c-485-
./nginx/src/core/ngx_slab.c-486-    case NGX_SLAB_EXACT:
./nginx/src/core/ngx_slab.c-487-
./nginx/src/core/ngx_slab.c-488-        m = (uintptr_t) 1 <<
./nginx/src/core/ngx_slab.c-489-                (((uintptr_t) p & (ngx_pagesize - 1)) >> ngx_slab_exact_shift);
./nginx/src/core/ngx_slab.c-490-        size = ngx_slab_exact_size;
./nginx/src/core/ngx_slab.c-491-
./nginx/src/core/ngx_slab.c-492-        if ((uintptr_t) p & (size - 1)) {
./nginx/src/core/ngx_slab.c-493-            goto wrong_chunk;
./nginx/src/core/ngx_slab.c-494-        }
./nginx/src/core/ngx_slab.c-495-
./nginx/src/core/ngx_slab.c-496-        if (slab & m) {
./nginx/src/core/ngx_slab.c-497-            if (slab == NGX_SLAB_BUSY) {
./nginx/src/core/ngx_slab.c-498-                slots = (ngx_slab_page_t *)
./nginx/src/core/ngx_slab.c:499:                                   ((u_char *) pool + sizeof(ngx_slab_pool_t));
./nginx/src/core/ngx_slab.c:500:                slot = ngx_slab_exact_shift - pool->min_shift;
./nginx/src/core/ngx_slab.c-501-
./nginx/src/core/ngx_slab.c-502-                page->next = slots[slot].next;
./nginx/src/core/ngx_slab.c-503-                slots[slot].next = page;
./nginx/src/core/ngx_slab.c-504-
./nginx/src/core/ngx_slab.c-505-                page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_EXACT;
./nginx/src/core/ngx_slab.c-506-                page->next->prev = (uintptr_t) page | NGX_SLAB_EXACT;
./nginx/src/core/ngx_slab.c-507-            }
./nginx/src/core/ngx_slab.c-508-
./nginx/src/core/ngx_slab.c-509-            page->slab &= ~m;
./nginx/src/core/ngx_slab.c-510-
./nginx/src/core/ngx_slab.c-511-            if (page->slab) {
./nginx/src/core/ngx_slab.c-512-                goto done;
./nginx/src/core/ngx_slab.c-513-            }
./nginx/src/core/ngx_slab.c-514-
./nginx/src/core/ngx_slab.c:515:            ngx_slab_free_pages(pool, page, 1);
./nginx/src/core/ngx_slab.c-516-
./nginx/src/core/ngx_slab.c-517-            goto done;
./nginx/src/core/ngx_slab.c-518-        }
./nginx/src/core/ngx_slab.c-519-
./nginx/src/core/ngx_slab.c-520-        goto chunk_already_free;
./nginx/src/core/ngx_slab.c-521-
./nginx/src/core/ngx_slab.c-522-    case NGX_SLAB_BIG:
./nginx/src/core/ngx_slab.c-523-
./nginx/src/core/ngx_slab.c-524-        shift = slab & NGX_SLAB_SHIFT_MASK;
./nginx/src/core/ngx_slab.c-525-        size = 1 << shift;
--
./nginx/src/core/ngx_slab.c-528-            goto wrong_chunk;
./nginx/src/core/ngx_slab.c-529-        }
./nginx/src/core/ngx_slab.c-530-
./nginx/src/core/ngx_slab.c-531-        m = (uintptr_t) 1 << ((((uintptr_t) p & (ngx_pagesize - 1)) >> shift)
./nginx/src/core/ngx_slab.c-532-                              + NGX_SLAB_MAP_SHIFT);
./nginx/src/core/ngx_slab.c-533-
./nginx/src/core/ngx_slab.c-534-        if (slab & m) {
./nginx/src/core/ngx_slab.c-535-
./nginx/src/core/ngx_slab.c-536-            if (page->next == NULL) {
./nginx/src/core/ngx_slab.c-537-                slots = (ngx_slab_page_t *)
./nginx/src/core/ngx_slab.c:538:                                   ((u_char *) pool + sizeof(ngx_slab_pool_t));
./nginx/src/core/ngx_slab.c:539:                slot = shift - pool->min_shift;
./nginx/src/core/ngx_slab.c-540-
./nginx/src/core/ngx_slab.c-541-                page->next = slots[slot].next;
./nginx/src/core/ngx_slab.c-542-                slots[slot].next = page;
./nginx/src/core/ngx_slab.c-543-
./nginx/src/core/ngx_slab.c-544-                page->prev = (uintptr_t) &slots[slot] | NGX_SLAB_BIG;
./nginx/src/core/ngx_slab.c-545-                page->next->prev = (uintptr_t) page | NGX_SLAB_BIG;
./nginx/src/core/ngx_slab.c-546-            }
./nginx/src/core/ngx_slab.c-547-
./nginx/src/core/ngx_slab.c-548-            page->slab &= ~m;
./nginx/src/core/ngx_slab.c-549-
./nginx/src/core/ngx_slab.c-550-            if (page->slab & NGX_SLAB_MAP_MASK) {
./nginx/src/core/ngx_slab.c-551-                goto done;
./nginx/src/core/ngx_slab.c-552-            }
./nginx/src/core/ngx_slab.c-553-
./nginx/src/core/ngx_slab.c:554:            ngx_slab_free_pages(pool, page, 1);
./nginx/src/core/ngx_slab.c-555-
./nginx/src/core/ngx_slab.c-556-            goto done;
./nginx/src/core/ngx_slab.c-557-        }
./nginx/src/core/ngx_slab.c-558-
./nginx/src/core/ngx_slab.c-559-        goto chunk_already_free;
./nginx/src/core/ngx_slab.c-560-
./nginx/src/core/ngx_slab.c-561-    case NGX_SLAB_PAGE:
./nginx/src/core/ngx_slab.c-562-
./nginx/src/core/ngx_slab.c-563-        if ((uintptr_t) p & (ngx_pagesize - 1)) {
./nginx/src/core/ngx_slab.c-564-            goto wrong_chunk;
./nginx/src/core/ngx_slab.c-565-        }
./nginx/src/core/ngx_slab.c-566-
./nginx/src/core/ngx_slab.c-567-        if (slab == NGX_SLAB_PAGE_FREE) {
./nginx/src/core/ngx_slab.c:568:            ngx_slab_error(pool, NGX_LOG_ALERT,
./nginx/src/core/ngx_slab.c-569-                           "ngx_slab_free(): page is already free");
./nginx/src/core/ngx_slab.c-570-            goto fail;
./nginx/src/core/ngx_slab.c-571-        }
./nginx/src/core/ngx_slab.c-572-
./nginx/src/core/ngx_slab.c-573-        if (slab == NGX_SLAB_PAGE_BUSY) {
./nginx/src/core/ngx_slab.c:574:            ngx_slab_error(pool, NGX_LOG_ALERT,
./nginx/src/core/ngx_slab.c-575-                           "ngx_slab_free(): pointer to wrong page");
./nginx/src/core/ngx_slab.c-576-            goto fail;
./nginx/src/core/ngx_slab.c-577-        }
./nginx/src/core/ngx_slab.c-578-
./nginx/src/core/ngx_slab.c:579:        n = ((u_char *) p - pool->start) >> ngx_pagesize_shift;
./nginx/src/core/ngx_slab.c-580-        size = slab & ~NGX_SLAB_PAGE_START;
./nginx/src/core/ngx_slab.c-581-
./nginx/src/core/ngx_slab.c:582:        ngx_slab_free_pages(pool, &pool->pages[n], size);
./nginx/src/core/ngx_slab.c-583-
./nginx/src/core/ngx_slab.c-584-        ngx_slab_junk(p, size << ngx_pagesize_shift);
./nginx/src/core/ngx_slab.c-585-
./nginx/src/core/ngx_slab.c-586-        return;
./nginx/src/core/ngx_slab.c-587-    }
./nginx/src/core/ngx_slab.c-588-
./nginx/src/core/ngx_slab.c-589-    /* not reached */
./nginx/src/core/ngx_slab.c-590-
./nginx/src/core/ngx_slab.c-591-    return;
./nginx/src/core/ngx_slab.c-592-
./nginx/src/core/ngx_slab.c-593-done:
./nginx/src/core/ngx_slab.c-594-
./nginx/src/core/ngx_slab.c-595-    ngx_slab_junk(p, size);
./nginx/src/core/ngx_slab.c-596-
./nginx/src/core/ngx_slab.c-597-    return;
./nginx/src/core/ngx_slab.c-598-
./nginx/src/core/ngx_slab.c-599-wrong_chunk:
./nginx/src/core/ngx_slab.c-600-
./nginx/src/core/ngx_slab.c:601:    ngx_slab_error(pool, NGX_LOG_ALERT,
./nginx/src/core/ngx_slab.c-602-                   "ngx_slab_free(): pointer to wrong chunk");
./nginx/src/core/ngx_slab.c-603-
./nginx/src/core/ngx_slab.c-604-    goto fail;
./nginx/src/core/ngx_slab.c-605-
./nginx/src/core/ngx_slab.c-606-chunk_already_free:
./nginx/src/core/ngx_slab.c-607-
./nginx/src/core/ngx_slab.c:608:    ngx_slab_error(pool, NGX_LOG_ALERT,
./nginx/src/core/ngx_slab.c-609-                   "ngx_slab_free(): chunk is already free");
./nginx/src/core/ngx_slab.c-610-
./nginx/src/core/ngx_slab.c-611-fail:
./nginx/src/core/ngx_slab.c-612-
./nginx/src/core/ngx_slab.c-613-    return;
./nginx/src/core/ngx_slab.c-614-}
./nginx/src/core/ngx_slab.c-615-
./nginx/src/core/ngx_slab.c-616-
./nginx/src/core/ngx_slab.c-617-static ngx_slab_page_t *
./nginx/src/core/ngx_slab.c:618:ngx_slab_alloc_pages(ngx_slab_pool_t *pool, ngx_uint_t pages)
./nginx/src/core/ngx_slab.c-619-{
./nginx/src/core/ngx_slab.c-620-    ngx_slab_page_t  *page, *p;
./nginx/src/core/ngx_slab.c-621-
./nginx/src/core/ngx_slab.c:622:    for (page = pool->free.next; page != &pool->free; page = page->next) {
./nginx/src/core/ngx_slab.c-623-
./nginx/src/core/ngx_slab.c-624-        if (page->slab >= pages) {
./nginx/src/core/ngx_slab.c-625-
./nginx/src/core/ngx_slab.c-626-            if (page->slab > pages) {
./nginx/src/core/ngx_slab.c-627-                page[pages].slab = page->slab - pages;
./nginx/src/core/ngx_slab.c-628-                page[pages].next = page->next;
./nginx/src/core/ngx_slab.c-629-                page[pages].prev = page->prev;
./nginx/src/core/ngx_slab.c-630-
./nginx/src/core/ngx_slab.c-631-                p = (ngx_slab_page_t *) page->prev;
./nginx/src/core/ngx_slab.c-632-                p->next = &page[pages];
--
./nginx/src/core/ngx_slab.c-650-                p->slab = NGX_SLAB_PAGE_BUSY;
./nginx/src/core/ngx_slab.c-651-                p->next = NULL;
./nginx/src/core/ngx_slab.c-652-                p->prev = NGX_SLAB_PAGE;
./nginx/src/core/ngx_slab.c-653-                p++;
./nginx/src/core/ngx_slab.c-654-            }
./nginx/src/core/ngx_slab.c-655-
./nginx/src/core/ngx_slab.c-656-            return page;
./nginx/src/core/ngx_slab.c-657-        }
./nginx/src/core/ngx_slab.c-658-    }
./nginx/src/core/ngx_slab.c-659-
./nginx/src/core/ngx_slab.c:660:    ngx_slab_error(pool, NGX_LOG_CRIT, "ngx_slab_alloc() failed: no memory");
./nginx/src/core/ngx_slab.c-661-
./nginx/src/core/ngx_slab.c-662-    return NULL;
./nginx/src/core/ngx_slab.c-663-}
./nginx/src/core/ngx_slab.c-664-
./nginx/src/core/ngx_slab.c-665-
./nginx/src/core/ngx_slab.c-666-static void
./nginx/src/core/ngx_slab.c:667:ngx_slab_free_pages(ngx_slab_pool_t *pool, ngx_slab_page_t *page,
./nginx/src/core/ngx_slab.c-668-    ngx_uint_t pages)
./nginx/src/core/ngx_slab.c-669-{
./nginx/src/core/ngx_slab.c-670-    ngx_slab_page_t  *prev;
./nginx/src/core/ngx_slab.c-671-
./nginx/src/core/ngx_slab.c-672-    page->slab = pages--;
./nginx/src/core/ngx_slab.c-673-
./nginx/src/core/ngx_slab.c-674-    if (pages) {
./nginx/src/core/ngx_slab.c-675-        ngx_memzero(&page[1], pages * sizeof(ngx_slab_page_t));
./nginx/src/core/ngx_slab.c-676-    }
./nginx/src/core/ngx_slab.c-677-
./nginx/src/core/ngx_slab.c-678-    if (page->next) {
./nginx/src/core/ngx_slab.c-679-        prev = (ngx_slab_page_t *) (page->prev & ~NGX_SLAB_PAGE_MASK);
./nginx/src/core/ngx_slab.c-680-        prev->next = page->next;
./nginx/src/core/ngx_slab.c-681-        page->next->prev = page->prev;
./nginx/src/core/ngx_slab.c-682-    }
./nginx/src/core/ngx_slab.c-683-
./nginx/src/core/ngx_slab.c:684:    page->prev = (uintptr_t) &pool->free;
./nginx/src/core/ngx_slab.c:685:    page->next = pool->free.next;
./nginx/src/core/ngx_slab.c-686-
./nginx/src/core/ngx_slab.c-687-    page->next->prev = (uintptr_t) page;
./nginx/src/core/ngx_slab.c-688-
./nginx/src/core/ngx_slab.c:689:    pool->free.next = page;
./nginx/src/core/ngx_slab.c-690-}
./nginx/src/core/ngx_slab.c-691-
./nginx/src/core/ngx_slab.c-692-
./nginx/src/core/ngx_slab.c-693-static void
./nginx/src/core/ngx_slab.c:694:ngx_slab_error(ngx_slab_pool_t *pool, ngx_uint_t level, char *text)
./nginx/src/core/ngx_slab.c-695-{
./nginx/src/core/ngx_slab.c:696:    ngx_log_error(level, ngx_cycle->log, 0, "%s%s", text, pool->log_ctx);
./nginx/src/core/ngx_slab.c-697-}
--
./nginx/src/core/ngx_output_chain.c-22- * Linux allows DIRECTIO only if the parameters are aligned to a filesystem
./nginx/src/core/ngx_output_chain.c-23- * sector boundary, otherwise it returns EINVAL.  The sector size is
./nginx/src/core/ngx_output_chain.c-24- * usually 512 bytes, however, on XFS it may be 4096 bytes.
./nginx/src/core/ngx_output_chain.c-25- */
./nginx/src/core/ngx_output_chain.c-26-
./nginx/src/core/ngx_output_chain.c-27-#define NGX_NONE            1
./nginx/src/core/ngx_output_chain.c-28-
./nginx/src/core/ngx_output_chain.c-29-
./nginx/src/core/ngx_output_chain.c-30-static ngx_inline ngx_int_t
./nginx/src/core/ngx_output_chain.c-31-    ngx_output_chain_as_is(ngx_output_chain_ctx_t *ctx, ngx_buf_t *buf);
./nginx/src/core/ngx_output_chain.c:32:static ngx_int_t ngx_output_chain_add_copy(ngx_pool_t *pool,
./nginx/src/core/ngx_output_chain.c-33-    ngx_chain_t **chain, ngx_chain_t *in);
./nginx/src/core/ngx_output_chain.c-34-static ngx_int_t ngx_output_chain_align_file_buf(ngx_output_chain_ctx_t *ctx,
./nginx/src/core/ngx_output_chain.c-35-    off_t bsize);
./nginx/src/core/ngx_output_chain.c-36-static ngx_int_t ngx_output_chain_get_buf(ngx_output_chain_ctx_t *ctx,
./nginx/src/core/ngx_output_chain.c-37-    off_t bsize);
./nginx/src/core/ngx_output_chain.c-38-static ngx_int_t ngx_output_chain_copy_buf(ngx_output_chain_ctx_t *ctx);
./nginx/src/core/ngx_output_chain.c-39-
./nginx/src/core/ngx_output_chain.c-40-
./nginx/src/core/ngx_output_chain.c-41-ngx_int_t
./nginx/src/core/ngx_output_chain.c-42-ngx_output_chain(ngx_output_chain_ctx_t *ctx, ngx_chain_t *in)
--
./nginx/src/core/ngx_output_chain.c-63-#endif
./nginx/src/core/ngx_output_chain.c-64-            && ngx_output_chain_as_is(ctx, in->buf))
./nginx/src/core/ngx_output_chain.c-65-        {
./nginx/src/core/ngx_output_chain.c-66-            return ctx->output_filter(ctx->filter_ctx, in);
./nginx/src/core/ngx_output_chain.c-67-        }
./nginx/src/core/ngx_output_chain.c-68-    }
./nginx/src/core/ngx_output_chain.c-69-
./nginx/src/core/ngx_output_chain.c-70-    /* add the incoming buf to the chain ctx->in */
./nginx/src/core/ngx_output_chain.c-71-
./nginx/src/core/ngx_output_chain.c-72-    if (in) {
./nginx/src/core/ngx_output_chain.c:73:        if (ngx_output_chain_add_copy(ctx->pool, &ctx->in, in) == NGX_ERROR) {
./nginx/src/core/ngx_output_chain.c-74-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-75-        }
./nginx/src/core/ngx_output_chain.c-76-    }
./nginx/src/core/ngx_output_chain.c-77-
./nginx/src/core/ngx_output_chain.c-78-    out = NULL;
./nginx/src/core/ngx_output_chain.c-79-    last_out = &out;
./nginx/src/core/ngx_output_chain.c-80-    last = NGX_NONE;
./nginx/src/core/ngx_output_chain.c-81-
./nginx/src/core/ngx_output_chain.c-82-    for ( ;; ) {
./nginx/src/core/ngx_output_chain.c-83-
--
./nginx/src/core/ngx_output_chain.c-91-
./nginx/src/core/ngx_output_chain.c-92-            /*
./nginx/src/core/ngx_output_chain.c-93-             * cycle while there are the ctx->in bufs
./nginx/src/core/ngx_output_chain.c-94-             * and there are the free output bufs to copy in
./nginx/src/core/ngx_output_chain.c-95-             */
./nginx/src/core/ngx_output_chain.c-96-
./nginx/src/core/ngx_output_chain.c-97-            bsize = ngx_buf_size(ctx->in->buf);
./nginx/src/core/ngx_output_chain.c-98-
./nginx/src/core/ngx_output_chain.c-99-            if (bsize == 0 && !ngx_buf_special(ctx->in->buf)) {
./nginx/src/core/ngx_output_chain.c-100-
./nginx/src/core/ngx_output_chain.c:101:                ngx_log_error(NGX_LOG_ALERT, ctx->pool->log, 0,
./nginx/src/core/ngx_output_chain.c-102-                              "zero size buf in output "
./nginx/src/core/ngx_output_chain.c-103-                              "buf: %p t:%d r:%d f:%d %p %p-%p %p %O-%O",
./nginx/src/core/ngx_output_chain.c-104-                              ctx->in->buf,
./nginx/src/core/ngx_output_chain.c-105-                              ctx->in->buf->temporary,
./nginx/src/core/ngx_output_chain.c-106-                              ctx->in->buf->recycled,
./nginx/src/core/ngx_output_chain.c-107-                              ctx->in->buf->in_file,
./nginx/src/core/ngx_output_chain.c-108-                              ctx->in->buf->start,
./nginx/src/core/ngx_output_chain.c-109-                              ctx->in->buf->pos,
./nginx/src/core/ngx_output_chain.c-110-                              ctx->in->buf->last,
./nginx/src/core/ngx_output_chain.c-111-                              ctx->in->buf->file,
--
./nginx/src/core/ngx_output_chain.c-144-                if (rc != NGX_OK) {
./nginx/src/core/ngx_output_chain.c-145-
./nginx/src/core/ngx_output_chain.c-146-                    if (ctx->free) {
./nginx/src/core/ngx_output_chain.c-147-
./nginx/src/core/ngx_output_chain.c-148-                        /* get the free buf */
./nginx/src/core/ngx_output_chain.c-149-
./nginx/src/core/ngx_output_chain.c-150-                        cl = ctx->free;
./nginx/src/core/ngx_output_chain.c-151-                        ctx->buf = cl->buf;
./nginx/src/core/ngx_output_chain.c-152-                        ctx->free = cl->next;
./nginx/src/core/ngx_output_chain.c-153-
./nginx/src/core/ngx_output_chain.c:154:                        ngx_free_chain(ctx->pool, cl);
./nginx/src/core/ngx_output_chain.c-155-
./nginx/src/core/ngx_output_chain.c-156-                    } else if (out || ctx->allocated == ctx->bufs.num) {
./nginx/src/core/ngx_output_chain.c-157-
./nginx/src/core/ngx_output_chain.c-158-                        break;
./nginx/src/core/ngx_output_chain.c-159-
./nginx/src/core/ngx_output_chain.c-160-                    } else if (ngx_output_chain_get_buf(ctx, bsize) != NGX_OK) {
./nginx/src/core/ngx_output_chain.c-161-                        return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-162-                    }
./nginx/src/core/ngx_output_chain.c-163-                }
./nginx/src/core/ngx_output_chain.c-164-            }
--
./nginx/src/core/ngx_output_chain.c-176-
./nginx/src/core/ngx_output_chain.c-177-                return rc;
./nginx/src/core/ngx_output_chain.c-178-            }
./nginx/src/core/ngx_output_chain.c-179-
./nginx/src/core/ngx_output_chain.c-180-            /* delete the completed buf from the ctx->in chain */
./nginx/src/core/ngx_output_chain.c-181-
./nginx/src/core/ngx_output_chain.c-182-            if (ngx_buf_size(ctx->in->buf) == 0) {
./nginx/src/core/ngx_output_chain.c-183-                ctx->in = ctx->in->next;
./nginx/src/core/ngx_output_chain.c-184-            }
./nginx/src/core/ngx_output_chain.c-185-
./nginx/src/core/ngx_output_chain.c:186:            cl = ngx_alloc_chain_link(ctx->pool);
./nginx/src/core/ngx_output_chain.c-187-            if (cl == NULL) {
./nginx/src/core/ngx_output_chain.c-188-                return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-189-            }
./nginx/src/core/ngx_output_chain.c-190-
./nginx/src/core/ngx_output_chain.c-191-            cl->buf = ctx->buf;
./nginx/src/core/ngx_output_chain.c-192-            cl->next = NULL;
./nginx/src/core/ngx_output_chain.c-193-            *last_out = cl;
./nginx/src/core/ngx_output_chain.c-194-            last_out = &cl->next;
./nginx/src/core/ngx_output_chain.c-195-            ctx->buf = NULL;
./nginx/src/core/ngx_output_chain.c-196-        }
--
./nginx/src/core/ngx_output_chain.c-203-
./nginx/src/core/ngx_output_chain.c-204-            return last;
./nginx/src/core/ngx_output_chain.c-205-        }
./nginx/src/core/ngx_output_chain.c-206-
./nginx/src/core/ngx_output_chain.c-207-        last = ctx->output_filter(ctx->filter_ctx, out);
./nginx/src/core/ngx_output_chain.c-208-
./nginx/src/core/ngx_output_chain.c-209-        if (last == NGX_ERROR || last == NGX_DONE) {
./nginx/src/core/ngx_output_chain.c-210-            return last;
./nginx/src/core/ngx_output_chain.c-211-        }
./nginx/src/core/ngx_output_chain.c-212-
./nginx/src/core/ngx_output_chain.c:213:        ngx_chain_update_chains(ctx->pool, &ctx->free, &ctx->busy, &out,
./nginx/src/core/ngx_output_chain.c-214-                                ctx->tag);
./nginx/src/core/ngx_output_chain.c-215-        last_out = &out;
./nginx/src/core/ngx_output_chain.c-216-    }
./nginx/src/core/ngx_output_chain.c-217-}
./nginx/src/core/ngx_output_chain.c-218-
./nginx/src/core/ngx_output_chain.c-219-
./nginx/src/core/ngx_output_chain.c-220-static ngx_inline ngx_int_t
./nginx/src/core/ngx_output_chain.c-221-ngx_output_chain_as_is(ngx_output_chain_ctx_t *ctx, ngx_buf_t *buf)
./nginx/src/core/ngx_output_chain.c-222-{
./nginx/src/core/ngx_output_chain.c-223-    ngx_uint_t  sendfile;
--
./nginx/src/core/ngx_output_chain.c-255-
./nginx/src/core/ngx_output_chain.c-256-    if (ctx->need_in_temp && (buf->memory || buf->mmap)) {
./nginx/src/core/ngx_output_chain.c-257-        return 0;
./nginx/src/core/ngx_output_chain.c-258-    }
./nginx/src/core/ngx_output_chain.c-259-
./nginx/src/core/ngx_output_chain.c-260-    return 1;
./nginx/src/core/ngx_output_chain.c-261-}
./nginx/src/core/ngx_output_chain.c-262-
./nginx/src/core/ngx_output_chain.c-263-
./nginx/src/core/ngx_output_chain.c-264-static ngx_int_t
./nginx/src/core/ngx_output_chain.c:265:ngx_output_chain_add_copy(ngx_pool_t *pool, ngx_chain_t **chain,
./nginx/src/core/ngx_output_chain.c-266-    ngx_chain_t *in)
./nginx/src/core/ngx_output_chain.c-267-{
./nginx/src/core/ngx_output_chain.c-268-    ngx_chain_t  *cl, **ll;
./nginx/src/core/ngx_output_chain.c-269-#if (NGX_SENDFILE_LIMIT)
./nginx/src/core/ngx_output_chain.c-270-    ngx_buf_t    *b, *buf;
./nginx/src/core/ngx_output_chain.c-271-#endif
./nginx/src/core/ngx_output_chain.c-272-
./nginx/src/core/ngx_output_chain.c-273-    ll = chain;
./nginx/src/core/ngx_output_chain.c-274-
./nginx/src/core/ngx_output_chain.c-275-    for (cl = *chain; cl; cl = cl->next) {
./nginx/src/core/ngx_output_chain.c-276-        ll = &cl->next;
./nginx/src/core/ngx_output_chain.c-277-    }
./nginx/src/core/ngx_output_chain.c-278-
./nginx/src/core/ngx_output_chain.c-279-    while (in) {
./nginx/src/core/ngx_output_chain.c-280-
./nginx/src/core/ngx_output_chain.c:281:        cl = ngx_alloc_chain_link(pool);
./nginx/src/core/ngx_output_chain.c-282-        if (cl == NULL) {
./nginx/src/core/ngx_output_chain.c-283-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-284-        }
./nginx/src/core/ngx_output_chain.c-285-
./nginx/src/core/ngx_output_chain.c-286-#if (NGX_SENDFILE_LIMIT)
./nginx/src/core/ngx_output_chain.c-287-
./nginx/src/core/ngx_output_chain.c-288-        buf = in->buf;
./nginx/src/core/ngx_output_chain.c-289-
./nginx/src/core/ngx_output_chain.c-290-        if (buf->in_file
./nginx/src/core/ngx_output_chain.c-291-            && buf->file_pos < NGX_SENDFILE_LIMIT
./nginx/src/core/ngx_output_chain.c-292-            && buf->file_last > NGX_SENDFILE_LIMIT)
./nginx/src/core/ngx_output_chain.c-293-        {
./nginx/src/core/ngx_output_chain.c-294-            /* split a file buf on two bufs by the sendfile limit */
./nginx/src/core/ngx_output_chain.c-295-
./nginx/src/core/ngx_output_chain.c:296:            b = ngx_calloc_buf(pool);
./nginx/src/core/ngx_output_chain.c-297-            if (b == NULL) {
./nginx/src/core/ngx_output_chain.c-298-                return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-299-            }
./nginx/src/core/ngx_output_chain.c-300-
./nginx/src/core/ngx_output_chain.c-301-            ngx_memcpy(b, buf, sizeof(ngx_buf_t));
./nginx/src/core/ngx_output_chain.c-302-
./nginx/src/core/ngx_output_chain.c-303-            if (ngx_buf_in_memory(buf)) {
./nginx/src/core/ngx_output_chain.c-304-                buf->pos += (ssize_t) (NGX_SENDFILE_LIMIT - buf->file_pos);
./nginx/src/core/ngx_output_chain.c-305-                b->last = buf->pos;
./nginx/src/core/ngx_output_chain.c-306-            }
--
./nginx/src/core/ngx_output_chain.c-355-        size = (size_t) bsize;
./nginx/src/core/ngx_output_chain.c-356-
./nginx/src/core/ngx_output_chain.c-357-    } else {
./nginx/src/core/ngx_output_chain.c-358-        size = (size_t) ctx->alignment - size;
./nginx/src/core/ngx_output_chain.c-359-
./nginx/src/core/ngx_output_chain.c-360-        if ((off_t) size > bsize) {
./nginx/src/core/ngx_output_chain.c-361-            size = (size_t) bsize;
./nginx/src/core/ngx_output_chain.c-362-        }
./nginx/src/core/ngx_output_chain.c-363-    }
./nginx/src/core/ngx_output_chain.c-364-
./nginx/src/core/ngx_output_chain.c:365:    ctx->buf = ngx_create_temp_buf(ctx->pool, size);
./nginx/src/core/ngx_output_chain.c-366-    if (ctx->buf == NULL) {
./nginx/src/core/ngx_output_chain.c-367-        return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-368-    }
./nginx/src/core/ngx_output_chain.c-369-
./nginx/src/core/ngx_output_chain.c-370-    /*
./nginx/src/core/ngx_output_chain.c-371-     * we do not set ctx->buf->tag, because we do not want
./nginx/src/core/ngx_output_chain.c-372-     * to reuse the buf via ctx->free list
./nginx/src/core/ngx_output_chain.c-373-     */
./nginx/src/core/ngx_output_chain.c-374-
./nginx/src/core/ngx_output_chain.c-375-#if (NGX_HAVE_ALIGNED_DIRECTIO)
--
./nginx/src/core/ngx_output_chain.c-411-             * allocate a temp buf that equals to a last buf,
./nginx/src/core/ngx_output_chain.c-412-             * if there is no directio, the last buf size is lesser
./nginx/src/core/ngx_output_chain.c-413-             * than 1.25 of bufs.size and the temp buf is single
./nginx/src/core/ngx_output_chain.c-414-             */
./nginx/src/core/ngx_output_chain.c-415-
./nginx/src/core/ngx_output_chain.c-416-            size = (size_t) bsize;
./nginx/src/core/ngx_output_chain.c-417-            recycled = 0;
./nginx/src/core/ngx_output_chain.c-418-        }
./nginx/src/core/ngx_output_chain.c-419-    }
./nginx/src/core/ngx_output_chain.c-420-
./nginx/src/core/ngx_output_chain.c:421:    b = ngx_calloc_buf(ctx->pool);
./nginx/src/core/ngx_output_chain.c-422-    if (b == NULL) {
./nginx/src/core/ngx_output_chain.c-423-        return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-424-    }
./nginx/src/core/ngx_output_chain.c-425-
./nginx/src/core/ngx_output_chain.c-426-    if (ctx->directio) {
./nginx/src/core/ngx_output_chain.c-427-
./nginx/src/core/ngx_output_chain.c-428-        /*
./nginx/src/core/ngx_output_chain.c-429-         * allocate block aligned to a disk sector size to enable
./nginx/src/core/ngx_output_chain.c-430-         * userland buffer direct usage conjunctly with directio
./nginx/src/core/ngx_output_chain.c-431-         */
./nginx/src/core/ngx_output_chain.c-432-
./nginx/src/core/ngx_output_chain.c:433:        b->start = ngx_pmemalign(ctx->pool, size, (size_t) ctx->alignment);
./nginx/src/core/ngx_output_chain.c-434-        if (b->start == NULL) {
./nginx/src/core/ngx_output_chain.c-435-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-436-        }
./nginx/src/core/ngx_output_chain.c-437-
./nginx/src/core/ngx_output_chain.c-438-    } else {
./nginx/src/core/ngx_output_chain.c:439:        b->start = ngx_palloc(ctx->pool, size);
./nginx/src/core/ngx_output_chain.c-440-        if (b->start == NULL) {
./nginx/src/core/ngx_output_chain.c-441-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-442-        }
./nginx/src/core/ngx_output_chain.c-443-    }
./nginx/src/core/ngx_output_chain.c-444-
./nginx/src/core/ngx_output_chain.c-445-    b->pos = b->start;
./nginx/src/core/ngx_output_chain.c-446-    b->last = b->start;
./nginx/src/core/ngx_output_chain.c-447-    b->end = b->last + size;
./nginx/src/core/ngx_output_chain.c-448-    b->temporary = 1;
./nginx/src/core/ngx_output_chain.c-449-    b->tag = ctx->tag;
--
./nginx/src/core/ngx_output_chain.c-508-            dst->last_buf = src->last_buf;
./nginx/src/core/ngx_output_chain.c-509-            dst->last_in_chain = src->last_in_chain;
./nginx/src/core/ngx_output_chain.c-510-        }
./nginx/src/core/ngx_output_chain.c-511-
./nginx/src/core/ngx_output_chain.c-512-    } else {
./nginx/src/core/ngx_output_chain.c-513-
./nginx/src/core/ngx_output_chain.c-514-#if (NGX_HAVE_ALIGNED_DIRECTIO)
./nginx/src/core/ngx_output_chain.c-515-
./nginx/src/core/ngx_output_chain.c-516-        if (ctx->unaligned) {
./nginx/src/core/ngx_output_chain.c-517-            if (ngx_directio_off(src->file->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_output_chain.c:518:                ngx_log_error(NGX_LOG_ALERT, ctx->pool->log, ngx_errno,
./nginx/src/core/ngx_output_chain.c-519-                              ngx_directio_off_n " \"%s\" failed",
./nginx/src/core/ngx_output_chain.c-520-                              src->file->name.data);
./nginx/src/core/ngx_output_chain.c-521-            }
./nginx/src/core/ngx_output_chain.c-522-        }
./nginx/src/core/ngx_output_chain.c-523-
./nginx/src/core/ngx_output_chain.c-524-#endif
./nginx/src/core/ngx_output_chain.c-525-
./nginx/src/core/ngx_output_chain.c-526-#if (NGX_HAVE_FILE_AIO)
./nginx/src/core/ngx_output_chain.c-527-
./nginx/src/core/ngx_output_chain.c-528-        if (ctx->aio_handler) {
./nginx/src/core/ngx_output_chain.c-529-            n = ngx_file_aio_read(src->file, dst->pos, (size_t) size,
./nginx/src/core/ngx_output_chain.c:530:                                  src->file_pos, ctx->pool);
./nginx/src/core/ngx_output_chain.c-531-            if (n == NGX_AGAIN) {
./nginx/src/core/ngx_output_chain.c-532-                ctx->aio_handler(ctx, src->file);
./nginx/src/core/ngx_output_chain.c-533-                return NGX_AGAIN;
./nginx/src/core/ngx_output_chain.c-534-            }
./nginx/src/core/ngx_output_chain.c-535-
./nginx/src/core/ngx_output_chain.c-536-        } else {
./nginx/src/core/ngx_output_chain.c-537-            n = ngx_read_file(src->file, dst->pos, (size_t) size,
./nginx/src/core/ngx_output_chain.c-538-                              src->file_pos);
./nginx/src/core/ngx_output_chain.c-539-        }
./nginx/src/core/ngx_output_chain.c-540-#else
--
./nginx/src/core/ngx_output_chain.c-544-#endif
./nginx/src/core/ngx_output_chain.c-545-
./nginx/src/core/ngx_output_chain.c-546-#if (NGX_HAVE_ALIGNED_DIRECTIO)
./nginx/src/core/ngx_output_chain.c-547-
./nginx/src/core/ngx_output_chain.c-548-        if (ctx->unaligned) {
./nginx/src/core/ngx_output_chain.c-549-            ngx_err_t  err;
./nginx/src/core/ngx_output_chain.c-550-
./nginx/src/core/ngx_output_chain.c-551-            err = ngx_errno;
./nginx/src/core/ngx_output_chain.c-552-
./nginx/src/core/ngx_output_chain.c-553-            if (ngx_directio_on(src->file->fd) == NGX_FILE_ERROR) {
./nginx/src/core/ngx_output_chain.c:554:                ngx_log_error(NGX_LOG_ALERT, ctx->pool->log, ngx_errno,
./nginx/src/core/ngx_output_chain.c-555-                              ngx_directio_on_n " \"%s\" failed",
./nginx/src/core/ngx_output_chain.c-556-                              src->file->name.data);
./nginx/src/core/ngx_output_chain.c-557-            }
./nginx/src/core/ngx_output_chain.c-558-
./nginx/src/core/ngx_output_chain.c-559-            ngx_set_errno(err);
./nginx/src/core/ngx_output_chain.c-560-
./nginx/src/core/ngx_output_chain.c-561-            ctx->unaligned = 0;
./nginx/src/core/ngx_output_chain.c-562-        }
./nginx/src/core/ngx_output_chain.c-563-
./nginx/src/core/ngx_output_chain.c-564-#endif
./nginx/src/core/ngx_output_chain.c-565-
./nginx/src/core/ngx_output_chain.c-566-        if (n == NGX_ERROR) {
./nginx/src/core/ngx_output_chain.c-567-            return (ngx_int_t) n;
./nginx/src/core/ngx_output_chain.c-568-        }
./nginx/src/core/ngx_output_chain.c-569-
./nginx/src/core/ngx_output_chain.c-570-        if (n != size) {
./nginx/src/core/ngx_output_chain.c:571:            ngx_log_error(NGX_LOG_ALERT, ctx->pool->log, 0,
./nginx/src/core/ngx_output_chain.c-572-                          ngx_read_file_n " read only %z of %O from \"%s\"",
./nginx/src/core/ngx_output_chain.c-573-                          n, size, src->file->name.data);
./nginx/src/core/ngx_output_chain.c-574-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-575-        }
./nginx/src/core/ngx_output_chain.c-576-
./nginx/src/core/ngx_output_chain.c-577-        dst->last += n;
./nginx/src/core/ngx_output_chain.c-578-
./nginx/src/core/ngx_output_chain.c-579-        if (sendfile) {
./nginx/src/core/ngx_output_chain.c-580-            dst->in_file = 1;
./nginx/src/core/ngx_output_chain.c-581-            dst->file = src->file;
--
./nginx/src/core/ngx_output_chain.c-617-            ngx_debug_point();
./nginx/src/core/ngx_output_chain.c-618-        }
./nginx/src/core/ngx_output_chain.c-619-#endif
./nginx/src/core/ngx_output_chain.c-620-
./nginx/src/core/ngx_output_chain.c-621-        size += ngx_buf_size(in->buf);
./nginx/src/core/ngx_output_chain.c-622-
./nginx/src/core/ngx_output_chain.c-623-        ngx_log_debug2(NGX_LOG_DEBUG_CORE, c->log, 0,
./nginx/src/core/ngx_output_chain.c-624-                       "chain writer buf fl:%d s:%uO",
./nginx/src/core/ngx_output_chain.c-625-                       in->buf->flush, ngx_buf_size(in->buf));
./nginx/src/core/ngx_output_chain.c-626-
./nginx/src/core/ngx_output_chain.c:627:        cl = ngx_alloc_chain_link(ctx->pool);
./nginx/src/core/ngx_output_chain.c-628-        if (cl == NULL) {
./nginx/src/core/ngx_output_chain.c-629-            return NGX_ERROR;
./nginx/src/core/ngx_output_chain.c-630-        }
./nginx/src/core/ngx_output_chain.c-631-
./nginx/src/core/ngx_output_chain.c-632-        cl->buf = in->buf;
./nginx/src/core/ngx_output_chain.c-633-        cl->next = NULL;
./nginx/src/core/ngx_output_chain.c-634-        *ctx->last = cl;
./nginx/src/core/ngx_output_chain.c-635-        ctx->last = &cl->next;
./nginx/src/core/ngx_output_chain.c-636-    }
./nginx/src/core/ngx_output_chain.c-637-
--
./nginx/src/core/ngx_string.c-47-        src++;
./nginx/src/core/ngx_string.c-48-    }
./nginx/src/core/ngx_string.c-49-
./nginx/src/core/ngx_string.c-50-    *dst = '\0';
./nginx/src/core/ngx_string.c-51-
./nginx/src/core/ngx_string.c-52-    return dst;
./nginx/src/core/ngx_string.c-53-}
./nginx/src/core/ngx_string.c-54-
./nginx/src/core/ngx_string.c-55-
./nginx/src/core/ngx_string.c-56-u_char *
./nginx/src/core/ngx_string.c:57:ngx_pstrdup(ngx_pool_t *pool, ngx_str_t *src)
./nginx/src/core/ngx_string.c-58-{
./nginx/src/core/ngx_string.c-59-    u_char  *dst;
./nginx/src/core/ngx_string.c-60-
./nginx/src/core/ngx_string.c:61:    dst = ngx_pnalloc(pool, src->len);
./nginx/src/core/ngx_string.c-62-    if (dst == NULL) {
./nginx/src/core/ngx_string.c-63-        return NULL;
./nginx/src/core/ngx_string.c-64-    }
./nginx/src/core/ngx_string.c-65-
./nginx/src/core/ngx_string.c-66-    ngx_memcpy(dst, src->data, src->len);
./nginx/src/core/ngx_string.c-67-
./nginx/src/core/ngx_string.c-68-    return dst;
./nginx/src/core/ngx_string.c-69-}
./nginx/src/core/ngx_string.c-70-
./nginx/src/core/ngx_string.c-71-
--
./nginx/src/core/ngx_resolver.c-96-ngx_resolver_t *
./nginx/src/core/ngx_resolver.c-97-ngx_resolver_create(ngx_conf_t *cf, ngx_str_t *names, ngx_uint_t n)
./nginx/src/core/ngx_resolver.c-98-{
./nginx/src/core/ngx_resolver.c-99-    ngx_str_t              s;
./nginx/src/core/ngx_resolver.c-100-    ngx_url_t              u;
./nginx/src/core/ngx_resolver.c-101-    ngx_uint_t             i, j;
./nginx/src/core/ngx_resolver.c-102-    ngx_resolver_t        *r;
./nginx/src/core/ngx_resolver.c-103-    ngx_pool_cleanup_t    *cln;
./nginx/src/core/ngx_resolver.c-104-    ngx_udp_connection_t  *uc;
./nginx/src/core/ngx_resolver.c-105-
./nginx/src/core/ngx_resolver.c:106:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/core/ngx_resolver.c-107-    if (cln == NULL) {
./nginx/src/core/ngx_resolver.c-108-        return NULL;
./nginx/src/core/ngx_resolver.c-109-    }
./nginx/src/core/ngx_resolver.c-110-
./nginx/src/core/ngx_resolver.c-111-    cln->handler = ngx_resolver_cleanup;
./nginx/src/core/ngx_resolver.c-112-
./nginx/src/core/ngx_resolver.c-113-    r = ngx_calloc(sizeof(ngx_resolver_t), cf->log);
./nginx/src/core/ngx_resolver.c-114-    if (r == NULL) {
./nginx/src/core/ngx_resolver.c-115-        return NULL;
./nginx/src/core/ngx_resolver.c-116-    }
--
./nginx/src/core/ngx_resolver.c-140-    r->ident = -1;
./nginx/src/core/ngx_resolver.c-141-
./nginx/src/core/ngx_resolver.c-142-    r->resend_timeout = 5;
./nginx/src/core/ngx_resolver.c-143-    r->expire = 30;
./nginx/src/core/ngx_resolver.c-144-    r->valid = 0;
./nginx/src/core/ngx_resolver.c-145-
./nginx/src/core/ngx_resolver.c-146-    r->log = &cf->cycle->new_log;
./nginx/src/core/ngx_resolver.c-147-    r->log_level = NGX_LOG_ERR;
./nginx/src/core/ngx_resolver.c-148-
./nginx/src/core/ngx_resolver.c-149-    if (n) {
./nginx/src/core/ngx_resolver.c:150:        if (ngx_array_init(&r->udp_connections, cf->pool, n,
./nginx/src/core/ngx_resolver.c-151-                           sizeof(ngx_udp_connection_t))
./nginx/src/core/ngx_resolver.c-152-            != NGX_OK)
./nginx/src/core/ngx_resolver.c-153-        {
./nginx/src/core/ngx_resolver.c-154-            return NULL;
./nginx/src/core/ngx_resolver.c-155-        }
./nginx/src/core/ngx_resolver.c-156-    }
./nginx/src/core/ngx_resolver.c-157-
./nginx/src/core/ngx_resolver.c-158-    for (i = 0; i < n; i++) {
./nginx/src/core/ngx_resolver.c-159-        if (ngx_strncmp(names[i].data, "valid=", 6) == 0) {
./nginx/src/core/ngx_resolver.c-160-            s.len = names[i].len - 6;
--
./nginx/src/core/ngx_resolver.c-169-            }
./nginx/src/core/ngx_resolver.c-170-
./nginx/src/core/ngx_resolver.c-171-            continue;
./nginx/src/core/ngx_resolver.c-172-        }
./nginx/src/core/ngx_resolver.c-173-
./nginx/src/core/ngx_resolver.c-174-        ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/core/ngx_resolver.c-175-
./nginx/src/core/ngx_resolver.c-176-        u.url = names[i];
./nginx/src/core/ngx_resolver.c-177-        u.default_port = 53;
./nginx/src/core/ngx_resolver.c-178-
./nginx/src/core/ngx_resolver.c:179:        if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
./nginx/src/core/ngx_resolver.c-180-            if (u.err) {
./nginx/src/core/ngx_resolver.c-181-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/core/ngx_resolver.c-182-                                   "%s in resolver \"%V\"",
./nginx/src/core/ngx_resolver.c-183-                                   u.err, &u.url);
./nginx/src/core/ngx_resolver.c-184-            }
./nginx/src/core/ngx_resolver.c-185-
./nginx/src/core/ngx_resolver.c-186-            return NULL;
./nginx/src/core/ngx_resolver.c-187-        }
./nginx/src/core/ngx_resolver.c-188-
./nginx/src/core/ngx_resolver.c-189-        uc = ngx_array_push_n(&r->udp_connections, u.naddrs);
--
./nginx/src/core/ngx_regex.c-71-
./nginx/src/core/ngx_regex.c-72-void
./nginx/src/core/ngx_regex.c-73-ngx_regex_init(void)
./nginx/src/core/ngx_regex.c-74-{
./nginx/src/core/ngx_regex.c-75-    pcre_malloc = ngx_regex_malloc;
./nginx/src/core/ngx_regex.c-76-    pcre_free = ngx_regex_free;
./nginx/src/core/ngx_regex.c-77-}
./nginx/src/core/ngx_regex.c-78-
./nginx/src/core/ngx_regex.c-79-
./nginx/src/core/ngx_regex.c-80-static ngx_inline void
./nginx/src/core/ngx_regex.c:81:ngx_regex_malloc_init(ngx_pool_t *pool)
./nginx/src/core/ngx_regex.c-82-{
./nginx/src/core/ngx_regex.c-83-#if (NGX_THREADS)
./nginx/src/core/ngx_regex.c-84-    ngx_core_tls_t  *tls;
./nginx/src/core/ngx_regex.c-85-
./nginx/src/core/ngx_regex.c-86-    if (ngx_threaded) {
./nginx/src/core/ngx_regex.c-87-        tls = ngx_thread_get_tls(ngx_core_tls_key);
./nginx/src/core/ngx_regex.c:88:        tls->pool = pool;
./nginx/src/core/ngx_regex.c-89-        return;
./nginx/src/core/ngx_regex.c-90-    }
./nginx/src/core/ngx_regex.c-91-
./nginx/src/core/ngx_regex.c-92-#endif
./nginx/src/core/ngx_regex.c-93-
./nginx/src/core/ngx_regex.c:94:    ngx_pcre_pool = pool;
./nginx/src/core/ngx_regex.c-95-}
./nginx/src/core/ngx_regex.c-96-
./nginx/src/core/ngx_regex.c-97-
./nginx/src/core/ngx_regex.c-98-static ngx_inline void
./nginx/src/core/ngx_regex.c-99-ngx_regex_malloc_done(void)
./nginx/src/core/ngx_regex.c-100-{
./nginx/src/core/ngx_regex.c-101-#if (NGX_THREADS)
./nginx/src/core/ngx_regex.c-102-    ngx_core_tls_t  *tls;
./nginx/src/core/ngx_regex.c-103-
./nginx/src/core/ngx_regex.c-104-    if (ngx_threaded) {
./nginx/src/core/ngx_regex.c-105-        tls = ngx_thread_get_tls(ngx_core_tls_key);
./nginx/src/core/ngx_regex.c:106:        tls->pool = NULL;
./nginx/src/core/ngx_regex.c-107-        return;
./nginx/src/core/ngx_regex.c-108-    }
./nginx/src/core/ngx_regex.c-109-
./nginx/src/core/ngx_regex.c-110-#endif
./nginx/src/core/ngx_regex.c-111-
./nginx/src/core/ngx_regex.c-112-    ngx_pcre_pool = NULL;
./nginx/src/core/ngx_regex.c-113-}
./nginx/src/core/ngx_regex.c-114-
./nginx/src/core/ngx_regex.c-115-
./nginx/src/core/ngx_regex.c-116-ngx_int_t
./nginx/src/core/ngx_regex.c-117-ngx_regex_compile(ngx_regex_compile_t *rc)
./nginx/src/core/ngx_regex.c-118-{
./nginx/src/core/ngx_regex.c-119-    int               n, erroff;
./nginx/src/core/ngx_regex.c-120-    char             *p;
./nginx/src/core/ngx_regex.c-121-    pcre             *re;
./nginx/src/core/ngx_regex.c-122-    const char       *errstr;
./nginx/src/core/ngx_regex.c-123-    ngx_regex_elt_t  *elt;
./nginx/src/core/ngx_regex.c-124-
./nginx/src/core/ngx_regex.c:125:    ngx_regex_malloc_init(rc->pool);
./nginx/src/core/ngx_regex.c-126-
./nginx/src/core/ngx_regex.c-127-    re = pcre_compile((const char *) rc->pattern.data, (int) rc->options,
./nginx/src/core/ngx_regex.c-128-                      &errstr, &erroff, NULL);
./nginx/src/core/ngx_regex.c-129-
./nginx/src/core/ngx_regex.c:130:    /* ensure that there is no current pool */
./nginx/src/core/ngx_regex.c-131-    ngx_regex_malloc_done();
./nginx/src/core/ngx_regex.c-132-
./nginx/src/core/ngx_regex.c-133-    if (re == NULL) {
./nginx/src/core/ngx_regex.c-134-        if ((size_t) erroff == rc->pattern.len) {
./nginx/src/core/ngx_regex.c-135-           rc->err.len = ngx_snprintf(rc->err.data, rc->err.len,
./nginx/src/core/ngx_regex.c-136-                              "pcre_compile() failed: %s in \"%V\"",
./nginx/src/core/ngx_regex.c-137-                               errstr, &rc->pattern)
./nginx/src/core/ngx_regex.c-138-                      - rc->err.data;
./nginx/src/core/ngx_regex.c-139-
./nginx/src/core/ngx_regex.c-140-        } else {
./nginx/src/core/ngx_regex.c-141-           rc->err.len = ngx_snprintf(rc->err.data, rc->err.len,
./nginx/src/core/ngx_regex.c-142-                              "pcre_compile() failed: %s in \"%V\" at \"%s\"",
./nginx/src/core/ngx_regex.c-143-                               errstr, &rc->pattern, rc->pattern.data + erroff)
./nginx/src/core/ngx_regex.c-144-                      - rc->err.data;
./nginx/src/core/ngx_regex.c-145-        }
./nginx/src/core/ngx_regex.c-146-
./nginx/src/core/ngx_regex.c-147-        return NGX_ERROR;
./nginx/src/core/ngx_regex.c-148-    }
./nginx/src/core/ngx_regex.c-149-
./nginx/src/core/ngx_regex.c:150:    rc->regex = ngx_pcalloc(rc->pool, sizeof(ngx_regex_t));
./nginx/src/core/ngx_regex.c-151-    if (rc->regex == NULL) {
./nginx/src/core/ngx_regex.c-152-        return NGX_ERROR;
./nginx/src/core/ngx_regex.c-153-    }
./nginx/src/core/ngx_regex.c-154-
./nginx/src/core/ngx_regex.c-155-    rc->regex->code = re;
./nginx/src/core/ngx_regex.c-156-
./nginx/src/core/ngx_regex.c-157-    /* do not study at runtime */
./nginx/src/core/ngx_regex.c-158-
./nginx/src/core/ngx_regex.c-159-    if (ngx_pcre_studies != NULL) {
./nginx/src/core/ngx_regex.c-160-        elt = ngx_list_push(ngx_pcre_studies);
--
./nginx/src/core/ngx_regex.c-237-        return NGX_OK;
./nginx/src/core/ngx_regex.c-238-    }
./nginx/src/core/ngx_regex.c-239-
./nginx/src/core/ngx_regex.c-240-    return NGX_DECLINED;
./nginx/src/core/ngx_regex.c-241-}
./nginx/src/core/ngx_regex.c-242-
./nginx/src/core/ngx_regex.c-243-
./nginx/src/core/ngx_regex.c-244-static void * ngx_libc_cdecl
./nginx/src/core/ngx_regex.c-245-ngx_regex_malloc(size_t size)
./nginx/src/core/ngx_regex.c-246-{
./nginx/src/core/ngx_regex.c:247:    ngx_pool_t      *pool;
./nginx/src/core/ngx_regex.c-248-#if (NGX_THREADS)
./nginx/src/core/ngx_regex.c-249-    ngx_core_tls_t  *tls;
./nginx/src/core/ngx_regex.c-250-
./nginx/src/core/ngx_regex.c-251-    if (ngx_threaded) {
./nginx/src/core/ngx_regex.c-252-        tls = ngx_thread_get_tls(ngx_core_tls_key);
./nginx/src/core/ngx_regex.c:253:        pool = tls->pool;
./nginx/src/core/ngx_regex.c-254-
./nginx/src/core/ngx_regex.c-255-    } else {
./nginx/src/core/ngx_regex.c:256:        pool = ngx_pcre_pool;
./nginx/src/core/ngx_regex.c-257-    }
./nginx/src/core/ngx_regex.c-258-
./nginx/src/core/ngx_regex.c-259-#else
./nginx/src/core/ngx_regex.c-260-
./nginx/src/core/ngx_regex.c:261:    pool = ngx_pcre_pool;
./nginx/src/core/ngx_regex.c-262-
./nginx/src/core/ngx_regex.c-263-#endif
./nginx/src/core/ngx_regex.c-264-
./nginx/src/core/ngx_regex.c:265:    if (pool) {
./nginx/src/core/ngx_regex.c:266:        return ngx_palloc(pool, size);
./nginx/src/core/ngx_regex.c-267-    }
./nginx/src/core/ngx_regex.c-268-
./nginx/src/core/ngx_regex.c-269-    return NULL;
./nginx/src/core/ngx_regex.c-270-}
./nginx/src/core/ngx_regex.c-271-
./nginx/src/core/ngx_regex.c-272-
./nginx/src/core/ngx_regex.c-273-static void ngx_libc_cdecl
./nginx/src/core/ngx_regex.c-274-ngx_regex_free(void *p)
./nginx/src/core/ngx_regex.c-275-{
./nginx/src/core/ngx_regex.c-276-    return;
--
./nginx/src/core/ngx_regex.c-332-
./nginx/src/core/ngx_regex.c-333-    if (rcf->pcre_jit) {
./nginx/src/core/ngx_regex.c-334-        opt = PCRE_STUDY_JIT_COMPILE;
./nginx/src/core/ngx_regex.c-335-
./nginx/src/core/ngx_regex.c-336-        /*
./nginx/src/core/ngx_regex.c-337-         * The PCRE JIT compiler uses mmap for its executable codes, so we
./nginx/src/core/ngx_regex.c-338-         * have to explicitly call the pcre_free_study() function to free
./nginx/src/core/ngx_regex.c-339-         * this memory.
./nginx/src/core/ngx_regex.c-340-         */
./nginx/src/core/ngx_regex.c-341-
./nginx/src/core/ngx_regex.c:342:        cln = ngx_pool_cleanup_add(cycle->pool, 0);
./nginx/src/core/ngx_regex.c-343-        if (cln == NULL) {
./nginx/src/core/ngx_regex.c-344-            return NGX_ERROR;
./nginx/src/core/ngx_regex.c-345-        }
./nginx/src/core/ngx_regex.c-346-
./nginx/src/core/ngx_regex.c-347-        cln->handler = ngx_pcre_free_studies;
./nginx/src/core/ngx_regex.c-348-        cln->data = ngx_pcre_studies;
./nginx/src/core/ngx_regex.c-349-    }
./nginx/src/core/ngx_regex.c-350-    }
./nginx/src/core/ngx_regex.c-351-#endif
./nginx/src/core/ngx_regex.c-352-
./nginx/src/core/ngx_regex.c:353:    ngx_regex_malloc_init(cycle->pool);
./nginx/src/core/ngx_regex.c-354-
./nginx/src/core/ngx_regex.c-355-    part = &ngx_pcre_studies->part;
./nginx/src/core/ngx_regex.c-356-    elts = part->elts;
./nginx/src/core/ngx_regex.c-357-
./nginx/src/core/ngx_regex.c-358-    for (i = 0 ; /* void */ ; i++) {
./nginx/src/core/ngx_regex.c-359-
./nginx/src/core/ngx_regex.c-360-        if (i >= part->nelts) {
./nginx/src/core/ngx_regex.c-361-            if (part->next == NULL) {
./nginx/src/core/ngx_regex.c-362-                break;
./nginx/src/core/ngx_regex.c-363-            }
--
./nginx/src/core/ngx_regex.c-398-
./nginx/src/core/ngx_regex.c-399-    return NGX_OK;
./nginx/src/core/ngx_regex.c-400-}
./nginx/src/core/ngx_regex.c-401-
./nginx/src/core/ngx_regex.c-402-
./nginx/src/core/ngx_regex.c-403-static void *
./nginx/src/core/ngx_regex.c-404-ngx_regex_create_conf(ngx_cycle_t *cycle)
./nginx/src/core/ngx_regex.c-405-{
./nginx/src/core/ngx_regex.c-406-    ngx_regex_conf_t  *rcf;
./nginx/src/core/ngx_regex.c-407-
./nginx/src/core/ngx_regex.c:408:    rcf = ngx_pcalloc(cycle->pool, sizeof(ngx_regex_conf_t));
./nginx/src/core/ngx_regex.c-409-    if (rcf == NULL) {
./nginx/src/core/ngx_regex.c-410-        return NULL;
./nginx/src/core/ngx_regex.c-411-    }
./nginx/src/core/ngx_regex.c-412-
./nginx/src/core/ngx_regex.c-413-    rcf->pcre_jit = NGX_CONF_UNSET;
./nginx/src/core/ngx_regex.c-414-
./nginx/src/core/ngx_regex.c:415:    ngx_pcre_studies = ngx_list_create(cycle->pool, 8, sizeof(ngx_regex_elt_t));
./nginx/src/core/ngx_regex.c-416-    if (ngx_pcre_studies == NULL) {
./nginx/src/core/ngx_regex.c-417-        return NULL;
./nginx/src/core/ngx_regex.c-418-    }
./nginx/src/core/ngx_regex.c-419-
./nginx/src/core/ngx_regex.c-420-    return rcf;
./nginx/src/core/ngx_regex.c-421-}
./nginx/src/core/ngx_regex.c-422-
./nginx/src/core/ngx_regex.c-423-
./nginx/src/core/ngx_regex.c-424-static char *
./nginx/src/core/ngx_regex.c-425-ngx_regex_init_conf(ngx_cycle_t *cycle, void *conf)
--
./nginx/src/core/ngx_file.c-13-ngx_atomic_t         *ngx_temp_number = &temp_number;
./nginx/src/core/ngx_file.c-14-ngx_atomic_int_t      ngx_random_number = 123456;
./nginx/src/core/ngx_file.c-15-
./nginx/src/core/ngx_file.c-16-
./nginx/src/core/ngx_file.c-17-ssize_t
./nginx/src/core/ngx_file.c-18-ngx_write_chain_to_temp_file(ngx_temp_file_t *tf, ngx_chain_t *chain)
./nginx/src/core/ngx_file.c-19-{
./nginx/src/core/ngx_file.c-20-    ngx_int_t  rc;
./nginx/src/core/ngx_file.c-21-
./nginx/src/core/ngx_file.c-22-    if (tf->file.fd == NGX_INVALID_FILE) {
./nginx/src/core/ngx_file.c:23:        rc = ngx_create_temp_file(&tf->file, tf->path, tf->pool,
./nginx/src/core/ngx_file.c-24-                                  tf->persistent, tf->clean, tf->access);
./nginx/src/core/ngx_file.c-25-
./nginx/src/core/ngx_file.c-26-        if (rc == NGX_ERROR || rc == NGX_AGAIN) {
./nginx/src/core/ngx_file.c-27-            return rc;
./nginx/src/core/ngx_file.c-28-        }
./nginx/src/core/ngx_file.c-29-
./nginx/src/core/ngx_file.c-30-        if (tf->log_level) {
./nginx/src/core/ngx_file.c-31-            ngx_log_error(tf->log_level, tf->file.log, 0, "%s %V",
./nginx/src/core/ngx_file.c-32-                          tf->warn, &tf->file.name);
./nginx/src/core/ngx_file.c-33-        }
./nginx/src/core/ngx_file.c-34-    }
./nginx/src/core/ngx_file.c-35-
./nginx/src/core/ngx_file.c:36:    return ngx_write_chain_to_file(&tf->file, chain, tf->offset, tf->pool);
./nginx/src/core/ngx_file.c-37-}
./nginx/src/core/ngx_file.c-38-
./nginx/src/core/ngx_file.c-39-
./nginx/src/core/ngx_file.c-40-ngx_int_t
./nginx/src/core/ngx_file.c:41:ngx_create_temp_file(ngx_file_t *file, ngx_path_t *path, ngx_pool_t *pool,
./nginx/src/core/ngx_file.c-42-    ngx_uint_t persistent, ngx_uint_t clean, ngx_uint_t access)
./nginx/src/core/ngx_file.c-43-{
./nginx/src/core/ngx_file.c-44-    uint32_t                  n;
./nginx/src/core/ngx_file.c-45-    ngx_err_t                 err;
./nginx/src/core/ngx_file.c-46-    ngx_pool_cleanup_t       *cln;
./nginx/src/core/ngx_file.c-47-    ngx_pool_cleanup_file_t  *clnf;
./nginx/src/core/ngx_file.c-48-
./nginx/src/core/ngx_file.c-49-    file->name.len = path->name.len + 1 + path->len + 10;
./nginx/src/core/ngx_file.c-50-
./nginx/src/core/ngx_file.c:51:    file->name.data = ngx_pnalloc(pool, file->name.len + 1);
./nginx/src/core/ngx_file.c-52-    if (file->name.data == NULL) {
./nginx/src/core/ngx_file.c-53-        return NGX_ERROR;
./nginx/src/core/ngx_file.c-54-    }
./nginx/src/core/ngx_file.c-55-
./nginx/src/core/ngx_file.c-56-#if 0
./nginx/src/core/ngx_file.c-57-    for (i = 0; i < file->name.len; i++) {
./nginx/src/core/ngx_file.c-58-         file->name.data[i] = 'X';
./nginx/src/core/ngx_file.c-59-    }
./nginx/src/core/ngx_file.c-60-#endif
./nginx/src/core/ngx_file.c-61-
./nginx/src/core/ngx_file.c-62-    ngx_memcpy(file->name.data, path->name.data, path->name.len);
./nginx/src/core/ngx_file.c-63-
./nginx/src/core/ngx_file.c-64-    n = (uint32_t) ngx_next_temp_number(0);
./nginx/src/core/ngx_file.c-65-
./nginx/src/core/ngx_file.c:66:    cln = ngx_pool_cleanup_add(pool, sizeof(ngx_pool_cleanup_file_t));
./nginx/src/core/ngx_file.c-67-    if (cln == NULL) {
./nginx/src/core/ngx_file.c-68-        return NGX_ERROR;
./nginx/src/core/ngx_file.c-69-    }
./nginx/src/core/ngx_file.c-70-
./nginx/src/core/ngx_file.c-71-    for ( ;; ) {
./nginx/src/core/ngx_file.c-72-        (void) ngx_sprintf(file->name.data + path->name.len + 1 + path->len,
./nginx/src/core/ngx_file.c-73-                           "%010uD%Z", n);
./nginx/src/core/ngx_file.c-74-
./nginx/src/core/ngx_file.c-75-        ngx_create_hashed_filename(path, file->name.data, file->name.len);
./nginx/src/core/ngx_file.c-76-
--
./nginx/src/core/ngx_file.c-82-        ngx_log_debug1(NGX_LOG_DEBUG_CORE, file->log, 0,
./nginx/src/core/ngx_file.c-83-                       "temp fd:%d", file->fd);
./nginx/src/core/ngx_file.c-84-
./nginx/src/core/ngx_file.c-85-        if (file->fd != NGX_INVALID_FILE) {
./nginx/src/core/ngx_file.c-86-
./nginx/src/core/ngx_file.c-87-            cln->handler = clean ? ngx_pool_delete_file : ngx_pool_cleanup_file;
./nginx/src/core/ngx_file.c-88-            clnf = cln->data;
./nginx/src/core/ngx_file.c-89-
./nginx/src/core/ngx_file.c-90-            clnf->fd = file->fd;
./nginx/src/core/ngx_file.c-91-            clnf->name = file->name.data;
./nginx/src/core/ngx_file.c:92:            clnf->log = pool->log;
./nginx/src/core/ngx_file.c-93-
./nginx/src/core/ngx_file.c-94-            return NGX_OK;
./nginx/src/core/ngx_file.c-95-        }
./nginx/src/core/ngx_file.c-96-
./nginx/src/core/ngx_file.c-97-        err = ngx_errno;
./nginx/src/core/ngx_file.c-98-
./nginx/src/core/ngx_file.c-99-        if (err == NGX_EEXIST) {
./nginx/src/core/ngx_file.c-100-            n = (uint32_t) ngx_next_temp_number(1);
./nginx/src/core/ngx_file.c-101-            continue;
./nginx/src/core/ngx_file.c-102-        }
--
./nginx/src/core/ngx_file.c-244-    ngx_str_t   *value;
./nginx/src/core/ngx_file.c-245-    ngx_uint_t   i, n;
./nginx/src/core/ngx_file.c-246-    ngx_path_t  *path, **slot;
./nginx/src/core/ngx_file.c-247-
./nginx/src/core/ngx_file.c-248-    slot = (ngx_path_t **) (p + cmd->offset);
./nginx/src/core/ngx_file.c-249-
./nginx/src/core/ngx_file.c-250-    if (*slot) {
./nginx/src/core/ngx_file.c-251-        return "is duplicate";
./nginx/src/core/ngx_file.c-252-    }
./nginx/src/core/ngx_file.c-253-
./nginx/src/core/ngx_file.c:254:    path = ngx_pcalloc(cf->pool, sizeof(ngx_path_t));
./nginx/src/core/ngx_file.c-255-    if (path == NULL) {
./nginx/src/core/ngx_file.c-256-        return NGX_CONF_ERROR;
./nginx/src/core/ngx_file.c-257-    }
./nginx/src/core/ngx_file.c-258-
./nginx/src/core/ngx_file.c-259-    value = cf->args->elts;
./nginx/src/core/ngx_file.c-260-
./nginx/src/core/ngx_file.c-261-    path->name = value[1];
./nginx/src/core/ngx_file.c-262-
./nginx/src/core/ngx_file.c-263-    if (path->name.data[path->name.len - 1] == '/') {
./nginx/src/core/ngx_file.c-264-        path->name.len--;
--
./nginx/src/core/ngx_file.c-304-{
./nginx/src/core/ngx_file.c-305-    if (*path) {
./nginx/src/core/ngx_file.c-306-        return NGX_CONF_OK;
./nginx/src/core/ngx_file.c-307-    }
./nginx/src/core/ngx_file.c-308-
./nginx/src/core/ngx_file.c-309-    if (prev) {
./nginx/src/core/ngx_file.c-310-        *path = prev;
./nginx/src/core/ngx_file.c-311-        return NGX_CONF_OK;
./nginx/src/core/ngx_file.c-312-    }
./nginx/src/core/ngx_file.c-313-
./nginx/src/core/ngx_file.c:314:    *path = ngx_palloc(cf->pool, sizeof(ngx_path_t));
./nginx/src/core/ngx_file.c-315-    if (*path == NULL) {
./nginx/src/core/ngx_file.c-316-        return NGX_CONF_ERROR;
./nginx/src/core/ngx_file.c-317-    }
./nginx/src/core/ngx_file.c-318-
./nginx/src/core/ngx_file.c-319-    (*path)->name = init->name;
./nginx/src/core/ngx_file.c-320-
./nginx/src/core/ngx_file.c-321-    if (ngx_conf_full_name(cf->cycle, &(*path)->name, 0) != NGX_OK) {
./nginx/src/core/ngx_file.c-322-        return NGX_CONF_ERROR;
./nginx/src/core/ngx_file.c-323-    }
./nginx/src/core/ngx_file.c-324-
--
./nginx/src/core/ngx_buf.c-3- * Copyright (C) Igor Sysoev
./nginx/src/core/ngx_buf.c-4- * Copyright (C) Nginx, Inc.
./nginx/src/core/ngx_buf.c-5- */
./nginx/src/core/ngx_buf.c-6-
./nginx/src/core/ngx_buf.c-7-
./nginx/src/core/ngx_buf.c-8-#include <ngx_config.h>
./nginx/src/core/ngx_buf.c-9-#include <ngx_core.h>
./nginx/src/core/ngx_buf.c-10-
./nginx/src/core/ngx_buf.c-11-
./nginx/src/core/ngx_buf.c-12-ngx_buf_t *
./nginx/src/core/ngx_buf.c:13:ngx_create_temp_buf(ngx_pool_t *pool, size_t size)
./nginx/src/core/ngx_buf.c-14-{
./nginx/src/core/ngx_buf.c-15-    ngx_buf_t *b;
./nginx/src/core/ngx_buf.c-16-
./nginx/src/core/ngx_buf.c:17:    b = ngx_calloc_buf(pool);
./nginx/src/core/ngx_buf.c-18-    if (b == NULL) {
./nginx/src/core/ngx_buf.c-19-        return NULL;
./nginx/src/core/ngx_buf.c-20-    }
./nginx/src/core/ngx_buf.c-21-
./nginx/src/core/ngx_buf.c:22:    b->start = ngx_palloc(pool, size);
./nginx/src/core/ngx_buf.c-23-    if (b->start == NULL) {
./nginx/src/core/ngx_buf.c-24-        return NULL;
./nginx/src/core/ngx_buf.c-25-    }
./nginx/src/core/ngx_buf.c-26-
./nginx/src/core/ngx_buf.c-27-    /*
./nginx/src/core/ngx_buf.c-28-     * set by ngx_calloc_buf():
./nginx/src/core/ngx_buf.c-29-     *
./nginx/src/core/ngx_buf.c-30-     *     b->file_pos = 0;
./nginx/src/core/ngx_buf.c-31-     *     b->file_last = 0;
./nginx/src/core/ngx_buf.c-32-     *     b->file = NULL;
--
./nginx/src/core/ngx_buf.c-38-    b->pos = b->start;
./nginx/src/core/ngx_buf.c-39-    b->last = b->start;
./nginx/src/core/ngx_buf.c-40-    b->end = b->last + size;
./nginx/src/core/ngx_buf.c-41-    b->temporary = 1;
./nginx/src/core/ngx_buf.c-42-
./nginx/src/core/ngx_buf.c-43-    return b;
./nginx/src/core/ngx_buf.c-44-}
./nginx/src/core/ngx_buf.c-45-
./nginx/src/core/ngx_buf.c-46-
./nginx/src/core/ngx_buf.c-47-ngx_chain_t *
./nginx/src/core/ngx_buf.c:48:ngx_alloc_chain_link(ngx_pool_t *pool)
./nginx/src/core/ngx_buf.c-49-{
./nginx/src/core/ngx_buf.c-50-    ngx_chain_t  *cl;
./nginx/src/core/ngx_buf.c-51-
./nginx/src/core/ngx_buf.c:52:    cl = pool->chain;
./nginx/src/core/ngx_buf.c-53-
./nginx/src/core/ngx_buf.c-54-    if (cl) {
./nginx/src/core/ngx_buf.c:55:        pool->chain = cl->next;
./nginx/src/core/ngx_buf.c-56-        return cl;
./nginx/src/core/ngx_buf.c-57-    }
./nginx/src/core/ngx_buf.c-58-
./nginx/src/core/ngx_buf.c:59:    cl = ngx_palloc(pool, sizeof(ngx_chain_t));
./nginx/src/core/ngx_buf.c-60-    if (cl == NULL) {
./nginx/src/core/ngx_buf.c-61-        return NULL;
./nginx/src/core/ngx_buf.c-62-    }
./nginx/src/core/ngx_buf.c-63-
./nginx/src/core/ngx_buf.c-64-    return cl;
./nginx/src/core/ngx_buf.c-65-}
./nginx/src/core/ngx_buf.c-66-
./nginx/src/core/ngx_buf.c-67-
./nginx/src/core/ngx_buf.c-68-ngx_chain_t *
./nginx/src/core/ngx_buf.c:69:ngx_create_chain_of_bufs(ngx_pool_t *pool, ngx_bufs_t *bufs)
./nginx/src/core/ngx_buf.c-70-{
./nginx/src/core/ngx_buf.c-71-    u_char       *p;
./nginx/src/core/ngx_buf.c-72-    ngx_int_t     i;
./nginx/src/core/ngx_buf.c-73-    ngx_buf_t    *b;
./nginx/src/core/ngx_buf.c-74-    ngx_chain_t  *chain, *cl, **ll;
./nginx/src/core/ngx_buf.c-75-
./nginx/src/core/ngx_buf.c:76:    p = ngx_palloc(pool, bufs->num * bufs->size);
./nginx/src/core/ngx_buf.c-77-    if (p == NULL) {
./nginx/src/core/ngx_buf.c-78-        return NULL;
./nginx/src/core/ngx_buf.c-79-    }
./nginx/src/core/ngx_buf.c-80-
./nginx/src/core/ngx_buf.c-81-    ll = &chain;
./nginx/src/core/ngx_buf.c-82-
./nginx/src/core/ngx_buf.c-83-    for (i = 0; i < bufs->num; i++) {
./nginx/src/core/ngx_buf.c-84-
./nginx/src/core/ngx_buf.c:85:        b = ngx_calloc_buf(pool);
./nginx/src/core/ngx_buf.c-86-        if (b == NULL) {
./nginx/src/core/ngx_buf.c-87-            return NULL;
./nginx/src/core/ngx_buf.c-88-        }
./nginx/src/core/ngx_buf.c-89-
./nginx/src/core/ngx_buf.c-90-        /*
./nginx/src/core/ngx_buf.c-91-         * set by ngx_calloc_buf():
./nginx/src/core/ngx_buf.c-92-         *
./nginx/src/core/ngx_buf.c-93-         *     b->file_pos = 0;
./nginx/src/core/ngx_buf.c-94-         *     b->file_last = 0;
./nginx/src/core/ngx_buf.c-95-         *     b->file = NULL;
--
./nginx/src/core/ngx_buf.c-100-         */
./nginx/src/core/ngx_buf.c-101-
./nginx/src/core/ngx_buf.c-102-        b->pos = p;
./nginx/src/core/ngx_buf.c-103-        b->last = p;
./nginx/src/core/ngx_buf.c-104-        b->temporary = 1;
./nginx/src/core/ngx_buf.c-105-
./nginx/src/core/ngx_buf.c-106-        b->start = p;
./nginx/src/core/ngx_buf.c-107-        p += bufs->size;
./nginx/src/core/ngx_buf.c-108-        b->end = p;
./nginx/src/core/ngx_buf.c-109-
./nginx/src/core/ngx_buf.c:110:        cl = ngx_alloc_chain_link(pool);
./nginx/src/core/ngx_buf.c-111-        if (cl == NULL) {
./nginx/src/core/ngx_buf.c-112-            return NULL;
./nginx/src/core/ngx_buf.c-113-        }
./nginx/src/core/ngx_buf.c-114-
./nginx/src/core/ngx_buf.c-115-        cl->buf = b;
./nginx/src/core/ngx_buf.c-116-        *ll = cl;
./nginx/src/core/ngx_buf.c-117-        ll = &cl->next;
./nginx/src/core/ngx_buf.c-118-    }
./nginx/src/core/ngx_buf.c-119-
./nginx/src/core/ngx_buf.c-120-    *ll = NULL;
./nginx/src/core/ngx_buf.c-121-
./nginx/src/core/ngx_buf.c-122-    return chain;
./nginx/src/core/ngx_buf.c-123-}
./nginx/src/core/ngx_buf.c-124-
./nginx/src/core/ngx_buf.c-125-
./nginx/src/core/ngx_buf.c-126-ngx_int_t
./nginx/src/core/ngx_buf.c:127:ngx_chain_add_copy(ngx_pool_t *pool, ngx_chain_t **chain, ngx_chain_t *in)
./nginx/src/core/ngx_buf.c-128-{
./nginx/src/core/ngx_buf.c-129-    ngx_chain_t  *cl, **ll;
./nginx/src/core/ngx_buf.c-130-
./nginx/src/core/ngx_buf.c-131-    ll = chain;
./nginx/src/core/ngx_buf.c-132-
./nginx/src/core/ngx_buf.c-133-    for (cl = *chain; cl; cl = cl->next) {
./nginx/src/core/ngx_buf.c-134-        ll = &cl->next;
./nginx/src/core/ngx_buf.c-135-    }
./nginx/src/core/ngx_buf.c-136-
./nginx/src/core/ngx_buf.c-137-    while (in) {
./nginx/src/core/ngx_buf.c:138:        cl = ngx_alloc_chain_link(pool);
./nginx/src/core/ngx_buf.c-139-        if (cl == NULL) {
./nginx/src/core/ngx_buf.c-140-            return NGX_ERROR;
./nginx/src/core/ngx_buf.c-141-        }
./nginx/src/core/ngx_buf.c-142-
./nginx/src/core/ngx_buf.c-143-        cl->buf = in->buf;
./nginx/src/core/ngx_buf.c-144-        *ll = cl;
./nginx/src/core/ngx_buf.c-145-        ll = &cl->next;
./nginx/src/core/ngx_buf.c-146-        in = in->next;
./nginx/src/core/ngx_buf.c-147-    }
./nginx/src/core/ngx_buf.c-148-
--
./nginx/src/core/ngx_array.c-20-    }
./nginx/src/core/ngx_array.c-21-
./nginx/src/core/ngx_array.c-22-    a->elts = ngx_palloc(p, n * size);
./nginx/src/core/ngx_array.c-23-    if (a->elts == NULL) {
./nginx/src/core/ngx_array.c-24-        return NULL;
./nginx/src/core/ngx_array.c-25-    }
./nginx/src/core/ngx_array.c-26-
./nginx/src/core/ngx_array.c-27-    a->nelts = 0;
./nginx/src/core/ngx_array.c-28-    a->size = size;
./nginx/src/core/ngx_array.c-29-    a->nalloc = n;
./nginx/src/core/ngx_array.c:30:    a->pool = p;
./nginx/src/core/ngx_array.c-31-
./nginx/src/core/ngx_array.c-32-    return a;
./nginx/src/core/ngx_array.c-33-}
./nginx/src/core/ngx_array.c-34-
./nginx/src/core/ngx_array.c-35-
./nginx/src/core/ngx_array.c-36-void
./nginx/src/core/ngx_array.c-37-ngx_array_destroy(ngx_array_t *a)
./nginx/src/core/ngx_array.c-38-{
./nginx/src/core/ngx_array.c-39-    ngx_pool_t  *p;
./nginx/src/core/ngx_array.c-40-
./nginx/src/core/ngx_array.c:41:    p = a->pool;
./nginx/src/core/ngx_array.c-42-
./nginx/src/core/ngx_array.c-43-    if ((u_char *) a->elts + a->size * a->nalloc == p->d.last) {
./nginx/src/core/ngx_array.c-44-        p->d.last -= a->size * a->nalloc;
./nginx/src/core/ngx_array.c-45-    }
./nginx/src/core/ngx_array.c-46-
./nginx/src/core/ngx_array.c-47-    if ((u_char *) a + sizeof(ngx_array_t) == p->d.last) {
./nginx/src/core/ngx_array.c-48-        p->d.last = (u_char *) a;
./nginx/src/core/ngx_array.c-49-    }
./nginx/src/core/ngx_array.c-50-}
./nginx/src/core/ngx_array.c-51-
--
./nginx/src/core/ngx_array.c-56-    void        *elt, *new;
./nginx/src/core/ngx_array.c-57-    size_t       size;
./nginx/src/core/ngx_array.c-58-    ngx_pool_t  *p;
./nginx/src/core/ngx_array.c-59-
./nginx/src/core/ngx_array.c-60-    if (a->nelts == a->nalloc) {
./nginx/src/core/ngx_array.c-61-
./nginx/src/core/ngx_array.c-62-        /* the array is full */
./nginx/src/core/ngx_array.c-63-
./nginx/src/core/ngx_array.c-64-        size = a->size * a->nalloc;
./nginx/src/core/ngx_array.c-65-
./nginx/src/core/ngx_array.c:66:        p = a->pool;
./nginx/src/core/ngx_array.c-67-
./nginx/src/core/ngx_array.c-68-        if ((u_char *) a->elts + size == p->d.last
./nginx/src/core/ngx_array.c-69-            && p->d.last + a->size <= p->d.end)
./nginx/src/core/ngx_array.c-70-        {
./nginx/src/core/ngx_array.c-71-            /*
./nginx/src/core/ngx_array.c:72:             * the array allocation is the last in the pool
./nginx/src/core/ngx_array.c-73-             * and there is space for new allocation
./nginx/src/core/ngx_array.c-74-             */
./nginx/src/core/ngx_array.c-75-
./nginx/src/core/ngx_array.c-76-            p->d.last += a->size;
./nginx/src/core/ngx_array.c-77-            a->nalloc++;
./nginx/src/core/ngx_array.c-78-
./nginx/src/core/ngx_array.c-79-        } else {
./nginx/src/core/ngx_array.c-80-            /* allocate a new array */
./nginx/src/core/ngx_array.c-81-
./nginx/src/core/ngx_array.c-82-            new = ngx_palloc(p, 2 * size);
--
./nginx/src/core/ngx_array.c-104-    size_t       size;
./nginx/src/core/ngx_array.c-105-    ngx_uint_t   nalloc;
./nginx/src/core/ngx_array.c-106-    ngx_pool_t  *p;
./nginx/src/core/ngx_array.c-107-
./nginx/src/core/ngx_array.c-108-    size = n * a->size;
./nginx/src/core/ngx_array.c-109-
./nginx/src/core/ngx_array.c-110-    if (a->nelts + n > a->nalloc) {
./nginx/src/core/ngx_array.c-111-
./nginx/src/core/ngx_array.c-112-        /* the array is full */
./nginx/src/core/ngx_array.c-113-
./nginx/src/core/ngx_array.c:114:        p = a->pool;
./nginx/src/core/ngx_array.c-115-
./nginx/src/core/ngx_array.c-116-        if ((u_char *) a->elts + a->size * a->nalloc == p->d.last
./nginx/src/core/ngx_array.c-117-            && p->d.last + size <= p->d.end)
./nginx/src/core/ngx_array.c-118-        {
./nginx/src/core/ngx_array.c-119-            /*
./nginx/src/core/ngx_array.c:120:             * the array allocation is the last in the pool
./nginx/src/core/ngx_array.c-121-             * and there is space for new allocation
./nginx/src/core/ngx_array.c-122-             */
./nginx/src/core/ngx_array.c-123-
./nginx/src/core/ngx_array.c-124-            p->d.last += size;
./nginx/src/core/ngx_array.c-125-            a->nalloc += n;
./nginx/src/core/ngx_array.c-126-
./nginx/src/core/ngx_array.c-127-        } else {
./nginx/src/core/ngx_array.c-128-            /* allocate a new array */
./nginx/src/core/ngx_array.c-129-
./nginx/src/core/ngx_array.c-130-            nalloc = 2 * ((n >= a->nalloc) ? n : a->nalloc);
--
./nginx/src/core/ngx_conf_file.c-669-                last_space = 1;
./nginx/src/core/ngx_conf_file.c-670-                found = 1;
./nginx/src/core/ngx_conf_file.c-671-            }
./nginx/src/core/ngx_conf_file.c-672-
./nginx/src/core/ngx_conf_file.c-673-            if (found) {
./nginx/src/core/ngx_conf_file.c-674-                word = ngx_array_push(cf->args);
./nginx/src/core/ngx_conf_file.c-675-                if (word == NULL) {
./nginx/src/core/ngx_conf_file.c-676-                    return NGX_ERROR;
./nginx/src/core/ngx_conf_file.c-677-                }
./nginx/src/core/ngx_conf_file.c-678-
./nginx/src/core/ngx_conf_file.c:679:                word->data = ngx_pnalloc(cf->pool, b->pos - start + 1);
./nginx/src/core/ngx_conf_file.c-680-                if (word->data == NULL) {
./nginx/src/core/ngx_conf_file.c-681-                    return NGX_ERROR;
./nginx/src/core/ngx_conf_file.c-682-                }
./nginx/src/core/ngx_conf_file.c-683-
./nginx/src/core/ngx_conf_file.c-684-                for (dst = word->data, src = start, len = 0;
./nginx/src/core/ngx_conf_file.c-685-                     src < b->pos - 1;
./nginx/src/core/ngx_conf_file.c-686-                     len++)
./nginx/src/core/ngx_conf_file.c-687-                {
./nginx/src/core/ngx_conf_file.c-688-                    if (*src == '\\') {
./nginx/src/core/ngx_conf_file.c-689-                        switch (src[1]) {
--
./nginx/src/core/ngx_conf_file.c-779-    rv = NGX_CONF_OK;
./nginx/src/core/ngx_conf_file.c-780-
./nginx/src/core/ngx_conf_file.c-781-    for ( ;; ) {
./nginx/src/core/ngx_conf_file.c-782-        n = ngx_read_glob(&gl, &name);
./nginx/src/core/ngx_conf_file.c-783-
./nginx/src/core/ngx_conf_file.c-784-        if (n != NGX_OK) {
./nginx/src/core/ngx_conf_file.c-785-            break;
./nginx/src/core/ngx_conf_file.c-786-        }
./nginx/src/core/ngx_conf_file.c-787-
./nginx/src/core/ngx_conf_file.c-788-        file.len = name.len++;
./nginx/src/core/ngx_conf_file.c:789:        file.data = ngx_pstrdup(cf->pool, &name);
./nginx/src/core/ngx_conf_file.c-790-
./nginx/src/core/ngx_conf_file.c-791-        ngx_log_debug1(NGX_LOG_DEBUG_CORE, cf->log, 0, "include %s", file.data);
./nginx/src/core/ngx_conf_file.c-792-
./nginx/src/core/ngx_conf_file.c-793-        rv = ngx_conf_parse(cf, &file);
./nginx/src/core/ngx_conf_file.c-794-
./nginx/src/core/ngx_conf_file.c-795-        if (rv != NGX_CONF_OK) {
./nginx/src/core/ngx_conf_file.c-796-            break;
./nginx/src/core/ngx_conf_file.c-797-        }
./nginx/src/core/ngx_conf_file.c-798-    }
./nginx/src/core/ngx_conf_file.c-799-
--
./nginx/src/core/ngx_conf_file.c-826-    }
./nginx/src/core/ngx_conf_file.c-827-
./nginx/src/core/ngx_conf_file.c-828-#if (NGX_WIN32)
./nginx/src/core/ngx_conf_file.c-829-
./nginx/src/core/ngx_conf_file.c-830-    if (rc == 2) {
./nginx/src/core/ngx_conf_file.c-831-        len = rc;
./nginx/src/core/ngx_conf_file.c-832-    }
./nginx/src/core/ngx_conf_file.c-833-
./nginx/src/core/ngx_conf_file.c-834-#endif
./nginx/src/core/ngx_conf_file.c-835-
./nginx/src/core/ngx_conf_file.c:836:    n = ngx_pnalloc(cycle->pool, len + name->len + 1);
./nginx/src/core/ngx_conf_file.c-837-    if (n == NULL) {
./nginx/src/core/ngx_conf_file.c-838-        return NGX_ERROR;
./nginx/src/core/ngx_conf_file.c-839-    }
./nginx/src/core/ngx_conf_file.c-840-
./nginx/src/core/ngx_conf_file.c-841-    p = ngx_cpymem(n, prefix, len);
./nginx/src/core/ngx_conf_file.c-842-    ngx_cpystrn(p, name->data, name->len + 1);
./nginx/src/core/ngx_conf_file.c-843-
./nginx/src/core/ngx_conf_file.c-844-    name->len += len;
./nginx/src/core/ngx_conf_file.c-845-    name->data = n;
./nginx/src/core/ngx_conf_file.c-846-
--
./nginx/src/core/ngx_conf_file.c-1098-{
./nginx/src/core/ngx_conf_file.c-1099-    char  *p = conf;
./nginx/src/core/ngx_conf_file.c-1100-
./nginx/src/core/ngx_conf_file.c-1101-    ngx_str_t         *value, *s;
./nginx/src/core/ngx_conf_file.c-1102-    ngx_array_t      **a;
./nginx/src/core/ngx_conf_file.c-1103-    ngx_conf_post_t   *post;
./nginx/src/core/ngx_conf_file.c-1104-
./nginx/src/core/ngx_conf_file.c-1105-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/core/ngx_conf_file.c-1106-
./nginx/src/core/ngx_conf_file.c-1107-    if (*a == NGX_CONF_UNSET_PTR) {
./nginx/src/core/ngx_conf_file.c:1108:        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_str_t));
./nginx/src/core/ngx_conf_file.c-1109-        if (*a == NULL) {
./nginx/src/core/ngx_conf_file.c-1110-            return NGX_CONF_ERROR;
./nginx/src/core/ngx_conf_file.c-1111-        }
./nginx/src/core/ngx_conf_file.c-1112-    }
./nginx/src/core/ngx_conf_file.c-1113-
./nginx/src/core/ngx_conf_file.c-1114-    s = ngx_array_push(*a);
./nginx/src/core/ngx_conf_file.c-1115-    if (s == NULL) {
./nginx/src/core/ngx_conf_file.c-1116-        return NGX_CONF_ERROR;
./nginx/src/core/ngx_conf_file.c-1117-    }
./nginx/src/core/ngx_conf_file.c-1118-
--
./nginx/src/core/ngx_conf_file.c-1135-    char  *p = conf;
./nginx/src/core/ngx_conf_file.c-1136-
./nginx/src/core/ngx_conf_file.c-1137-    ngx_str_t         *value;
./nginx/src/core/ngx_conf_file.c-1138-    ngx_array_t      **a;
./nginx/src/core/ngx_conf_file.c-1139-    ngx_keyval_t      *kv;
./nginx/src/core/ngx_conf_file.c-1140-    ngx_conf_post_t   *post;
./nginx/src/core/ngx_conf_file.c-1141-
./nginx/src/core/ngx_conf_file.c-1142-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/core/ngx_conf_file.c-1143-
./nginx/src/core/ngx_conf_file.c-1144-    if (*a == NULL) {
./nginx/src/core/ngx_conf_file.c:1145:        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_keyval_t));
./nginx/src/core/ngx_conf_file.c-1146-        if (*a == NULL) {
./nginx/src/core/ngx_conf_file.c-1147-            return NGX_CONF_ERROR;
./nginx/src/core/ngx_conf_file.c-1148-        }
./nginx/src/core/ngx_conf_file.c-1149-    }
./nginx/src/core/ngx_conf_file.c-1150-
./nginx/src/core/ngx_conf_file.c-1151-    kv = ngx_array_push(*a);
./nginx/src/core/ngx_conf_file.c-1152-    if (kv == NULL) {
./nginx/src/core/ngx_conf_file.c-1153-        return NGX_CONF_ERROR;
./nginx/src/core/ngx_conf_file.c-1154-    }
./nginx/src/core/ngx_conf_file.c-1155-
--
./nginx/src/core/ngx_hash.c-253-{
./nginx/src/core/ngx_hash.c-254-    u_char          *elts;
./nginx/src/core/ngx_hash.c-255-    size_t           len;
./nginx/src/core/ngx_hash.c-256-    u_short         *test;
./nginx/src/core/ngx_hash.c-257-    ngx_uint_t       i, n, key, size, start, bucket_size;
./nginx/src/core/ngx_hash.c-258-    ngx_hash_elt_t  *elt, **buckets;
./nginx/src/core/ngx_hash.c-259-
./nginx/src/core/ngx_hash.c-260-    for (n = 0; n < nelts; n++) {
./nginx/src/core/ngx_hash.c-261-        if (hinit->bucket_size < NGX_HASH_ELT_SIZE(&names[n]) + sizeof(void *))
./nginx/src/core/ngx_hash.c-262-        {
./nginx/src/core/ngx_hash.c:263:            ngx_log_error(NGX_LOG_EMERG, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-264-                          "could not build the %s, you should "
./nginx/src/core/ngx_hash.c-265-                          "increase %s_bucket_size: %i",
./nginx/src/core/ngx_hash.c-266-                          hinit->name, hinit->name, hinit->bucket_size);
./nginx/src/core/ngx_hash.c-267-            return NGX_ERROR;
./nginx/src/core/ngx_hash.c-268-        }
./nginx/src/core/ngx_hash.c-269-    }
./nginx/src/core/ngx_hash.c-270-
./nginx/src/core/ngx_hash.c:271:    test = ngx_alloc(hinit->max_size * sizeof(u_short), hinit->pool->log);
./nginx/src/core/ngx_hash.c-272-    if (test == NULL) {
./nginx/src/core/ngx_hash.c-273-        return NGX_ERROR;
./nginx/src/core/ngx_hash.c-274-    }
./nginx/src/core/ngx_hash.c-275-
./nginx/src/core/ngx_hash.c-276-    bucket_size = hinit->bucket_size - sizeof(void *);
./nginx/src/core/ngx_hash.c-277-
./nginx/src/core/ngx_hash.c-278-    start = nelts / (bucket_size / (2 * sizeof(void *)));
./nginx/src/core/ngx_hash.c-279-    start = start ? start : 1;
./nginx/src/core/ngx_hash.c-280-
./nginx/src/core/ngx_hash.c-281-    if (hinit->max_size > 10000 && nelts && hinit->max_size / nelts < 100) {
--
./nginx/src/core/ngx_hash.c-288-
./nginx/src/core/ngx_hash.c-289-        for (n = 0; n < nelts; n++) {
./nginx/src/core/ngx_hash.c-290-            if (names[n].key.data == NULL) {
./nginx/src/core/ngx_hash.c-291-                continue;
./nginx/src/core/ngx_hash.c-292-            }
./nginx/src/core/ngx_hash.c-293-
./nginx/src/core/ngx_hash.c-294-            key = names[n].key_hash % size;
./nginx/src/core/ngx_hash.c-295-            test[key] = (u_short) (test[key] + NGX_HASH_ELT_SIZE(&names[n]));
./nginx/src/core/ngx_hash.c-296-
./nginx/src/core/ngx_hash.c-297-#if 0
./nginx/src/core/ngx_hash.c:298:            ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-299-                          "%ui: %ui %ui \"%V\"",
./nginx/src/core/ngx_hash.c-300-                          size, key, test[key], &names[n].key);
./nginx/src/core/ngx_hash.c-301-#endif
./nginx/src/core/ngx_hash.c-302-
./nginx/src/core/ngx_hash.c-303-            if (test[key] > (u_short) bucket_size) {
./nginx/src/core/ngx_hash.c-304-                goto next;
./nginx/src/core/ngx_hash.c-305-            }
./nginx/src/core/ngx_hash.c-306-        }
./nginx/src/core/ngx_hash.c-307-
./nginx/src/core/ngx_hash.c-308-        goto found;
./nginx/src/core/ngx_hash.c-309-
./nginx/src/core/ngx_hash.c-310-    next:
./nginx/src/core/ngx_hash.c-311-
./nginx/src/core/ngx_hash.c-312-        continue;
./nginx/src/core/ngx_hash.c-313-    }
./nginx/src/core/ngx_hash.c-314-
./nginx/src/core/ngx_hash.c:315:    ngx_log_error(NGX_LOG_EMERG, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-316-                  "could not build the %s, you should increase "
./nginx/src/core/ngx_hash.c-317-                  "either %s_max_size: %i or %s_bucket_size: %i",
./nginx/src/core/ngx_hash.c-318-                  hinit->name, hinit->name, hinit->max_size,
./nginx/src/core/ngx_hash.c-319-                  hinit->name, hinit->bucket_size);
./nginx/src/core/ngx_hash.c-320-
./nginx/src/core/ngx_hash.c-321-    ngx_free(test);
./nginx/src/core/ngx_hash.c-322-
./nginx/src/core/ngx_hash.c-323-    return NGX_ERROR;
./nginx/src/core/ngx_hash.c-324-
./nginx/src/core/ngx_hash.c-325-found:
--
./nginx/src/core/ngx_hash.c-343-        if (test[i] == sizeof(void *)) {
./nginx/src/core/ngx_hash.c-344-            continue;
./nginx/src/core/ngx_hash.c-345-        }
./nginx/src/core/ngx_hash.c-346-
./nginx/src/core/ngx_hash.c-347-        test[i] = (u_short) (ngx_align(test[i], ngx_cacheline_size));
./nginx/src/core/ngx_hash.c-348-
./nginx/src/core/ngx_hash.c-349-        len += test[i];
./nginx/src/core/ngx_hash.c-350-    }
./nginx/src/core/ngx_hash.c-351-
./nginx/src/core/ngx_hash.c-352-    if (hinit->hash == NULL) {
./nginx/src/core/ngx_hash.c:353:        hinit->hash = ngx_pcalloc(hinit->pool, sizeof(ngx_hash_wildcard_t)
./nginx/src/core/ngx_hash.c-354-                                             + size * sizeof(ngx_hash_elt_t *));
./nginx/src/core/ngx_hash.c-355-        if (hinit->hash == NULL) {
./nginx/src/core/ngx_hash.c-356-            ngx_free(test);
./nginx/src/core/ngx_hash.c-357-            return NGX_ERROR;
./nginx/src/core/ngx_hash.c-358-        }
./nginx/src/core/ngx_hash.c-359-
./nginx/src/core/ngx_hash.c-360-        buckets = (ngx_hash_elt_t **)
./nginx/src/core/ngx_hash.c-361-                      ((u_char *) hinit->hash + sizeof(ngx_hash_wildcard_t));
./nginx/src/core/ngx_hash.c-362-
./nginx/src/core/ngx_hash.c-363-    } else {
./nginx/src/core/ngx_hash.c:364:        buckets = ngx_pcalloc(hinit->pool, size * sizeof(ngx_hash_elt_t *));
./nginx/src/core/ngx_hash.c-365-        if (buckets == NULL) {
./nginx/src/core/ngx_hash.c-366-            ngx_free(test);
./nginx/src/core/ngx_hash.c-367-            return NGX_ERROR;
./nginx/src/core/ngx_hash.c-368-        }
./nginx/src/core/ngx_hash.c-369-    }
./nginx/src/core/ngx_hash.c-370-
./nginx/src/core/ngx_hash.c:371:    elts = ngx_palloc(hinit->pool, len + ngx_cacheline_size);
./nginx/src/core/ngx_hash.c-372-    if (elts == NULL) {
./nginx/src/core/ngx_hash.c-373-        ngx_free(test);
./nginx/src/core/ngx_hash.c-374-        return NGX_ERROR;
./nginx/src/core/ngx_hash.c-375-    }
./nginx/src/core/ngx_hash.c-376-
./nginx/src/core/ngx_hash.c-377-    elts = ngx_align_ptr(elts, ngx_cacheline_size);
./nginx/src/core/ngx_hash.c-378-
./nginx/src/core/ngx_hash.c-379-    for (i = 0; i < size; i++) {
./nginx/src/core/ngx_hash.c-380-        if (test[i] == sizeof(void *)) {
./nginx/src/core/ngx_hash.c-381-            continue;
--
./nginx/src/core/ngx_hash.c-423-
./nginx/src/core/ngx_hash.c-424-#if 0
./nginx/src/core/ngx_hash.c-425-
./nginx/src/core/ngx_hash.c-426-    for (i = 0; i < size; i++) {
./nginx/src/core/ngx_hash.c-427-        ngx_str_t   val;
./nginx/src/core/ngx_hash.c-428-        ngx_uint_t  key;
./nginx/src/core/ngx_hash.c-429-
./nginx/src/core/ngx_hash.c-430-        elt = buckets[i];
./nginx/src/core/ngx_hash.c-431-
./nginx/src/core/ngx_hash.c-432-        if (elt == NULL) {
./nginx/src/core/ngx_hash.c:433:            ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-434-                          "%ui: NULL", i);
./nginx/src/core/ngx_hash.c-435-            continue;
./nginx/src/core/ngx_hash.c-436-        }
./nginx/src/core/ngx_hash.c-437-
./nginx/src/core/ngx_hash.c-438-        while (elt->value) {
./nginx/src/core/ngx_hash.c-439-            val.len = elt->len;
./nginx/src/core/ngx_hash.c-440-            val.data = &elt->name[0];
./nginx/src/core/ngx_hash.c-441-
./nginx/src/core/ngx_hash.c-442-            key = hinit->key(val.data, val.len);
./nginx/src/core/ngx_hash.c-443-
./nginx/src/core/ngx_hash.c:444:            ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-445-                          "%ui: %p \"%V\" %ui", i, elt, &val, key);
./nginx/src/core/ngx_hash.c-446-
./nginx/src/core/ngx_hash.c-447-            elt = (ngx_hash_elt_t *) ngx_align_ptr(&elt->name[0] + elt->len,
./nginx/src/core/ngx_hash.c-448-                                                   sizeof(void *));
./nginx/src/core/ngx_hash.c-449-        }
./nginx/src/core/ngx_hash.c-450-    }
./nginx/src/core/ngx_hash.c-451-
./nginx/src/core/ngx_hash.c-452-#endif
./nginx/src/core/ngx_hash.c-453-
./nginx/src/core/ngx_hash.c-454-    return NGX_OK;
--
./nginx/src/core/ngx_hash.c-476-    if (ngx_array_init(&next_names, hinit->temp_pool, nelts,
./nginx/src/core/ngx_hash.c-477-                       sizeof(ngx_hash_key_t))
./nginx/src/core/ngx_hash.c-478-        != NGX_OK)
./nginx/src/core/ngx_hash.c-479-    {
./nginx/src/core/ngx_hash.c-480-        return NGX_ERROR;
./nginx/src/core/ngx_hash.c-481-    }
./nginx/src/core/ngx_hash.c-482-
./nginx/src/core/ngx_hash.c-483-    for (n = 0; n < nelts; n = i) {
./nginx/src/core/ngx_hash.c-484-
./nginx/src/core/ngx_hash.c-485-#if 0
./nginx/src/core/ngx_hash.c:486:        ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-487-                      "wc0: \"%V\"", &names[n].key);
./nginx/src/core/ngx_hash.c-488-#endif
./nginx/src/core/ngx_hash.c-489-
./nginx/src/core/ngx_hash.c-490-        dot = 0;
./nginx/src/core/ngx_hash.c-491-
./nginx/src/core/ngx_hash.c-492-        for (len = 0; len < names[n].key.len; len++) {
./nginx/src/core/ngx_hash.c-493-            if (names[n].key.data[len] == '.') {
./nginx/src/core/ngx_hash.c-494-                dot = 1;
./nginx/src/core/ngx_hash.c-495-                break;
./nginx/src/core/ngx_hash.c-496-            }
--
./nginx/src/core/ngx_hash.c-500-        if (name == NULL) {
./nginx/src/core/ngx_hash.c-501-            return NGX_ERROR;
./nginx/src/core/ngx_hash.c-502-        }
./nginx/src/core/ngx_hash.c-503-
./nginx/src/core/ngx_hash.c-504-        name->key.len = len;
./nginx/src/core/ngx_hash.c-505-        name->key.data = names[n].key.data;
./nginx/src/core/ngx_hash.c-506-        name->key_hash = hinit->key(name->key.data, name->key.len);
./nginx/src/core/ngx_hash.c-507-        name->value = names[n].value;
./nginx/src/core/ngx_hash.c-508-
./nginx/src/core/ngx_hash.c-509-#if 0
./nginx/src/core/ngx_hash.c:510:        ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-511-                      "wc1: \"%V\" %ui", &name->key, dot);
./nginx/src/core/ngx_hash.c-512-#endif
./nginx/src/core/ngx_hash.c-513-
./nginx/src/core/ngx_hash.c-514-        dot_len = len + 1;
./nginx/src/core/ngx_hash.c-515-
./nginx/src/core/ngx_hash.c-516-        if (dot) {
./nginx/src/core/ngx_hash.c-517-            len++;
./nginx/src/core/ngx_hash.c-518-        }
./nginx/src/core/ngx_hash.c-519-
./nginx/src/core/ngx_hash.c-520-        next_names.nelts = 0;
--
./nginx/src/core/ngx_hash.c-524-            if (next_name == NULL) {
./nginx/src/core/ngx_hash.c-525-                return NGX_ERROR;
./nginx/src/core/ngx_hash.c-526-            }
./nginx/src/core/ngx_hash.c-527-
./nginx/src/core/ngx_hash.c-528-            next_name->key.len = names[n].key.len - len;
./nginx/src/core/ngx_hash.c-529-            next_name->key.data = names[n].key.data + len;
./nginx/src/core/ngx_hash.c-530-            next_name->key_hash = 0;
./nginx/src/core/ngx_hash.c-531-            next_name->value = names[n].value;
./nginx/src/core/ngx_hash.c-532-
./nginx/src/core/ngx_hash.c-533-#if 0
./nginx/src/core/ngx_hash.c:534:            ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-535-                          "wc2: \"%V\"", &next_name->key);
./nginx/src/core/ngx_hash.c-536-#endif
./nginx/src/core/ngx_hash.c-537-        }
./nginx/src/core/ngx_hash.c-538-
./nginx/src/core/ngx_hash.c-539-        for (i = n + 1; i < nelts; i++) {
./nginx/src/core/ngx_hash.c-540-            if (ngx_strncmp(names[n].key.data, names[i].key.data, len) != 0) {
./nginx/src/core/ngx_hash.c-541-                break;
./nginx/src/core/ngx_hash.c-542-            }
./nginx/src/core/ngx_hash.c-543-
./nginx/src/core/ngx_hash.c-544-            if (!dot
--
./nginx/src/core/ngx_hash.c-552-            if (next_name == NULL) {
./nginx/src/core/ngx_hash.c-553-                return NGX_ERROR;
./nginx/src/core/ngx_hash.c-554-            }
./nginx/src/core/ngx_hash.c-555-
./nginx/src/core/ngx_hash.c-556-            next_name->key.len = names[i].key.len - dot_len;
./nginx/src/core/ngx_hash.c-557-            next_name->key.data = names[i].key.data + dot_len;
./nginx/src/core/ngx_hash.c-558-            next_name->key_hash = 0;
./nginx/src/core/ngx_hash.c-559-            next_name->value = names[i].value;
./nginx/src/core/ngx_hash.c-560-
./nginx/src/core/ngx_hash.c-561-#if 0
./nginx/src/core/ngx_hash.c:562:            ngx_log_error(NGX_LOG_ALERT, hinit->pool->log, 0,
./nginx/src/core/ngx_hash.c-563-                          "wc3: \"%V\"", &next_name->key);
./nginx/src/core/ngx_hash.c-564-#endif
./nginx/src/core/ngx_hash.c-565-        }
./nginx/src/core/ngx_hash.c-566-
./nginx/src/core/ngx_hash.c-567-        if (next_names.nelts) {
./nginx/src/core/ngx_hash.c-568-
./nginx/src/core/ngx_hash.c-569-            h = *hinit;
./nginx/src/core/ngx_hash.c-570-            h.hash = NULL;
./nginx/src/core/ngx_hash.c-571-
./nginx/src/core/ngx_hash.c-572-            if (ngx_hash_wildcard_init(&h, (ngx_hash_key_t *) next_names.elts,
--
./nginx/src/core/nginx.c-301-
./nginx/src/core/nginx.c-302-    /*
./nginx/src/core/nginx.c-303-     * init_cycle->log is required for signal handlers and
./nginx/src/core/nginx.c-304-     * ngx_process_options()
./nginx/src/core/nginx.c-305-     */
./nginx/src/core/nginx.c-306-
./nginx/src/core/nginx.c-307-    ngx_memzero(&init_cycle, sizeof(ngx_cycle_t));
./nginx/src/core/nginx.c-308-    init_cycle.log = log;
./nginx/src/core/nginx.c-309-    ngx_cycle = &init_cycle;
./nginx/src/core/nginx.c-310-
./nginx/src/core/nginx.c:311:    init_cycle.pool = ngx_create_pool(1024, log);
./nginx/src/core/nginx.c:312:    if (init_cycle.pool == NULL) {
./nginx/src/core/nginx.c-313-        return 1;
./nginx/src/core/nginx.c-314-    }
./nginx/src/core/nginx.c-315-
./nginx/src/core/nginx.c-316-    if (ngx_save_argv(&init_cycle, argc, argv) != NGX_OK) {
./nginx/src/core/nginx.c-317-        return 1;
./nginx/src/core/nginx.c-318-    }
./nginx/src/core/nginx.c-319-
./nginx/src/core/nginx.c-320-    if (ngx_process_options(&init_cycle) != NGX_OK) {
./nginx/src/core/nginx.c-321-        return 1;
./nginx/src/core/nginx.c-322-    }
--
./nginx/src/core/nginx.c-440-
./nginx/src/core/nginx.c-441-    inherited = (u_char *) getenv(NGINX_VAR);
./nginx/src/core/nginx.c-442-
./nginx/src/core/nginx.c-443-    if (inherited == NULL) {
./nginx/src/core/nginx.c-444-        return NGX_OK;
./nginx/src/core/nginx.c-445-    }
./nginx/src/core/nginx.c-446-
./nginx/src/core/nginx.c-447-    ngx_log_error(NGX_LOG_NOTICE, cycle->log, 0,
./nginx/src/core/nginx.c-448-                  "using inherited sockets from \"%s\"", inherited);
./nginx/src/core/nginx.c-449-
./nginx/src/core/nginx.c:450:    if (ngx_array_init(&cycle->listening, cycle->pool, 10,
./nginx/src/core/nginx.c-451-                       sizeof(ngx_listening_t))
./nginx/src/core/nginx.c-452-        != NGX_OK)
./nginx/src/core/nginx.c-453-    {
./nginx/src/core/nginx.c-454-        return NGX_ERROR;
./nginx/src/core/nginx.c-455-    }
./nginx/src/core/nginx.c-456-
./nginx/src/core/nginx.c-457-    for (p = inherited, v = p; *p; p++) {
./nginx/src/core/nginx.c-458-        if (*p == ':' || *p == ';') {
./nginx/src/core/nginx.c-459-            s = ngx_atoi(v, p - v);
./nginx/src/core/nginx.c-460-            if (s == NGX_ERROR) {
--
./nginx/src/core/nginx.c-538-                break;
./nginx/src/core/nginx.c-539-            }
./nginx/src/core/nginx.c-540-        }
./nginx/src/core/nginx.c-541-    }
./nginx/src/core/nginx.c-542-
./nginx/src/core/nginx.c-543-    if (last) {
./nginx/src/core/nginx.c-544-        env = ngx_alloc((*last + n + 1) * sizeof(char *), cycle->log);
./nginx/src/core/nginx.c-545-        *last = n;
./nginx/src/core/nginx.c-546-
./nginx/src/core/nginx.c-547-    } else {
./nginx/src/core/nginx.c:548:        env = ngx_palloc(cycle->pool, (n + 1) * sizeof(char *));
./nginx/src/core/nginx.c-549-    }
./nginx/src/core/nginx.c-550-
./nginx/src/core/nginx.c-551-    if (env == NULL) {
./nginx/src/core/nginx.c-552-        return NULL;
./nginx/src/core/nginx.c-553-    }
./nginx/src/core/nginx.c-554-
./nginx/src/core/nginx.c-555-    n = 0;
./nginx/src/core/nginx.c-556-
./nginx/src/core/nginx.c-557-    for (i = 0; i < ccf->env.nelts; i++) {
./nginx/src/core/nginx.c-558-
--
./nginx/src/core/nginx.c-854-ngx_process_options(ngx_cycle_t *cycle)
./nginx/src/core/nginx.c-855-{
./nginx/src/core/nginx.c-856-    u_char  *p;
./nginx/src/core/nginx.c-857-    size_t   len;
./nginx/src/core/nginx.c-858-
./nginx/src/core/nginx.c-859-    if (ngx_prefix) {
./nginx/src/core/nginx.c-860-        len = ngx_strlen(ngx_prefix);
./nginx/src/core/nginx.c-861-        p = ngx_prefix;
./nginx/src/core/nginx.c-862-
./nginx/src/core/nginx.c-863-        if (len && !ngx_path_separator(p[len - 1])) {
./nginx/src/core/nginx.c:864:            p = ngx_pnalloc(cycle->pool, len + 1);
./nginx/src/core/nginx.c-865-            if (p == NULL) {
./nginx/src/core/nginx.c-866-                return NGX_ERROR;
./nginx/src/core/nginx.c-867-            }
./nginx/src/core/nginx.c-868-
./nginx/src/core/nginx.c-869-            ngx_memcpy(p, ngx_prefix, len);
./nginx/src/core/nginx.c-870-            p[len++] = '/';
./nginx/src/core/nginx.c-871-        }
./nginx/src/core/nginx.c-872-
./nginx/src/core/nginx.c-873-        cycle->conf_prefix.len = len;
./nginx/src/core/nginx.c-874-        cycle->conf_prefix.data = p;
./nginx/src/core/nginx.c-875-        cycle->prefix.len = len;
./nginx/src/core/nginx.c-876-        cycle->prefix.data = p;
./nginx/src/core/nginx.c-877-
./nginx/src/core/nginx.c-878-    } else {
./nginx/src/core/nginx.c-879-
./nginx/src/core/nginx.c-880-#ifndef NGX_PREFIX
./nginx/src/core/nginx.c-881-
./nginx/src/core/nginx.c:882:        p = ngx_pnalloc(cycle->pool, NGX_MAX_PATH);
./nginx/src/core/nginx.c-883-        if (p == NULL) {
./nginx/src/core/nginx.c-884-            return NGX_ERROR;
./nginx/src/core/nginx.c-885-        }
./nginx/src/core/nginx.c-886-
./nginx/src/core/nginx.c-887-        if (ngx_getcwd(p, NGX_MAX_PATH) == 0) {
./nginx/src/core/nginx.c-888-            ngx_log_stderr(ngx_errno, "[emerg]: " ngx_getcwd_n " failed");
./nginx/src/core/nginx.c-889-            return NGX_ERROR;
./nginx/src/core/nginx.c-890-        }
./nginx/src/core/nginx.c-891-
./nginx/src/core/nginx.c-892-        len = ngx_strlen(p);
--
./nginx/src/core/nginx.c-944-
./nginx/src/core/nginx.c-945-    return NGX_OK;
./nginx/src/core/nginx.c-946-}
./nginx/src/core/nginx.c-947-
./nginx/src/core/nginx.c-948-
./nginx/src/core/nginx.c-949-static void *
./nginx/src/core/nginx.c-950-ngx_core_module_create_conf(ngx_cycle_t *cycle)
./nginx/src/core/nginx.c-951-{
./nginx/src/core/nginx.c-952-    ngx_core_conf_t  *ccf;
./nginx/src/core/nginx.c-953-
./nginx/src/core/nginx.c:954:    ccf = ngx_pcalloc(cycle->pool, sizeof(ngx_core_conf_t));
./nginx/src/core/nginx.c-955-    if (ccf == NULL) {
./nginx/src/core/nginx.c-956-        return NULL;
./nginx/src/core/nginx.c-957-    }
./nginx/src/core/nginx.c-958-
./nginx/src/core/nginx.c-959-    /*
./nginx/src/core/nginx.c-960-     * set by ngx_pcalloc()
./nginx/src/core/nginx.c-961-     *
./nginx/src/core/nginx.c-962-     *     ccf->pid = NULL;
./nginx/src/core/nginx.c-963-     *     ccf->oldpid = NULL;
./nginx/src/core/nginx.c-964-     *     ccf->priority = 0;
--
./nginx/src/core/nginx.c-979-    ccf->rlimit_sigpending = NGX_CONF_UNSET;
./nginx/src/core/nginx.c-980-
./nginx/src/core/nginx.c-981-    ccf->user = (ngx_uid_t) NGX_CONF_UNSET_UINT;
./nginx/src/core/nginx.c-982-    ccf->group = (ngx_gid_t) NGX_CONF_UNSET_UINT;
./nginx/src/core/nginx.c-983-
./nginx/src/core/nginx.c-984-#if (NGX_THREADS)
./nginx/src/core/nginx.c-985-    ccf->worker_threads = NGX_CONF_UNSET;
./nginx/src/core/nginx.c-986-    ccf->thread_stack_size = NGX_CONF_UNSET_SIZE;
./nginx/src/core/nginx.c-987-#endif
./nginx/src/core/nginx.c-988-
./nginx/src/core/nginx.c:989:    if (ngx_array_init(&ccf->env, cycle->pool, 1, sizeof(ngx_str_t))
./nginx/src/core/nginx.c-990-        != NGX_OK)
./nginx/src/core/nginx.c-991-    {
./nginx/src/core/nginx.c-992-        return NULL;
./nginx/src/core/nginx.c-993-    }
./nginx/src/core/nginx.c-994-
./nginx/src/core/nginx.c-995-    return ccf;
./nginx/src/core/nginx.c-996-}
./nginx/src/core/nginx.c-997-
./nginx/src/core/nginx.c-998-
./nginx/src/core/nginx.c-999-static char *
--
./nginx/src/core/nginx.c-1034-    if (ccf->pid.len == 0) {
./nginx/src/core/nginx.c-1035-        ngx_str_set(&ccf->pid, NGX_PID_PATH);
./nginx/src/core/nginx.c-1036-    }
./nginx/src/core/nginx.c-1037-
./nginx/src/core/nginx.c-1038-    if (ngx_conf_full_name(cycle, &ccf->pid, 0) != NGX_OK) {
./nginx/src/core/nginx.c-1039-        return NGX_CONF_ERROR;
./nginx/src/core/nginx.c-1040-    }
./nginx/src/core/nginx.c-1041-
./nginx/src/core/nginx.c-1042-    ccf->oldpid.len = ccf->pid.len + sizeof(NGX_OLDPID_EXT);
./nginx/src/core/nginx.c-1043-
./nginx/src/core/nginx.c:1044:    ccf->oldpid.data = ngx_pnalloc(cycle->pool, ccf->oldpid.len);
./nginx/src/core/nginx.c-1045-    if (ccf->oldpid.data == NULL) {
./nginx/src/core/nginx.c-1046-        return NGX_CONF_ERROR;
./nginx/src/core/nginx.c-1047-    }
./nginx/src/core/nginx.c-1048-
./nginx/src/core/nginx.c-1049-    ngx_memcpy(ngx_cpymem(ccf->oldpid.data, ccf->pid.data, ccf->pid.len),
./nginx/src/core/nginx.c-1050-               NGX_OLDPID_EXT, sizeof(NGX_OLDPID_EXT));
./nginx/src/core/nginx.c-1051-
./nginx/src/core/nginx.c-1052-
./nginx/src/core/nginx.c-1053-#if !(NGX_WIN32)
./nginx/src/core/nginx.c-1054-
--
./nginx/src/core/nginx.c-1099-            || ngx_strncmp(ccf->lock_file.data, lock_file.data, lock_file.len)
./nginx/src/core/nginx.c-1100-               != 0)
./nginx/src/core/nginx.c-1101-        {
./nginx/src/core/nginx.c-1102-            ngx_log_error(NGX_LOG_EMERG, cycle->log, 0,
./nginx/src/core/nginx.c-1103-                          "\"lock_file\" could not be changed, ignored");
./nginx/src/core/nginx.c-1104-        }
./nginx/src/core/nginx.c-1105-
./nginx/src/core/nginx.c-1106-        cycle->lock_file.len = lock_file.len + 1;
./nginx/src/core/nginx.c-1107-        lock_file.len += sizeof(".accept");
./nginx/src/core/nginx.c-1108-
./nginx/src/core/nginx.c:1109:        cycle->lock_file.data = ngx_pstrdup(cycle->pool, &lock_file);
./nginx/src/core/nginx.c-1110-        if (cycle->lock_file.data == NULL) {
./nginx/src/core/nginx.c-1111-            return NGX_CONF_ERROR;
./nginx/src/core/nginx.c-1112-        }
./nginx/src/core/nginx.c-1113-
./nginx/src/core/nginx.c-1114-    } else {
./nginx/src/core/nginx.c-1115-        cycle->lock_file.len = ccf->lock_file.len + 1;
./nginx/src/core/nginx.c:1116:        cycle->lock_file.data = ngx_pnalloc(cycle->pool,
./nginx/src/core/nginx.c-1117-                                      ccf->lock_file.len + sizeof(".accept"));
./nginx/src/core/nginx.c-1118-        if (cycle->lock_file.data == NULL) {
./nginx/src/core/nginx.c-1119-            return NGX_CONF_ERROR;
./nginx/src/core/nginx.c-1120-        }
./nginx/src/core/nginx.c-1121-
./nginx/src/core/nginx.c-1122-        ngx_memcpy(ngx_cpymem(cycle->lock_file.data, ccf->lock_file.data,
./nginx/src/core/nginx.c-1123-                              ccf->lock_file.len),
./nginx/src/core/nginx.c-1124-                   ".accept", sizeof(".accept"));
./nginx/src/core/nginx.c-1125-    }
./nginx/src/core/nginx.c-1126-    }
--
./nginx/src/core/nginx.c-1272-
./nginx/src/core/nginx.c-1273-    u_char            ch;
./nginx/src/core/nginx.c-1274-    uint64_t         *mask;
./nginx/src/core/nginx.c-1275-    ngx_str_t        *value;
./nginx/src/core/nginx.c-1276-    ngx_uint_t        i, n;
./nginx/src/core/nginx.c-1277-
./nginx/src/core/nginx.c-1278-    if (ccf->cpu_affinity) {
./nginx/src/core/nginx.c-1279-        return "is duplicate";
./nginx/src/core/nginx.c-1280-    }
./nginx/src/core/nginx.c-1281-
./nginx/src/core/nginx.c:1282:    mask = ngx_palloc(cf->pool, (cf->args->nelts - 1) * sizeof(uint64_t));
./nginx/src/core/nginx.c-1283-    if (mask == NULL) {
./nginx/src/core/nginx.c-1284-        return NGX_CONF_ERROR;
./nginx/src/core/nginx.c-1285-    }
./nginx/src/core/nginx.c-1286-
./nginx/src/core/nginx.c-1287-    ccf->cpu_affinity_n = cf->args->nelts - 1;
./nginx/src/core/nginx.c-1288-    ccf->cpu_affinity = mask;
./nginx/src/core/nginx.c-1289-
./nginx/src/core/nginx.c-1290-    value = cf->args->elts;
./nginx/src/core/nginx.c-1291-
./nginx/src/core/nginx.c-1292-    for (n = 1; n < cf->args->nelts; n++) {
--
./nginx/src/core/ngx_connection.c-24-    struct sockaddr  *sa;
./nginx/src/core/ngx_connection.c-25-    u_char            text[NGX_SOCKADDR_STRLEN];
./nginx/src/core/ngx_connection.c-26-
./nginx/src/core/ngx_connection.c-27-    ls = ngx_array_push(&cf->cycle->listening);
./nginx/src/core/ngx_connection.c-28-    if (ls == NULL) {
./nginx/src/core/ngx_connection.c-29-        return NULL;
./nginx/src/core/ngx_connection.c-30-    }
./nginx/src/core/ngx_connection.c-31-
./nginx/src/core/ngx_connection.c-32-    ngx_memzero(ls, sizeof(ngx_listening_t));
./nginx/src/core/ngx_connection.c-33-
./nginx/src/core/ngx_connection.c:34:    sa = ngx_palloc(cf->pool, socklen);
./nginx/src/core/ngx_connection.c-35-    if (sa == NULL) {
./nginx/src/core/ngx_connection.c-36-        return NULL;
./nginx/src/core/ngx_connection.c-37-    }
./nginx/src/core/ngx_connection.c-38-
./nginx/src/core/ngx_connection.c-39-    ngx_memcpy(sa, sockaddr, socklen);
./nginx/src/core/ngx_connection.c-40-
./nginx/src/core/ngx_connection.c-41-    ls->sockaddr = sa;
./nginx/src/core/ngx_connection.c-42-    ls->socklen = socklen;
./nginx/src/core/ngx_connection.c-43-
./nginx/src/core/ngx_connection.c-44-    len = ngx_sock_ntop(sa, text, NGX_SOCKADDR_STRLEN, 1);
--
./nginx/src/core/ngx_connection.c-57-         break;
./nginx/src/core/ngx_connection.c-58-#endif
./nginx/src/core/ngx_connection.c-59-    case AF_INET:
./nginx/src/core/ngx_connection.c-60-         ls->addr_text_max_len = NGX_INET_ADDRSTRLEN;
./nginx/src/core/ngx_connection.c-61-         break;
./nginx/src/core/ngx_connection.c-62-    default:
./nginx/src/core/ngx_connection.c-63-         ls->addr_text_max_len = NGX_SOCKADDR_STRLEN;
./nginx/src/core/ngx_connection.c-64-         break;
./nginx/src/core/ngx_connection.c-65-    }
./nginx/src/core/ngx_connection.c-66-
./nginx/src/core/ngx_connection.c:67:    ls->addr_text.data = ngx_pnalloc(cf->pool, len);
./nginx/src/core/ngx_connection.c-68-    if (ls->addr_text.data == NULL) {
./nginx/src/core/ngx_connection.c-69-        return NULL;
./nginx/src/core/ngx_connection.c-70-    }
./nginx/src/core/ngx_connection.c-71-
./nginx/src/core/ngx_connection.c-72-    ngx_memcpy(ls->addr_text.data, text, len);
./nginx/src/core/ngx_connection.c-73-
./nginx/src/core/ngx_connection.c-74-    ls->fd = (ngx_socket_t) -1;
./nginx/src/core/ngx_connection.c-75-    ls->type = SOCK_STREAM;
./nginx/src/core/ngx_connection.c-76-
./nginx/src/core/ngx_connection.c-77-    ls->backlog = NGX_LISTEN_BACKLOG;
--
./nginx/src/core/ngx_connection.c-97-    ngx_err_t                  err;
./nginx/src/core/ngx_connection.c-98-    struct accept_filter_arg   af;
./nginx/src/core/ngx_connection.c-99-#endif
./nginx/src/core/ngx_connection.c-100-#if (NGX_HAVE_DEFERRED_ACCEPT && defined TCP_DEFER_ACCEPT)
./nginx/src/core/ngx_connection.c-101-    int                        timeout;
./nginx/src/core/ngx_connection.c-102-#endif
./nginx/src/core/ngx_connection.c-103-
./nginx/src/core/ngx_connection.c-104-    ls = cycle->listening.elts;
./nginx/src/core/ngx_connection.c-105-    for (i = 0; i < cycle->listening.nelts; i++) {
./nginx/src/core/ngx_connection.c-106-
./nginx/src/core/ngx_connection.c:107:        ls[i].sockaddr = ngx_palloc(cycle->pool, NGX_SOCKADDRLEN);
./nginx/src/core/ngx_connection.c-108-        if (ls[i].sockaddr == NULL) {
./nginx/src/core/ngx_connection.c-109-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-110-        }
./nginx/src/core/ngx_connection.c-111-
./nginx/src/core/ngx_connection.c-112-        ls[i].socklen = NGX_SOCKADDRLEN;
./nginx/src/core/ngx_connection.c-113-        if (getsockname(ls[i].fd, ls[i].sockaddr, &ls[i].socklen) == -1) {
./nginx/src/core/ngx_connection.c-114-            ngx_log_error(NGX_LOG_CRIT, cycle->log, ngx_socket_errno,
./nginx/src/core/ngx_connection.c-115-                          "getsockname() of the inherited "
./nginx/src/core/ngx_connection.c-116-                          "socket #%d failed", ls[i].fd);
./nginx/src/core/ngx_connection.c-117-            ls[i].ignore = 1;
--
./nginx/src/core/ngx_connection.c-140-             break;
./nginx/src/core/ngx_connection.c-141-
./nginx/src/core/ngx_connection.c-142-        default:
./nginx/src/core/ngx_connection.c-143-            ngx_log_error(NGX_LOG_CRIT, cycle->log, ngx_socket_errno,
./nginx/src/core/ngx_connection.c-144-                          "the inherited socket #%d has "
./nginx/src/core/ngx_connection.c-145-                          "an unsupported protocol family", ls[i].fd);
./nginx/src/core/ngx_connection.c-146-            ls[i].ignore = 1;
./nginx/src/core/ngx_connection.c-147-            continue;
./nginx/src/core/ngx_connection.c-148-        }
./nginx/src/core/ngx_connection.c-149-
./nginx/src/core/ngx_connection.c:150:        ls[i].addr_text.data = ngx_pnalloc(cycle->pool, len);
./nginx/src/core/ngx_connection.c-151-        if (ls[i].addr_text.data == NULL) {
./nginx/src/core/ngx_connection.c-152-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-153-        }
./nginx/src/core/ngx_connection.c-154-
./nginx/src/core/ngx_connection.c-155-        len = ngx_sock_ntop(ls[i].sockaddr, ls[i].addr_text.data, len, 1);
./nginx/src/core/ngx_connection.c-156-        if (len == 0) {
./nginx/src/core/ngx_connection.c-157-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-158-        }
./nginx/src/core/ngx_connection.c-159-
./nginx/src/core/ngx_connection.c-160-        ls[i].addr_text.len = len;
--
./nginx/src/core/ngx_connection.c-223-            ngx_log_error(NGX_LOG_NOTICE, cycle->log, err,
./nginx/src/core/ngx_connection.c-224-                          "getsockopt(SO_ACCEPTFILTER) for %V failed, ignored",
./nginx/src/core/ngx_connection.c-225-                          &ls[i].addr_text);
./nginx/src/core/ngx_connection.c-226-            continue;
./nginx/src/core/ngx_connection.c-227-        }
./nginx/src/core/ngx_connection.c-228-
./nginx/src/core/ngx_connection.c-229-        if (olen < sizeof(struct accept_filter_arg) || af.af_name[0] == '\0') {
./nginx/src/core/ngx_connection.c-230-            continue;
./nginx/src/core/ngx_connection.c-231-        }
./nginx/src/core/ngx_connection.c-232-
./nginx/src/core/ngx_connection.c:233:        ls[i].accept_filter = ngx_palloc(cycle->pool, 16);
./nginx/src/core/ngx_connection.c-234-        if (ls[i].accept_filter == NULL) {
./nginx/src/core/ngx_connection.c-235-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-236-        }
./nginx/src/core/ngx_connection.c-237-
./nginx/src/core/ngx_connection.c-238-        (void) ngx_cpystrn((u_char *) ls[i].accept_filter,
./nginx/src/core/ngx_connection.c-239-                           (u_char *) af.af_name, 16);
./nginx/src/core/ngx_connection.c-240-#endif
./nginx/src/core/ngx_connection.c-241-
./nginx/src/core/ngx_connection.c-242-#if (NGX_HAVE_DEFERRED_ACCEPT && defined TCP_DEFER_ACCEPT)
./nginx/src/core/ngx_connection.c-243-
--
./nginx/src/core/ngx_connection.c-949-                break;
./nginx/src/core/ngx_connection.c-950-
./nginx/src/core/ngx_connection.c-951-            default:
./nginx/src/core/ngx_connection.c-952-                level = NGX_LOG_CRIT;
./nginx/src/core/ngx_connection.c-953-            }
./nginx/src/core/ngx_connection.c-954-
./nginx/src/core/ngx_connection.c-955-        } else {
./nginx/src/core/ngx_connection.c-956-            level = NGX_LOG_CRIT;
./nginx/src/core/ngx_connection.c-957-        }
./nginx/src/core/ngx_connection.c-958-
./nginx/src/core/ngx_connection.c:959:        /* we use ngx_cycle->log because c->log was in c->pool */
./nginx/src/core/ngx_connection.c-960-
./nginx/src/core/ngx_connection.c-961-        ngx_log_error(level, ngx_cycle->log, err,
./nginx/src/core/ngx_connection.c-962-                      ngx_close_socket_n " %d failed", fd);
./nginx/src/core/ngx_connection.c-963-    }
./nginx/src/core/ngx_connection.c-964-}
./nginx/src/core/ngx_connection.c-965-
./nginx/src/core/ngx_connection.c-966-
./nginx/src/core/ngx_connection.c-967-void
./nginx/src/core/ngx_connection.c-968-ngx_reusable_connection(ngx_connection_t *c, ngx_uint_t reusable)
./nginx/src/core/ngx_connection.c-969-{
--
./nginx/src/core/ngx_connection.c-1043-
./nginx/src/core/ngx_connection.c-1044-    if (addr == 0) {
./nginx/src/core/ngx_connection.c-1045-
./nginx/src/core/ngx_connection.c-1046-        len = NGX_SOCKADDRLEN;
./nginx/src/core/ngx_connection.c-1047-
./nginx/src/core/ngx_connection.c-1048-        if (getsockname(c->fd, (struct sockaddr *) &sa, &len) == -1) {
./nginx/src/core/ngx_connection.c-1049-            ngx_connection_error(c, ngx_socket_errno, "getsockname() failed");
./nginx/src/core/ngx_connection.c-1050-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-1051-        }
./nginx/src/core/ngx_connection.c-1052-
./nginx/src/core/ngx_connection.c:1053:        c->local_sockaddr = ngx_palloc(c->pool, len);
./nginx/src/core/ngx_connection.c-1054-        if (c->local_sockaddr == NULL) {
./nginx/src/core/ngx_connection.c-1055-            return NGX_ERROR;
./nginx/src/core/ngx_connection.c-1056-        }
./nginx/src/core/ngx_connection.c-1057-
./nginx/src/core/ngx_connection.c-1058-        ngx_memcpy(c->local_sockaddr, &sa, len);
./nginx/src/core/ngx_connection.c-1059-    }
./nginx/src/core/ngx_connection.c-1060-
./nginx/src/core/ngx_connection.c-1061-    if (s == NULL) {
./nginx/src/core/ngx_connection.c-1062-        return NGX_OK;
./nginx/src/core/ngx_connection.c-1063-    }
--
./nginx/src/core/ngx_list.c-3- * Copyright (C) Igor Sysoev
./nginx/src/core/ngx_list.c-4- * Copyright (C) Nginx, Inc.
./nginx/src/core/ngx_list.c-5- */
./nginx/src/core/ngx_list.c-6-
./nginx/src/core/ngx_list.c-7-
./nginx/src/core/ngx_list.c-8-#include <ngx_config.h>
./nginx/src/core/ngx_list.c-9-#include <ngx_core.h>
./nginx/src/core/ngx_list.c-10-
./nginx/src/core/ngx_list.c-11-
./nginx/src/core/ngx_list.c-12-ngx_list_t *
./nginx/src/core/ngx_list.c:13:ngx_list_create(ngx_pool_t *pool, ngx_uint_t n, size_t size)
./nginx/src/core/ngx_list.c-14-{
./nginx/src/core/ngx_list.c-15-    ngx_list_t  *list;
./nginx/src/core/ngx_list.c-16-
./nginx/src/core/ngx_list.c:17:    list = ngx_palloc(pool, sizeof(ngx_list_t));
./nginx/src/core/ngx_list.c-18-    if (list == NULL) {
./nginx/src/core/ngx_list.c-19-        return NULL;
./nginx/src/core/ngx_list.c-20-    }
./nginx/src/core/ngx_list.c-21-
./nginx/src/core/ngx_list.c:22:    list->part.elts = ngx_palloc(pool, n * size);
./nginx/src/core/ngx_list.c-23-    if (list->part.elts == NULL) {
./nginx/src/core/ngx_list.c-24-        return NULL;
./nginx/src/core/ngx_list.c-25-    }
./nginx/src/core/ngx_list.c-26-
./nginx/src/core/ngx_list.c-27-    list->part.nelts = 0;
./nginx/src/core/ngx_list.c-28-    list->part.next = NULL;
./nginx/src/core/ngx_list.c-29-    list->last = &list->part;
./nginx/src/core/ngx_list.c-30-    list->size = size;
./nginx/src/core/ngx_list.c-31-    list->nalloc = n;
./nginx/src/core/ngx_list.c:32:    list->pool = pool;
./nginx/src/core/ngx_list.c-33-
./nginx/src/core/ngx_list.c-34-    return list;
./nginx/src/core/ngx_list.c-35-}
./nginx/src/core/ngx_list.c-36-
./nginx/src/core/ngx_list.c-37-
./nginx/src/core/ngx_list.c-38-void *
./nginx/src/core/ngx_list.c-39-ngx_list_push(ngx_list_t *l)
./nginx/src/core/ngx_list.c-40-{
./nginx/src/core/ngx_list.c-41-    void             *elt;
./nginx/src/core/ngx_list.c-42-    ngx_list_part_t  *last;
./nginx/src/core/ngx_list.c-43-
./nginx/src/core/ngx_list.c-44-    last = l->last;
./nginx/src/core/ngx_list.c-45-
./nginx/src/core/ngx_list.c-46-    if (last->nelts == l->nalloc) {
./nginx/src/core/ngx_list.c-47-
./nginx/src/core/ngx_list.c-48-        /* the last part is full, allocate a new list part */
./nginx/src/core/ngx_list.c-49-
./nginx/src/core/ngx_list.c:50:        last = ngx_palloc(l->pool, sizeof(ngx_list_part_t));
./nginx/src/core/ngx_list.c-51-        if (last == NULL) {
./nginx/src/core/ngx_list.c-52-            return NULL;
./nginx/src/core/ngx_list.c-53-        }
./nginx/src/core/ngx_list.c-54-
./nginx/src/core/ngx_list.c:55:        last->elts = ngx_palloc(l->pool, l->nalloc * l->size);
./nginx/src/core/ngx_list.c-56-        if (last->elts == NULL) {
./nginx/src/core/ngx_list.c-57-            return NULL;
./nginx/src/core/ngx_list.c-58-        }
./nginx/src/core/ngx_list.c-59-
./nginx/src/core/ngx_list.c-60-        last->nelts = 0;
./nginx/src/core/ngx_list.c-61-        last->next = NULL;
./nginx/src/core/ngx_list.c-62-
./nginx/src/core/ngx_list.c-63-        l->last->next = last;
./nginx/src/core/ngx_list.c-64-        l->last = last;
./nginx/src/core/ngx_list.c-65-    }
--
./nginx/src/http/ngx_http_core_module.c-1029-        /*
./nginx/src/http/ngx_http_core_module.c-1030-         * we do not need to set the r->headers_out.location->hash and
./nginx/src/http/ngx_http_core_module.c-1031-         * r->headers_out.location->key fields
./nginx/src/http/ngx_http_core_module.c-1032-         */
./nginx/src/http/ngx_http_core_module.c-1033-
./nginx/src/http/ngx_http_core_module.c-1034-        if (r->args.len == 0) {
./nginx/src/http/ngx_http_core_module.c-1035-            r->headers_out.location->value = clcf->name;
./nginx/src/http/ngx_http_core_module.c-1036-
./nginx/src/http/ngx_http_core_module.c-1037-        } else {
./nginx/src/http/ngx_http_core_module.c-1038-            len = clcf->name.len + 1 + r->args.len;
./nginx/src/http/ngx_http_core_module.c:1039:            p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_core_module.c-1040-
./nginx/src/http/ngx_http_core_module.c-1041-            if (p == NULL) {
./nginx/src/http/ngx_http_core_module.c-1042-                ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_core_module.c-1043-                return NGX_OK;
./nginx/src/http/ngx_http_core_module.c-1044-            }
./nginx/src/http/ngx_http_core_module.c-1045-
./nginx/src/http/ngx_http_core_module.c-1046-            r->headers_out.location->value.len = len;
./nginx/src/http/ngx_http_core_module.c-1047-            r->headers_out.location->value.data = p;
./nginx/src/http/ngx_http_core_module.c-1048-
./nginx/src/http/ngx_http_core_module.c-1049-            p = ngx_cpymem(p, clcf->name.data, clcf->name.len);
--
./nginx/src/http/ngx_http_core_module.c-1339-        of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/ngx_http_core_module.c-1340-        of.test_only = 1;
./nginx/src/http/ngx_http_core_module.c-1341-        of.errors = clcf->open_file_cache_errors;
./nginx/src/http/ngx_http_core_module.c-1342-        of.events = clcf->open_file_cache_events;
./nginx/src/http/ngx_http_core_module.c-1343-
./nginx/src/http/ngx_http_core_module.c-1344-        if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-1345-            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_core_module.c-1346-            return NGX_OK;
./nginx/src/http/ngx_http_core_module.c-1347-        }
./nginx/src/http/ngx_http_core_module.c-1348-
./nginx/src/http/ngx_http_core_module.c:1349:        if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/ngx_http_core_module.c-1350-            != NGX_OK)
./nginx/src/http/ngx_http_core_module.c-1351-        {
./nginx/src/http/ngx_http_core_module.c-1352-            if (of.err != NGX_ENOENT
./nginx/src/http/ngx_http_core_module.c-1353-                && of.err != NGX_ENOTDIR
./nginx/src/http/ngx_http_core_module.c-1354-                && of.err != NGX_ENAMETOOLONG)
./nginx/src/http/ngx_http_core_module.c-1355-            {
./nginx/src/http/ngx_http_core_module.c-1356-                ngx_log_error(NGX_LOG_CRIT, r->connection->log, of.err,
./nginx/src/http/ngx_http_core_module.c-1357-                              "%s \"%s\" failed", of.failed, path.data);
./nginx/src/http/ngx_http_core_module.c-1358-            }
./nginx/src/http/ngx_http_core_module.c-1359-
--
./nginx/src/http/ngx_http_core_module.c-1372-
./nginx/src/http/ngx_http_core_module.c-1373-#if (NGX_PCRE)
./nginx/src/http/ngx_http_core_module.c-1374-        } else if (clcf->regex) {
./nginx/src/http/ngx_http_core_module.c-1375-            if (!test_dir) {
./nginx/src/http/ngx_http_core_module.c-1376-                r->uri = path;
./nginx/src/http/ngx_http_core_module.c-1377-                r->add_uri_to_alias = 1;
./nginx/src/http/ngx_http_core_module.c-1378-            }
./nginx/src/http/ngx_http_core_module.c-1379-#endif
./nginx/src/http/ngx_http_core_module.c-1380-        } else {
./nginx/src/http/ngx_http_core_module.c-1381-            r->uri.len = alias + path.len;
./nginx/src/http/ngx_http_core_module.c:1382:            r->uri.data = ngx_pnalloc(r->pool, r->uri.len);
./nginx/src/http/ngx_http_core_module.c-1383-            if (r->uri.data == NULL) {
./nginx/src/http/ngx_http_core_module.c-1384-                ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_core_module.c-1385-                return NGX_OK;
./nginx/src/http/ngx_http_core_module.c-1386-            }
./nginx/src/http/ngx_http_core_module.c-1387-
./nginx/src/http/ngx_http_core_module.c-1388-            p = ngx_copy(r->uri.data, clcf->name.data, alias);
./nginx/src/http/ngx_http_core_module.c-1389-            ngx_memcpy(p, name, path.len);
./nginx/src/http/ngx_http_core_module.c-1390-        }
./nginx/src/http/ngx_http_core_module.c-1391-
./nginx/src/http/ngx_http_core_module.c-1392-        ngx_http_set_exten(r);
--
./nginx/src/http/ngx_http_core_module.c-1720-    }
./nginx/src/http/ngx_http_core_module.c-1721-
./nginx/src/http/ngx_http_core_module.c-1722-    if (r->headers_out.content_type.len == 0) {
./nginx/src/http/ngx_http_core_module.c-1723-        return NULL;
./nginx/src/http/ngx_http_core_module.c-1724-    }
./nginx/src/http/ngx_http_core_module.c-1725-
./nginx/src/http/ngx_http_core_module.c-1726-    len = r->headers_out.content_type_len;
./nginx/src/http/ngx_http_core_module.c-1727-
./nginx/src/http/ngx_http_core_module.c-1728-    if (r->headers_out.content_type_lowcase == NULL) {
./nginx/src/http/ngx_http_core_module.c-1729-
./nginx/src/http/ngx_http_core_module.c:1730:        lowcase = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_core_module.c-1731-        if (lowcase == NULL) {
./nginx/src/http/ngx_http_core_module.c-1732-            return NULL;
./nginx/src/http/ngx_http_core_module.c-1733-        }
./nginx/src/http/ngx_http_core_module.c-1734-
./nginx/src/http/ngx_http_core_module.c-1735-        r->headers_out.content_type_lowcase = lowcase;
./nginx/src/http/ngx_http_core_module.c-1736-
./nginx/src/http/ngx_http_core_module.c-1737-        hash = 0;
./nginx/src/http/ngx_http_core_module.c-1738-
./nginx/src/http/ngx_http_core_module.c-1739-        for (i = 0; i < len; i++) {
./nginx/src/http/ngx_http_core_module.c-1740-            c = ngx_tolower(r->headers_out.content_type.data[i]);
--
./nginx/src/http/ngx_http_core_module.c-1766-
./nginx/src/http/ngx_http_core_module.c-1767-    if (r->exten.len) {
./nginx/src/http/ngx_http_core_module.c-1768-
./nginx/src/http/ngx_http_core_module.c-1769-        hash = 0;
./nginx/src/http/ngx_http_core_module.c-1770-
./nginx/src/http/ngx_http_core_module.c-1771-        for (i = 0; i < r->exten.len; i++) {
./nginx/src/http/ngx_http_core_module.c-1772-            c = r->exten.data[i];
./nginx/src/http/ngx_http_core_module.c-1773-
./nginx/src/http/ngx_http_core_module.c-1774-            if (c >= 'A' && c <= 'Z') {
./nginx/src/http/ngx_http_core_module.c-1775-
./nginx/src/http/ngx_http_core_module.c:1776:                exten = ngx_pnalloc(r->pool, r->exten.len);
./nginx/src/http/ngx_http_core_module.c-1777-                if (exten == NULL) {
./nginx/src/http/ngx_http_core_module.c-1778-                    return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-1779-                }
./nginx/src/http/ngx_http_core_module.c-1780-
./nginx/src/http/ngx_http_core_module.c-1781-                hash = ngx_hash_strlow(exten, r->exten.data, r->exten.len);
./nginx/src/http/ngx_http_core_module.c-1782-
./nginx/src/http/ngx_http_core_module.c-1783-                r->exten.data = exten;
./nginx/src/http/ngx_http_core_module.c-1784-
./nginx/src/http/ngx_http_core_module.c-1785-                break;
./nginx/src/http/ngx_http_core_module.c-1786-            }
--
./nginx/src/http/ngx_http_core_module.c-1877-    } else {
./nginx/src/http/ngx_http_core_module.c-1878-        if (ngx_http_set_content_type(r) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-1879-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_core_module.c-1880-        }
./nginx/src/http/ngx_http_core_module.c-1881-    }
./nginx/src/http/ngx_http_core_module.c-1882-
./nginx/src/http/ngx_http_core_module.c-1883-    if (r->method == NGX_HTTP_HEAD || (r != r->main && val.len == 0)) {
./nginx/src/http/ngx_http_core_module.c-1884-        return ngx_http_send_header(r);
./nginx/src/http/ngx_http_core_module.c-1885-    }
./nginx/src/http/ngx_http_core_module.c-1886-
./nginx/src/http/ngx_http_core_module.c:1887:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/ngx_http_core_module.c-1888-    if (b == NULL) {
./nginx/src/http/ngx_http_core_module.c-1889-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_core_module.c-1890-    }
./nginx/src/http/ngx_http_core_module.c-1891-
./nginx/src/http/ngx_http_core_module.c-1892-    b->pos = val.data;
./nginx/src/http/ngx_http_core_module.c-1893-    b->last = val.data + val.len;
./nginx/src/http/ngx_http_core_module.c-1894-    b->memory = val.len ? 1 : 0;
./nginx/src/http/ngx_http_core_module.c-1895-    b->last_buf = (r == r->main) ? 1 : 0;
./nginx/src/http/ngx_http_core_module.c-1896-    b->last_in_chain = 1;
./nginx/src/http/ngx_http_core_module.c-1897-
--
./nginx/src/http/ngx_http_core_module.c-1960-                      "where URI was rewritten", &clcf->name);
./nginx/src/http/ngx_http_core_module.c-1961-        return NULL;
./nginx/src/http/ngx_http_core_module.c-1962-    }
./nginx/src/http/ngx_http_core_module.c-1963-
./nginx/src/http/ngx_http_core_module.c-1964-    if (clcf->root_lengths == NULL) {
./nginx/src/http/ngx_http_core_module.c-1965-
./nginx/src/http/ngx_http_core_module.c-1966-        *root_length = clcf->root.len;
./nginx/src/http/ngx_http_core_module.c-1967-
./nginx/src/http/ngx_http_core_module.c-1968-        path->len = clcf->root.len + reserved + r->uri.len - alias + 1;
./nginx/src/http/ngx_http_core_module.c-1969-
./nginx/src/http/ngx_http_core_module.c:1970:        path->data = ngx_pnalloc(r->pool, path->len);
./nginx/src/http/ngx_http_core_module.c-1971-        if (path->data == NULL) {
./nginx/src/http/ngx_http_core_module.c-1972-            return NULL;
./nginx/src/http/ngx_http_core_module.c-1973-        }
./nginx/src/http/ngx_http_core_module.c-1974-
./nginx/src/http/ngx_http_core_module.c-1975-        last = ngx_copy(path->data, clcf->root.data, clcf->root.len);
./nginx/src/http/ngx_http_core_module.c-1976-
./nginx/src/http/ngx_http_core_module.c-1977-    } else {
./nginx/src/http/ngx_http_core_module.c-1978-
./nginx/src/http/ngx_http_core_module.c-1979-#if (NGX_PCRE)
./nginx/src/http/ngx_http_core_module.c-1980-        ngx_uint_t  captures;
--
./nginx/src/http/ngx_http_core_module.c-2052-        encoded.len--;
./nginx/src/http/ngx_http_core_module.c-2053-        encoded.data++;
./nginx/src/http/ngx_http_core_module.c-2054-    }
./nginx/src/http/ngx_http_core_module.c-2055-
./nginx/src/http/ngx_http_core_module.c-2056-    if (encoded.len == 0) {
./nginx/src/http/ngx_http_core_module.c-2057-        r->headers_in.user.data = (u_char *) "";
./nginx/src/http/ngx_http_core_module.c-2058-        return NGX_DECLINED;
./nginx/src/http/ngx_http_core_module.c-2059-    }
./nginx/src/http/ngx_http_core_module.c-2060-
./nginx/src/http/ngx_http_core_module.c-2061-    auth.len = ngx_base64_decoded_length(encoded.len);
./nginx/src/http/ngx_http_core_module.c:2062:    auth.data = ngx_pnalloc(r->pool, auth.len + 1);
./nginx/src/http/ngx_http_core_module.c-2063-    if (auth.data == NULL) {
./nginx/src/http/ngx_http_core_module.c-2064-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2065-    }
./nginx/src/http/ngx_http_core_module.c-2066-
./nginx/src/http/ngx_http_core_module.c-2067-    if (ngx_decode_base64(&auth, &encoded) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-2068-        r->headers_in.user.data = (u_char *) "";
./nginx/src/http/ngx_http_core_module.c-2069-        return NGX_DECLINED;
./nginx/src/http/ngx_http_core_module.c-2070-    }
./nginx/src/http/ngx_http_core_module.c-2071-
./nginx/src/http/ngx_http_core_module.c-2072-    auth.data[auth.len] = '\0';
--
./nginx/src/http/ngx_http_core_module.c-2408-
./nginx/src/http/ngx_http_core_module.c-2409-    r->main->subrequests--;
./nginx/src/http/ngx_http_core_module.c-2410-
./nginx/src/http/ngx_http_core_module.c-2411-    if (r->main->subrequests == 0) {
./nginx/src/http/ngx_http_core_module.c-2412-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/ngx_http_core_module.c-2413-                      "subrequests cycle while processing \"%V\"", uri);
./nginx/src/http/ngx_http_core_module.c-2414-        r->main->subrequests = 1;
./nginx/src/http/ngx_http_core_module.c-2415-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2416-    }
./nginx/src/http/ngx_http_core_module.c-2417-
./nginx/src/http/ngx_http_core_module.c:2418:    sr = ngx_pcalloc(r->pool, sizeof(ngx_http_request_t));
./nginx/src/http/ngx_http_core_module.c-2419-    if (sr == NULL) {
./nginx/src/http/ngx_http_core_module.c-2420-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2421-    }
./nginx/src/http/ngx_http_core_module.c-2422-
./nginx/src/http/ngx_http_core_module.c-2423-    sr->signature = NGX_HTTP_MODULE;
./nginx/src/http/ngx_http_core_module.c-2424-
./nginx/src/http/ngx_http_core_module.c-2425-    c = r->connection;
./nginx/src/http/ngx_http_core_module.c-2426-    sr->connection = c;
./nginx/src/http/ngx_http_core_module.c-2427-
./nginx/src/http/ngx_http_core_module.c:2428:    sr->ctx = ngx_pcalloc(r->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_core_module.c-2429-    if (sr->ctx == NULL) {
./nginx/src/http/ngx_http_core_module.c-2430-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2431-    }
./nginx/src/http/ngx_http_core_module.c-2432-
./nginx/src/http/ngx_http_core_module.c:2433:    if (ngx_list_init(&sr->headers_out.headers, r->pool, 20,
./nginx/src/http/ngx_http_core_module.c-2434-                      sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_core_module.c-2435-        != NGX_OK)
./nginx/src/http/ngx_http_core_module.c-2436-    {
./nginx/src/http/ngx_http_core_module.c-2437-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2438-    }
./nginx/src/http/ngx_http_core_module.c-2439-
./nginx/src/http/ngx_http_core_module.c-2440-    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_core_module.c-2441-    sr->main_conf = cscf->ctx->main_conf;
./nginx/src/http/ngx_http_core_module.c-2442-    sr->srv_conf = cscf->ctx->srv_conf;
./nginx/src/http/ngx_http_core_module.c-2443-    sr->loc_conf = cscf->ctx->loc_conf;
./nginx/src/http/ngx_http_core_module.c-2444-
./nginx/src/http/ngx_http_core_module.c:2445:    sr->pool = r->pool;
./nginx/src/http/ngx_http_core_module.c-2446-
./nginx/src/http/ngx_http_core_module.c-2447-    sr->headers_in = r->headers_in;
./nginx/src/http/ngx_http_core_module.c-2448-
./nginx/src/http/ngx_http_core_module.c-2449-    ngx_http_clear_content_length(sr);
./nginx/src/http/ngx_http_core_module.c-2450-    ngx_http_clear_accept_ranges(sr);
./nginx/src/http/ngx_http_core_module.c-2451-    ngx_http_clear_last_modified(sr);
./nginx/src/http/ngx_http_core_module.c-2452-
./nginx/src/http/ngx_http_core_module.c-2453-    sr->request_body = r->request_body;
./nginx/src/http/ngx_http_core_module.c-2454-
./nginx/src/http/ngx_http_core_module.c-2455-    sr->content_length_n = -1;
--
./nginx/src/http/ngx_http_core_module.c-2483-    sr->write_event_handler = ngx_http_handler;
./nginx/src/http/ngx_http_core_module.c-2484-
./nginx/src/http/ngx_http_core_module.c-2485-    if (c->data == r && r->postponed == NULL) {
./nginx/src/http/ngx_http_core_module.c-2486-        c->data = sr;
./nginx/src/http/ngx_http_core_module.c-2487-    }
./nginx/src/http/ngx_http_core_module.c-2488-
./nginx/src/http/ngx_http_core_module.c-2489-    sr->variables = r->variables;
./nginx/src/http/ngx_http_core_module.c-2490-
./nginx/src/http/ngx_http_core_module.c-2491-    sr->log_handler = r->log_handler;
./nginx/src/http/ngx_http_core_module.c-2492-
./nginx/src/http/ngx_http_core_module.c:2493:    pr = ngx_palloc(r->pool, sizeof(ngx_http_postponed_request_t));
./nginx/src/http/ngx_http_core_module.c-2494-    if (pr == NULL) {
./nginx/src/http/ngx_http_core_module.c-2495-        return NGX_ERROR;
./nginx/src/http/ngx_http_core_module.c-2496-    }
./nginx/src/http/ngx_http_core_module.c-2497-
./nginx/src/http/ngx_http_core_module.c-2498-    pr->request = sr;
./nginx/src/http/ngx_http_core_module.c-2499-    pr->out = NULL;
./nginx/src/http/ngx_http_core_module.c-2500-    pr->next = NULL;
./nginx/src/http/ngx_http_core_module.c-2501-
./nginx/src/http/ngx_http_core_module.c-2502-    if (r->postponed) {
./nginx/src/http/ngx_http_core_module.c-2503-        for (p = r->postponed; p->next; p = p->next) { /* void */ }
--
./nginx/src/http/ngx_http_core_module.c-2650-}
./nginx/src/http/ngx_http_core_module.c-2651-
./nginx/src/http/ngx_http_core_module.c-2652-
./nginx/src/http/ngx_http_core_module.c-2653-ngx_http_cleanup_t *
./nginx/src/http/ngx_http_core_module.c-2654-ngx_http_cleanup_add(ngx_http_request_t *r, size_t size)
./nginx/src/http/ngx_http_core_module.c-2655-{
./nginx/src/http/ngx_http_core_module.c-2656-    ngx_http_cleanup_t  *cln;
./nginx/src/http/ngx_http_core_module.c-2657-
./nginx/src/http/ngx_http_core_module.c-2658-    r = r->main;
./nginx/src/http/ngx_http_core_module.c-2659-
./nginx/src/http/ngx_http_core_module.c:2660:    cln = ngx_palloc(r->pool, sizeof(ngx_http_cleanup_t));
./nginx/src/http/ngx_http_core_module.c-2661-    if (cln == NULL) {
./nginx/src/http/ngx_http_core_module.c-2662-        return NULL;
./nginx/src/http/ngx_http_core_module.c-2663-    }
./nginx/src/http/ngx_http_core_module.c-2664-
./nginx/src/http/ngx_http_core_module.c-2665-    if (size) {
./nginx/src/http/ngx_http_core_module.c:2666:        cln->data = ngx_palloc(r->pool, size);
./nginx/src/http/ngx_http_core_module.c-2667-        if (cln->data == NULL) {
./nginx/src/http/ngx_http_core_module.c-2668-            return NULL;
./nginx/src/http/ngx_http_core_module.c-2669-        }
./nginx/src/http/ngx_http_core_module.c-2670-
./nginx/src/http/ngx_http_core_module.c-2671-    } else {
./nginx/src/http/ngx_http_core_module.c-2672-        cln->data = NULL;
./nginx/src/http/ngx_http_core_module.c-2673-    }
./nginx/src/http/ngx_http_core_module.c-2674-
./nginx/src/http/ngx_http_core_module.c-2675-    cln->handler = NULL;
./nginx/src/http/ngx_http_core_module.c-2676-    cln->next = r->cleanup;
--
./nginx/src/http/ngx_http_core_module.c-2817-            }
./nginx/src/http/ngx_http_core_module.c-2818-        }
./nginx/src/http/ngx_http_core_module.c-2819-
./nginx/src/http/ngx_http_core_module.c-2820-        for ( /* void */ ; p > xff; p--) {
./nginx/src/http/ngx_http_core_module.c-2821-            if (*p == ' ' || *p == ',') {
./nginx/src/http/ngx_http_core_module.c-2822-                p++;
./nginx/src/http/ngx_http_core_module.c-2823-                break;
./nginx/src/http/ngx_http_core_module.c-2824-            }
./nginx/src/http/ngx_http_core_module.c-2825-        }
./nginx/src/http/ngx_http_core_module.c-2826-
./nginx/src/http/ngx_http_core_module.c:2827:        if (ngx_parse_addr(r->pool, &paddr, p, xfflen - (p - xff)) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-2828-            return NGX_DECLINED;
./nginx/src/http/ngx_http_core_module.c-2829-        }
./nginx/src/http/ngx_http_core_module.c-2830-
./nginx/src/http/ngx_http_core_module.c-2831-        *addr = paddr;
./nginx/src/http/ngx_http_core_module.c-2832-
./nginx/src/http/ngx_http_core_module.c-2833-        if (recursive && p > xff) {
./nginx/src/http/ngx_http_core_module.c-2834-            (void) ngx_http_get_forwarded_addr(r, addr, xff, p - 1 - xff,
./nginx/src/http/ngx_http_core_module.c-2835-                                               proxies, 1);
./nginx/src/http/ngx_http_core_module.c-2836-        }
./nginx/src/http/ngx_http_core_module.c-2837-
--
./nginx/src/http/ngx_http_core_module.c-2852-    void                        *mconf;
./nginx/src/http/ngx_http_core_module.c-2853-    ngx_uint_t                   i;
./nginx/src/http/ngx_http_core_module.c-2854-    ngx_conf_t                   pcf;
./nginx/src/http/ngx_http_core_module.c-2855-    ngx_http_module_t           *module;
./nginx/src/http/ngx_http_core_module.c-2856-    struct sockaddr_in          *sin;
./nginx/src/http/ngx_http_core_module.c-2857-    ngx_http_conf_ctx_t         *ctx, *http_ctx;
./nginx/src/http/ngx_http_core_module.c-2858-    ngx_http_listen_opt_t        lsopt;
./nginx/src/http/ngx_http_core_module.c-2859-    ngx_http_core_srv_conf_t    *cscf, **cscfp;
./nginx/src/http/ngx_http_core_module.c-2860-    ngx_http_core_main_conf_t   *cmcf;
./nginx/src/http/ngx_http_core_module.c-2861-
./nginx/src/http/ngx_http_core_module.c:2862:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/ngx_http_core_module.c-2863-    if (ctx == NULL) {
./nginx/src/http/ngx_http_core_module.c-2864-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-2865-    }
./nginx/src/http/ngx_http_core_module.c-2866-
./nginx/src/http/ngx_http_core_module.c-2867-    http_ctx = cf->ctx;
./nginx/src/http/ngx_http_core_module.c-2868-    ctx->main_conf = http_ctx->main_conf;
./nginx/src/http/ngx_http_core_module.c-2869-
./nginx/src/http/ngx_http_core_module.c-2870-    /* the server{}'s srv_conf */
./nginx/src/http/ngx_http_core_module.c-2871-
./nginx/src/http/ngx_http_core_module.c:2872:    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_core_module.c-2873-    if (ctx->srv_conf == NULL) {
./nginx/src/http/ngx_http_core_module.c-2874-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-2875-    }
./nginx/src/http/ngx_http_core_module.c-2876-
./nginx/src/http/ngx_http_core_module.c-2877-    /* the server{}'s loc_conf */
./nginx/src/http/ngx_http_core_module.c-2878-
./nginx/src/http/ngx_http_core_module.c:2879:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_core_module.c-2880-    if (ctx->loc_conf == NULL) {
./nginx/src/http/ngx_http_core_module.c-2881-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-2882-    }
./nginx/src/http/ngx_http_core_module.c-2883-
./nginx/src/http/ngx_http_core_module.c-2884-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/http/ngx_http_core_module.c-2885-        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
./nginx/src/http/ngx_http_core_module.c-2886-            continue;
./nginx/src/http/ngx_http_core_module.c-2887-        }
./nginx/src/http/ngx_http_core_module.c-2888-
./nginx/src/http/ngx_http_core_module.c-2889-        module = ngx_modules[i]->ctx;
--
./nginx/src/http/ngx_http_core_module.c-2975-    char                      *rv;
./nginx/src/http/ngx_http_core_module.c-2976-    u_char                    *mod;
./nginx/src/http/ngx_http_core_module.c-2977-    size_t                     len;
./nginx/src/http/ngx_http_core_module.c-2978-    ngx_str_t                 *value, *name;
./nginx/src/http/ngx_http_core_module.c-2979-    ngx_uint_t                 i;
./nginx/src/http/ngx_http_core_module.c-2980-    ngx_conf_t                 save;
./nginx/src/http/ngx_http_core_module.c-2981-    ngx_http_module_t         *module;
./nginx/src/http/ngx_http_core_module.c-2982-    ngx_http_conf_ctx_t       *ctx, *pctx;
./nginx/src/http/ngx_http_core_module.c-2983-    ngx_http_core_loc_conf_t  *clcf, *pclcf;
./nginx/src/http/ngx_http_core_module.c-2984-
./nginx/src/http/ngx_http_core_module.c:2985:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/ngx_http_core_module.c-2986-    if (ctx == NULL) {
./nginx/src/http/ngx_http_core_module.c-2987-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-2988-    }
./nginx/src/http/ngx_http_core_module.c-2989-
./nginx/src/http/ngx_http_core_module.c-2990-    pctx = cf->ctx;
./nginx/src/http/ngx_http_core_module.c-2991-    ctx->main_conf = pctx->main_conf;
./nginx/src/http/ngx_http_core_module.c-2992-    ctx->srv_conf = pctx->srv_conf;
./nginx/src/http/ngx_http_core_module.c-2993-
./nginx/src/http/ngx_http_core_module.c:2994:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_core_module.c-2995-    if (ctx->loc_conf == NULL) {
./nginx/src/http/ngx_http_core_module.c-2996-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-2997-    }
./nginx/src/http/ngx_http_core_module.c-2998-
./nginx/src/http/ngx_http_core_module.c-2999-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/http/ngx_http_core_module.c-3000-        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
./nginx/src/http/ngx_http_core_module.c-3001-            continue;
./nginx/src/http/ngx_http_core_module.c-3002-        }
./nginx/src/http/ngx_http_core_module.c-3003-
./nginx/src/http/ngx_http_core_module.c-3004-        module = ngx_modules[i]->ctx;
--
./nginx/src/http/ngx_http_core_module.c-3205-
./nginx/src/http/ngx_http_core_module.c-3206-static char *
./nginx/src/http/ngx_http_core_module.c-3207-ngx_http_core_types(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/ngx_http_core_module.c-3208-{
./nginx/src/http/ngx_http_core_module.c-3209-    ngx_http_core_loc_conf_t *clcf = conf;
./nginx/src/http/ngx_http_core_module.c-3210-
./nginx/src/http/ngx_http_core_module.c-3211-    char        *rv;
./nginx/src/http/ngx_http_core_module.c-3212-    ngx_conf_t   save;
./nginx/src/http/ngx_http_core_module.c-3213-
./nginx/src/http/ngx_http_core_module.c-3214-    if (clcf->types == NULL) {
./nginx/src/http/ngx_http_core_module.c:3215:        clcf->types = ngx_array_create(cf->pool, 64, sizeof(ngx_hash_key_t));
./nginx/src/http/ngx_http_core_module.c-3216-        if (clcf->types == NULL) {
./nginx/src/http/ngx_http_core_module.c-3217-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3218-        }
./nginx/src/http/ngx_http_core_module.c-3219-    }
./nginx/src/http/ngx_http_core_module.c-3220-
./nginx/src/http/ngx_http_core_module.c-3221-    save = *cf;
./nginx/src/http/ngx_http_core_module.c-3222-    cf->handler = ngx_http_core_type;
./nginx/src/http/ngx_http_core_module.c-3223-    cf->handler_conf = conf;
./nginx/src/http/ngx_http_core_module.c-3224-
./nginx/src/http/ngx_http_core_module.c-3225-    rv = ngx_conf_parse(cf, NULL);
--
./nginx/src/http/ngx_http_core_module.c-3245-        if (cf->args->nelts != 2) {
./nginx/src/http/ngx_http_core_module.c-3246-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_core_module.c-3247-                               "invalid number of arguments"
./nginx/src/http/ngx_http_core_module.c-3248-                               " in \"include\" directive");
./nginx/src/http/ngx_http_core_module.c-3249-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3250-        }
./nginx/src/http/ngx_http_core_module.c-3251-
./nginx/src/http/ngx_http_core_module.c-3252-        return ngx_conf_include(cf, dummy, conf);
./nginx/src/http/ngx_http_core_module.c-3253-    }
./nginx/src/http/ngx_http_core_module.c-3254-
./nginx/src/http/ngx_http_core_module.c:3255:    content_type = ngx_palloc(cf->pool, sizeof(ngx_str_t));
./nginx/src/http/ngx_http_core_module.c-3256-    if (content_type == NULL) {
./nginx/src/http/ngx_http_core_module.c-3257-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3258-    }
./nginx/src/http/ngx_http_core_module.c-3259-
./nginx/src/http/ngx_http_core_module.c-3260-    *content_type = value[0];
./nginx/src/http/ngx_http_core_module.c-3261-
./nginx/src/http/ngx_http_core_module.c-3262-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/ngx_http_core_module.c-3263-
./nginx/src/http/ngx_http_core_module.c-3264-        hash = ngx_hash_strlow(value[i].data, value[i].data, value[i].len);
./nginx/src/http/ngx_http_core_module.c-3265-
--
./nginx/src/http/ngx_http_core_module.c-3301-{
./nginx/src/http/ngx_http_core_module.c-3302-    return ngx_http_variables_add_core_vars(cf);
./nginx/src/http/ngx_http_core_module.c-3303-}
./nginx/src/http/ngx_http_core_module.c-3304-
./nginx/src/http/ngx_http_core_module.c-3305-
./nginx/src/http/ngx_http_core_module.c-3306-static void *
./nginx/src/http/ngx_http_core_module.c-3307-ngx_http_core_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/ngx_http_core_module.c-3308-{
./nginx/src/http/ngx_http_core_module.c-3309-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_core_module.c-3310-
./nginx/src/http/ngx_http_core_module.c:3311:    cmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_main_conf_t));
./nginx/src/http/ngx_http_core_module.c-3312-    if (cmcf == NULL) {
./nginx/src/http/ngx_http_core_module.c-3313-        return NULL;
./nginx/src/http/ngx_http_core_module.c-3314-    }
./nginx/src/http/ngx_http_core_module.c-3315-
./nginx/src/http/ngx_http_core_module.c:3316:    if (ngx_array_init(&cmcf->servers, cf->pool, 4,
./nginx/src/http/ngx_http_core_module.c-3317-                       sizeof(ngx_http_core_srv_conf_t *))
./nginx/src/http/ngx_http_core_module.c-3318-        != NGX_OK)
./nginx/src/http/ngx_http_core_module.c-3319-    {
./nginx/src/http/ngx_http_core_module.c-3320-        return NULL;
./nginx/src/http/ngx_http_core_module.c-3321-    }
./nginx/src/http/ngx_http_core_module.c-3322-
./nginx/src/http/ngx_http_core_module.c-3323-    cmcf->server_names_hash_max_size = NGX_CONF_UNSET_UINT;
./nginx/src/http/ngx_http_core_module.c-3324-    cmcf->server_names_hash_bucket_size = NGX_CONF_UNSET_UINT;
./nginx/src/http/ngx_http_core_module.c-3325-
./nginx/src/http/ngx_http_core_module.c-3326-    cmcf->variables_hash_max_size = NGX_CONF_UNSET_UINT;
--
./nginx/src/http/ngx_http_core_module.c-3364-
./nginx/src/http/ngx_http_core_module.c-3365-    return NGX_CONF_OK;
./nginx/src/http/ngx_http_core_module.c-3366-}
./nginx/src/http/ngx_http_core_module.c-3367-
./nginx/src/http/ngx_http_core_module.c-3368-
./nginx/src/http/ngx_http_core_module.c-3369-static void *
./nginx/src/http/ngx_http_core_module.c-3370-ngx_http_core_create_srv_conf(ngx_conf_t *cf)
./nginx/src/http/ngx_http_core_module.c-3371-{
./nginx/src/http/ngx_http_core_module.c-3372-    ngx_http_core_srv_conf_t  *cscf;
./nginx/src/http/ngx_http_core_module.c-3373-
./nginx/src/http/ngx_http_core_module.c:3374:    cscf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_srv_conf_t));
./nginx/src/http/ngx_http_core_module.c-3375-    if (cscf == NULL) {
./nginx/src/http/ngx_http_core_module.c-3376-        return NULL;
./nginx/src/http/ngx_http_core_module.c-3377-    }
./nginx/src/http/ngx_http_core_module.c-3378-
./nginx/src/http/ngx_http_core_module.c-3379-    /*
./nginx/src/http/ngx_http_core_module.c-3380-     * set by ngx_pcalloc():
./nginx/src/http/ngx_http_core_module.c-3381-     *
./nginx/src/http/ngx_http_core_module.c-3382-     *     conf->client_large_buffers.num = 0;
./nginx/src/http/ngx_http_core_module.c-3383-     */
./nginx/src/http/ngx_http_core_module.c-3384-
--
./nginx/src/http/ngx_http_core_module.c-3458-        name.data--;
./nginx/src/http/ngx_http_core_module.c-3459-    } else
./nginx/src/http/ngx_http_core_module.c-3460-#endif
./nginx/src/http/ngx_http_core_module.c-3461-
./nginx/src/http/ngx_http_core_module.c-3462-    if (name.data[0] == '.') {
./nginx/src/http/ngx_http_core_module.c-3463-        name.len--;
./nginx/src/http/ngx_http_core_module.c-3464-        name.data++;
./nginx/src/http/ngx_http_core_module.c-3465-    }
./nginx/src/http/ngx_http_core_module.c-3466-
./nginx/src/http/ngx_http_core_module.c-3467-    conf->server_name.len = name.len;
./nginx/src/http/ngx_http_core_module.c:3468:    conf->server_name.data = ngx_pstrdup(cf->pool, &name);
./nginx/src/http/ngx_http_core_module.c-3469-    if (conf->server_name.data == NULL) {
./nginx/src/http/ngx_http_core_module.c-3470-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3471-    }
./nginx/src/http/ngx_http_core_module.c-3472-
./nginx/src/http/ngx_http_core_module.c-3473-    return NGX_CONF_OK;
./nginx/src/http/ngx_http_core_module.c-3474-}
./nginx/src/http/ngx_http_core_module.c-3475-
./nginx/src/http/ngx_http_core_module.c-3476-
./nginx/src/http/ngx_http_core_module.c-3477-static void *
./nginx/src/http/ngx_http_core_module.c-3478-ngx_http_core_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/ngx_http_core_module.c-3479-{
./nginx/src/http/ngx_http_core_module.c-3480-    ngx_http_core_loc_conf_t  *clcf;
./nginx/src/http/ngx_http_core_module.c-3481-
./nginx/src/http/ngx_http_core_module.c:3482:    clcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_core_loc_conf_t));
./nginx/src/http/ngx_http_core_module.c-3483-    if (clcf == NULL) {
./nginx/src/http/ngx_http_core_module.c-3484-        return NULL;
./nginx/src/http/ngx_http_core_module.c-3485-    }
./nginx/src/http/ngx_http_core_module.c-3486-
./nginx/src/http/ngx_http_core_module.c-3487-    /*
./nginx/src/http/ngx_http_core_module.c-3488-     * set by ngx_pcalloc():
./nginx/src/http/ngx_http_core_module.c-3489-     *
./nginx/src/http/ngx_http_core_module.c-3490-     *     clcf->root = { 0, NULL };
./nginx/src/http/ngx_http_core_module.c-3491-     *     clcf->limit_except = 0;
./nginx/src/http/ngx_http_core_module.c-3492-     *     clcf->post_action = { 0, NULL };
--
./nginx/src/http/ngx_http_core_module.c-3632-     * to inherit the http's conf->types_hash to all servers
./nginx/src/http/ngx_http_core_module.c-3633-     */
./nginx/src/http/ngx_http_core_module.c-3634-
./nginx/src/http/ngx_http_core_module.c-3635-    if (prev->types && prev->types_hash.buckets == NULL) {
./nginx/src/http/ngx_http_core_module.c-3636-
./nginx/src/http/ngx_http_core_module.c-3637-        types_hash.hash = &prev->types_hash;
./nginx/src/http/ngx_http_core_module.c-3638-        types_hash.key = ngx_hash_key_lc;
./nginx/src/http/ngx_http_core_module.c-3639-        types_hash.max_size = conf->types_hash_max_size;
./nginx/src/http/ngx_http_core_module.c-3640-        types_hash.bucket_size = conf->types_hash_bucket_size;
./nginx/src/http/ngx_http_core_module.c-3641-        types_hash.name = "types_hash";
./nginx/src/http/ngx_http_core_module.c:3642:        types_hash.pool = cf->pool;
./nginx/src/http/ngx_http_core_module.c-3643-        types_hash.temp_pool = NULL;
./nginx/src/http/ngx_http_core_module.c-3644-
./nginx/src/http/ngx_http_core_module.c-3645-        if (ngx_hash_init(&types_hash, prev->types->elts, prev->types->nelts)
./nginx/src/http/ngx_http_core_module.c-3646-            != NGX_OK)
./nginx/src/http/ngx_http_core_module.c-3647-        {
./nginx/src/http/ngx_http_core_module.c-3648-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3649-        }
./nginx/src/http/ngx_http_core_module.c-3650-    }
./nginx/src/http/ngx_http_core_module.c-3651-
./nginx/src/http/ngx_http_core_module.c-3652-    if (conf->types == NULL) {
./nginx/src/http/ngx_http_core_module.c-3653-        conf->types = prev->types;
./nginx/src/http/ngx_http_core_module.c-3654-        conf->types_hash = prev->types_hash;
./nginx/src/http/ngx_http_core_module.c-3655-    }
./nginx/src/http/ngx_http_core_module.c-3656-
./nginx/src/http/ngx_http_core_module.c-3657-    if (conf->types == NULL) {
./nginx/src/http/ngx_http_core_module.c:3658:        conf->types = ngx_array_create(cf->pool, 3, sizeof(ngx_hash_key_t));
./nginx/src/http/ngx_http_core_module.c-3659-        if (conf->types == NULL) {
./nginx/src/http/ngx_http_core_module.c-3660-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3661-        }
./nginx/src/http/ngx_http_core_module.c-3662-
./nginx/src/http/ngx_http_core_module.c-3663-        for (i = 0; ngx_http_core_default_types[i].key.len; i++) {
./nginx/src/http/ngx_http_core_module.c-3664-            type = ngx_array_push(conf->types);
./nginx/src/http/ngx_http_core_module.c-3665-            if (type == NULL) {
./nginx/src/http/ngx_http_core_module.c-3666-                return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3667-            }
./nginx/src/http/ngx_http_core_module.c-3668-
--
./nginx/src/http/ngx_http_core_module.c-3674-        }
./nginx/src/http/ngx_http_core_module.c-3675-    }
./nginx/src/http/ngx_http_core_module.c-3676-
./nginx/src/http/ngx_http_core_module.c-3677-    if (conf->types_hash.buckets == NULL) {
./nginx/src/http/ngx_http_core_module.c-3678-
./nginx/src/http/ngx_http_core_module.c-3679-        types_hash.hash = &conf->types_hash;
./nginx/src/http/ngx_http_core_module.c-3680-        types_hash.key = ngx_hash_key_lc;
./nginx/src/http/ngx_http_core_module.c-3681-        types_hash.max_size = conf->types_hash_max_size;
./nginx/src/http/ngx_http_core_module.c-3682-        types_hash.bucket_size = conf->types_hash_bucket_size;
./nginx/src/http/ngx_http_core_module.c-3683-        types_hash.name = "types_hash";
./nginx/src/http/ngx_http_core_module.c:3684:        types_hash.pool = cf->pool;
./nginx/src/http/ngx_http_core_module.c-3685-        types_hash.temp_pool = NULL;
./nginx/src/http/ngx_http_core_module.c-3686-
./nginx/src/http/ngx_http_core_module.c-3687-        if (ngx_hash_init(&types_hash, conf->types->elts, conf->types->nelts)
./nginx/src/http/ngx_http_core_module.c-3688-            != NGX_OK)
./nginx/src/http/ngx_http_core_module.c-3689-        {
./nginx/src/http/ngx_http_core_module.c-3690-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3691-        }
./nginx/src/http/ngx_http_core_module.c-3692-    }
./nginx/src/http/ngx_http_core_module.c-3693-
./nginx/src/http/ngx_http_core_module.c-3694-    if (conf->error_log == NULL) {
--
./nginx/src/http/ngx_http_core_module.c-3873-    cscf->listen = 1;
./nginx/src/http/ngx_http_core_module.c-3874-
./nginx/src/http/ngx_http_core_module.c-3875-    value = cf->args->elts;
./nginx/src/http/ngx_http_core_module.c-3876-
./nginx/src/http/ngx_http_core_module.c-3877-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/http/ngx_http_core_module.c-3878-
./nginx/src/http/ngx_http_core_module.c-3879-    u.url = value[1];
./nginx/src/http/ngx_http_core_module.c-3880-    u.listen = 1;
./nginx/src/http/ngx_http_core_module.c-3881-    u.default_port = 80;
./nginx/src/http/ngx_http_core_module.c-3882-
./nginx/src/http/ngx_http_core_module.c:3883:    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-3884-        if (u.err) {
./nginx/src/http/ngx_http_core_module.c-3885-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_core_module.c-3886-                               "%s in \"%V\" of the \"listen\" directive",
./nginx/src/http/ngx_http_core_module.c-3887-                               u.err, &u.url);
./nginx/src/http/ngx_http_core_module.c-3888-        }
./nginx/src/http/ngx_http_core_module.c-3889-
./nginx/src/http/ngx_http_core_module.c-3890-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-3891-    }
./nginx/src/http/ngx_http_core_module.c-3892-
./nginx/src/http/ngx_http_core_module.c-3893-    ngx_memzero(&lsopt, sizeof(ngx_http_listen_opt_t));
--
./nginx/src/http/ngx_http_core_module.c-4443-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4444-
./nginx/src/http/ngx_http_core_module.c-4445-    next:
./nginx/src/http/ngx_http_core_module.c-4446-        continue;
./nginx/src/http/ngx_http_core_module.c-4447-    }
./nginx/src/http/ngx_http_core_module.c-4448-
./nginx/src/http/ngx_http_core_module.c-4449-    if (!(pclcf->limit_except & NGX_HTTP_GET)) {
./nginx/src/http/ngx_http_core_module.c-4450-        pclcf->limit_except &= (uint32_t) ~NGX_HTTP_HEAD;
./nginx/src/http/ngx_http_core_module.c-4451-    }
./nginx/src/http/ngx_http_core_module.c-4452-
./nginx/src/http/ngx_http_core_module.c:4453:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/ngx_http_core_module.c-4454-    if (ctx == NULL) {
./nginx/src/http/ngx_http_core_module.c-4455-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4456-    }
./nginx/src/http/ngx_http_core_module.c-4457-
./nginx/src/http/ngx_http_core_module.c-4458-    pctx = cf->ctx;
./nginx/src/http/ngx_http_core_module.c-4459-    ctx->main_conf = pctx->main_conf;
./nginx/src/http/ngx_http_core_module.c-4460-    ctx->srv_conf = pctx->srv_conf;
./nginx/src/http/ngx_http_core_module.c-4461-
./nginx/src/http/ngx_http_core_module.c:4462:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_core_module.c-4463-    if (ctx->loc_conf == NULL) {
./nginx/src/http/ngx_http_core_module.c-4464-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4465-    }
./nginx/src/http/ngx_http_core_module.c-4466-
./nginx/src/http/ngx_http_core_module.c-4467-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/http/ngx_http_core_module.c-4468-        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
./nginx/src/http/ngx_http_core_module.c-4469-            continue;
./nginx/src/http/ngx_http_core_module.c-4470-        }
./nginx/src/http/ngx_http_core_module.c-4471-
./nginx/src/http/ngx_http_core_module.c-4472-        module = ngx_modules[i]->ctx;
--
./nginx/src/http/ngx_http_core_module.c-4540-
./nginx/src/http/ngx_http_core_module.c-4541-    u_char                            *p;
./nginx/src/http/ngx_http_core_module.c-4542-    ngx_int_t                          overwrite;
./nginx/src/http/ngx_http_core_module.c-4543-    ngx_str_t                         *value, uri, args;
./nginx/src/http/ngx_http_core_module.c-4544-    ngx_uint_t                         i, n;
./nginx/src/http/ngx_http_core_module.c-4545-    ngx_http_err_page_t               *err;
./nginx/src/http/ngx_http_core_module.c-4546-    ngx_http_complex_value_t           cv;
./nginx/src/http/ngx_http_core_module.c-4547-    ngx_http_compile_complex_value_t   ccv;
./nginx/src/http/ngx_http_core_module.c-4548-
./nginx/src/http/ngx_http_core_module.c-4549-    if (clcf->error_pages == NULL) {
./nginx/src/http/ngx_http_core_module.c:4550:        clcf->error_pages = ngx_array_create(cf->pool, 4,
./nginx/src/http/ngx_http_core_module.c-4551-                                             sizeof(ngx_http_err_page_t));
./nginx/src/http/ngx_http_core_module.c-4552-        if (clcf->error_pages == NULL) {
./nginx/src/http/ngx_http_core_module.c-4553-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4554-        }
./nginx/src/http/ngx_http_core_module.c-4555-    }
./nginx/src/http/ngx_http_core_module.c-4556-
./nginx/src/http/ngx_http_core_module.c-4557-    value = cf->args->elts;
./nginx/src/http/ngx_http_core_module.c-4558-
./nginx/src/http/ngx_http_core_module.c-4559-    i = cf->args->nelts - 2;
./nginx/src/http/ngx_http_core_module.c-4560-
--
./nginx/src/http/ngx_http_core_module.c-4666-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_core_module.c-4667-
./nginx/src/http/ngx_http_core_module.c-4668-    if (clcf->try_files) {
./nginx/src/http/ngx_http_core_module.c-4669-        return "is duplicate";
./nginx/src/http/ngx_http_core_module.c-4670-    }
./nginx/src/http/ngx_http_core_module.c-4671-
./nginx/src/http/ngx_http_core_module.c-4672-    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
./nginx/src/http/ngx_http_core_module.c-4673-
./nginx/src/http/ngx_http_core_module.c-4674-    cmcf->try_files = 1;
./nginx/src/http/ngx_http_core_module.c-4675-
./nginx/src/http/ngx_http_core_module.c:4676:    tf = ngx_pcalloc(cf->pool, cf->args->nelts * sizeof(ngx_http_try_file_t));
./nginx/src/http/ngx_http_core_module.c-4677-    if (tf == NULL) {
./nginx/src/http/ngx_http_core_module.c-4678-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4679-    }
./nginx/src/http/ngx_http_core_module.c-4680-
./nginx/src/http/ngx_http_core_module.c-4681-    clcf->try_files = tf;
./nginx/src/http/ngx_http_core_module.c-4682-
./nginx/src/http/ngx_http_core_module.c-4683-    value = cf->args->elts;
./nginx/src/http/ngx_http_core_module.c-4684-
./nginx/src/http/ngx_http_core_module.c-4685-    for (i = 0; i < cf->args->nelts - 1; i++) {
./nginx/src/http/ngx_http_core_module.c-4686-
--
./nginx/src/http/ngx_http_core_module.c-4795-    if (clcf->open_file_cache == NULL) {
./nginx/src/http/ngx_http_core_module.c-4796-        return NGX_CONF_OK;
./nginx/src/http/ngx_http_core_module.c-4797-    }
./nginx/src/http/ngx_http_core_module.c-4798-
./nginx/src/http/ngx_http_core_module.c-4799-    if (max == 0) {
./nginx/src/http/ngx_http_core_module.c-4800-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_core_module.c-4801-                        "\"open_file_cache\" must have the \"max\" parameter");
./nginx/src/http/ngx_http_core_module.c-4802-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4803-    }
./nginx/src/http/ngx_http_core_module.c-4804-
./nginx/src/http/ngx_http_core_module.c:4805:    clcf->open_file_cache = ngx_open_file_cache_init(cf->pool, max, inactive);
./nginx/src/http/ngx_http_core_module.c-4806-    if (clcf->open_file_cache) {
./nginx/src/http/ngx_http_core_module.c-4807-        return NGX_CONF_OK;
./nginx/src/http/ngx_http_core_module.c-4808-    }
./nginx/src/http/ngx_http_core_module.c-4809-
./nginx/src/http/ngx_http_core_module.c-4810-    return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4811-}
./nginx/src/http/ngx_http_core_module.c-4812-
./nginx/src/http/ngx_http_core_module.c-4813-
./nginx/src/http/ngx_http_core_module.c-4814-static char *
./nginx/src/http/ngx_http_core_module.c-4815-ngx_http_core_error_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
--
./nginx/src/http/ngx_http_core_module.c-4974-
./nginx/src/http/ngx_http_core_module.c-4975-#if (NGX_PCRE)
./nginx/src/http/ngx_http_core_module.c-4976-
./nginx/src/http/ngx_http_core_module.c-4977-    ngx_str_t            *value;
./nginx/src/http/ngx_http_core_module.c-4978-    ngx_uint_t            i;
./nginx/src/http/ngx_http_core_module.c-4979-    ngx_regex_elt_t      *re;
./nginx/src/http/ngx_http_core_module.c-4980-    ngx_regex_compile_t   rc;
./nginx/src/http/ngx_http_core_module.c-4981-    u_char                errstr[NGX_MAX_CONF_ERRSTR];
./nginx/src/http/ngx_http_core_module.c-4982-
./nginx/src/http/ngx_http_core_module.c-4983-    if (clcf->gzip_disable == NGX_CONF_UNSET_PTR) {
./nginx/src/http/ngx_http_core_module.c:4984:        clcf->gzip_disable = ngx_array_create(cf->pool, 2,
./nginx/src/http/ngx_http_core_module.c-4985-                                              sizeof(ngx_regex_elt_t));
./nginx/src/http/ngx_http_core_module.c-4986-        if (clcf->gzip_disable == NULL) {
./nginx/src/http/ngx_http_core_module.c-4987-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-4988-        }
./nginx/src/http/ngx_http_core_module.c-4989-    }
./nginx/src/http/ngx_http_core_module.c-4990-
./nginx/src/http/ngx_http_core_module.c-4991-    value = cf->args->elts;
./nginx/src/http/ngx_http_core_module.c-4992-
./nginx/src/http/ngx_http_core_module.c-4993-    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
./nginx/src/http/ngx_http_core_module.c-4994-
./nginx/src/http/ngx_http_core_module.c:4995:    rc.pool = cf->pool;
./nginx/src/http/ngx_http_core_module.c-4996-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/src/http/ngx_http_core_module.c-4997-    rc.err.data = errstr;
./nginx/src/http/ngx_http_core_module.c-4998-
./nginx/src/http/ngx_http_core_module.c-4999-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/ngx_http_core_module.c-5000-
./nginx/src/http/ngx_http_core_module.c-5001-        if (ngx_strcmp(value[i].data, "msie6") == 0) {
./nginx/src/http/ngx_http_core_module.c-5002-            clcf->gzip_disable_msie6 = 1;
./nginx/src/http/ngx_http_core_module.c-5003-            continue;
./nginx/src/http/ngx_http_core_module.c-5004-        }
./nginx/src/http/ngx_http_core_module.c-5005-
--
./nginx/src/http/ngx_http_core_module.c-5102-        }
./nginx/src/http/ngx_http_core_module.c-5103-
./nginx/src/http/ngx_http_core_module.c-5104-        if (ngx_strncmp(value[i].data, "from=", 5) == 0) {
./nginx/src/http/ngx_http_core_module.c-5105-            value[i].len -= 5;
./nginx/src/http/ngx_http_core_module.c-5106-            value[i].data += 5;
./nginx/src/http/ngx_http_core_module.c-5107-
./nginx/src/http/ngx_http_core_module.c-5108-            ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
./nginx/src/http/ngx_http_core_module.c-5109-
./nginx/src/http/ngx_http_core_module.c-5110-            ccv.cf = cf;
./nginx/src/http/ngx_http_core_module.c-5111-            ccv.value = &value[i];
./nginx/src/http/ngx_http_core_module.c:5112:            ccv.complex_value = ngx_palloc(cf->pool,
./nginx/src/http/ngx_http_core_module.c-5113-                                           sizeof(ngx_http_complex_value_t));
./nginx/src/http/ngx_http_core_module.c-5114-            if (ccv.complex_value == NULL) {
./nginx/src/http/ngx_http_core_module.c-5115-                return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-5116-            }
./nginx/src/http/ngx_http_core_module.c-5117-
./nginx/src/http/ngx_http_core_module.c-5118-            if (ngx_http_compile_complex_value(&ccv) != NGX_OK) {
./nginx/src/http/ngx_http_core_module.c-5119-                return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-5120-            }
./nginx/src/http/ngx_http_core_module.c-5121-
./nginx/src/http/ngx_http_core_module.c-5122-            clcf->disable_symlinks_from = ccv.complex_value;
--
./nginx/src/http/ngx_http_core_module.c-5190-}
./nginx/src/http/ngx_http_core_module.c-5191-
./nginx/src/http/ngx_http_core_module.c-5192-
./nginx/src/http/ngx_http_core_module.c-5193-static char *
./nginx/src/http/ngx_http_core_module.c-5194-ngx_http_core_pool_size(ngx_conf_t *cf, void *post, void *data)
./nginx/src/http/ngx_http_core_module.c-5195-{
./nginx/src/http/ngx_http_core_module.c-5196-    size_t *sp = data;
./nginx/src/http/ngx_http_core_module.c-5197-
./nginx/src/http/ngx_http_core_module.c-5198-    if (*sp < NGX_MIN_POOL_SIZE) {
./nginx/src/http/ngx_http_core_module.c-5199-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_core_module.c:5200:                           "the pool size must be no less than %uz",
./nginx/src/http/ngx_http_core_module.c-5201-                           NGX_MIN_POOL_SIZE);
./nginx/src/http/ngx_http_core_module.c-5202-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-5203-    }
./nginx/src/http/ngx_http_core_module.c-5204-
./nginx/src/http/ngx_http_core_module.c-5205-    if (*sp % NGX_POOL_ALIGNMENT) {
./nginx/src/http/ngx_http_core_module.c-5206-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_core_module.c:5207:                           "the pool size must be a multiple of %uz",
./nginx/src/http/ngx_http_core_module.c-5208-                           NGX_POOL_ALIGNMENT);
./nginx/src/http/ngx_http_core_module.c-5209-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_core_module.c-5210-    }
./nginx/src/http/ngx_http_core_module.c-5211-
./nginx/src/http/ngx_http_core_module.c-5212-    return NGX_CONF_OK;
./nginx/src/http/ngx_http_core_module.c-5213-}
--
./nginx/src/http/ngx_http_request_body.c-42-    if (r->request_body || r->discard_body || r->content_length_n == 0) {
./nginx/src/http/ngx_http_request_body.c-43-        post_handler(r);
./nginx/src/http/ngx_http_request_body.c-44-        return NGX_OK;
./nginx/src/http/ngx_http_request_body.c-45-    }
./nginx/src/http/ngx_http_request_body.c-46-
./nginx/src/http/ngx_http_request_body.c-47-    if (ngx_http_test_expect(r) != NGX_OK) {
./nginx/src/http/ngx_http_request_body.c-48-        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-49-        goto done;
./nginx/src/http/ngx_http_request_body.c-50-    }
./nginx/src/http/ngx_http_request_body.c-51-
./nginx/src/http/ngx_http_request_body.c:52:    rb = ngx_pcalloc(r->pool, sizeof(ngx_http_request_body_t));
./nginx/src/http/ngx_http_request_body.c-53-    if (rb == NULL) {
./nginx/src/http/ngx_http_request_body.c-54-        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-55-        goto done;
./nginx/src/http/ngx_http_request_body.c-56-    }
./nginx/src/http/ngx_http_request_body.c-57-
./nginx/src/http/ngx_http_request_body.c-58-    r->request_body = rb;
./nginx/src/http/ngx_http_request_body.c-59-
./nginx/src/http/ngx_http_request_body.c-60-    if (r->headers_in.content_length_n < 0) {
./nginx/src/http/ngx_http_request_body.c-61-        post_handler(r);
./nginx/src/http/ngx_http_request_body.c-62-        return NGX_OK;
--
./nginx/src/http/ngx_http_request_body.c-90-
./nginx/src/http/ngx_http_request_body.c-91-    preread = r->header_in->last - r->header_in->pos;
./nginx/src/http/ngx_http_request_body.c-92-
./nginx/src/http/ngx_http_request_body.c-93-    if (preread) {
./nginx/src/http/ngx_http_request_body.c-94-
./nginx/src/http/ngx_http_request_body.c-95-        /* there is the pre-read part of the request body */
./nginx/src/http/ngx_http_request_body.c-96-
./nginx/src/http/ngx_http_request_body.c-97-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_request_body.c-98-                       "http client request body preread %uz", preread);
./nginx/src/http/ngx_http_request_body.c-99-
./nginx/src/http/ngx_http_request_body.c:100:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_request_body.c-101-        if (b == NULL) {
./nginx/src/http/ngx_http_request_body.c-102-            rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-103-            goto done;
./nginx/src/http/ngx_http_request_body.c-104-        }
./nginx/src/http/ngx_http_request_body.c-105-
./nginx/src/http/ngx_http_request_body.c-106-        b->temporary = 1;
./nginx/src/http/ngx_http_request_body.c-107-        b->start = r->header_in->pos;
./nginx/src/http/ngx_http_request_body.c-108-        b->pos = r->header_in->pos;
./nginx/src/http/ngx_http_request_body.c-109-        b->last = r->header_in->last;
./nginx/src/http/ngx_http_request_body.c-110-        b->end = r->header_in->end;
./nginx/src/http/ngx_http_request_body.c-111-
./nginx/src/http/ngx_http_request_body.c:112:        rb->bufs = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_request_body.c-113-        if (rb->bufs == NULL) {
./nginx/src/http/ngx_http_request_body.c-114-            rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-115-            goto done;
./nginx/src/http/ngx_http_request_body.c-116-        }
./nginx/src/http/ngx_http_request_body.c-117-
./nginx/src/http/ngx_http_request_body.c-118-        rb->bufs->buf = b;
./nginx/src/http/ngx_http_request_body.c-119-        rb->bufs->next = NULL;
./nginx/src/http/ngx_http_request_body.c-120-
./nginx/src/http/ngx_http_request_body.c-121-        rb->buf = b;
./nginx/src/http/ngx_http_request_body.c-122-
--
./nginx/src/http/ngx_http_request_body.c-180-            size += preread;
./nginx/src/http/ngx_http_request_body.c-181-        }
./nginx/src/http/ngx_http_request_body.c-182-
./nginx/src/http/ngx_http_request_body.c-183-    } else {
./nginx/src/http/ngx_http_request_body.c-184-        size = clcf->client_body_buffer_size;
./nginx/src/http/ngx_http_request_body.c-185-
./nginx/src/http/ngx_http_request_body.c-186-        /* disable copying buffer for r->request_body_in_single_buf */
./nginx/src/http/ngx_http_request_body.c-187-        b = NULL;
./nginx/src/http/ngx_http_request_body.c-188-    }
./nginx/src/http/ngx_http_request_body.c-189-
./nginx/src/http/ngx_http_request_body.c:190:    rb->buf = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/ngx_http_request_body.c-191-    if (rb->buf == NULL) {
./nginx/src/http/ngx_http_request_body.c-192-        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-193-        goto done;
./nginx/src/http/ngx_http_request_body.c-194-    }
./nginx/src/http/ngx_http_request_body.c-195-
./nginx/src/http/ngx_http_request_body.c:196:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_request_body.c-197-    if (cl == NULL) {
./nginx/src/http/ngx_http_request_body.c-198-        rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-199-        goto done;
./nginx/src/http/ngx_http_request_body.c-200-    }
./nginx/src/http/ngx_http_request_body.c-201-
./nginx/src/http/ngx_http_request_body.c-202-    cl->buf = rb->buf;
./nginx/src/http/ngx_http_request_body.c-203-    cl->next = NULL;
./nginx/src/http/ngx_http_request_body.c-204-
./nginx/src/http/ngx_http_request_body.c-205-    if (b && r->request_body_in_single_buf) {
./nginx/src/http/ngx_http_request_body.c-206-        size = b->last - b->pos;
--
./nginx/src/http/ngx_http_request_body.c-342-    }
./nginx/src/http/ngx_http_request_body.c-343-
./nginx/src/http/ngx_http_request_body.c-344-    if (rb->temp_file || r->request_body_in_file_only) {
./nginx/src/http/ngx_http_request_body.c-345-
./nginx/src/http/ngx_http_request_body.c-346-        /* save the last part */
./nginx/src/http/ngx_http_request_body.c-347-
./nginx/src/http/ngx_http_request_body.c-348-        if (ngx_http_write_request_body(r, rb->to_write) != NGX_OK) {
./nginx/src/http/ngx_http_request_body.c-349-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-350-        }
./nginx/src/http/ngx_http_request_body.c-351-
./nginx/src/http/ngx_http_request_body.c:352:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_request_body.c-353-        if (b == NULL) {
./nginx/src/http/ngx_http_request_body.c-354-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_request_body.c-355-        }
./nginx/src/http/ngx_http_request_body.c-356-
./nginx/src/http/ngx_http_request_body.c-357-        b->in_file = 1;
./nginx/src/http/ngx_http_request_body.c-358-        b->file_pos = 0;
./nginx/src/http/ngx_http_request_body.c-359-        b->file_last = rb->temp_file->file.offset;
./nginx/src/http/ngx_http_request_body.c-360-        b->file = &rb->temp_file->file;
./nginx/src/http/ngx_http_request_body.c-361-
./nginx/src/http/ngx_http_request_body.c-362-        if (rb->bufs->next) {
--
./nginx/src/http/ngx_http_request_body.c-385-ngx_http_write_request_body(ngx_http_request_t *r, ngx_chain_t *body)
./nginx/src/http/ngx_http_request_body.c-386-{
./nginx/src/http/ngx_http_request_body.c-387-    ssize_t                    n;
./nginx/src/http/ngx_http_request_body.c-388-    ngx_temp_file_t           *tf;
./nginx/src/http/ngx_http_request_body.c-389-    ngx_http_request_body_t   *rb;
./nginx/src/http/ngx_http_request_body.c-390-    ngx_http_core_loc_conf_t  *clcf;
./nginx/src/http/ngx_http_request_body.c-391-
./nginx/src/http/ngx_http_request_body.c-392-    rb = r->request_body;
./nginx/src/http/ngx_http_request_body.c-393-
./nginx/src/http/ngx_http_request_body.c-394-    if (rb->temp_file == NULL) {
./nginx/src/http/ngx_http_request_body.c:395:        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/src/http/ngx_http_request_body.c-396-        if (tf == NULL) {
./nginx/src/http/ngx_http_request_body.c-397-            return NGX_ERROR;
./nginx/src/http/ngx_http_request_body.c-398-        }
./nginx/src/http/ngx_http_request_body.c-399-
./nginx/src/http/ngx_http_request_body.c-400-        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_request_body.c-401-
./nginx/src/http/ngx_http_request_body.c-402-        tf->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_request_body.c-403-        tf->file.log = r->connection->log;
./nginx/src/http/ngx_http_request_body.c-404-        tf->path = clcf->client_body_temp_path;
./nginx/src/http/ngx_http_request_body.c:405:        tf->pool = r->pool;
./nginx/src/http/ngx_http_request_body.c-406-        tf->warn = "a client request body is buffered to a temporary file";
./nginx/src/http/ngx_http_request_body.c-407-        tf->log_level = r->request_body_file_log_level;
./nginx/src/http/ngx_http_request_body.c-408-        tf->persistent = r->request_body_in_persistent_file;
./nginx/src/http/ngx_http_request_body.c-409-        tf->clean = r->request_body_in_clean_file;
./nginx/src/http/ngx_http_request_body.c-410-
./nginx/src/http/ngx_http_request_body.c-411-        if (r->request_body_file_group_access) {
./nginx/src/http/ngx_http_request_body.c-412-            tf->access = 0660;
./nginx/src/http/ngx_http_request_body.c-413-        }
./nginx/src/http/ngx_http_request_body.c-414-
./nginx/src/http/ngx_http_request_body.c-415-        rb->temp_file = tf;
./nginx/src/http/ngx_http_request_body.c-416-
./nginx/src/http/ngx_http_request_body.c-417-        if (body == NULL) {
./nginx/src/http/ngx_http_request_body.c-418-            /* empty body with r->request_body_in_file_only */
./nginx/src/http/ngx_http_request_body.c-419-
./nginx/src/http/ngx_http_request_body.c:420:            if (ngx_create_temp_file(&tf->file, tf->path, tf->pool,
./nginx/src/http/ngx_http_request_body.c-421-                                     tf->persistent, tf->clean, tf->access)
./nginx/src/http/ngx_http_request_body.c-422-                != NGX_OK)
./nginx/src/http/ngx_http_request_body.c-423-            {
./nginx/src/http/ngx_http_request_body.c-424-                return NGX_ERROR;
./nginx/src/http/ngx_http_request_body.c-425-            }
./nginx/src/http/ngx_http_request_body.c-426-
./nginx/src/http/ngx_http_request_body.c-427-            return NGX_OK;
./nginx/src/http/ngx_http_request_body.c-428-        }
./nginx/src/http/ngx_http_request_body.c-429-    }
./nginx/src/http/ngx_http_request_body.c-430-
--
./nginx/src/http/ngx_http_special_response.c-578-    of.directio = clcf->directio;
./nginx/src/http/ngx_http_special_response.c-579-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/ngx_http_special_response.c-580-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/ngx_http_special_response.c-581-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/ngx_http_special_response.c-582-    of.events = clcf->open_file_cache_events;
./nginx/src/http/ngx_http_special_response.c-583-
./nginx/src/http/ngx_http_special_response.c-584-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/ngx_http_special_response.c-585-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-586-    }
./nginx/src/http/ngx_http_special_response.c-587-
./nginx/src/http/ngx_http_special_response.c:588:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/ngx_http_special_response.c-589-        != NGX_OK)
./nginx/src/http/ngx_http_special_response.c-590-    {
./nginx/src/http/ngx_http_special_response.c-591-        switch (of.err) {
./nginx/src/http/ngx_http_special_response.c-592-
./nginx/src/http/ngx_http_special_response.c-593-        case 0:
./nginx/src/http/ngx_http_special_response.c-594-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-595-
./nginx/src/http/ngx_http_special_response.c-596-        case NGX_ENOENT:
./nginx/src/http/ngx_http_special_response.c-597-        case NGX_ENOTDIR:
./nginx/src/http/ngx_http_special_response.c-598-        case NGX_ENAMETOOLONG:
--
./nginx/src/http/ngx_http_special_response.c-629-    r->root_tested = !r->error_page;
./nginx/src/http/ngx_http_special_response.c-630-
./nginx/src/http/ngx_http_special_response.c-631-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "http static fd: %d", of.fd);
./nginx/src/http/ngx_http_special_response.c-632-
./nginx/src/http/ngx_http_special_response.c-633-    if (of.is_dir) {
./nginx/src/http/ngx_http_special_response.c-634-
./nginx/src/http/ngx_http_special_response.c-635-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http dir");
./nginx/src/http/ngx_http_special_response.c-636-
./nginx/src/http/ngx_http_special_response.c-637-        ngx_http_clear_location(r);
./nginx/src/http/ngx_http_special_response.c-638-
./nginx/src/http/ngx_http_special_response.c:639:        r->headers_out.location = ngx_palloc(r->pool, sizeof(ngx_table_elt_t));
./nginx/src/http/ngx_http_special_response.c-640-        if (r->headers_out.location == NULL) {
./nginx/src/http/ngx_http_special_response.c-641-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-642-        }
./nginx/src/http/ngx_http_special_response.c-643-
./nginx/src/http/ngx_http_special_response.c-644-        len = r->uri.len + 1;
./nginx/src/http/ngx_http_special_response.c-645-
./nginx/src/http/ngx_http_special_response.c-646-        if (!clcf->alias && clcf->root_lengths == NULL && r->args.len == 0) {
./nginx/src/http/ngx_http_special_response.c-647-            location = path.data + clcf->root.len;
./nginx/src/http/ngx_http_special_response.c-648-
./nginx/src/http/ngx_http_special_response.c-649-            *last = '/';
./nginx/src/http/ngx_http_special_response.c-650-
./nginx/src/http/ngx_http_special_response.c-651-        } else {
./nginx/src/http/ngx_http_special_response.c-652-            if (r->args.len) {
./nginx/src/http/ngx_http_special_response.c-653-                len += r->args.len + 1;
./nginx/src/http/ngx_http_special_response.c-654-            }
./nginx/src/http/ngx_http_special_response.c-655-
./nginx/src/http/ngx_http_special_response.c:656:            location = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_special_response.c-657-            if (location == NULL) {
./nginx/src/http/ngx_http_special_response.c-658-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-659-            }
./nginx/src/http/ngx_http_special_response.c-660-
./nginx/src/http/ngx_http_special_response.c-661-            last = ngx_copy(location, r->uri.data, r->uri.len);
./nginx/src/http/ngx_http_special_response.c-662-
./nginx/src/http/ngx_http_special_response.c-663-            *last = '/';
./nginx/src/http/ngx_http_special_response.c-664-
./nginx/src/http/ngx_http_special_response.c-665-            if (r->args.len) {
./nginx/src/http/ngx_http_special_response.c-666-                *++last = '?';
--
./nginx/src/http/ngx_http_special_response.c-711-    }
./nginx/src/http/ngx_http_special_response.c-712-
./nginx/src/http/ngx_http_special_response.c-713-    if (r != r->main && of.size == 0) {
./nginx/src/http/ngx_http_special_response.c-714-        return ngx_http_send_header(r);
./nginx/src/http/ngx_http_special_response.c-715-    }
./nginx/src/http/ngx_http_special_response.c-716-
./nginx/src/http/ngx_http_special_response.c-717-    r->allow_ranges = 1;
./nginx/src/http/ngx_http_special_response.c-718-
./nginx/src/http/ngx_http_special_response.c-719-    /* we need to allocate all before the header would be sent */
./nginx/src/http/ngx_http_special_response.c-720-
./nginx/src/http/ngx_http_special_response.c:721:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/ngx_http_special_response.c-722-    if (b == NULL) {
./nginx/src/http/ngx_http_special_response.c-723-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-724-    }
./nginx/src/http/ngx_http_special_response.c-725-
./nginx/src/http/ngx_http_special_response.c:726:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/ngx_http_special_response.c-727-    if (b->file == NULL) {
./nginx/src/http/ngx_http_special_response.c-728-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_special_response.c-729-    }
./nginx/src/http/ngx_http_special_response.c-730-
./nginx/src/http/ngx_http_special_response.c-731-    rc = ngx_http_send_header(r);
./nginx/src/http/ngx_http_special_response.c-732-
./nginx/src/http/ngx_http_special_response.c-733-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/ngx_http_special_response.c-734-        return rc;
./nginx/src/http/ngx_http_special_response.c-735-    }
./nginx/src/http/ngx_http_special_response.c-736-
--
./nginx/src/http/ngx_http_special_response.c-888-    rc = ngx_http_send_header(r);
./nginx/src/http/ngx_http_special_response.c-889-
./nginx/src/http/ngx_http_special_response.c-890-    if (rc == NGX_ERROR || r->header_only) {
./nginx/src/http/ngx_http_special_response.c-891-        return rc;
./nginx/src/http/ngx_http_special_response.c-892-    }
./nginx/src/http/ngx_http_special_response.c-893-
./nginx/src/http/ngx_http_special_response.c-894-    if (ngx_http_error_pages[err].len == 0) {
./nginx/src/http/ngx_http_special_response.c-895-        return ngx_http_send_special(r, NGX_HTTP_LAST);
./nginx/src/http/ngx_http_special_response.c-896-    }
./nginx/src/http/ngx_http_special_response.c-897-
./nginx/src/http/ngx_http_special_response.c:898:    b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_special_response.c-899-    if (b == NULL) {
./nginx/src/http/ngx_http_special_response.c-900-        return NGX_ERROR;
./nginx/src/http/ngx_http_special_response.c-901-    }
./nginx/src/http/ngx_http_special_response.c-902-
./nginx/src/http/ngx_http_special_response.c-903-    b->memory = 1;
./nginx/src/http/ngx_http_special_response.c-904-    b->pos = ngx_http_error_pages[err].data;
./nginx/src/http/ngx_http_special_response.c-905-    b->last = ngx_http_error_pages[err].data + ngx_http_error_pages[err].len;
./nginx/src/http/ngx_http_special_response.c-906-
./nginx/src/http/ngx_http_special_response.c-907-    out[0].buf = b;
./nginx/src/http/ngx_http_special_response.c-908-    out[0].next = &out[1];
./nginx/src/http/ngx_http_special_response.c-909-
./nginx/src/http/ngx_http_special_response.c:910:    b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_special_response.c-911-    if (b == NULL) {
./nginx/src/http/ngx_http_special_response.c-912-        return NGX_ERROR;
./nginx/src/http/ngx_http_special_response.c-913-    }
./nginx/src/http/ngx_http_special_response.c-914-
./nginx/src/http/ngx_http_special_response.c-915-    b->memory = 1;
./nginx/src/http/ngx_http_special_response.c-916-
./nginx/src/http/ngx_http_special_response.c-917-    b->pos = tail;
./nginx/src/http/ngx_http_special_response.c-918-    b->last = tail + len;
./nginx/src/http/ngx_http_special_response.c-919-
./nginx/src/http/ngx_http_special_response.c-920-    out[1].buf = b;
./nginx/src/http/ngx_http_special_response.c-921-    out[1].next = NULL;
./nginx/src/http/ngx_http_special_response.c-922-
./nginx/src/http/ngx_http_special_response.c-923-    if (msie_padding) {
./nginx/src/http/ngx_http_special_response.c:924:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_special_response.c-925-        if (b == NULL) {
./nginx/src/http/ngx_http_special_response.c-926-            return NGX_ERROR;
./nginx/src/http/ngx_http_special_response.c-927-        }
./nginx/src/http/ngx_http_special_response.c-928-
./nginx/src/http/ngx_http_special_response.c-929-        b->memory = 1;
./nginx/src/http/ngx_http_special_response.c-930-        b->pos = ngx_http_msie_padding;
./nginx/src/http/ngx_http_special_response.c-931-        b->last = ngx_http_msie_padding + sizeof(ngx_http_msie_padding) - 1;
./nginx/src/http/ngx_http_special_response.c-932-
./nginx/src/http/ngx_http_special_response.c-933-        out[1].next = &out[2];
./nginx/src/http/ngx_http_special_response.c-934-        out[2].buf = b;
--
./nginx/src/http/ngx_http_special_response.c-982-
./nginx/src/http/ngx_http_special_response.c-983-    ngx_http_clear_accept_ranges(r);
./nginx/src/http/ngx_http_special_response.c-984-    ngx_http_clear_last_modified(r);
./nginx/src/http/ngx_http_special_response.c-985-
./nginx/src/http/ngx_http_special_response.c-986-    rc = ngx_http_send_header(r);
./nginx/src/http/ngx_http_special_response.c-987-
./nginx/src/http/ngx_http_special_response.c-988-    if (rc == NGX_ERROR || r->header_only) {
./nginx/src/http/ngx_http_special_response.c-989-        return rc;
./nginx/src/http/ngx_http_special_response.c-990-    }
./nginx/src/http/ngx_http_special_response.c-991-
./nginx/src/http/ngx_http_special_response.c:992:    b = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/ngx_http_special_response.c-993-    if (b == NULL) {
./nginx/src/http/ngx_http_special_response.c-994-        return NGX_ERROR;
./nginx/src/http/ngx_http_special_response.c-995-    }
./nginx/src/http/ngx_http_special_response.c-996-
./nginx/src/http/ngx_http_special_response.c-997-    p = ngx_cpymem(b->pos, ngx_http_msie_refresh_head,
./nginx/src/http/ngx_http_special_response.c-998-                   sizeof(ngx_http_msie_refresh_head) - 1);
./nginx/src/http/ngx_http_special_response.c-999-
./nginx/src/http/ngx_http_special_response.c-1000-    if (escape == 0) {
./nginx/src/http/ngx_http_special_response.c-1001-        p = ngx_cpymem(p, location, len);
./nginx/src/http/ngx_http_special_response.c-1002-
--
./nginx/src/http/ngx_http_script.c-79-    e.flushed = 1;
./nginx/src/http/ngx_http_script.c-80-
./nginx/src/http/ngx_http_script.c-81-    len = 0;
./nginx/src/http/ngx_http_script.c-82-
./nginx/src/http/ngx_http_script.c-83-    while (*(uintptr_t *) e.ip) {
./nginx/src/http/ngx_http_script.c-84-        lcode = *(ngx_http_script_len_code_pt *) e.ip;
./nginx/src/http/ngx_http_script.c-85-        len += lcode(&e);
./nginx/src/http/ngx_http_script.c-86-    }
./nginx/src/http/ngx_http_script.c-87-
./nginx/src/http/ngx_http_script.c-88-    value->len = len;
./nginx/src/http/ngx_http_script.c:89:    value->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_script.c-90-    if (value->data == NULL) {
./nginx/src/http/ngx_http_script.c-91-        return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-92-    }
./nginx/src/http/ngx_http_script.c-93-
./nginx/src/http/ngx_http_script.c-94-    e.ip = val->values;
./nginx/src/http/ngx_http_script.c-95-    e.pos = value->data;
./nginx/src/http/ngx_http_script.c-96-    e.buf = *value;
./nginx/src/http/ngx_http_script.c-97-
./nginx/src/http/ngx_http_script.c-98-    while (*(uintptr_t *) e.ip) {
./nginx/src/http/ngx_http_script.c-99-        code = *(ngx_http_script_code_pt *) e.ip;
--
./nginx/src/http/ngx_http_script.c-149-    ccv->complex_value->flushes = NULL;
./nginx/src/http/ngx_http_script.c-150-    ccv->complex_value->lengths = NULL;
./nginx/src/http/ngx_http_script.c-151-    ccv->complex_value->values = NULL;
./nginx/src/http/ngx_http_script.c-152-
./nginx/src/http/ngx_http_script.c-153-    if (nv == 0 && nc == 0) {
./nginx/src/http/ngx_http_script.c-154-        return NGX_OK;
./nginx/src/http/ngx_http_script.c-155-    }
./nginx/src/http/ngx_http_script.c-156-
./nginx/src/http/ngx_http_script.c-157-    n = nv + 1;
./nginx/src/http/ngx_http_script.c-158-
./nginx/src/http/ngx_http_script.c:159:    if (ngx_array_init(&flushes, ccv->cf->pool, n, sizeof(ngx_uint_t))
./nginx/src/http/ngx_http_script.c-160-        != NGX_OK)
./nginx/src/http/ngx_http_script.c-161-    {
./nginx/src/http/ngx_http_script.c-162-        return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-163-    }
./nginx/src/http/ngx_http_script.c-164-
./nginx/src/http/ngx_http_script.c-165-    n = nv * (2 * sizeof(ngx_http_script_copy_code_t)
./nginx/src/http/ngx_http_script.c-166-                  + sizeof(ngx_http_script_var_code_t))
./nginx/src/http/ngx_http_script.c-167-        + sizeof(uintptr_t);
./nginx/src/http/ngx_http_script.c-168-
./nginx/src/http/ngx_http_script.c:169:    if (ngx_array_init(&lengths, ccv->cf->pool, n, 1) != NGX_OK) {
./nginx/src/http/ngx_http_script.c-170-        return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-171-    }
./nginx/src/http/ngx_http_script.c-172-
./nginx/src/http/ngx_http_script.c-173-    n = (nv * (2 * sizeof(ngx_http_script_copy_code_t)
./nginx/src/http/ngx_http_script.c-174-                   + sizeof(ngx_http_script_var_code_t))
./nginx/src/http/ngx_http_script.c-175-                + sizeof(uintptr_t)
./nginx/src/http/ngx_http_script.c-176-                + v->len
./nginx/src/http/ngx_http_script.c-177-                + sizeof(uintptr_t) - 1)
./nginx/src/http/ngx_http_script.c-178-            & ~(sizeof(uintptr_t) - 1);
./nginx/src/http/ngx_http_script.c-179-
./nginx/src/http/ngx_http_script.c:180:    if (ngx_array_init(&values, ccv->cf->pool, n, 1) != NGX_OK) {
./nginx/src/http/ngx_http_script.c-181-        return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-182-    }
./nginx/src/http/ngx_http_script.c-183-
./nginx/src/http/ngx_http_script.c-184-    pf = &flushes;
./nginx/src/http/ngx_http_script.c-185-    pl = &lengths;
./nginx/src/http/ngx_http_script.c-186-    pv = &values;
./nginx/src/http/ngx_http_script.c-187-
./nginx/src/http/ngx_http_script.c-188-    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
./nginx/src/http/ngx_http_script.c-189-
./nginx/src/http/ngx_http_script.c-190-    sc.cf = ccv->cf;
--
./nginx/src/http/ngx_http_script.c-222-    ngx_str_t                          *value;
./nginx/src/http/ngx_http_script.c-223-    ngx_http_complex_value_t          **cv;
./nginx/src/http/ngx_http_script.c-224-    ngx_http_compile_complex_value_t    ccv;
./nginx/src/http/ngx_http_script.c-225-
./nginx/src/http/ngx_http_script.c-226-    cv = (ngx_http_complex_value_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_script.c-227-
./nginx/src/http/ngx_http_script.c-228-    if (*cv != NULL) {
./nginx/src/http/ngx_http_script.c-229-        return "duplicate";
./nginx/src/http/ngx_http_script.c-230-    }
./nginx/src/http/ngx_http_script.c-231-
./nginx/src/http/ngx_http_script.c:232:    *cv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
./nginx/src/http/ngx_http_script.c-233-    if (*cv == NULL) {
./nginx/src/http/ngx_http_script.c-234-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_script.c-235-    }
./nginx/src/http/ngx_http_script.c-236-
./nginx/src/http/ngx_http_script.c-237-    value = cf->args->elts;
./nginx/src/http/ngx_http_script.c-238-
./nginx/src/http/ngx_http_script.c-239-    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
./nginx/src/http/ngx_http_script.c-240-
./nginx/src/http/ngx_http_script.c-241-    ccv.cf = cf;
./nginx/src/http/ngx_http_script.c-242-    ccv.value = &value[1];
--
./nginx/src/http/ngx_http_script.c-284-
./nginx/src/http/ngx_http_script.c-285-    ngx_str_t                          *value;
./nginx/src/http/ngx_http_script.c-286-    ngx_uint_t                          i;
./nginx/src/http/ngx_http_script.c-287-    ngx_array_t                       **a;
./nginx/src/http/ngx_http_script.c-288-    ngx_http_complex_value_t           *cv;
./nginx/src/http/ngx_http_script.c-289-    ngx_http_compile_complex_value_t    ccv;
./nginx/src/http/ngx_http_script.c-290-
./nginx/src/http/ngx_http_script.c-291-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_script.c-292-
./nginx/src/http/ngx_http_script.c-293-    if (*a == NGX_CONF_UNSET_PTR) {
./nginx/src/http/ngx_http_script.c:294:        *a = ngx_array_create(cf->pool, 1, sizeof(ngx_http_complex_value_t));
./nginx/src/http/ngx_http_script.c-295-        if (*a == NULL) {
./nginx/src/http/ngx_http_script.c-296-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_script.c-297-        }
./nginx/src/http/ngx_http_script.c-298-    }
./nginx/src/http/ngx_http_script.c-299-
./nginx/src/http/ngx_http_script.c-300-    value = cf->args->elts;
./nginx/src/http/ngx_http_script.c-301-
./nginx/src/http/ngx_http_script.c-302-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/ngx_http_script.c-303-        cv = ngx_array_push(*a);
./nginx/src/http/ngx_http_script.c-304-        if (cv == NULL) {
--
./nginx/src/http/ngx_http_script.c-519-    e.request = r;
./nginx/src/http/ngx_http_script.c-520-    e.flushed = 1;
./nginx/src/http/ngx_http_script.c-521-
./nginx/src/http/ngx_http_script.c-522-    while (*(uintptr_t *) e.ip) {
./nginx/src/http/ngx_http_script.c-523-        lcode = *(ngx_http_script_len_code_pt *) e.ip;
./nginx/src/http/ngx_http_script.c-524-        len += lcode(&e);
./nginx/src/http/ngx_http_script.c-525-    }
./nginx/src/http/ngx_http_script.c-526-
./nginx/src/http/ngx_http_script.c-527-
./nginx/src/http/ngx_http_script.c-528-    value->len = len;
./nginx/src/http/ngx_http_script.c:529:    value->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_script.c-530-    if (value->data == NULL) {
./nginx/src/http/ngx_http_script.c-531-        return NULL;
./nginx/src/http/ngx_http_script.c-532-    }
./nginx/src/http/ngx_http_script.c-533-
./nginx/src/http/ngx_http_script.c-534-    e.ip = code_values;
./nginx/src/http/ngx_http_script.c-535-    e.pos = value->data;
./nginx/src/http/ngx_http_script.c-536-
./nginx/src/http/ngx_http_script.c-537-    while (*(uintptr_t *) e.ip) {
./nginx/src/http/ngx_http_script.c-538-        code = *(ngx_http_script_code_pt *) e.ip;
./nginx/src/http/ngx_http_script.c-539-        code((ngx_http_script_engine_t *) &e);
--
./nginx/src/http/ngx_http_script.c-561-}
./nginx/src/http/ngx_http_script.c-562-
./nginx/src/http/ngx_http_script.c-563-
./nginx/src/http/ngx_http_script.c-564-static ngx_int_t
./nginx/src/http/ngx_http_script.c-565-ngx_http_script_init_arrays(ngx_http_script_compile_t *sc)
./nginx/src/http/ngx_http_script.c-566-{
./nginx/src/http/ngx_http_script.c-567-    ngx_uint_t   n;
./nginx/src/http/ngx_http_script.c-568-
./nginx/src/http/ngx_http_script.c-569-    if (sc->flushes && *sc->flushes == NULL) {
./nginx/src/http/ngx_http_script.c-570-        n = sc->variables ? sc->variables : 1;
./nginx/src/http/ngx_http_script.c:571:        *sc->flushes = ngx_array_create(sc->cf->pool, n, sizeof(ngx_uint_t));
./nginx/src/http/ngx_http_script.c-572-        if (*sc->flushes == NULL) {
./nginx/src/http/ngx_http_script.c-573-            return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-574-        }
./nginx/src/http/ngx_http_script.c-575-    }
./nginx/src/http/ngx_http_script.c-576-
./nginx/src/http/ngx_http_script.c-577-    if (*sc->lengths == NULL) {
./nginx/src/http/ngx_http_script.c-578-        n = sc->variables * (2 * sizeof(ngx_http_script_copy_code_t)
./nginx/src/http/ngx_http_script.c-579-                             + sizeof(ngx_http_script_var_code_t))
./nginx/src/http/ngx_http_script.c-580-            + sizeof(uintptr_t);
./nginx/src/http/ngx_http_script.c-581-
./nginx/src/http/ngx_http_script.c:582:        *sc->lengths = ngx_array_create(sc->cf->pool, n, 1);
./nginx/src/http/ngx_http_script.c-583-        if (*sc->lengths == NULL) {
./nginx/src/http/ngx_http_script.c-584-            return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-585-        }
./nginx/src/http/ngx_http_script.c-586-    }
./nginx/src/http/ngx_http_script.c-587-
./nginx/src/http/ngx_http_script.c-588-    if (*sc->values == NULL) {
./nginx/src/http/ngx_http_script.c-589-        n = (sc->variables * (2 * sizeof(ngx_http_script_copy_code_t)
./nginx/src/http/ngx_http_script.c-590-                              + sizeof(ngx_http_script_var_code_t))
./nginx/src/http/ngx_http_script.c-591-                + sizeof(uintptr_t)
./nginx/src/http/ngx_http_script.c-592-                + sc->source->len
./nginx/src/http/ngx_http_script.c-593-                + sizeof(uintptr_t) - 1)
./nginx/src/http/ngx_http_script.c-594-            & ~(sizeof(uintptr_t) - 1);
./nginx/src/http/ngx_http_script.c-595-
./nginx/src/http/ngx_http_script.c:596:        *sc->values = ngx_array_create(sc->cf->pool, n, 1);
./nginx/src/http/ngx_http_script.c-597-        if (*sc->values == NULL) {
./nginx/src/http/ngx_http_script.c-598-            return NGX_ERROR;
./nginx/src/http/ngx_http_script.c-599-        }
./nginx/src/http/ngx_http_script.c-600-    }
./nginx/src/http/ngx_http_script.c-601-
./nginx/src/http/ngx_http_script.c-602-    sc->variables = 0;
./nginx/src/http/ngx_http_script.c-603-
./nginx/src/http/ngx_http_script.c-604-    return NGX_OK;
./nginx/src/http/ngx_http_script.c-605-}
./nginx/src/http/ngx_http_script.c-606-
--
./nginx/src/http/ngx_http_script.c-644-        }
./nginx/src/http/ngx_http_script.c-645-
./nginx/src/http/ngx_http_script.c-646-        *code = (uintptr_t) NULL;
./nginx/src/http/ngx_http_script.c-647-    }
./nginx/src/http/ngx_http_script.c-648-
./nginx/src/http/ngx_http_script.c-649-    return NGX_OK;
./nginx/src/http/ngx_http_script.c-650-}
./nginx/src/http/ngx_http_script.c-651-
./nginx/src/http/ngx_http_script.c-652-
./nginx/src/http/ngx_http_script.c-653-void *
./nginx/src/http/ngx_http_script.c:654:ngx_http_script_start_code(ngx_pool_t *pool, ngx_array_t **codes, size_t size)
./nginx/src/http/ngx_http_script.c-655-{
./nginx/src/http/ngx_http_script.c-656-    if (*codes == NULL) {
./nginx/src/http/ngx_http_script.c:657:        *codes = ngx_array_create(pool, 256, 1);
./nginx/src/http/ngx_http_script.c-658-        if (*codes == NULL) {
./nginx/src/http/ngx_http_script.c-659-            return NULL;
./nginx/src/http/ngx_http_script.c-660-        }
./nginx/src/http/ngx_http_script.c-661-    }
./nginx/src/http/ngx_http_script.c-662-
./nginx/src/http/ngx_http_script.c-663-    return ngx_array_push_n(*codes, size);
./nginx/src/http/ngx_http_script.c-664-}
./nginx/src/http/ngx_http_script.c-665-
./nginx/src/http/ngx_http_script.c-666-
./nginx/src/http/ngx_http_script.c-667-void *
--
./nginx/src/http/ngx_http_script.c-1050-            len += lcode(&le);
./nginx/src/http/ngx_http_script.c-1051-        }
./nginx/src/http/ngx_http_script.c-1052-
./nginx/src/http/ngx_http_script.c-1053-        e->buf.len = len;
./nginx/src/http/ngx_http_script.c-1054-    }
./nginx/src/http/ngx_http_script.c-1055-
./nginx/src/http/ngx_http_script.c-1056-    if (code->add_args && r->args.len) {
./nginx/src/http/ngx_http_script.c-1057-        e->buf.len += r->args.len + 1;
./nginx/src/http/ngx_http_script.c-1058-    }
./nginx/src/http/ngx_http_script.c-1059-
./nginx/src/http/ngx_http_script.c:1060:    e->buf.data = ngx_pnalloc(r->pool, e->buf.len);
./nginx/src/http/ngx_http_script.c-1061-    if (e->buf.data == NULL) {
./nginx/src/http/ngx_http_script.c-1062-        e->ip = ngx_http_script_exit;
./nginx/src/http/ngx_http_script.c-1063-        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_script.c-1064-        return;
./nginx/src/http/ngx_http_script.c-1065-    }
./nginx/src/http/ngx_http_script.c-1066-
./nginx/src/http/ngx_http_script.c-1067-    e->quote = code->redirect;
./nginx/src/http/ngx_http_script.c-1068-
./nginx/src/http/ngx_http_script.c-1069-    e->pos = e->buf.data;
./nginx/src/http/ngx_http_script.c-1070-
--
./nginx/src/http/ngx_http_script.c-1580-    of.test_only = 1;
./nginx/src/http/ngx_http_script.c-1581-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/ngx_http_script.c-1582-    of.events = clcf->open_file_cache_events;
./nginx/src/http/ngx_http_script.c-1583-
./nginx/src/http/ngx_http_script.c-1584-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/ngx_http_script.c-1585-        e->ip = ngx_http_script_exit;
./nginx/src/http/ngx_http_script.c-1586-        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_script.c-1587-        return;
./nginx/src/http/ngx_http_script.c-1588-    }
./nginx/src/http/ngx_http_script.c-1589-
./nginx/src/http/ngx_http_script.c:1590:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/ngx_http_script.c-1591-        != NGX_OK)
./nginx/src/http/ngx_http_script.c-1592-    {
./nginx/src/http/ngx_http_script.c-1593-        if (of.err != NGX_ENOENT
./nginx/src/http/ngx_http_script.c-1594-            && of.err != NGX_ENOTDIR
./nginx/src/http/ngx_http_script.c-1595-            && of.err != NGX_ENAMETOOLONG)
./nginx/src/http/ngx_http_script.c-1596-        {
./nginx/src/http/ngx_http_script.c-1597-            ngx_log_error(NGX_LOG_CRIT, r->connection->log, of.err,
./nginx/src/http/ngx_http_script.c-1598-                          "%s \"%s\" failed", of.failed, value->data);
./nginx/src/http/ngx_http_script.c-1599-        }
./nginx/src/http/ngx_http_script.c-1600-
--
./nginx/src/http/ngx_http_script.c-1701-    le.ip = code->lengths->elts;
./nginx/src/http/ngx_http_script.c-1702-    le.line = e->line;
./nginx/src/http/ngx_http_script.c-1703-    le.request = e->request;
./nginx/src/http/ngx_http_script.c-1704-    le.quote = e->quote;
./nginx/src/http/ngx_http_script.c-1705-
./nginx/src/http/ngx_http_script.c-1706-    for (len = 0; *(uintptr_t *) le.ip; len += lcode(&le)) {
./nginx/src/http/ngx_http_script.c-1707-        lcode = *(ngx_http_script_len_code_pt *) le.ip;
./nginx/src/http/ngx_http_script.c-1708-    }
./nginx/src/http/ngx_http_script.c-1709-
./nginx/src/http/ngx_http_script.c-1710-    e->buf.len = len;
./nginx/src/http/ngx_http_script.c:1711:    e->buf.data = ngx_pnalloc(e->request->pool, len);
./nginx/src/http/ngx_http_script.c-1712-    if (e->buf.data == NULL) {
./nginx/src/http/ngx_http_script.c-1713-        e->ip = ngx_http_script_exit;
./nginx/src/http/ngx_http_script.c-1714-        e->status = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_script.c-1715-        return;
./nginx/src/http/ngx_http_script.c-1716-    }
./nginx/src/http/ngx_http_script.c-1717-
./nginx/src/http/ngx_http_script.c-1718-    e->pos = e->buf.data;
./nginx/src/http/ngx_http_script.c-1719-
./nginx/src/http/ngx_http_script.c-1720-    e->sp->len = e->buf.len;
./nginx/src/http/ngx_http_script.c-1721-    e->sp->data = e->buf.data;
--
./nginx/src/http/ngx_http_file_cache.c-154-
./nginx/src/http/ngx_http_file_cache.c-155-    return NGX_OK;
./nginx/src/http/ngx_http_file_cache.c-156-}
./nginx/src/http/ngx_http_file_cache.c-157-
./nginx/src/http/ngx_http_file_cache.c-158-
./nginx/src/http/ngx_http_file_cache.c-159-ngx_int_t
./nginx/src/http/ngx_http_file_cache.c-160-ngx_http_file_cache_new(ngx_http_request_t *r)
./nginx/src/http/ngx_http_file_cache.c-161-{
./nginx/src/http/ngx_http_file_cache.c-162-    ngx_http_cache_t  *c;
./nginx/src/http/ngx_http_file_cache.c-163-
./nginx/src/http/ngx_http_file_cache.c:164:    c = ngx_pcalloc(r->pool, sizeof(ngx_http_cache_t));
./nginx/src/http/ngx_http_file_cache.c-165-    if (c == NULL) {
./nginx/src/http/ngx_http_file_cache.c-166-        return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-167-    }
./nginx/src/http/ngx_http_file_cache.c-168-
./nginx/src/http/ngx_http_file_cache.c:169:    if (ngx_array_init(&c->keys, r->pool, 4, sizeof(ngx_str_t)) != NGX_OK) {
./nginx/src/http/ngx_http_file_cache.c-170-        return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-171-    }
./nginx/src/http/ngx_http_file_cache.c-172-
./nginx/src/http/ngx_http_file_cache.c-173-    r->cache = c;
./nginx/src/http/ngx_http_file_cache.c-174-    c->file.log = r->connection->log;
./nginx/src/http/ngx_http_file_cache.c-175-    c->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_file_cache.c-176-
./nginx/src/http/ngx_http_file_cache.c-177-    return NGX_OK;
./nginx/src/http/ngx_http_file_cache.c-178-}
./nginx/src/http/ngx_http_file_cache.c-179-
--
./nginx/src/http/ngx_http_file_cache.c-181-ngx_int_t
./nginx/src/http/ngx_http_file_cache.c-182-ngx_http_file_cache_create(ngx_http_request_t *r)
./nginx/src/http/ngx_http_file_cache.c-183-{
./nginx/src/http/ngx_http_file_cache.c-184-    ngx_http_cache_t       *c;
./nginx/src/http/ngx_http_file_cache.c-185-    ngx_pool_cleanup_t     *cln;
./nginx/src/http/ngx_http_file_cache.c-186-    ngx_http_file_cache_t  *cache;
./nginx/src/http/ngx_http_file_cache.c-187-
./nginx/src/http/ngx_http_file_cache.c-188-    c = r->cache;
./nginx/src/http/ngx_http_file_cache.c-189-    cache = c->file_cache;
./nginx/src/http/ngx_http_file_cache.c-190-
./nginx/src/http/ngx_http_file_cache.c:191:    cln = ngx_pool_cleanup_add(r->pool, 0);
./nginx/src/http/ngx_http_file_cache.c-192-    if (cln == NULL) {
./nginx/src/http/ngx_http_file_cache.c-193-        return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-194-    }
./nginx/src/http/ngx_http_file_cache.c-195-
./nginx/src/http/ngx_http_file_cache.c-196-    cln->handler = ngx_http_file_cache_cleanup;
./nginx/src/http/ngx_http_file_cache.c-197-    cln->data = c;
./nginx/src/http/ngx_http_file_cache.c-198-
./nginx/src/http/ngx_http_file_cache.c-199-#if (NGX_HTTP_CACHE_LIMIT)
./nginx/src/http/ngx_http_file_cache.c-200-    ngx_atomic_fetch_add(&cache->sh->lookup, 1);
./nginx/src/http/ngx_http_file_cache.c-201-#endif
--
./nginx/src/http/ngx_http_file_cache.c-290-        return NGX_AGAIN;
./nginx/src/http/ngx_http_file_cache.c-291-    }
./nginx/src/http/ngx_http_file_cache.c-292-
./nginx/src/http/ngx_http_file_cache.c-293-    if (c->buf) {
./nginx/src/http/ngx_http_file_cache.c-294-        return ngx_http_file_cache_read(r, c);
./nginx/src/http/ngx_http_file_cache.c-295-    }
./nginx/src/http/ngx_http_file_cache.c-296-
./nginx/src/http/ngx_http_file_cache.c-297-    cache = c->file_cache;
./nginx/src/http/ngx_http_file_cache.c-298-
./nginx/src/http/ngx_http_file_cache.c-299-    if (c->node == NULL) {
./nginx/src/http/ngx_http_file_cache.c:300:        cln = ngx_pool_cleanup_add(r->pool, 0);
./nginx/src/http/ngx_http_file_cache.c-301-        if (cln == NULL) {
./nginx/src/http/ngx_http_file_cache.c-302-            return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-303-        }
./nginx/src/http/ngx_http_file_cache.c-304-
./nginx/src/http/ngx_http_file_cache.c-305-        cln->handler = ngx_http_file_cache_cleanup;
./nginx/src/http/ngx_http_file_cache.c-306-        cln->data = c;
./nginx/src/http/ngx_http_file_cache.c-307-    }
./nginx/src/http/ngx_http_file_cache.c-308-
./nginx/src/http/ngx_http_file_cache.c-309-    rc = ngx_http_file_cache_exists(
./nginx/src/http/ngx_http_file_cache.c-310-#if (NGX_HTTP_CACHE_LIMIT)
--
./nginx/src/http/ngx_http_file_cache.c-365-
./nginx/src/http/ngx_http_file_cache.c-366-    ngx_memzero(&of, sizeof(ngx_open_file_info_t));
./nginx/src/http/ngx_http_file_cache.c-367-
./nginx/src/http/ngx_http_file_cache.c-368-    of.uniq = c->uniq;
./nginx/src/http/ngx_http_file_cache.c-369-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/ngx_http_file_cache.c-370-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/ngx_http_file_cache.c-371-    of.events = clcf->open_file_cache_events;
./nginx/src/http/ngx_http_file_cache.c-372-    of.directio = NGX_OPEN_FILE_DIRECTIO_OFF;
./nginx/src/http/ngx_http_file_cache.c-373-    of.read_ahead = clcf->read_ahead;
./nginx/src/http/ngx_http_file_cache.c-374-
./nginx/src/http/ngx_http_file_cache.c:375:    if (ngx_open_cached_file(clcf->open_file_cache, &c->file.name, &of, r->pool)
./nginx/src/http/ngx_http_file_cache.c-376-        != NGX_OK)
./nginx/src/http/ngx_http_file_cache.c-377-    {
./nginx/src/http/ngx_http_file_cache.c-378-        switch (of.err) {
./nginx/src/http/ngx_http_file_cache.c-379-
./nginx/src/http/ngx_http_file_cache.c-380-        case 0:
./nginx/src/http/ngx_http_file_cache.c-381-            return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-382-
./nginx/src/http/ngx_http_file_cache.c-383-        case NGX_ENOENT:
./nginx/src/http/ngx_http_file_cache.c-384-        case NGX_ENOTDIR:
./nginx/src/http/ngx_http_file_cache.c-385-            goto done;
--
./nginx/src/http/ngx_http_file_cache.c-393-
./nginx/src/http/ngx_http_file_cache.c-394-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_file_cache.c-395-                   "http file cache fd: %d", of.fd);
./nginx/src/http/ngx_http_file_cache.c-396-
./nginx/src/http/ngx_http_file_cache.c-397-    c->file.fd = of.fd;
./nginx/src/http/ngx_http_file_cache.c-398-    c->file.log = r->connection->log;
./nginx/src/http/ngx_http_file_cache.c-399-    c->uniq = of.uniq;
./nginx/src/http/ngx_http_file_cache.c-400-    c->length = of.size;
./nginx/src/http/ngx_http_file_cache.c-401-    c->fs_size = (of.fs_size + cache->bsize - 1) / cache->bsize;
./nginx/src/http/ngx_http_file_cache.c-402-
./nginx/src/http/ngx_http_file_cache.c:403:    c->buf = ngx_create_temp_buf(r->pool, c->body_start);
./nginx/src/http/ngx_http_file_cache.c-404-    if (c->buf == NULL) {
./nginx/src/http/ngx_http_file_cache.c-405-        return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-406-    }
./nginx/src/http/ngx_http_file_cache.c-407-
./nginx/src/http/ngx_http_file_cache.c-408-    return ngx_http_file_cache_read(r, c);
./nginx/src/http/ngx_http_file_cache.c-409-
./nginx/src/http/ngx_http_file_cache.c-410-done:
./nginx/src/http/ngx_http_file_cache.c-411-
./nginx/src/http/ngx_http_file_cache.c-412-    if (rv == NGX_DECLINED) {
./nginx/src/http/ngx_http_file_cache.c-413-        return ngx_http_file_cache_lock(r, c);
--
./nginx/src/http/ngx_http_file_cache.c-627-    if (!ngx_file_aio) {
./nginx/src/http/ngx_http_file_cache.c-628-        goto noaio;
./nginx/src/http/ngx_http_file_cache.c-629-    }
./nginx/src/http/ngx_http_file_cache.c-630-
./nginx/src/http/ngx_http_file_cache.c-631-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_file_cache.c-632-
./nginx/src/http/ngx_http_file_cache.c-633-    if (!clcf->aio) {
./nginx/src/http/ngx_http_file_cache.c-634-        goto noaio;
./nginx/src/http/ngx_http_file_cache.c-635-    }
./nginx/src/http/ngx_http_file_cache.c-636-
./nginx/src/http/ngx_http_file_cache.c:637:    n = ngx_file_aio_read(&c->file, c->buf->pos, c->body_start, 0, r->pool);
./nginx/src/http/ngx_http_file_cache.c-638-
./nginx/src/http/ngx_http_file_cache.c-639-    if (n != NGX_AGAIN) {
./nginx/src/http/ngx_http_file_cache.c-640-        return n;
./nginx/src/http/ngx_http_file_cache.c-641-    }
./nginx/src/http/ngx_http_file_cache.c-642-
./nginx/src/http/ngx_http_file_cache.c-643-    c->file.aio->data = r;
./nginx/src/http/ngx_http_file_cache.c-644-    c->file.aio->handler = ngx_http_cache_aio_event_handler;
./nginx/src/http/ngx_http_file_cache.c-645-
./nginx/src/http/ngx_http_file_cache.c-646-    r->main->blocked++;
./nginx/src/http/ngx_http_file_cache.c-647-    r->aio = 1;
--
./nginx/src/http/ngx_http_file_cache.c-805-
./nginx/src/http/ngx_http_file_cache.c-806-    c = r->cache;
./nginx/src/http/ngx_http_file_cache.c-807-
./nginx/src/http/ngx_http_file_cache.c-808-    if (c->file.name.len) {
./nginx/src/http/ngx_http_file_cache.c-809-        return NGX_OK;
./nginx/src/http/ngx_http_file_cache.c-810-    }
./nginx/src/http/ngx_http_file_cache.c-811-
./nginx/src/http/ngx_http_file_cache.c-812-    c->file.name.len = path->name.len + 1 + path->len
./nginx/src/http/ngx_http_file_cache.c-813-                       + 2 * NGX_HTTP_CACHE_KEY_LEN;
./nginx/src/http/ngx_http_file_cache.c-814-
./nginx/src/http/ngx_http_file_cache.c:815:    c->file.name.data = ngx_pnalloc(r->pool, c->file.name.len + 1);
./nginx/src/http/ngx_http_file_cache.c-816-    if (c->file.name.data == NULL) {
./nginx/src/http/ngx_http_file_cache.c-817-        return NGX_ERROR;
./nginx/src/http/ngx_http_file_cache.c-818-    }
./nginx/src/http/ngx_http_file_cache.c-819-
./nginx/src/http/ngx_http_file_cache.c-820-    ngx_memcpy(c->file.name.data, path->name.data, path->name.len);
./nginx/src/http/ngx_http_file_cache.c-821-
./nginx/src/http/ngx_http_file_cache.c-822-    p = c->file.name.data + path->name.len + 1 + path->len;
./nginx/src/http/ngx_http_file_cache.c-823-    p = ngx_hex_dump(p, c->key, NGX_HTTP_CACHE_KEY_LEN);
./nginx/src/http/ngx_http_file_cache.c-824-    *p = '\0';
./nginx/src/http/ngx_http_file_cache.c-825-
--
./nginx/src/http/ngx_http_file_cache.c-1091-
./nginx/src/http/ngx_http_file_cache.c-1092-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_file_cache.c-1093-                   "http file cache send: %s", c->file.name.data);
./nginx/src/http/ngx_http_file_cache.c-1094-
./nginx/src/http/ngx_http_file_cache.c-1095-    if (r != r->main && c->length - c->body_start == 0) {
./nginx/src/http/ngx_http_file_cache.c-1096-        return ngx_http_send_header(r);
./nginx/src/http/ngx_http_file_cache.c-1097-    }
./nginx/src/http/ngx_http_file_cache.c-1098-
./nginx/src/http/ngx_http_file_cache.c-1099-    /* we need to allocate all before the header would be sent */
./nginx/src/http/ngx_http_file_cache.c-1100-
./nginx/src/http/ngx_http_file_cache.c:1101:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/ngx_http_file_cache.c-1102-    if (b == NULL) {
./nginx/src/http/ngx_http_file_cache.c-1103-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_file_cache.c-1104-    }
./nginx/src/http/ngx_http_file_cache.c-1105-
./nginx/src/http/ngx_http_file_cache.c:1106:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/ngx_http_file_cache.c-1107-    if (b->file == NULL) {
./nginx/src/http/ngx_http_file_cache.c-1108-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/ngx_http_file_cache.c-1109-    }
./nginx/src/http/ngx_http_file_cache.c-1110-
./nginx/src/http/ngx_http_file_cache.c-1111-    rc = ngx_http_send_header(r);
./nginx/src/http/ngx_http_file_cache.c-1112-
./nginx/src/http/ngx_http_file_cache.c-1113-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/ngx_http_file_cache.c-1114-        return rc;
./nginx/src/http/ngx_http_file_cache.c-1115-    }
./nginx/src/http/ngx_http_file_cache.c-1116-
--
./nginx/src/http/ngx_http_file_cache.c-1713-    ngx_str_t               s, name, *value;
./nginx/src/http/ngx_http_file_cache.c-1714-    ngx_int_t               loader_files;
./nginx/src/http/ngx_http_file_cache.c-1715-    ngx_msec_t              loader_sleep, loader_threshold;
./nginx/src/http/ngx_http_file_cache.c-1716-    ngx_uint_t              i, n;
./nginx/src/http/ngx_http_file_cache.c-1717-    ngx_http_file_cache_t  *cache;
./nginx/src/http/ngx_http_file_cache.c-1718-#if (NGX_HTTP_CACHE_LIMIT)
./nginx/src/http/ngx_http_file_cache.c-1719-    ngx_int_t              objnum;
./nginx/src/http/ngx_http_file_cache.c-1720-    off_t                   objsize;
./nginx/src/http/ngx_http_file_cache.c-1721-#endif
./nginx/src/http/ngx_http_file_cache.c-1722-
./nginx/src/http/ngx_http_file_cache.c:1723:    cache = ngx_pcalloc(cf->pool, sizeof(ngx_http_file_cache_t));
./nginx/src/http/ngx_http_file_cache.c-1724-    if (cache == NULL) {
./nginx/src/http/ngx_http_file_cache.c-1725-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_file_cache.c-1726-    }
./nginx/src/http/ngx_http_file_cache.c-1727-
./nginx/src/http/ngx_http_file_cache.c:1728:    cache->path = ngx_pcalloc(cf->pool, sizeof(ngx_path_t));
./nginx/src/http/ngx_http_file_cache.c-1729-    if (cache->path == NULL) {
./nginx/src/http/ngx_http_file_cache.c-1730-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_file_cache.c-1731-    }
./nginx/src/http/ngx_http_file_cache.c-1732-
./nginx/src/http/ngx_http_file_cache.c-1733-	/* default cache out of date is 10m */
./nginx/src/http/ngx_http_file_cache.c-1734-    inactive = 600;
./nginx/src/http/ngx_http_file_cache.c-1735-    loader_files = 100;
./nginx/src/http/ngx_http_file_cache.c-1736-    loader_sleep = 50;
./nginx/src/http/ngx_http_file_cache.c-1737-    loader_threshold = 200;
./nginx/src/http/ngx_http_file_cache.c-1738-
--
./nginx/src/http/ngx_http_file_cache.c-1983-    time_t                    valid;
./nginx/src/http/ngx_http_file_cache.c-1984-    ngx_str_t                *value;
./nginx/src/http/ngx_http_file_cache.c-1985-    ngx_uint_t                i, n, status;
./nginx/src/http/ngx_http_file_cache.c-1986-    ngx_array_t             **a;
./nginx/src/http/ngx_http_file_cache.c-1987-    ngx_http_cache_valid_t   *v;
./nginx/src/http/ngx_http_file_cache.c-1988-    static ngx_uint_t         statuses[] = { 200, 301, 302 };
./nginx/src/http/ngx_http_file_cache.c-1989-
./nginx/src/http/ngx_http_file_cache.c-1990-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_file_cache.c-1991-
./nginx/src/http/ngx_http_file_cache.c-1992-    if (*a == NGX_CONF_UNSET_PTR) {
./nginx/src/http/ngx_http_file_cache.c:1993:        *a = ngx_array_create(cf->pool, 1, sizeof(ngx_http_cache_valid_t));
./nginx/src/http/ngx_http_file_cache.c-1994-        if (*a == NULL) {
./nginx/src/http/ngx_http_file_cache.c-1995-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_file_cache.c-1996-        }
./nginx/src/http/ngx_http_file_cache.c-1997-    }
./nginx/src/http/ngx_http_file_cache.c-1998-
./nginx/src/http/ngx_http_file_cache.c-1999-    value = cf->args->elts;
./nginx/src/http/ngx_http_file_cache.c-2000-    n = cf->args->nelts - 1;
./nginx/src/http/ngx_http_file_cache.c-2001-
./nginx/src/http/ngx_http_file_cache.c-2002-    valid = ngx_parse_time(&value[n], 1);
./nginx/src/http/ngx_http_file_cache.c-2003-    if (valid == (time_t) NGX_ERROR) {
--
./nginx/src/http/ngx_http_file_cache.c-2080-
./nginx/src/http/ngx_http_file_cache.c-2081-    ngx_str_t                          *value;
./nginx/src/http/ngx_http_file_cache.c-2082-    ngx_uint_t                          i;
./nginx/src/http/ngx_http_file_cache.c-2083-    ngx_array_t                       **a;
./nginx/src/http/ngx_http_file_cache.c-2084-    ngx_http_complex_value_t           *cv;
./nginx/src/http/ngx_http_file_cache.c-2085-    ngx_http_compile_complex_value_t    ccv;
./nginx/src/http/ngx_http_file_cache.c-2086-
./nginx/src/http/ngx_http_file_cache.c-2087-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_file_cache.c-2088-
./nginx/src/http/ngx_http_file_cache.c-2089-    if (*a == NGX_CONF_UNSET_PTR) {
./nginx/src/http/ngx_http_file_cache.c:2090:        *a = ngx_array_create(cf->pool, 1, sizeof(ngx_http_complex_value_t));
./nginx/src/http/ngx_http_file_cache.c-2091-        if (*a == NULL) {
./nginx/src/http/ngx_http_file_cache.c-2092-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_file_cache.c-2093-        }
./nginx/src/http/ngx_http_file_cache.c-2094-    }
./nginx/src/http/ngx_http_file_cache.c-2095-
./nginx/src/http/ngx_http_file_cache.c-2096-    value = cf->args->elts;
./nginx/src/http/ngx_http_file_cache.c-2097-
./nginx/src/http/ngx_http_file_cache.c-2098-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/ngx_http_file_cache.c-2099-        cv = ngx_array_push(*a);
./nginx/src/http/ngx_http_file_cache.c-2100-        if (cv == NULL) {
--
./nginx/src/http/ngx_http_header_filter_module.c-425-        }
./nginx/src/http/ngx_http_header_filter_module.c-426-
./nginx/src/http/ngx_http_header_filter_module.c-427-        if (header[i].hash == 0) {
./nginx/src/http/ngx_http_header_filter_module.c-428-            continue;
./nginx/src/http/ngx_http_header_filter_module.c-429-        }
./nginx/src/http/ngx_http_header_filter_module.c-430-
./nginx/src/http/ngx_http_header_filter_module.c-431-        len += header[i].key.len + sizeof(": ") - 1 + header[i].value.len
./nginx/src/http/ngx_http_header_filter_module.c-432-               + sizeof(CRLF) - 1;
./nginx/src/http/ngx_http_header_filter_module.c-433-    }
./nginx/src/http/ngx_http_header_filter_module.c-434-
./nginx/src/http/ngx_http_header_filter_module.c:435:    b = ngx_create_temp_buf(r->pool, len);
./nginx/src/http/ngx_http_header_filter_module.c-436-    if (b == NULL) {
./nginx/src/http/ngx_http_header_filter_module.c-437-        return NGX_ERROR;
./nginx/src/http/ngx_http_header_filter_module.c-438-    }
./nginx/src/http/ngx_http_header_filter_module.c-439-
./nginx/src/http/ngx_http_header_filter_module.c-440-    /* "HTTP/1.x " */
./nginx/src/http/ngx_http_header_filter_module.c-441-    b->last = ngx_cpymem(b->last, "HTTP/1.1 ", sizeof("HTTP/1.x ") - 1);
./nginx/src/http/ngx_http_header_filter_module.c-442-
./nginx/src/http/ngx_http_header_filter_module.c-443-    /* status line */
./nginx/src/http/ngx_http_header_filter_module.c-444-    if (status_line) {
./nginx/src/http/ngx_http_header_filter_module.c-445-        b->last = ngx_copy(b->last, status_line->data, status_line->len);
--
./nginx/src/http/ngx_http_parse.c-1689-    ngx_str_t *value)
./nginx/src/http/ngx_http_parse.c-1690-{
./nginx/src/http/ngx_http_parse.c-1691-    ngx_uint_t         i;
./nginx/src/http/ngx_http_parse.c-1692-    u_char            *start, *last, *end, ch;
./nginx/src/http/ngx_http_parse.c-1693-    ngx_table_elt_t  **h;
./nginx/src/http/ngx_http_parse.c-1694-
./nginx/src/http/ngx_http_parse.c-1695-    h = headers->elts;
./nginx/src/http/ngx_http_parse.c-1696-
./nginx/src/http/ngx_http_parse.c-1697-    for (i = 0; i < headers->nelts; i++) {
./nginx/src/http/ngx_http_parse.c-1698-
./nginx/src/http/ngx_http_parse.c:1699:        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, headers->pool->log, 0,
./nginx/src/http/ngx_http_parse.c-1700-                       "parse header: \"%V: %V\"", &h[i]->key, &h[i]->value);
./nginx/src/http/ngx_http_parse.c-1701-
./nginx/src/http/ngx_http_parse.c-1702-        if (name->len > h[i]->value.len) {
./nginx/src/http/ngx_http_parse.c-1703-            continue;
./nginx/src/http/ngx_http_parse.c-1704-        }
./nginx/src/http/ngx_http_parse.c-1705-
./nginx/src/http/ngx_http_parse.c-1706-        start = h[i]->value.data;
./nginx/src/http/ngx_http_parse.c-1707-        end = h[i]->value.data + h[i]->value.len;
./nginx/src/http/ngx_http_parse.c-1708-
./nginx/src/http/ngx_http_parse.c-1709-        while (start < end) {
--
./nginx/src/http/ngx_http_postpone_filter_module.c-140-        if (pr->request == NULL) {
./nginx/src/http/ngx_http_postpone_filter_module.c-141-            goto found;
./nginx/src/http/ngx_http_postpone_filter_module.c-142-        }
./nginx/src/http/ngx_http_postpone_filter_module.c-143-
./nginx/src/http/ngx_http_postpone_filter_module.c-144-        ppr = &pr->next;
./nginx/src/http/ngx_http_postpone_filter_module.c-145-
./nginx/src/http/ngx_http_postpone_filter_module.c-146-    } else {
./nginx/src/http/ngx_http_postpone_filter_module.c-147-        ppr = &r->postponed;
./nginx/src/http/ngx_http_postpone_filter_module.c-148-    }
./nginx/src/http/ngx_http_postpone_filter_module.c-149-
./nginx/src/http/ngx_http_postpone_filter_module.c:150:    pr = ngx_palloc(r->pool, sizeof(ngx_http_postponed_request_t));
./nginx/src/http/ngx_http_postpone_filter_module.c-151-    if (pr == NULL) {
./nginx/src/http/ngx_http_postpone_filter_module.c-152-        return NGX_ERROR;
./nginx/src/http/ngx_http_postpone_filter_module.c-153-    }
./nginx/src/http/ngx_http_postpone_filter_module.c-154-
./nginx/src/http/ngx_http_postpone_filter_module.c-155-    *ppr = pr;
./nginx/src/http/ngx_http_postpone_filter_module.c-156-
./nginx/src/http/ngx_http_postpone_filter_module.c-157-    pr->request = NULL;
./nginx/src/http/ngx_http_postpone_filter_module.c-158-    pr->out = NULL;
./nginx/src/http/ngx_http_postpone_filter_module.c-159-    pr->next = NULL;
./nginx/src/http/ngx_http_postpone_filter_module.c-160-
./nginx/src/http/ngx_http_postpone_filter_module.c-161-found:
./nginx/src/http/ngx_http_postpone_filter_module.c-162-
./nginx/src/http/ngx_http_postpone_filter_module.c:163:    if (ngx_chain_add_copy(r->pool, &pr->out, in) == NGX_OK) {
./nginx/src/http/ngx_http_postpone_filter_module.c-164-        return NGX_OK;
./nginx/src/http/ngx_http_postpone_filter_module.c-165-    }
./nginx/src/http/ngx_http_postpone_filter_module.c-166-
./nginx/src/http/ngx_http_postpone_filter_module.c-167-    return NGX_ERROR;
./nginx/src/http/ngx_http_postpone_filter_module.c-168-}
./nginx/src/http/ngx_http_postpone_filter_module.c-169-
./nginx/src/http/ngx_http_postpone_filter_module.c-170-
./nginx/src/http/ngx_http_postpone_filter_module.c-171-static ngx_int_t
./nginx/src/http/ngx_http_postpone_filter_module.c-172-ngx_http_postpone_filter_init(ngx_conf_t *cf)
./nginx/src/http/ngx_http_postpone_filter_module.c-173-{
--
./nginx/src/http/modules/ngx_http_geo_module.c-42-    ngx_http_variable_value_t       *value;
./nginx/src/http/modules/ngx_http_geo_module.c-43-    ngx_str_t                       *net;
./nginx/src/http/modules/ngx_http_geo_module.c-44-    ngx_http_geo_high_ranges_t       high;
./nginx/src/http/modules/ngx_http_geo_module.c-45-    ngx_radix_tree_t                *tree;
./nginx/src/http/modules/ngx_http_geo_module.c-46-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_geo_module.c-47-    ngx_radix_tree_t                *tree6;
./nginx/src/http/modules/ngx_http_geo_module.c-48-#endif
./nginx/src/http/modules/ngx_http_geo_module.c-49-    ngx_rbtree_t                     rbtree;
./nginx/src/http/modules/ngx_http_geo_module.c-50-    ngx_rbtree_node_t                sentinel;
./nginx/src/http/modules/ngx_http_geo_module.c-51-    ngx_array_t                     *proxies;
./nginx/src/http/modules/ngx_http_geo_module.c:52:    ngx_pool_t                      *pool;
./nginx/src/http/modules/ngx_http_geo_module.c-53-    ngx_pool_t                      *temp_pool;
./nginx/src/http/modules/ngx_http_geo_module.c-54-
./nginx/src/http/modules/ngx_http_geo_module.c-55-    size_t                           data_size;
./nginx/src/http/modules/ngx_http_geo_module.c-56-
./nginx/src/http/modules/ngx_http_geo_module.c-57-    ngx_str_t                        include_name;
./nginx/src/http/modules/ngx_http_geo_module.c-58-    ngx_uint_t                       includes;
./nginx/src/http/modules/ngx_http_geo_module.c-59-    ngx_uint_t                       entries;
./nginx/src/http/modules/ngx_http_geo_module.c-60-
./nginx/src/http/modules/ngx_http_geo_module.c-61-    unsigned                         ranges:1;
./nginx/src/http/modules/ngx_http_geo_module.c-62-    unsigned                         outside_entries:1;
--
./nginx/src/http/modules/ngx_http_geo_module.c-354-    if (v == NULL || v->not_found) {
./nginx/src/http/modules/ngx_http_geo_module.c-355-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-356-                       "http geo not found");
./nginx/src/http/modules/ngx_http_geo_module.c-357-
./nginx/src/http/modules/ngx_http_geo_module.c-358-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-359-    }
./nginx/src/http/modules/ngx_http_geo_module.c-360-
./nginx/src/http/modules/ngx_http_geo_module.c-361-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-362-                   "http geo started: %v", v);
./nginx/src/http/modules/ngx_http_geo_module.c-363-
./nginx/src/http/modules/ngx_http_geo_module.c:364:    if (ngx_parse_addr(r->pool, addr, v->data, v->len) == NGX_OK) {
./nginx/src/http/modules/ngx_http_geo_module.c-365-        return NGX_OK;
./nginx/src/http/modules/ngx_http_geo_module.c-366-    }
./nginx/src/http/modules/ngx_http_geo_module.c-367-
./nginx/src/http/modules/ngx_http_geo_module.c-368-    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-369-}
./nginx/src/http/modules/ngx_http_geo_module.c-370-
./nginx/src/http/modules/ngx_http_geo_module.c-371-
./nginx/src/http/modules/ngx_http_geo_module.c-372-static char *
./nginx/src/http/modules/ngx_http_geo_module.c-373-ngx_http_geo_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_geo_module.c-374-{
./nginx/src/http/modules/ngx_http_geo_module.c-375-    char                     *rv;
./nginx/src/http/modules/ngx_http_geo_module.c-376-    size_t                    len;
./nginx/src/http/modules/ngx_http_geo_module.c-377-    ngx_str_t                *value, name;
./nginx/src/http/modules/ngx_http_geo_module.c-378-    ngx_uint_t                i;
./nginx/src/http/modules/ngx_http_geo_module.c-379-    ngx_conf_t                save;
./nginx/src/http/modules/ngx_http_geo_module.c:380:    ngx_pool_t               *pool;
./nginx/src/http/modules/ngx_http_geo_module.c-381-    ngx_array_t              *a;
./nginx/src/http/modules/ngx_http_geo_module.c-382-    ngx_http_variable_t      *var;
./nginx/src/http/modules/ngx_http_geo_module.c-383-    ngx_http_geo_ctx_t       *geo;
./nginx/src/http/modules/ngx_http_geo_module.c-384-    ngx_http_geo_conf_ctx_t   ctx;
./nginx/src/http/modules/ngx_http_geo_module.c-385-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_geo_module.c-386-    static struct in6_addr    zero;
./nginx/src/http/modules/ngx_http_geo_module.c-387-#endif
./nginx/src/http/modules/ngx_http_geo_module.c-388-
./nginx/src/http/modules/ngx_http_geo_module.c-389-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_geo_module.c-390-
./nginx/src/http/modules/ngx_http_geo_module.c:391:    geo = ngx_palloc(cf->pool, sizeof(ngx_http_geo_ctx_t));
./nginx/src/http/modules/ngx_http_geo_module.c-392-    if (geo == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-393-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-394-    }
./nginx/src/http/modules/ngx_http_geo_module.c-395-
./nginx/src/http/modules/ngx_http_geo_module.c-396-    name = value[1];
./nginx/src/http/modules/ngx_http_geo_module.c-397-
./nginx/src/http/modules/ngx_http_geo_module.c-398-    if (name.data[0] != '$') {
./nginx/src/http/modules/ngx_http_geo_module.c-399-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-400-                           "invalid variable name \"%V\"", &name);
./nginx/src/http/modules/ngx_http_geo_module.c-401-        return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_geo_module.c-424-
./nginx/src/http/modules/ngx_http_geo_module.c-425-    } else {
./nginx/src/http/modules/ngx_http_geo_module.c-426-        geo->index = -1;
./nginx/src/http/modules/ngx_http_geo_module.c-427-    }
./nginx/src/http/modules/ngx_http_geo_module.c-428-
./nginx/src/http/modules/ngx_http_geo_module.c-429-    var = ngx_http_add_variable(cf, &name, NGX_HTTP_VAR_CHANGEABLE);
./nginx/src/http/modules/ngx_http_geo_module.c-430-    if (var == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-431-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-432-    }
./nginx/src/http/modules/ngx_http_geo_module.c-433-
./nginx/src/http/modules/ngx_http_geo_module.c:434:    pool = ngx_create_pool(16384, cf->log);
./nginx/src/http/modules/ngx_http_geo_module.c:435:    if (pool == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-436-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-437-    }
./nginx/src/http/modules/ngx_http_geo_module.c-438-
./nginx/src/http/modules/ngx_http_geo_module.c-439-    ngx_memzero(&ctx, sizeof(ngx_http_geo_conf_ctx_t));
./nginx/src/http/modules/ngx_http_geo_module.c-440-
./nginx/src/http/modules/ngx_http_geo_module.c-441-    ctx.temp_pool = ngx_create_pool(16384, cf->log);
./nginx/src/http/modules/ngx_http_geo_module.c-442-    if (ctx.temp_pool == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-443-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-444-    }
./nginx/src/http/modules/ngx_http_geo_module.c-445-
./nginx/src/http/modules/ngx_http_geo_module.c-446-    ngx_rbtree_init(&ctx.rbtree, &ctx.sentinel, ngx_str_rbtree_insert_value);
./nginx/src/http/modules/ngx_http_geo_module.c-447-
./nginx/src/http/modules/ngx_http_geo_module.c:448:    ctx.pool = cf->pool;
./nginx/src/http/modules/ngx_http_geo_module.c-449-    ctx.data_size = sizeof(ngx_http_geo_header_t)
./nginx/src/http/modules/ngx_http_geo_module.c-450-                  + sizeof(ngx_http_variable_value_t)
./nginx/src/http/modules/ngx_http_geo_module.c-451-                  + 0x10000 * sizeof(ngx_http_geo_range_t *);
./nginx/src/http/modules/ngx_http_geo_module.c-452-    ctx.allow_binary_include = 1;
./nginx/src/http/modules/ngx_http_geo_module.c-453-
./nginx/src/http/modules/ngx_http_geo_module.c-454-    save = *cf;
./nginx/src/http/modules/ngx_http_geo_module.c:455:    cf->pool = pool;
./nginx/src/http/modules/ngx_http_geo_module.c-456-    cf->ctx = &ctx;
./nginx/src/http/modules/ngx_http_geo_module.c-457-    cf->handler = ngx_http_geo;
./nginx/src/http/modules/ngx_http_geo_module.c-458-    cf->handler_conf = conf;
./nginx/src/http/modules/ngx_http_geo_module.c-459-
./nginx/src/http/modules/ngx_http_geo_module.c-460-    rv = ngx_conf_parse(cf, NULL);
./nginx/src/http/modules/ngx_http_geo_module.c-461-
./nginx/src/http/modules/ngx_http_geo_module.c-462-    *cf = save;
./nginx/src/http/modules/ngx_http_geo_module.c-463-
./nginx/src/http/modules/ngx_http_geo_module.c-464-    geo->proxies = ctx.proxies;
./nginx/src/http/modules/ngx_http_geo_module.c-465-    geo->proxy_recursive = ctx.proxy_recursive;
--
./nginx/src/http/modules/ngx_http_geo_module.c-469-        if (ctx.high.low && !ctx.binary_include) {
./nginx/src/http/modules/ngx_http_geo_module.c-470-            for (i = 0; i < 0x10000; i++) {
./nginx/src/http/modules/ngx_http_geo_module.c-471-                a = (ngx_array_t *) ctx.high.low[i];
./nginx/src/http/modules/ngx_http_geo_module.c-472-
./nginx/src/http/modules/ngx_http_geo_module.c-473-                if (a == NULL || a->nelts == 0) {
./nginx/src/http/modules/ngx_http_geo_module.c-474-                    continue;
./nginx/src/http/modules/ngx_http_geo_module.c-475-                }
./nginx/src/http/modules/ngx_http_geo_module.c-476-
./nginx/src/http/modules/ngx_http_geo_module.c-477-                len = a->nelts * sizeof(ngx_http_geo_range_t);
./nginx/src/http/modules/ngx_http_geo_module.c-478-
./nginx/src/http/modules/ngx_http_geo_module.c:479:                ctx.high.low[i] = ngx_palloc(cf->pool, len + sizeof(void *));
./nginx/src/http/modules/ngx_http_geo_module.c-480-                if (ctx.high.low[i] == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-481-                    return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-482-                }
./nginx/src/http/modules/ngx_http_geo_module.c-483-
./nginx/src/http/modules/ngx_http_geo_module.c-484-                ngx_memcpy(ctx.high.low[i], a->elts, len);
./nginx/src/http/modules/ngx_http_geo_module.c-485-                ctx.high.low[i][a->nelts].value = NULL;
./nginx/src/http/modules/ngx_http_geo_module.c-486-                ctx.data_size += len + sizeof(void *);
./nginx/src/http/modules/ngx_http_geo_module.c-487-            }
./nginx/src/http/modules/ngx_http_geo_module.c-488-
./nginx/src/http/modules/ngx_http_geo_module.c-489-            if (ctx.allow_binary_include
--
./nginx/src/http/modules/ngx_http_geo_module.c-498-        if (ctx.high.default_value == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-499-            ctx.high.default_value = &ngx_http_variable_null_value;
./nginx/src/http/modules/ngx_http_geo_module.c-500-        }
./nginx/src/http/modules/ngx_http_geo_module.c-501-
./nginx/src/http/modules/ngx_http_geo_module.c-502-        geo->u.high = ctx.high;
./nginx/src/http/modules/ngx_http_geo_module.c-503-
./nginx/src/http/modules/ngx_http_geo_module.c-504-        var->get_handler = ngx_http_geo_range_variable;
./nginx/src/http/modules/ngx_http_geo_module.c-505-        var->data = (uintptr_t) geo;
./nginx/src/http/modules/ngx_http_geo_module.c-506-
./nginx/src/http/modules/ngx_http_geo_module.c-507-        ngx_destroy_pool(ctx.temp_pool);
./nginx/src/http/modules/ngx_http_geo_module.c:508:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_geo_module.c-509-
./nginx/src/http/modules/ngx_http_geo_module.c-510-    } else {
./nginx/src/http/modules/ngx_http_geo_module.c-511-        if (ctx.tree == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:512:            ctx.tree = ngx_radix_tree_create(cf->pool, -1);
./nginx/src/http/modules/ngx_http_geo_module.c-513-            if (ctx.tree == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-514-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-515-            }
./nginx/src/http/modules/ngx_http_geo_module.c-516-        }
./nginx/src/http/modules/ngx_http_geo_module.c-517-
./nginx/src/http/modules/ngx_http_geo_module.c-518-        geo->u.trees.tree = ctx.tree;
./nginx/src/http/modules/ngx_http_geo_module.c-519-
./nginx/src/http/modules/ngx_http_geo_module.c-520-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_geo_module.c-521-        if (ctx.tree6 == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:522:            ctx.tree6 = ngx_radix_tree_create(cf->pool, -1);
./nginx/src/http/modules/ngx_http_geo_module.c-523-            if (ctx.tree6 == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-524-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-525-            }
./nginx/src/http/modules/ngx_http_geo_module.c-526-        }
./nginx/src/http/modules/ngx_http_geo_module.c-527-
./nginx/src/http/modules/ngx_http_geo_module.c-528-        geo->u.trees.tree6 = ctx.tree6;
./nginx/src/http/modules/ngx_http_geo_module.c-529-#endif
./nginx/src/http/modules/ngx_http_geo_module.c-530-
./nginx/src/http/modules/ngx_http_geo_module.c-531-        var->get_handler = ngx_http_geo_cidr_variable;
./nginx/src/http/modules/ngx_http_geo_module.c-532-        var->data = (uintptr_t) geo;
./nginx/src/http/modules/ngx_http_geo_module.c-533-
./nginx/src/http/modules/ngx_http_geo_module.c-534-        ngx_destroy_pool(ctx.temp_pool);
./nginx/src/http/modules/ngx_http_geo_module.c:535:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_geo_module.c-536-
./nginx/src/http/modules/ngx_http_geo_module.c-537-        if (ngx_radix32tree_insert(ctx.tree, 0, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-538-                                   (uintptr_t) &ngx_http_variable_null_value)
./nginx/src/http/modules/ngx_http_geo_module.c-539-            == NGX_ERROR)
./nginx/src/http/modules/ngx_http_geo_module.c-540-        {
./nginx/src/http/modules/ngx_http_geo_module.c-541-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-542-        }
./nginx/src/http/modules/ngx_http_geo_module.c-543-
./nginx/src/http/modules/ngx_http_geo_module.c-544-        /* NGX_BUSY is okay (default was set explicitly) */
./nginx/src/http/modules/ngx_http_geo_module.c-545-
--
./nginx/src/http/modules/ngx_http_geo_module.c-624-
./nginx/src/http/modules/ngx_http_geo_module.c-625-    if (ctx->ranges) {
./nginx/src/http/modules/ngx_http_geo_module.c-626-        rv = ngx_http_geo_range(cf, ctx, value);
./nginx/src/http/modules/ngx_http_geo_module.c-627-
./nginx/src/http/modules/ngx_http_geo_module.c-628-    } else {
./nginx/src/http/modules/ngx_http_geo_module.c-629-        rv = ngx_http_geo_cidr(cf, ctx, value);
./nginx/src/http/modules/ngx_http_geo_module.c-630-    }
./nginx/src/http/modules/ngx_http_geo_module.c-631-
./nginx/src/http/modules/ngx_http_geo_module.c-632-done:
./nginx/src/http/modules/ngx_http_geo_module.c-633-
./nginx/src/http/modules/ngx_http_geo_module.c:634:    ngx_reset_pool(cf->pool);
./nginx/src/http/modules/ngx_http_geo_module.c-635-
./nginx/src/http/modules/ngx_http_geo_module.c-636-    return rv;
./nginx/src/http/modules/ngx_http_geo_module.c-637-
./nginx/src/http/modules/ngx_http_geo_module.c-638-failed:
./nginx/src/http/modules/ngx_http_geo_module.c-639-
./nginx/src/http/modules/ngx_http_geo_module.c:640:    ngx_reset_pool(cf->pool);
./nginx/src/http/modules/ngx_http_geo_module.c-641-
./nginx/src/http/modules/ngx_http_geo_module.c-642-    return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-643-}
./nginx/src/http/modules/ngx_http_geo_module.c-644-
./nginx/src/http/modules/ngx_http_geo_module.c-645-
./nginx/src/http/modules/ngx_http_geo_module.c-646-static char *
./nginx/src/http/modules/ngx_http_geo_module.c-647-ngx_http_geo_range(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
./nginx/src/http/modules/ngx_http_geo_module.c-648-    ngx_str_t *value)
./nginx/src/http/modules/ngx_http_geo_module.c-649-{
./nginx/src/http/modules/ngx_http_geo_module.c-650-    u_char      *p, *last;
--
./nginx/src/http/modules/ngx_http_geo_module.c-669-    }
./nginx/src/http/modules/ngx_http_geo_module.c-670-
./nginx/src/http/modules/ngx_http_geo_module.c-671-    if (ctx->binary_include) {
./nginx/src/http/modules/ngx_http_geo_module.c-672-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-673-            "binary geo range base \"%s\" cannot be mixed with usual entries",
./nginx/src/http/modules/ngx_http_geo_module.c-674-            ctx->include_name.data);
./nginx/src/http/modules/ngx_http_geo_module.c-675-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-676-    }
./nginx/src/http/modules/ngx_http_geo_module.c-677-
./nginx/src/http/modules/ngx_http_geo_module.c-678-    if (ctx->high.low == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:679:        ctx->high.low = ngx_pcalloc(ctx->pool,
./nginx/src/http/modules/ngx_http_geo_module.c-680-                                    0x10000 * sizeof(ngx_http_geo_range_t *));
./nginx/src/http/modules/ngx_http_geo_module.c-681-        if (ctx->high.low == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-682-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-683-        }
./nginx/src/http/modules/ngx_http_geo_module.c-684-    }
./nginx/src/http/modules/ngx_http_geo_module.c-685-
./nginx/src/http/modules/ngx_http_geo_module.c-686-    ctx->entries++;
./nginx/src/http/modules/ngx_http_geo_module.c-687-    ctx->outside_entries = 1;
./nginx/src/http/modules/ngx_http_geo_module.c-688-
./nginx/src/http/modules/ngx_http_geo_module.c-689-    if (ngx_strcmp(value[0].data, "delete") == 0) {
--
./nginx/src/http/modules/ngx_http_geo_module.c-1015-static char *
./nginx/src/http/modules/ngx_http_geo_module.c-1016-ngx_http_geo_cidr(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
./nginx/src/http/modules/ngx_http_geo_module.c-1017-    ngx_str_t *value)
./nginx/src/http/modules/ngx_http_geo_module.c-1018-{
./nginx/src/http/modules/ngx_http_geo_module.c-1019-    char        *rv;
./nginx/src/http/modules/ngx_http_geo_module.c-1020-    ngx_int_t    rc, del;
./nginx/src/http/modules/ngx_http_geo_module.c-1021-    ngx_str_t   *net;
./nginx/src/http/modules/ngx_http_geo_module.c-1022-    ngx_cidr_t   cidr;
./nginx/src/http/modules/ngx_http_geo_module.c-1023-
./nginx/src/http/modules/ngx_http_geo_module.c-1024-    if (ctx->tree == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:1025:        ctx->tree = ngx_radix_tree_create(ctx->pool, -1);
./nginx/src/http/modules/ngx_http_geo_module.c-1026-        if (ctx->tree == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1027-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-1028-        }
./nginx/src/http/modules/ngx_http_geo_module.c-1029-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1030-
./nginx/src/http/modules/ngx_http_geo_module.c-1031-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_geo_module.c-1032-    if (ctx->tree6 == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:1033:        ctx->tree6 = ngx_radix_tree_create(ctx->pool, -1);
./nginx/src/http/modules/ngx_http_geo_module.c-1034-        if (ctx->tree6 == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1035-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-1036-        }
./nginx/src/http/modules/ngx_http_geo_module.c-1037-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1038-#endif
./nginx/src/http/modules/ngx_http_geo_module.c-1039-
./nginx/src/http/modules/ngx_http_geo_module.c-1040-    if (ngx_strcmp(value[0].data, "default") == 0) {
./nginx/src/http/modules/ngx_http_geo_module.c-1041-        cidr.family = AF_INET;
./nginx/src/http/modules/ngx_http_geo_module.c-1042-        cidr.u.in.addr = 0;
./nginx/src/http/modules/ngx_http_geo_module.c-1043-        cidr.u.in.mask = 0;
--
./nginx/src/http/modules/ngx_http_geo_module.c-1217-
./nginx/src/http/modules/ngx_http_geo_module.c-1218-    hash = ngx_crc32_long(value->data, value->len);
./nginx/src/http/modules/ngx_http_geo_module.c-1219-
./nginx/src/http/modules/ngx_http_geo_module.c-1220-    gvvn = (ngx_http_geo_variable_value_node_t *)
./nginx/src/http/modules/ngx_http_geo_module.c-1221-               ngx_str_rbtree_lookup(&ctx->rbtree, value, hash);
./nginx/src/http/modules/ngx_http_geo_module.c-1222-
./nginx/src/http/modules/ngx_http_geo_module.c-1223-    if (gvvn) {
./nginx/src/http/modules/ngx_http_geo_module.c-1224-        return gvvn->value;
./nginx/src/http/modules/ngx_http_geo_module.c-1225-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1226-
./nginx/src/http/modules/ngx_http_geo_module.c:1227:    val = ngx_palloc(ctx->pool, sizeof(ngx_http_variable_value_t));
./nginx/src/http/modules/ngx_http_geo_module.c-1228-    if (val == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1229-        return NULL;
./nginx/src/http/modules/ngx_http_geo_module.c-1230-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1231-
./nginx/src/http/modules/ngx_http_geo_module.c-1232-    val->len = value->len;
./nginx/src/http/modules/ngx_http_geo_module.c:1233:    val->data = ngx_pstrdup(ctx->pool, value);
./nginx/src/http/modules/ngx_http_geo_module.c-1234-    if (val->data == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1235-        return NULL;
./nginx/src/http/modules/ngx_http_geo_module.c-1236-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1237-
./nginx/src/http/modules/ngx_http_geo_module.c-1238-    val->valid = 1;
./nginx/src/http/modules/ngx_http_geo_module.c-1239-    val->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_geo_module.c-1240-    val->not_found = 0;
./nginx/src/http/modules/ngx_http_geo_module.c-1241-
./nginx/src/http/modules/ngx_http_geo_module.c-1242-    gvvn = ngx_palloc(ctx->temp_pool,
./nginx/src/http/modules/ngx_http_geo_module.c-1243-                      sizeof(ngx_http_geo_variable_value_node_t));
--
./nginx/src/http/modules/ngx_http_geo_module.c-1260-}
./nginx/src/http/modules/ngx_http_geo_module.c-1261-
./nginx/src/http/modules/ngx_http_geo_module.c-1262-
./nginx/src/http/modules/ngx_http_geo_module.c-1263-static char *
./nginx/src/http/modules/ngx_http_geo_module.c-1264-ngx_http_geo_add_proxy(ngx_conf_t *cf, ngx_http_geo_conf_ctx_t *ctx,
./nginx/src/http/modules/ngx_http_geo_module.c-1265-    ngx_cidr_t *cidr)
./nginx/src/http/modules/ngx_http_geo_module.c-1266-{
./nginx/src/http/modules/ngx_http_geo_module.c-1267-    ngx_cidr_t  *c;
./nginx/src/http/modules/ngx_http_geo_module.c-1268-
./nginx/src/http/modules/ngx_http_geo_module.c-1269-    if (ctx->proxies == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c:1270:        ctx->proxies = ngx_array_create(ctx->pool, 4, sizeof(ngx_cidr_t));
./nginx/src/http/modules/ngx_http_geo_module.c-1271-        if (ctx->proxies == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1272-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-1273-        }
./nginx/src/http/modules/ngx_http_geo_module.c-1274-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1275-
./nginx/src/http/modules/ngx_http_geo_module.c-1276-    c = ngx_array_push(ctx->proxies);
./nginx/src/http/modules/ngx_http_geo_module.c-1277-    if (c == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1278-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geo_module.c-1279-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1280-
--
./nginx/src/http/modules/ngx_http_geo_module.c-1432-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1433-
./nginx/src/http/modules/ngx_http_geo_module.c-1434-    name->data[name->len - 4] = ch;
./nginx/src/http/modules/ngx_http_geo_module.c-1435-
./nginx/src/http/modules/ngx_http_geo_module.c-1436-    if (mtime < ngx_file_mtime(&fi)) {
./nginx/src/http/modules/ngx_http_geo_module.c-1437-        ngx_conf_log_error(NGX_LOG_WARN, cf, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-1438-                           "stale binary geo range base \"%s\"", name->data);
./nginx/src/http/modules/ngx_http_geo_module.c-1439-        goto failed;
./nginx/src/http/modules/ngx_http_geo_module.c-1440-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1441-
./nginx/src/http/modules/ngx_http_geo_module.c:1442:    base = ngx_palloc(ctx->pool, size);
./nginx/src/http/modules/ngx_http_geo_module.c-1443-    if (base == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1444-        goto failed;
./nginx/src/http/modules/ngx_http_geo_module.c-1445-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1446-
./nginx/src/http/modules/ngx_http_geo_module.c-1447-    n = ngx_read_file(&file, base, size, 0);
./nginx/src/http/modules/ngx_http_geo_module.c-1448-
./nginx/src/http/modules/ngx_http_geo_module.c-1449-    if (n == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_geo_module.c-1450-        ngx_conf_log_error(NGX_LOG_CRIT, cf, ngx_errno,
./nginx/src/http/modules/ngx_http_geo_module.c-1451-                           ngx_read_file_n " \"%s\" failed", name->data);
./nginx/src/http/modules/ngx_http_geo_module.c-1452-        goto failed;
--
./nginx/src/http/modules/ngx_http_geo_module.c-1551-    ngx_http_geo_variable_value_node_t  *gvvn;
./nginx/src/http/modules/ngx_http_geo_module.c-1552-
./nginx/src/http/modules/ngx_http_geo_module.c-1553-    fm.name = ngx_pnalloc(ctx->temp_pool, ctx->include_name.len + 5);
./nginx/src/http/modules/ngx_http_geo_module.c-1554-    if (fm.name == NULL) {
./nginx/src/http/modules/ngx_http_geo_module.c-1555-        return;
./nginx/src/http/modules/ngx_http_geo_module.c-1556-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1557-
./nginx/src/http/modules/ngx_http_geo_module.c-1558-    ngx_sprintf(fm.name, "%V.bin%Z", &ctx->include_name);
./nginx/src/http/modules/ngx_http_geo_module.c-1559-
./nginx/src/http/modules/ngx_http_geo_module.c-1560-    fm.size = ctx->data_size;
./nginx/src/http/modules/ngx_http_geo_module.c:1561:    fm.log = ctx->pool->log;
./nginx/src/http/modules/ngx_http_geo_module.c-1562-
./nginx/src/http/modules/ngx_http_geo_module.c-1563-    ngx_log_error(NGX_LOG_NOTICE, fm.log, 0,
./nginx/src/http/modules/ngx_http_geo_module.c-1564-                  "creating binary geo range base \"%s\"", fm.name);
./nginx/src/http/modules/ngx_http_geo_module.c-1565-
./nginx/src/http/modules/ngx_http_geo_module.c-1566-    if (ngx_create_file_mapping(&fm) != NGX_OK) {
./nginx/src/http/modules/ngx_http_geo_module.c-1567-        return;
./nginx/src/http/modules/ngx_http_geo_module.c-1568-    }
./nginx/src/http/modules/ngx_http_geo_module.c-1569-
./nginx/src/http/modules/ngx_http_geo_module.c-1570-    p = ngx_cpymem(fm.addr, &ngx_http_geo_header,
./nginx/src/http/modules/ngx_http_geo_module.c-1571-                   sizeof(ngx_http_geo_header_t));
--
./nginx/src/http/modules/ngx_http_gzip_static_module.c-127-    of.directio = clcf->directio;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-128-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-129-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-130-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-131-    of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-132-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-133-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-134-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-135-    }
./nginx/src/http/modules/ngx_http_gzip_static_module.c-136-
./nginx/src/http/modules/ngx_http_gzip_static_module.c:137:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_gzip_static_module.c-138-        != NGX_OK)
./nginx/src/http/modules/ngx_http_gzip_static_module.c-139-    {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-140-        switch (of.err) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-141-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-142-        case 0:
./nginx/src/http/modules/ngx_http_gzip_static_module.c-143-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-144-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-145-        case NGX_ENOENT:
./nginx/src/http/modules/ngx_http_gzip_static_module.c-146-        case NGX_ENOTDIR:
./nginx/src/http/modules/ngx_http_gzip_static_module.c-147-        case NGX_ENAMETOOLONG:
--
./nginx/src/http/modules/ngx_http_gzip_static_module.c-218-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-219-    h->hash = 1;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-220-    ngx_str_set(&h->key, "Content-Encoding");
./nginx/src/http/modules/ngx_http_gzip_static_module.c-221-    ngx_str_set(&h->value, "gzip");
./nginx/src/http/modules/ngx_http_gzip_static_module.c-222-    r->headers_out.content_encoding = h;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-223-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-224-    r->ignore_content_encoding = 1;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-225-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-226-    /* we need to allocate all before the header would be sent */
./nginx/src/http/modules/ngx_http_gzip_static_module.c-227-
./nginx/src/http/modules/ngx_http_gzip_static_module.c:228:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_gzip_static_module.c-229-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-230-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-231-    }
./nginx/src/http/modules/ngx_http_gzip_static_module.c-232-
./nginx/src/http/modules/ngx_http_gzip_static_module.c:233:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/modules/ngx_http_gzip_static_module.c-234-    if (b->file == NULL) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-235-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-236-    }
./nginx/src/http/modules/ngx_http_gzip_static_module.c-237-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-238-    rc = ngx_http_send_header(r);
./nginx/src/http/modules/ngx_http_gzip_static_module.c-239-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-240-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-241-        return rc;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-242-    }
./nginx/src/http/modules/ngx_http_gzip_static_module.c-243-
--
./nginx/src/http/modules/ngx_http_gzip_static_module.c-258-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-259-    return ngx_http_output_filter(r, &out);
./nginx/src/http/modules/ngx_http_gzip_static_module.c-260-}
./nginx/src/http/modules/ngx_http_gzip_static_module.c-261-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-262-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-263-static void *
./nginx/src/http/modules/ngx_http_gzip_static_module.c-264-ngx_http_gzip_static_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_gzip_static_module.c-265-{
./nginx/src/http/modules/ngx_http_gzip_static_module.c-266-    ngx_http_gzip_static_conf_t  *conf;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-267-
./nginx/src/http/modules/ngx_http_gzip_static_module.c:268:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_gzip_static_conf_t));
./nginx/src/http/modules/ngx_http_gzip_static_module.c-269-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_gzip_static_module.c-270-        return NULL;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-271-    }
./nginx/src/http/modules/ngx_http_gzip_static_module.c-272-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-273-    conf->enable = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-274-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-275-    return conf;
./nginx/src/http/modules/ngx_http_gzip_static_module.c-276-}
./nginx/src/http/modules/ngx_http_gzip_static_module.c-277-
./nginx/src/http/modules/ngx_http_gzip_static_module.c-278-
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-181-
./nginx/src/http/modules/ngx_http_range_filter_module.c-182-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_range_filter_module.c-183-                       "http ir:%d lm:%d",
./nginx/src/http/modules/ngx_http_range_filter_module.c-184-                       if_range, r->headers_out.last_modified_time);
./nginx/src/http/modules/ngx_http_range_filter_module.c-185-
./nginx/src/http/modules/ngx_http_range_filter_module.c-186-        if (if_range != r->headers_out.last_modified_time) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-187-            goto next_filter;
./nginx/src/http/modules/ngx_http_range_filter_module.c-188-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-189-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-190-
./nginx/src/http/modules/ngx_http_range_filter_module.c:191:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_range_filter_ctx_t));
./nginx/src/http/modules/ngx_http_range_filter_module.c-192-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-193-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-194-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-195-
./nginx/src/http/modules/ngx_http_range_filter_module.c:196:    if (ngx_array_init(&ctx->ranges, r->pool, 1, sizeof(ngx_http_range_t))
./nginx/src/http/modules/ngx_http_range_filter_module.c-197-        != NGX_OK)
./nginx/src/http/modules/ngx_http_range_filter_module.c-198-    {
./nginx/src/http/modules/ngx_http_range_filter_module.c-199-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-200-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-201-
./nginx/src/http/modules/ngx_http_range_filter_module.c-202-    switch (ngx_http_range_parse(r, ctx, clcf->max_ranges)) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-203-
./nginx/src/http/modules/ngx_http_range_filter_module.c-204-    case NGX_OK:
./nginx/src/http/modules/ngx_http_range_filter_module.c-205-        ngx_http_set_ctx(r, ctx, ngx_http_range_body_filter_module);
./nginx/src/http/modules/ngx_http_range_filter_module.c-206-
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-356-    content_range = ngx_list_push(&r->headers_out.headers);
./nginx/src/http/modules/ngx_http_range_filter_module.c-357-    if (content_range == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-358-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-359-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-360-
./nginx/src/http/modules/ngx_http_range_filter_module.c-361-    r->headers_out.content_range = content_range;
./nginx/src/http/modules/ngx_http_range_filter_module.c-362-
./nginx/src/http/modules/ngx_http_range_filter_module.c-363-    content_range->hash = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-364-    ngx_str_set(&content_range->key, "Content-Range");
./nginx/src/http/modules/ngx_http_range_filter_module.c-365-
./nginx/src/http/modules/ngx_http_range_filter_module.c:366:    content_range->value.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_range_filter_module.c-367-                                    sizeof("bytes -/") - 1 + 3 * NGX_OFF_T_LEN);
./nginx/src/http/modules/ngx_http_range_filter_module.c-368-    if (content_range->value.data == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-369-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-370-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-371-
./nginx/src/http/modules/ngx_http_range_filter_module.c-372-    /* "Content-Range: bytes SSSS-EEEE/TTTT" header */
./nginx/src/http/modules/ngx_http_range_filter_module.c-373-
./nginx/src/http/modules/ngx_http_range_filter_module.c-374-    range = ctx->ranges.elts;
./nginx/src/http/modules/ngx_http_range_filter_module.c-375-
./nginx/src/http/modules/ngx_http_range_filter_module.c-376-    content_range->value.len = ngx_sprintf(content_range->value.data,
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-401-
./nginx/src/http/modules/ngx_http_range_filter_module.c-402-    len = sizeof(CRLF "--") - 1 + NGX_ATOMIC_T_LEN
./nginx/src/http/modules/ngx_http_range_filter_module.c-403-          + sizeof(CRLF "Content-Type: ") - 1
./nginx/src/http/modules/ngx_http_range_filter_module.c-404-          + r->headers_out.content_type.len
./nginx/src/http/modules/ngx_http_range_filter_module.c-405-          + sizeof(CRLF "Content-Range: bytes ") - 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-406-
./nginx/src/http/modules/ngx_http_range_filter_module.c-407-    if (r->headers_out.charset.len) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-408-        len += sizeof("; charset=") - 1 + r->headers_out.charset.len;
./nginx/src/http/modules/ngx_http_range_filter_module.c-409-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-410-
./nginx/src/http/modules/ngx_http_range_filter_module.c:411:    ctx->boundary_header.data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_range_filter_module.c-412-    if (ctx->boundary_header.data == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-413-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-414-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-415-
./nginx/src/http/modules/ngx_http_range_filter_module.c-416-    boundary = ngx_next_temp_number(0);
./nginx/src/http/modules/ngx_http_range_filter_module.c-417-
./nginx/src/http/modules/ngx_http_range_filter_module.c-418-    /*
./nginx/src/http/modules/ngx_http_range_filter_module.c-419-     * The boundary header of the range:
./nginx/src/http/modules/ngx_http_range_filter_module.c-420-     * CRLF
./nginx/src/http/modules/ngx_http_range_filter_module.c-421-     * "--0123456789" CRLF
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-446-
./nginx/src/http/modules/ngx_http_range_filter_module.c-447-    } else {
./nginx/src/http/modules/ngx_http_range_filter_module.c-448-        ctx->boundary_header.len = ngx_sprintf(ctx->boundary_header.data,
./nginx/src/http/modules/ngx_http_range_filter_module.c-449-                                           CRLF "--%0muA" CRLF
./nginx/src/http/modules/ngx_http_range_filter_module.c-450-                                           "Content-Range: bytes ",
./nginx/src/http/modules/ngx_http_range_filter_module.c-451-                                           boundary)
./nginx/src/http/modules/ngx_http_range_filter_module.c-452-                                   - ctx->boundary_header.data;
./nginx/src/http/modules/ngx_http_range_filter_module.c-453-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-454-
./nginx/src/http/modules/ngx_http_range_filter_module.c-455-    r->headers_out.content_type.data =
./nginx/src/http/modules/ngx_http_range_filter_module.c:456:        ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_range_filter_module.c-457-                    sizeof("Content-Type: multipart/byteranges; boundary=") - 1
./nginx/src/http/modules/ngx_http_range_filter_module.c-458-                    + NGX_ATOMIC_T_LEN);
./nginx/src/http/modules/ngx_http_range_filter_module.c-459-
./nginx/src/http/modules/ngx_http_range_filter_module.c-460-    if (r->headers_out.content_type.data == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-461-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-462-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-463-
./nginx/src/http/modules/ngx_http_range_filter_module.c-464-    r->headers_out.content_type_lowcase = NULL;
./nginx/src/http/modules/ngx_http_range_filter_module.c-465-
./nginx/src/http/modules/ngx_http_range_filter_module.c-466-    /* "Content-Type: multipart/byteranges; boundary=0123456789" */
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-476-    /* the size of the last boundary CRLF "--0123456789--" CRLF */
./nginx/src/http/modules/ngx_http_range_filter_module.c-477-
./nginx/src/http/modules/ngx_http_range_filter_module.c-478-    len = sizeof(CRLF "--") - 1 + NGX_ATOMIC_T_LEN + sizeof("--" CRLF) - 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-479-
./nginx/src/http/modules/ngx_http_range_filter_module.c-480-    range = ctx->ranges.elts;
./nginx/src/http/modules/ngx_http_range_filter_module.c-481-    for (i = 0; i < ctx->ranges.nelts; i++) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-482-
./nginx/src/http/modules/ngx_http_range_filter_module.c-483-        /* the size of the range: "SSSS-EEEE/TTTT" CRLF CRLF */
./nginx/src/http/modules/ngx_http_range_filter_module.c-484-
./nginx/src/http/modules/ngx_http_range_filter_module.c-485-        range[i].content_range.data =
./nginx/src/http/modules/ngx_http_range_filter_module.c:486:                               ngx_pnalloc(r->pool, 3 * NGX_OFF_T_LEN + 2 + 4);
./nginx/src/http/modules/ngx_http_range_filter_module.c-487-
./nginx/src/http/modules/ngx_http_range_filter_module.c-488-        if (range[i].content_range.data == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-489-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-490-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-491-
./nginx/src/http/modules/ngx_http_range_filter_module.c-492-        range[i].content_range.len = ngx_sprintf(range[i].content_range.data,
./nginx/src/http/modules/ngx_http_range_filter_module.c-493-                                               "%O-%O/%O" CRLF CRLF,
./nginx/src/http/modules/ngx_http_range_filter_module.c-494-                                               range[i].start, range[i].end - 1,
./nginx/src/http/modules/ngx_http_range_filter_module.c-495-                                               r->headers_out.content_length_n)
./nginx/src/http/modules/ngx_http_range_filter_module.c-496-                                     - range[i].content_range.data;
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-520-    content_range = ngx_list_push(&r->headers_out.headers);
./nginx/src/http/modules/ngx_http_range_filter_module.c-521-    if (content_range == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-522-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-523-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-524-
./nginx/src/http/modules/ngx_http_range_filter_module.c-525-    r->headers_out.content_range = content_range;
./nginx/src/http/modules/ngx_http_range_filter_module.c-526-
./nginx/src/http/modules/ngx_http_range_filter_module.c-527-    content_range->hash = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-528-    ngx_str_set(&content_range->key, "Content-Range");
./nginx/src/http/modules/ngx_http_range_filter_module.c-529-
./nginx/src/http/modules/ngx_http_range_filter_module.c:530:    content_range->value.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_range_filter_module.c-531-                                       sizeof("bytes */") - 1 + NGX_OFF_T_LEN);
./nginx/src/http/modules/ngx_http_range_filter_module.c-532-    if (content_range->value.data == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-533-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-534-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-535-
./nginx/src/http/modules/ngx_http_range_filter_module.c-536-    content_range->value.len = ngx_sprintf(content_range->value.data,
./nginx/src/http/modules/ngx_http_range_filter_module.c-537-                                           "bytes */%O",
./nginx/src/http/modules/ngx_http_range_filter_module.c-538-                                           r->headers_out.content_length_n)
./nginx/src/http/modules/ngx_http_range_filter_module.c-539-                               - content_range->value.data;
./nginx/src/http/modules/ngx_http_range_filter_module.c-540-
--
./nginx/src/http/modules/ngx_http_range_filter_module.c-721-    for (i = 0; i < ctx->ranges.nelts; i++) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-722-
./nginx/src/http/modules/ngx_http_range_filter_module.c-723-        /*
./nginx/src/http/modules/ngx_http_range_filter_module.c-724-         * The boundary header of the range:
./nginx/src/http/modules/ngx_http_range_filter_module.c-725-         * CRLF
./nginx/src/http/modules/ngx_http_range_filter_module.c-726-         * "--0123456789" CRLF
./nginx/src/http/modules/ngx_http_range_filter_module.c-727-         * "Content-Type: image/jpeg" CRLF
./nginx/src/http/modules/ngx_http_range_filter_module.c-728-         * "Content-Range: bytes "
./nginx/src/http/modules/ngx_http_range_filter_module.c-729-         */
./nginx/src/http/modules/ngx_http_range_filter_module.c-730-
./nginx/src/http/modules/ngx_http_range_filter_module.c:731:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-732-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-733-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-734-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-735-
./nginx/src/http/modules/ngx_http_range_filter_module.c-736-        b->memory = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-737-        b->pos = ctx->boundary_header.data;
./nginx/src/http/modules/ngx_http_range_filter_module.c-738-        b->last = ctx->boundary_header.data + ctx->boundary_header.len;
./nginx/src/http/modules/ngx_http_range_filter_module.c-739-
./nginx/src/http/modules/ngx_http_range_filter_module.c:740:        hcl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-741-        if (hcl == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-742-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-743-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-744-
./nginx/src/http/modules/ngx_http_range_filter_module.c-745-        hcl->buf = b;
./nginx/src/http/modules/ngx_http_range_filter_module.c-746-
./nginx/src/http/modules/ngx_http_range_filter_module.c-747-
./nginx/src/http/modules/ngx_http_range_filter_module.c-748-        /* "SSSS-EEEE/TTTT" CRLF CRLF */
./nginx/src/http/modules/ngx_http_range_filter_module.c-749-
./nginx/src/http/modules/ngx_http_range_filter_module.c:750:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-751-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-752-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-753-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-754-
./nginx/src/http/modules/ngx_http_range_filter_module.c-755-        b->temporary = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-756-        b->pos = range[i].content_range.data;
./nginx/src/http/modules/ngx_http_range_filter_module.c-757-        b->last = range[i].content_range.data + range[i].content_range.len;
./nginx/src/http/modules/ngx_http_range_filter_module.c-758-
./nginx/src/http/modules/ngx_http_range_filter_module.c:759:        rcl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-760-        if (rcl == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-761-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-762-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-763-
./nginx/src/http/modules/ngx_http_range_filter_module.c-764-        rcl->buf = b;
./nginx/src/http/modules/ngx_http_range_filter_module.c-765-
./nginx/src/http/modules/ngx_http_range_filter_module.c-766-
./nginx/src/http/modules/ngx_http_range_filter_module.c-767-        /* the range data */
./nginx/src/http/modules/ngx_http_range_filter_module.c-768-
./nginx/src/http/modules/ngx_http_range_filter_module.c:769:        b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-770-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-771-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-772-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-773-
./nginx/src/http/modules/ngx_http_range_filter_module.c-774-        b->in_file = buf->in_file;
./nginx/src/http/modules/ngx_http_range_filter_module.c-775-        b->temporary = buf->temporary;
./nginx/src/http/modules/ngx_http_range_filter_module.c-776-        b->memory = buf->memory;
./nginx/src/http/modules/ngx_http_range_filter_module.c-777-        b->mmap = buf->mmap;
./nginx/src/http/modules/ngx_http_range_filter_module.c-778-        b->file = buf->file;
./nginx/src/http/modules/ngx_http_range_filter_module.c-779-
./nginx/src/http/modules/ngx_http_range_filter_module.c-780-        if (buf->in_file) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-781-            b->file_pos = buf->file_pos + range[i].start;
./nginx/src/http/modules/ngx_http_range_filter_module.c-782-            b->file_last = buf->file_pos + range[i].end;
./nginx/src/http/modules/ngx_http_range_filter_module.c-783-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-784-
./nginx/src/http/modules/ngx_http_range_filter_module.c-785-        if (ngx_buf_in_memory(buf)) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-786-            b->pos = buf->pos + (size_t) range[i].start;
./nginx/src/http/modules/ngx_http_range_filter_module.c-787-            b->last = buf->pos + (size_t) range[i].end;
./nginx/src/http/modules/ngx_http_range_filter_module.c-788-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-789-
./nginx/src/http/modules/ngx_http_range_filter_module.c:790:        dcl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-791-        if (dcl == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-792-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-793-        }
./nginx/src/http/modules/ngx_http_range_filter_module.c-794-
./nginx/src/http/modules/ngx_http_range_filter_module.c-795-        dcl->buf = b;
./nginx/src/http/modules/ngx_http_range_filter_module.c-796-
./nginx/src/http/modules/ngx_http_range_filter_module.c-797-        *ll = hcl;
./nginx/src/http/modules/ngx_http_range_filter_module.c-798-        hcl->next = rcl;
./nginx/src/http/modules/ngx_http_range_filter_module.c-799-        rcl->next = dcl;
./nginx/src/http/modules/ngx_http_range_filter_module.c-800-        ll = &dcl->next;
./nginx/src/http/modules/ngx_http_range_filter_module.c-801-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-802-
./nginx/src/http/modules/ngx_http_range_filter_module.c-803-    /* the last boundary CRLF "--0123456789--" CRLF  */
./nginx/src/http/modules/ngx_http_range_filter_module.c-804-
./nginx/src/http/modules/ngx_http_range_filter_module.c:805:    b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-806-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-807-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-808-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-809-
./nginx/src/http/modules/ngx_http_range_filter_module.c-810-    b->temporary = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-811-    b->last_buf = 1;
./nginx/src/http/modules/ngx_http_range_filter_module.c-812-
./nginx/src/http/modules/ngx_http_range_filter_module.c:813:    b->pos = ngx_pnalloc(r->pool, sizeof(CRLF "--") - 1 + NGX_ATOMIC_T_LEN
./nginx/src/http/modules/ngx_http_range_filter_module.c-814-                                  + sizeof("--" CRLF) - 1);
./nginx/src/http/modules/ngx_http_range_filter_module.c-815-    if (b->pos == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-816-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-817-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-818-
./nginx/src/http/modules/ngx_http_range_filter_module.c-819-    b->last = ngx_cpymem(b->pos, ctx->boundary_header.data,
./nginx/src/http/modules/ngx_http_range_filter_module.c-820-                         sizeof(CRLF "--") - 1 + NGX_ATOMIC_T_LEN);
./nginx/src/http/modules/ngx_http_range_filter_module.c-821-    *b->last++ = '-'; *b->last++ = '-';
./nginx/src/http/modules/ngx_http_range_filter_module.c-822-    *b->last++ = CR; *b->last++ = LF;
./nginx/src/http/modules/ngx_http_range_filter_module.c-823-
./nginx/src/http/modules/ngx_http_range_filter_module.c:824:    hcl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_range_filter_module.c-825-    if (hcl == NULL) {
./nginx/src/http/modules/ngx_http_range_filter_module.c-826-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_range_filter_module.c-827-    }
./nginx/src/http/modules/ngx_http_range_filter_module.c-828-
./nginx/src/http/modules/ngx_http_range_filter_module.c-829-    hcl->buf = b;
./nginx/src/http/modules/ngx_http_range_filter_module.c-830-    hcl->next = NULL;
./nginx/src/http/modules/ngx_http_range_filter_module.c-831-
./nginx/src/http/modules/ngx_http_range_filter_module.c-832-    *ll = hcl;
./nginx/src/http/modules/ngx_http_range_filter_module.c-833-
./nginx/src/http/modules/ngx_http_range_filter_module.c-834-    return ngx_http_next_body_filter(r, out);
--
./nginx/src/http/modules/ngx_http_dav_module.c-1044-    return rc;
./nginx/src/http/modules/ngx_http_dav_module.c-1045-}
./nginx/src/http/modules/ngx_http_dav_module.c-1046-
./nginx/src/http/modules/ngx_http_dav_module.c-1047-
./nginx/src/http/modules/ngx_http_dav_module.c-1048-static ngx_int_t
./nginx/src/http/modules/ngx_http_dav_module.c-1049-ngx_http_dav_location(ngx_http_request_t *r, u_char *path)
./nginx/src/http/modules/ngx_http_dav_module.c-1050-{
./nginx/src/http/modules/ngx_http_dav_module.c-1051-    u_char                    *location;
./nginx/src/http/modules/ngx_http_dav_module.c-1052-    ngx_http_core_loc_conf_t  *clcf;
./nginx/src/http/modules/ngx_http_dav_module.c-1053-
./nginx/src/http/modules/ngx_http_dav_module.c:1054:    r->headers_out.location = ngx_palloc(r->pool, sizeof(ngx_table_elt_t));
./nginx/src/http/modules/ngx_http_dav_module.c-1055-    if (r->headers_out.location == NULL) {
./nginx/src/http/modules/ngx_http_dav_module.c-1056-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_dav_module.c-1057-    }
./nginx/src/http/modules/ngx_http_dav_module.c-1058-
./nginx/src/http/modules/ngx_http_dav_module.c-1059-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/modules/ngx_http_dav_module.c-1060-
./nginx/src/http/modules/ngx_http_dav_module.c-1061-    if (!clcf->alias && clcf->root_lengths == NULL) {
./nginx/src/http/modules/ngx_http_dav_module.c-1062-        location = path + clcf->root.len;
./nginx/src/http/modules/ngx_http_dav_module.c-1063-
./nginx/src/http/modules/ngx_http_dav_module.c-1064-    } else {
./nginx/src/http/modules/ngx_http_dav_module.c:1065:        location = ngx_pnalloc(r->pool, r->uri.len);
./nginx/src/http/modules/ngx_http_dav_module.c-1066-        if (location == NULL) {
./nginx/src/http/modules/ngx_http_dav_module.c-1067-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_dav_module.c-1068-        }
./nginx/src/http/modules/ngx_http_dav_module.c-1069-
./nginx/src/http/modules/ngx_http_dav_module.c-1070-        ngx_memcpy(location, r->uri.data, r->uri.len);
./nginx/src/http/modules/ngx_http_dav_module.c-1071-    }
./nginx/src/http/modules/ngx_http_dav_module.c-1072-
./nginx/src/http/modules/ngx_http_dav_module.c-1073-    /*
./nginx/src/http/modules/ngx_http_dav_module.c-1074-     * we do not need to set the r->headers_out.location->hash and
./nginx/src/http/modules/ngx_http_dav_module.c-1075-     * r->headers_out.location->key fields
--
./nginx/src/http/modules/ngx_http_dav_module.c-1080-
./nginx/src/http/modules/ngx_http_dav_module.c-1081-    return NGX_OK;
./nginx/src/http/modules/ngx_http_dav_module.c-1082-}
./nginx/src/http/modules/ngx_http_dav_module.c-1083-
./nginx/src/http/modules/ngx_http_dav_module.c-1084-
./nginx/src/http/modules/ngx_http_dav_module.c-1085-static void *
./nginx/src/http/modules/ngx_http_dav_module.c-1086-ngx_http_dav_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_dav_module.c-1087-{
./nginx/src/http/modules/ngx_http_dav_module.c-1088-    ngx_http_dav_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_dav_module.c-1089-
./nginx/src/http/modules/ngx_http_dav_module.c:1090:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_dav_loc_conf_t));
./nginx/src/http/modules/ngx_http_dav_module.c-1091-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_dav_module.c-1092-        return NULL;
./nginx/src/http/modules/ngx_http_dav_module.c-1093-    }
./nginx/src/http/modules/ngx_http_dav_module.c-1094-
./nginx/src/http/modules/ngx_http_dav_module.c-1095-    /*
./nginx/src/http/modules/ngx_http_dav_module.c-1096-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_dav_module.c-1097-     *
./nginx/src/http/modules/ngx_http_dav_module.c-1098-     *     conf->methods = 0;
./nginx/src/http/modules/ngx_http_dav_module.c-1099-     */
./nginx/src/http/modules/ngx_http_dav_module.c-1100-
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-137-    if (kcf->original_init_upstream(cf, us) != NGX_OK) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-138-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-139-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-140-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-141-    kcf->original_init_peer = us->peer.init;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-142-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-143-    us->peer.init = ngx_http_upstream_init_keepalive_peer;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-144-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-145-    /* allocate cache items and add to free queue */
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-146-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:147:    cached = ngx_pcalloc(cf->pool,
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-148-                sizeof(ngx_http_upstream_keepalive_cache_t) * kcf->max_cached);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-149-    if (cached == NULL) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-150-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-151-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-152-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-153-    ngx_queue_init(&kcf->cache);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-154-    ngx_queue_init(&kcf->free);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-155-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-156-    for (i = 0; i < kcf->max_cached; i++) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-157-        ngx_queue_insert_head(&kcf->free, &cached[i].queue);
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-168-{
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-169-    ngx_http_upstream_keepalive_peer_data_t  *kp;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-170-    ngx_http_upstream_keepalive_srv_conf_t   *kcf;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-171-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-172-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-173-                   "init keepalive peer");
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-174-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-175-    kcf = ngx_http_conf_upstream_srv_conf(us,
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-176-                                          ngx_http_upstream_keepalive_module);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-177-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:178:    kp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_keepalive_peer_data_t));
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-179-    if (kp == NULL) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-180-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-181-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-182-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-183-    if (kcf->original_init_peer(r, us) != NGX_OK) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-184-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-185-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-186-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-187-    kp->conf = kcf;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-188-    kp->upstream = r->upstream;
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-244-            ngx_queue_remove(q);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-245-            ngx_queue_insert_head(&kp->conf->free, q);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-246-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-247-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pc->log, 0,
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-248-                           "get keepalive peer: using connection %p", c);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-249-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-250-            c->idle = 0;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-251-            c->log = pc->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-252-            c->read->log = pc->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-253-            c->write->log = pc->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:254:            c->pool->log = pc->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-255-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-256-            pc->connection = c;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-257-            pc->cached = 1;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-258-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-259-            return NGX_DONE;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-260-        }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-261-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-262-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-263-    return NGX_OK;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-264-}
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-334-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-335-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-336-    c->write->handler = ngx_http_upstream_keepalive_dummy_handler;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-337-    c->read->handler = ngx_http_upstream_keepalive_close_handler;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-338-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-339-    c->data = item;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-340-    c->idle = 1;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-341-    c->log = ngx_cycle->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-342-    c->read->log = ngx_cycle->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-343-    c->write->log = ngx_cycle->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:344:    c->pool->log = ngx_cycle->log;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-345-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-346-    item->socklen = pc->socklen;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-347-    ngx_memcpy(&item->sockaddr, pc->sockaddr, pc->socklen);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-348-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-349-    if (c->read->ready) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-350-        ngx_http_upstream_keepalive_close_handler(c->read);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-351-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-352-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-353-invalid:
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-354-
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-418-        c->ssl->no_send_shutdown = 1;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-419-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-420-        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-421-            c->ssl->handler = ngx_http_upstream_keepalive_close;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-422-            return;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-423-        }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-424-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-425-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-426-#endif
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-427-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:428:    ngx_destroy_pool(c->pool);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-429-    ngx_close_connection(c);
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-430-}
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-431-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-432-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-433-#if (NGX_HTTP_SSL)
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-434-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-435-static ngx_int_t
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-436-ngx_http_upstream_keepalive_set_session(ngx_peer_connection_t *pc, void *data)
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-437-{
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-438-    ngx_http_upstream_keepalive_peer_data_t  *kp = data;
--
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-451-}
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-452-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-453-#endif
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-454-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-455-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-456-static void *
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-457-ngx_http_upstream_keepalive_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-458-{
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-459-    ngx_http_upstream_keepalive_srv_conf_t  *conf;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-460-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c:461:    conf = ngx_pcalloc(cf->pool,
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-462-                       sizeof(ngx_http_upstream_keepalive_srv_conf_t));
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-463-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-464-        return NULL;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-465-    }
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-466-
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-467-    /*
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-468-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-469-     *
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-470-     *     conf->original_init_upstream = NULL;
./nginx/src/http/modules/ngx_http_upstream_keepalive_module.c-471-     *     conf->original_init_peer = NULL;
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-8-#include <ngx_config.h>
./nginx/src/http/modules/ngx_http_autoindex_module.c-9-#include <ngx_core.h>
./nginx/src/http/modules/ngx_http_autoindex_module.c-10-#include <ngx_http.h>
./nginx/src/http/modules/ngx_http_autoindex_module.c-11-
./nginx/src/http/modules/ngx_http_autoindex_module.c-12-
./nginx/src/http/modules/ngx_http_autoindex_module.c-13-#if 0
./nginx/src/http/modules/ngx_http_autoindex_module.c-14-
./nginx/src/http/modules/ngx_http_autoindex_module.c-15-typedef struct {
./nginx/src/http/modules/ngx_http_autoindex_module.c-16-    ngx_buf_t     *buf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-17-    size_t         size;
./nginx/src/http/modules/ngx_http_autoindex_module.c:18:    ngx_pool_t    *pool;
./nginx/src/http/modules/ngx_http_autoindex_module.c-19-    size_t         alloc_size;
./nginx/src/http/modules/ngx_http_autoindex_module.c-20-    ngx_chain_t  **last_out;
./nginx/src/http/modules/ngx_http_autoindex_module.c-21-} ngx_http_autoindex_ctx_t;
./nginx/src/http/modules/ngx_http_autoindex_module.c-22-
./nginx/src/http/modules/ngx_http_autoindex_module.c-23-#endif
./nginx/src/http/modules/ngx_http_autoindex_module.c-24-
./nginx/src/http/modules/ngx_http_autoindex_module.c-25-
./nginx/src/http/modules/ngx_http_autoindex_module.c-26-typedef struct {
./nginx/src/http/modules/ngx_http_autoindex_module.c-27-    ngx_str_t      name;
./nginx/src/http/modules/ngx_http_autoindex_module.c-28-    size_t         utf_len;
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-140-    u_char                         *last, *filename, scale;
./nginx/src/http/modules/ngx_http_autoindex_module.c-141-    off_t                           length;
./nginx/src/http/modules/ngx_http_autoindex_module.c-142-    size_t                          len, char_len, escape_html, allocated, root;
./nginx/src/http/modules/ngx_http_autoindex_module.c-143-    ngx_tm_t                        tm;
./nginx/src/http/modules/ngx_http_autoindex_module.c-144-    ngx_err_t                       err;
./nginx/src/http/modules/ngx_http_autoindex_module.c-145-    ngx_buf_t                      *b;
./nginx/src/http/modules/ngx_http_autoindex_module.c-146-    ngx_int_t                       rc, size;
./nginx/src/http/modules/ngx_http_autoindex_module.c-147-    ngx_str_t                       path;
./nginx/src/http/modules/ngx_http_autoindex_module.c-148-    ngx_dir_t                       dir;
./nginx/src/http/modules/ngx_http_autoindex_module.c-149-    ngx_uint_t                      i, level, utf8;
./nginx/src/http/modules/ngx_http_autoindex_module.c:150:    ngx_pool_t                     *pool;
./nginx/src/http/modules/ngx_http_autoindex_module.c-151-    ngx_time_t                     *tp;
./nginx/src/http/modules/ngx_http_autoindex_module.c-152-    ngx_chain_t                     out;
./nginx/src/http/modules/ngx_http_autoindex_module.c-153-    ngx_array_t                     entries;
./nginx/src/http/modules/ngx_http_autoindex_module.c-154-    ngx_http_autoindex_entry_t     *entry;
./nginx/src/http/modules/ngx_http_autoindex_module.c-155-    ngx_http_autoindex_loc_conf_t  *alcf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-156-
./nginx/src/http/modules/ngx_http_autoindex_module.c-157-    static char  *months[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
./nginx/src/http/modules/ngx_http_autoindex_module.c-158-                               "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
./nginx/src/http/modules/ngx_http_autoindex_module.c-159-
./nginx/src/http/modules/ngx_http_autoindex_module.c-160-    if (r->uri.data[r->uri.len - 1] != '/') {
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-214-        return rc;
./nginx/src/http/modules/ngx_http_autoindex_module.c-215-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-216-
./nginx/src/http/modules/ngx_http_autoindex_module.c-217-#if (NGX_SUPPRESS_WARN)
./nginx/src/http/modules/ngx_http_autoindex_module.c-218-
./nginx/src/http/modules/ngx_http_autoindex_module.c-219-    /* MSVC thinks 'entries' may be used without having been initialized */
./nginx/src/http/modules/ngx_http_autoindex_module.c-220-    ngx_memzero(&entries, sizeof(ngx_array_t));
./nginx/src/http/modules/ngx_http_autoindex_module.c-221-
./nginx/src/http/modules/ngx_http_autoindex_module.c-222-#endif
./nginx/src/http/modules/ngx_http_autoindex_module.c-223-
./nginx/src/http/modules/ngx_http_autoindex_module.c:224:    /* TODO: pool should be temporary pool */
./nginx/src/http/modules/ngx_http_autoindex_module.c:225:    pool = r->pool;
./nginx/src/http/modules/ngx_http_autoindex_module.c-226-
./nginx/src/http/modules/ngx_http_autoindex_module.c:227:    if (ngx_array_init(&entries, pool, 40, sizeof(ngx_http_autoindex_entry_t))
./nginx/src/http/modules/ngx_http_autoindex_module.c-228-        != NGX_OK)
./nginx/src/http/modules/ngx_http_autoindex_module.c-229-    {
./nginx/src/http/modules/ngx_http_autoindex_module.c-230-        return ngx_http_autoindex_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_autoindex_module.c-231-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-232-
./nginx/src/http/modules/ngx_http_autoindex_module.c-233-    r->headers_out.status = NGX_HTTP_OK;
./nginx/src/http/modules/ngx_http_autoindex_module.c-234-    r->headers_out.content_type_len = sizeof("text/html") - 1;
./nginx/src/http/modules/ngx_http_autoindex_module.c-235-    ngx_str_set(&r->headers_out.content_type, "text/html");
./nginx/src/http/modules/ngx_http_autoindex_module.c-236-
./nginx/src/http/modules/ngx_http_autoindex_module.c-237-    rc = ngx_http_send_header(r);
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-283-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-284-
./nginx/src/http/modules/ngx_http_autoindex_module.c-285-        if (!dir.valid_info) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-286-
./nginx/src/http/modules/ngx_http_autoindex_module.c-287-            /* 1 byte for '/' and 1 byte for terminating '\0' */
./nginx/src/http/modules/ngx_http_autoindex_module.c-288-
./nginx/src/http/modules/ngx_http_autoindex_module.c-289-            if (path.len + 1 + len + 1 > allocated) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-290-                allocated = path.len + 1 + len + 1
./nginx/src/http/modules/ngx_http_autoindex_module.c-291-                                     + NGX_HTTP_AUTOINDEX_PREALLOCATE;
./nginx/src/http/modules/ngx_http_autoindex_module.c-292-
./nginx/src/http/modules/ngx_http_autoindex_module.c:293:                filename = ngx_pnalloc(pool, allocated);
./nginx/src/http/modules/ngx_http_autoindex_module.c-294-                if (filename == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-295-                    return ngx_http_autoindex_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_autoindex_module.c-296-                }
./nginx/src/http/modules/ngx_http_autoindex_module.c-297-
./nginx/src/http/modules/ngx_http_autoindex_module.c-298-                last = ngx_cpystrn(filename, path.data, path.len + 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-299-                *last++ = '/';
./nginx/src/http/modules/ngx_http_autoindex_module.c-300-            }
./nginx/src/http/modules/ngx_http_autoindex_module.c-301-
./nginx/src/http/modules/ngx_http_autoindex_module.c-302-            ngx_cpystrn(last, ngx_de_name(&dir), len + 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-303-
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-324-            }
./nginx/src/http/modules/ngx_http_autoindex_module.c-325-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-326-
./nginx/src/http/modules/ngx_http_autoindex_module.c-327-        entry = ngx_array_push(&entries);
./nginx/src/http/modules/ngx_http_autoindex_module.c-328-        if (entry == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-329-            return ngx_http_autoindex_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_autoindex_module.c-330-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-331-
./nginx/src/http/modules/ngx_http_autoindex_module.c-332-        entry->name.len = len;
./nginx/src/http/modules/ngx_http_autoindex_module.c-333-
./nginx/src/http/modules/ngx_http_autoindex_module.c:334:        entry->name.data = ngx_pnalloc(pool, len + 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-335-        if (entry->name.data == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-336-            return ngx_http_autoindex_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_autoindex_module.c-337-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-338-
./nginx/src/http/modules/ngx_http_autoindex_module.c-339-        ngx_cpystrn(entry->name.data, ngx_de_name(&dir), len + 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-340-
./nginx/src/http/modules/ngx_http_autoindex_module.c-341-        entry->escape = 2 * ngx_escape_uri(NULL, ngx_de_name(&dir), len,
./nginx/src/http/modules/ngx_http_autoindex_module.c-342-                                           NGX_ESCAPE_URI_COMPONENT);
./nginx/src/http/modules/ngx_http_autoindex_module.c-343-
./nginx/src/http/modules/ngx_http_autoindex_module.c-344-        entry->escape_html = ngx_escape_html(NULL, entry->name.data,
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-379-            + sizeof("\">") - 1
./nginx/src/http/modules/ngx_http_autoindex_module.c-380-            + entry[i].name.len - entry[i].utf_len
./nginx/src/http/modules/ngx_http_autoindex_module.c-381-            + entry[i].escape_html
./nginx/src/http/modules/ngx_http_autoindex_module.c-382-            + NGX_HTTP_AUTOINDEX_NAME_LEN + sizeof("&gt;") - 2
./nginx/src/http/modules/ngx_http_autoindex_module.c-383-            + sizeof("</a>") - 1
./nginx/src/http/modules/ngx_http_autoindex_module.c-384-            + sizeof(" 28-Sep-1970 12:00 ") - 1
./nginx/src/http/modules/ngx_http_autoindex_module.c-385-            + 20                                         /* the file size */
./nginx/src/http/modules/ngx_http_autoindex_module.c-386-            + 2;
./nginx/src/http/modules/ngx_http_autoindex_module.c-387-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-388-
./nginx/src/http/modules/ngx_http_autoindex_module.c:389:    b = ngx_create_temp_buf(r->pool, len);
./nginx/src/http/modules/ngx_http_autoindex_module.c-390-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-391-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_autoindex_module.c-392-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-393-
./nginx/src/http/modules/ngx_http_autoindex_module.c-394-    if (entries.nelts > 1) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-395-        ngx_qsort(entry, (size_t) entries.nelts,
./nginx/src/http/modules/ngx_http_autoindex_module.c-396-                  sizeof(ngx_http_autoindex_entry_t),
./nginx/src/http/modules/ngx_http_autoindex_module.c-397-                  ngx_http_autoindex_cmp_entries);
./nginx/src/http/modules/ngx_http_autoindex_module.c-398-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-399-
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-557-                } else {
./nginx/src/http/modules/ngx_http_autoindex_module.c-558-                    b->last = ngx_sprintf(b->last, " %6i", size);
./nginx/src/http/modules/ngx_http_autoindex_module.c-559-                }
./nginx/src/http/modules/ngx_http_autoindex_module.c-560-            }
./nginx/src/http/modules/ngx_http_autoindex_module.c-561-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-562-
./nginx/src/http/modules/ngx_http_autoindex_module.c-563-        *b->last++ = CR;
./nginx/src/http/modules/ngx_http_autoindex_module.c-564-        *b->last++ = LF;
./nginx/src/http/modules/ngx_http_autoindex_module.c-565-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-566-
./nginx/src/http/modules/ngx_http_autoindex_module.c:567:    /* TODO: free temporary pool */
./nginx/src/http/modules/ngx_http_autoindex_module.c-568-
./nginx/src/http/modules/ngx_http_autoindex_module.c-569-    b->last = ngx_cpymem(b->last, "</pre><hr>", sizeof("</pre><hr>") - 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-570-
./nginx/src/http/modules/ngx_http_autoindex_module.c-571-    b->last = ngx_cpymem(b->last, tail, sizeof(tail) - 1);
./nginx/src/http/modules/ngx_http_autoindex_module.c-572-
./nginx/src/http/modules/ngx_http_autoindex_module.c-573-    if (r == r->main) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-574-        b->last_buf = 1;
./nginx/src/http/modules/ngx_http_autoindex_module.c-575-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-576-
./nginx/src/http/modules/ngx_http_autoindex_module.c-577-    b->last_in_chain = 1;
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-612-
./nginx/src/http/modules/ngx_http_autoindex_module.c-613-    if (ctx->buf) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-614-
./nginx/src/http/modules/ngx_http_autoindex_module.c-615-        if ((size_t) (ctx->buf->end - ctx->buf->last) >= size) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-616-            return ctx->buf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-617-        }
./nginx/src/http/modules/ngx_http_autoindex_module.c-618-
./nginx/src/http/modules/ngx_http_autoindex_module.c-619-        ctx->size += ctx->buf->last - ctx->buf->pos;
./nginx/src/http/modules/ngx_http_autoindex_module.c-620-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-621-
./nginx/src/http/modules/ngx_http_autoindex_module.c:622:    ctx->buf = ngx_create_temp_buf(ctx->pool, ctx->alloc_size);
./nginx/src/http/modules/ngx_http_autoindex_module.c-623-    if (ctx->buf == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-624-        return NULL;
./nginx/src/http/modules/ngx_http_autoindex_module.c-625-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-626-
./nginx/src/http/modules/ngx_http_autoindex_module.c:627:    cl = ngx_alloc_chain_link(ctx->pool);
./nginx/src/http/modules/ngx_http_autoindex_module.c-628-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-629-        return NULL;
./nginx/src/http/modules/ngx_http_autoindex_module.c-630-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-631-
./nginx/src/http/modules/ngx_http_autoindex_module.c-632-    cl->buf = ctx->buf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-633-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_autoindex_module.c-634-
./nginx/src/http/modules/ngx_http_autoindex_module.c-635-    *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_autoindex_module.c-636-    ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_autoindex_module.c-637-
--
./nginx/src/http/modules/ngx_http_autoindex_module.c-651-
./nginx/src/http/modules/ngx_http_autoindex_module.c-652-    return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_autoindex_module.c-653-}
./nginx/src/http/modules/ngx_http_autoindex_module.c-654-
./nginx/src/http/modules/ngx_http_autoindex_module.c-655-
./nginx/src/http/modules/ngx_http_autoindex_module.c-656-static void *
./nginx/src/http/modules/ngx_http_autoindex_module.c-657-ngx_http_autoindex_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_autoindex_module.c-658-{
./nginx/src/http/modules/ngx_http_autoindex_module.c-659-    ngx_http_autoindex_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-660-
./nginx/src/http/modules/ngx_http_autoindex_module.c:661:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_autoindex_loc_conf_t));
./nginx/src/http/modules/ngx_http_autoindex_module.c-662-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_autoindex_module.c-663-        return NULL;
./nginx/src/http/modules/ngx_http_autoindex_module.c-664-    }
./nginx/src/http/modules/ngx_http_autoindex_module.c-665-
./nginx/src/http/modules/ngx_http_autoindex_module.c-666-    conf->enable = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_autoindex_module.c-667-    conf->localtime = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_autoindex_module.c-668-    conf->exact_size = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_autoindex_module.c-669-
./nginx/src/http/modules/ngx_http_autoindex_module.c-670-    return conf;
./nginx/src/http/modules/ngx_http_autoindex_module.c-671-}
--
./nginx/src/http/modules/ngx_http_ssl_module.c-4- * Copyright (C) Nginx, Inc.
./nginx/src/http/modules/ngx_http_ssl_module.c-5- */
./nginx/src/http/modules/ngx_http_ssl_module.c-6-
./nginx/src/http/modules/ngx_http_ssl_module.c-7-
./nginx/src/http/modules/ngx_http_ssl_module.c-8-#include <ngx_config.h>
./nginx/src/http/modules/ngx_http_ssl_module.c-9-#include <ngx_core.h>
./nginx/src/http/modules/ngx_http_ssl_module.c-10-#include <ngx_http.h>
./nginx/src/http/modules/ngx_http_ssl_module.c-11-
./nginx/src/http/modules/ngx_http_ssl_module.c-12-
./nginx/src/http/modules/ngx_http_ssl_module.c-13-typedef ngx_int_t (*ngx_ssl_variable_handler_pt)(ngx_connection_t *c,
./nginx/src/http/modules/ngx_http_ssl_module.c:14:    ngx_pool_t *pool, ngx_str_t *s);
./nginx/src/http/modules/ngx_http_ssl_module.c-15-
./nginx/src/http/modules/ngx_http_ssl_module.c-16-
./nginx/src/http/modules/ngx_http_ssl_module.c-17-#define NGX_DEFAULT_CIPHERS     "HIGH:!aNULL:!MD5"
./nginx/src/http/modules/ngx_http_ssl_module.c-18-#define NGX_DEFAULT_ECDH_CURVE  "prime256v1"
./nginx/src/http/modules/ngx_http_ssl_module.c-19-
./nginx/src/http/modules/ngx_http_ssl_module.c-20-
./nginx/src/http/modules/ngx_http_ssl_module.c-21-static ngx_int_t ngx_http_ssl_static_variable(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_ssl_module.c-22-    ngx_http_variable_value_t *v, uintptr_t data);
./nginx/src/http/modules/ngx_http_ssl_module.c-23-static ngx_int_t ngx_http_ssl_variable(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_ssl_module.c-24-    ngx_http_variable_value_t *v, uintptr_t data);
--
./nginx/src/http/modules/ngx_http_ssl_module.c-267-static ngx_int_t
./nginx/src/http/modules/ngx_http_ssl_module.c-268-ngx_http_ssl_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
./nginx/src/http/modules/ngx_http_ssl_module.c-269-    uintptr_t data)
./nginx/src/http/modules/ngx_http_ssl_module.c-270-{
./nginx/src/http/modules/ngx_http_ssl_module.c-271-    ngx_ssl_variable_handler_pt  handler = (ngx_ssl_variable_handler_pt) data;
./nginx/src/http/modules/ngx_http_ssl_module.c-272-
./nginx/src/http/modules/ngx_http_ssl_module.c-273-    ngx_str_t  s;
./nginx/src/http/modules/ngx_http_ssl_module.c-274-
./nginx/src/http/modules/ngx_http_ssl_module.c-275-    if (r->connection->ssl) {
./nginx/src/http/modules/ngx_http_ssl_module.c-276-
./nginx/src/http/modules/ngx_http_ssl_module.c:277:        if (handler(r->connection, r->pool, &s) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssl_module.c-278-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssl_module.c-279-        }
./nginx/src/http/modules/ngx_http_ssl_module.c-280-
./nginx/src/http/modules/ngx_http_ssl_module.c-281-        v->len = s.len;
./nginx/src/http/modules/ngx_http_ssl_module.c-282-        v->data = s.data;
./nginx/src/http/modules/ngx_http_ssl_module.c-283-
./nginx/src/http/modules/ngx_http_ssl_module.c-284-        if (v->len) {
./nginx/src/http/modules/ngx_http_ssl_module.c-285-            v->valid = 1;
./nginx/src/http/modules/ngx_http_ssl_module.c-286-            v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_ssl_module.c-287-            v->not_found = 0;
--
./nginx/src/http/modules/ngx_http_ssl_module.c-313-
./nginx/src/http/modules/ngx_http_ssl_module.c-314-    return NGX_OK;
./nginx/src/http/modules/ngx_http_ssl_module.c-315-}
./nginx/src/http/modules/ngx_http_ssl_module.c-316-
./nginx/src/http/modules/ngx_http_ssl_module.c-317-
./nginx/src/http/modules/ngx_http_ssl_module.c-318-static void *
./nginx/src/http/modules/ngx_http_ssl_module.c-319-ngx_http_ssl_create_srv_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_ssl_module.c-320-{
./nginx/src/http/modules/ngx_http_ssl_module.c-321-    ngx_http_ssl_srv_conf_t  *sscf;
./nginx/src/http/modules/ngx_http_ssl_module.c-322-
./nginx/src/http/modules/ngx_http_ssl_module.c:323:    sscf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssl_srv_conf_t));
./nginx/src/http/modules/ngx_http_ssl_module.c-324-    if (sscf == NULL) {
./nginx/src/http/modules/ngx_http_ssl_module.c-325-        return NULL;
./nginx/src/http/modules/ngx_http_ssl_module.c-326-    }
./nginx/src/http/modules/ngx_http_ssl_module.c-327-
./nginx/src/http/modules/ngx_http_ssl_module.c-328-    /*
./nginx/src/http/modules/ngx_http_ssl_module.c-329-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_ssl_module.c-330-     *
./nginx/src/http/modules/ngx_http_ssl_module.c-331-     *     sscf->protocols = 0;
./nginx/src/http/modules/ngx_http_ssl_module.c-332-     *     sscf->certificate = { 0, NULL };
./nginx/src/http/modules/ngx_http_ssl_module.c-333-     *     sscf->certificate_key = { 0, NULL };
--
./nginx/src/http/modules/ngx_http_ssl_module.c-443-        == 0)
./nginx/src/http/modules/ngx_http_ssl_module.c-444-    {
./nginx/src/http/modules/ngx_http_ssl_module.c-445-        ngx_log_error(NGX_LOG_WARN, cf->log, 0,
./nginx/src/http/modules/ngx_http_ssl_module.c-446-            "nginx was built with SNI support, however, now it is linked "
./nginx/src/http/modules/ngx_http_ssl_module.c-447-            "dynamically to an OpenSSL library which has no tlsext support, "
./nginx/src/http/modules/ngx_http_ssl_module.c-448-            "therefore SNI is not available");
./nginx/src/http/modules/ngx_http_ssl_module.c-449-    }
./nginx/src/http/modules/ngx_http_ssl_module.c-450-
./nginx/src/http/modules/ngx_http_ssl_module.c-451-#endif
./nginx/src/http/modules/ngx_http_ssl_module.c-452-
./nginx/src/http/modules/ngx_http_ssl_module.c:453:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/ngx_http_ssl_module.c-454-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_ssl_module.c-455-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_ssl_module.c-456-    }
./nginx/src/http/modules/ngx_http_ssl_module.c-457-
./nginx/src/http/modules/ngx_http_ssl_module.c-458-    cln->handler = ngx_ssl_cleanup_ctx;
./nginx/src/http/modules/ngx_http_ssl_module.c-459-    cln->data = &conf->ssl;
./nginx/src/http/modules/ngx_http_ssl_module.c-460-
./nginx/src/http/modules/ngx_http_ssl_module.c-461-    if (ngx_ssl_certificate(cf, &conf->ssl, &conf->certificate,
./nginx/src/http/modules/ngx_http_ssl_module.c-462-                            &conf->certificate_key, 
./nginx/src/http/modules/ngx_http_ssl_module.c-463-                            &conf->certificate_key_password)
--
./nginx/src/http/modules/ngx_http_access_module.c-277-        }
./nginx/src/http/modules/ngx_http_access_module.c-278-    }
./nginx/src/http/modules/ngx_http_access_module.c-279-
./nginx/src/http/modules/ngx_http_access_module.c-280-    switch (cidr.family) {
./nginx/src/http/modules/ngx_http_access_module.c-281-
./nginx/src/http/modules/ngx_http_access_module.c-282-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_access_module.c-283-    case AF_INET6:
./nginx/src/http/modules/ngx_http_access_module.c-284-    case 0: /* all */
./nginx/src/http/modules/ngx_http_access_module.c-285-
./nginx/src/http/modules/ngx_http_access_module.c-286-        if (alcf->rules6 == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c:287:            alcf->rules6 = ngx_array_create(cf->pool, 4,
./nginx/src/http/modules/ngx_http_access_module.c-288-                                            sizeof(ngx_http_access_rule6_t));
./nginx/src/http/modules/ngx_http_access_module.c-289-            if (alcf->rules6 == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c-290-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_access_module.c-291-            }
./nginx/src/http/modules/ngx_http_access_module.c-292-        }
./nginx/src/http/modules/ngx_http_access_module.c-293-
./nginx/src/http/modules/ngx_http_access_module.c-294-        rule6 = ngx_array_push(alcf->rules6);
./nginx/src/http/modules/ngx_http_access_module.c-295-        if (rule6 == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c-296-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_access_module.c-297-        }
--
./nginx/src/http/modules/ngx_http_access_module.c-303-        if (!all) {
./nginx/src/http/modules/ngx_http_access_module.c-304-            break;
./nginx/src/http/modules/ngx_http_access_module.c-305-        }
./nginx/src/http/modules/ngx_http_access_module.c-306-
./nginx/src/http/modules/ngx_http_access_module.c-307-        /* "all" passes through */
./nginx/src/http/modules/ngx_http_access_module.c-308-#endif
./nginx/src/http/modules/ngx_http_access_module.c-309-
./nginx/src/http/modules/ngx_http_access_module.c-310-    default: /* AF_INET */
./nginx/src/http/modules/ngx_http_access_module.c-311-
./nginx/src/http/modules/ngx_http_access_module.c-312-        if (alcf->rules == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c:313:            alcf->rules = ngx_array_create(cf->pool, 4,
./nginx/src/http/modules/ngx_http_access_module.c-314-                                           sizeof(ngx_http_access_rule_t));
./nginx/src/http/modules/ngx_http_access_module.c-315-            if (alcf->rules == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c-316-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_access_module.c-317-            }
./nginx/src/http/modules/ngx_http_access_module.c-318-        }
./nginx/src/http/modules/ngx_http_access_module.c-319-
./nginx/src/http/modules/ngx_http_access_module.c-320-        rule = ngx_array_push(alcf->rules);
./nginx/src/http/modules/ngx_http_access_module.c-321-        if (rule == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c-322-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_access_module.c-323-        }
--
./nginx/src/http/modules/ngx_http_access_module.c-329-
./nginx/src/http/modules/ngx_http_access_module.c-330-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_access_module.c-331-}
./nginx/src/http/modules/ngx_http_access_module.c-332-
./nginx/src/http/modules/ngx_http_access_module.c-333-
./nginx/src/http/modules/ngx_http_access_module.c-334-static void *
./nginx/src/http/modules/ngx_http_access_module.c-335-ngx_http_access_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_access_module.c-336-{
./nginx/src/http/modules/ngx_http_access_module.c-337-    ngx_http_access_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_access_module.c-338-
./nginx/src/http/modules/ngx_http_access_module.c:339:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_access_loc_conf_t));
./nginx/src/http/modules/ngx_http_access_module.c-340-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_access_module.c-341-        return NULL;
./nginx/src/http/modules/ngx_http_access_module.c-342-    }
./nginx/src/http/modules/ngx_http_access_module.c-343-
./nginx/src/http/modules/ngx_http_access_module.c-344-    return conf;
./nginx/src/http/modules/ngx_http_access_module.c-345-}
./nginx/src/http/modules/ngx_http_access_module.c-346-
./nginx/src/http/modules/ngx_http_access_module.c-347-
./nginx/src/http/modules/ngx_http_access_module.c-348-static char *
./nginx/src/http/modules/ngx_http_access_module.c-349-ngx_http_access_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
--
./nginx/src/http/modules/ngx_http_proxy_module.c-632-{
./nginx/src/http/modules/ngx_http_proxy_module.c-633-    ngx_int_t                   rc;
./nginx/src/http/modules/ngx_http_proxy_module.c-634-    ngx_http_upstream_t        *u;
./nginx/src/http/modules/ngx_http_proxy_module.c-635-    ngx_http_proxy_ctx_t       *ctx;
./nginx/src/http/modules/ngx_http_proxy_module.c-636-    ngx_http_proxy_loc_conf_t  *plcf;
./nginx/src/http/modules/ngx_http_proxy_module.c-637-
./nginx/src/http/modules/ngx_http_proxy_module.c-638-    if (ngx_http_upstream_create(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_proxy_module.c-639-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-640-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-641-
./nginx/src/http/modules/ngx_http_proxy_module.c:642:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_proxy_ctx_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-643-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-644-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-645-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-646-
./nginx/src/http/modules/ngx_http_proxy_module.c-647-    ngx_http_set_ctx(r, ctx, ngx_http_proxy_module);
./nginx/src/http/modules/ngx_http_proxy_module.c-648-
./nginx/src/http/modules/ngx_http_proxy_module.c-649-    plcf = ngx_http_get_module_loc_conf(r, ngx_http_proxy_module);
./nginx/src/http/modules/ngx_http_proxy_module.c-650-
./nginx/src/http/modules/ngx_http_proxy_module.c-651-    u = r->upstream;
./nginx/src/http/modules/ngx_http_proxy_module.c-652-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-680-    if (plcf->redirects) {
./nginx/src/http/modules/ngx_http_proxy_module.c-681-        u->rewrite_redirect = ngx_http_proxy_rewrite_redirect;
./nginx/src/http/modules/ngx_http_proxy_module.c-682-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-683-
./nginx/src/http/modules/ngx_http_proxy_module.c-684-    if (plcf->cookie_domains || plcf->cookie_paths) {
./nginx/src/http/modules/ngx_http_proxy_module.c-685-        u->rewrite_cookie = ngx_http_proxy_rewrite_cookie;
./nginx/src/http/modules/ngx_http_proxy_module.c-686-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-687-
./nginx/src/http/modules/ngx_http_proxy_module.c-688-    u->buffering = plcf->upstream.buffering;
./nginx/src/http/modules/ngx_http_proxy_module.c-689-
./nginx/src/http/modules/ngx_http_proxy_module.c:690:    u->pipe = ngx_pcalloc(r->pool, sizeof(ngx_event_pipe_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-691-    if (u->pipe == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-692-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-693-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-694-
./nginx/src/http/modules/ngx_http_proxy_module.c-695-    u->pipe->input_filter = ngx_http_proxy_copy_filter;
./nginx/src/http/modules/ngx_http_proxy_module.c-696-    u->pipe->input_ctx = r;
./nginx/src/http/modules/ngx_http_proxy_module.c-697-
./nginx/src/http/modules/ngx_http_proxy_module.c-698-    u->input_filter_init = ngx_http_proxy_input_filter_init;
./nginx/src/http/modules/ngx_http_proxy_module.c-699-    u->input_filter = ngx_http_proxy_non_buffered_copy_filter;
./nginx/src/http/modules/ngx_http_proxy_module.c-700-    u->input_filter_ctx = r;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-758-    u->schema.data = proxy.data;
./nginx/src/http/modules/ngx_http_proxy_module.c-759-
./nginx/src/http/modules/ngx_http_proxy_module.c-760-    ngx_memzero(&url, sizeof(ngx_url_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-761-
./nginx/src/http/modules/ngx_http_proxy_module.c-762-    url.url.len = proxy.len - add;
./nginx/src/http/modules/ngx_http_proxy_module.c-763-    url.url.data = proxy.data + add;
./nginx/src/http/modules/ngx_http_proxy_module.c-764-    url.default_port = port;
./nginx/src/http/modules/ngx_http_proxy_module.c-765-    url.uri_part = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-766-    url.no_resolve = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-767-
./nginx/src/http/modules/ngx_http_proxy_module.c:768:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/src/http/modules/ngx_http_proxy_module.c-769-        if (url.err) {
./nginx/src/http/modules/ngx_http_proxy_module.c-770-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-771-                          "%s in upstream \"%V\"", url.err, &url.url);
./nginx/src/http/modules/ngx_http_proxy_module.c-772-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-773-
./nginx/src/http/modules/ngx_http_proxy_module.c-774-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-775-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-776-
./nginx/src/http/modules/ngx_http_proxy_module.c-777-    if (url.uri.len) {
./nginx/src/http/modules/ngx_http_proxy_module.c-778-        if (url.uri.data[0] == '?') {
./nginx/src/http/modules/ngx_http_proxy_module.c:779:            p = ngx_pnalloc(r->pool, url.uri.len + 1);
./nginx/src/http/modules/ngx_http_proxy_module.c-780-            if (p == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-781-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-782-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-783-
./nginx/src/http/modules/ngx_http_proxy_module.c-784-            *p++ = '/';
./nginx/src/http/modules/ngx_http_proxy_module.c-785-            ngx_memcpy(p, url.uri.data, url.uri.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-786-
./nginx/src/http/modules/ngx_http_proxy_module.c-787-            url.uri.len++;
./nginx/src/http/modules/ngx_http_proxy_module.c-788-            url.uri.data = p - 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-789-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-790-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-791-
./nginx/src/http/modules/ngx_http_proxy_module.c-792-    ctx->vars.key_start = u->schema;
./nginx/src/http/modules/ngx_http_proxy_module.c-793-
./nginx/src/http/modules/ngx_http_proxy_module.c-794-    ngx_http_proxy_set_vars(&url, &ctx->vars);
./nginx/src/http/modules/ngx_http_proxy_module.c-795-
./nginx/src/http/modules/ngx_http_proxy_module.c:796:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-797-    if (u->resolved == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-798-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-799-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-800-
./nginx/src/http/modules/ngx_http_proxy_module.c-801-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/src/http/modules/ngx_http_proxy_module.c-802-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/src/http/modules/ngx_http_proxy_module.c-803-        u->resolved->socklen = url.addrs[0].socklen;
./nginx/src/http/modules/ngx_http_proxy_module.c-804-        u->resolved->naddrs = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-805-        u->resolved->host = url.addrs[0].name;
./nginx/src/http/modules/ngx_http_proxy_module.c-806-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-911-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-912-
./nginx/src/http/modules/ngx_http_proxy_module.c-913-    ngx_str_set(&r->headers_out.content_type, "text/plain");
./nginx/src/http/modules/ngx_http_proxy_module.c-914-
./nginx/src/http/modules/ngx_http_proxy_module.c-915-    //size0 = sizeof("Server Name:  \n") + sizeof("Cache Contens: \n") + 6;
./nginx/src/http/modules/ngx_http_proxy_module.c-916-
./nginx/src/http/modules/ngx_http_proxy_module.c-917-    size1 = NGX_HTTP_CACHE_KEY_LEN - sizeof(ngx_rbtree_key_t);
./nginx/src/http/modules/ngx_http_proxy_module.c-918-    size1 += /*sizeof("\tHit:\n") +*/ 4;
./nginx/src/http/modules/ngx_http_proxy_module.c-919-    size = /*size0 +*/ 255 + num * size1;
./nginx/src/http/modules/ngx_http_proxy_module.c-920-
./nginx/src/http/modules/ngx_http_proxy_module.c:921:    b = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/modules/ngx_http_proxy_module.c-922-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-923-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-924-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-925-
./nginx/src/http/modules/ngx_http_proxy_module.c-926-    out.buf = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-927-    out.next = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-928-
./nginx/src/http/modules/ngx_http_proxy_module.c-929-    ngx_http_file_cache_fill_cache_content(cache, b, 10);
./nginx/src/http/modules/ngx_http_proxy_module.c-930-
./nginx/src/http/modules/ngx_http_proxy_module.c-931-    r->headers_out.status = NGX_HTTP_OK;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-999-    if (r->quoted_uri || r->internal) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1000-        escape = 2 * ngx_escape_uri(NULL, r->uri.data + loc_len,
./nginx/src/http/modules/ngx_http_proxy_module.c-1001-                                    r->uri.len - loc_len, NGX_ESCAPE_URI);
./nginx/src/http/modules/ngx_http_proxy_module.c-1002-    } else {
./nginx/src/http/modules/ngx_http_proxy_module.c-1003-        escape = 0;
./nginx/src/http/modules/ngx_http_proxy_module.c-1004-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1005-
./nginx/src/http/modules/ngx_http_proxy_module.c-1006-    len = ctx->vars.uri.len + r->uri.len - loc_len + escape
./nginx/src/http/modules/ngx_http_proxy_module.c-1007-          + sizeof("?") - 1 + r->args.len;
./nginx/src/http/modules/ngx_http_proxy_module.c-1008-
./nginx/src/http/modules/ngx_http_proxy_module.c:1009:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1010-    if (p == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1011-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1012-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1013-
./nginx/src/http/modules/ngx_http_proxy_module.c-1014-    key->data = p;
./nginx/src/http/modules/ngx_http_proxy_module.c-1015-
./nginx/src/http/modules/ngx_http_proxy_module.c-1016-    if (r->valid_location) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1017-        p = ngx_copy(p, ctx->vars.uri.data, ctx->vars.uri.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1018-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1019-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-1169-            {
./nginx/src/http/modules/ngx_http_proxy_module.c-1170-                continue;
./nginx/src/http/modules/ngx_http_proxy_module.c-1171-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-1172-
./nginx/src/http/modules/ngx_http_proxy_module.c-1173-            len += header[i].key.len + sizeof(": ") - 1
./nginx/src/http/modules/ngx_http_proxy_module.c-1174-                + header[i].value.len + sizeof(CRLF) - 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-1175-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-1176-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1177-
./nginx/src/http/modules/ngx_http_proxy_module.c-1178-
./nginx/src/http/modules/ngx_http_proxy_module.c:1179:    b = ngx_create_temp_buf(r->pool, len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1180-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1181-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1182-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1183-
./nginx/src/http/modules/ngx_http_proxy_module.c:1184:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-1185-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1186-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1187-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1188-
./nginx/src/http/modules/ngx_http_proxy_module.c-1189-    cl->buf = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-1190-
./nginx/src/http/modules/ngx_http_proxy_module.c-1191-
./nginx/src/http/modules/ngx_http_proxy_module.c-1192-    /* the request line */
./nginx/src/http/modules/ngx_http_proxy_module.c-1193-
./nginx/src/http/modules/ngx_http_proxy_module.c-1194-    b->last = ngx_copy(b->last, method.data, method.len);
--
./nginx/src/http/modules/ngx_http_proxy_module.c-1328-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-1329-                   "http proxy header:\n\"%*s\"",
./nginx/src/http/modules/ngx_http_proxy_module.c-1330-                   (size_t) (b->last - b->pos), b->pos);
./nginx/src/http/modules/ngx_http_proxy_module.c-1331-
./nginx/src/http/modules/ngx_http_proxy_module.c-1332-    if (plcf->body_set == NULL && plcf->upstream.pass_request_body) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1333-
./nginx/src/http/modules/ngx_http_proxy_module.c-1334-        body = u->request_bufs;
./nginx/src/http/modules/ngx_http_proxy_module.c-1335-        u->request_bufs = cl;
./nginx/src/http/modules/ngx_http_proxy_module.c-1336-
./nginx/src/http/modules/ngx_http_proxy_module.c-1337-        while (body) {
./nginx/src/http/modules/ngx_http_proxy_module.c:1338:            b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-1339-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1340-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1341-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-1342-
./nginx/src/http/modules/ngx_http_proxy_module.c-1343-            ngx_memcpy(b, body->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-1344-
./nginx/src/http/modules/ngx_http_proxy_module.c:1345:            cl->next = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-1346-            if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1347-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1348-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-1349-
./nginx/src/http/modules/ngx_http_proxy_module.c-1350-            cl = cl->next;
./nginx/src/http/modules/ngx_http_proxy_module.c-1351-            cl->buf = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-1352-
./nginx/src/http/modules/ngx_http_proxy_module.c-1353-            body = body->next;
./nginx/src/http/modules/ngx_http_proxy_module.c-1354-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-1355-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-1446-    u->headers_in.status_n = ctx->status.code;
./nginx/src/http/modules/ngx_http_proxy_module.c-1447-
./nginx/src/http/modules/ngx_http_proxy_module.c-1448-    len = ctx->status.end - ctx->status.start;
./nginx/src/http/modules/ngx_http_proxy_module.c-1449-    u->headers_in.status_line.len = len;
./nginx/src/http/modules/ngx_http_proxy_module.c-1450-
./nginx/src/http/modules/ngx_http_proxy_module.c-1451-#if NGX_HTTP_FLOW_LIMIT
./nginx/src/http/modules/ngx_http_proxy_module.c-1452-    /* status line */
./nginx/src/http/modules/ngx_http_proxy_module.c-1453-    ngx_http_upstream_flow_out_rserver_limit(r, 17);
./nginx/src/http/modules/ngx_http_proxy_module.c-1454-#endif
./nginx/src/http/modules/ngx_http_proxy_module.c-1455-
./nginx/src/http/modules/ngx_http_proxy_module.c:1456:    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1457-    if (u->headers_in.status_line.data == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1458-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1459-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1460-
./nginx/src/http/modules/ngx_http_proxy_module.c-1461-    ngx_memcpy(u->headers_in.status_line.data, ctx->status.start, len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1462-
./nginx/src/http/modules/ngx_http_proxy_module.c-1463-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-1464-                   "http proxy status %ui \"%V\"",
./nginx/src/http/modules/ngx_http_proxy_module.c-1465-                   u->headers_in.status_n, &u->headers_in.status_line);
./nginx/src/http/modules/ngx_http_proxy_module.c-1466-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-1502-            h = ngx_list_push(&r->upstream->headers_in.headers);
./nginx/src/http/modules/ngx_http_proxy_module.c-1503-            if (h == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1504-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1505-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-1506-
./nginx/src/http/modules/ngx_http_proxy_module.c-1507-            h->hash = r->header_hash;
./nginx/src/http/modules/ngx_http_proxy_module.c-1508-
./nginx/src/http/modules/ngx_http_proxy_module.c-1509-            h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/modules/ngx_http_proxy_module.c-1510-            h->value.len = r->header_end - r->header_start;
./nginx/src/http/modules/ngx_http_proxy_module.c-1511-
./nginx/src/http/modules/ngx_http_proxy_module.c:1512:            h->key.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_proxy_module.c-1513-                               h->key.len + 1 + h->value.len + 1 + h->key.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1514-            if (h->key.data == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1515-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1516-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-1517-
./nginx/src/http/modules/ngx_http_proxy_module.c-1518-            h->value.data = h->key.data + h->key.len + 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-1519-            h->lowcase_key = h->key.data + h->key.len + 1 + h->value.len + 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-1520-
./nginx/src/http/modules/ngx_http_proxy_module.c-1521-            ngx_memcpy(h->key.data, r->header_name_start, h->key.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-1522-            h->key.data[h->key.len] = '\0';
--
./nginx/src/http/modules/ngx_http_proxy_module.c-1697-    ngx_http_request_t  *r;
./nginx/src/http/modules/ngx_http_proxy_module.c-1698-
./nginx/src/http/modules/ngx_http_proxy_module.c-1699-    if (buf->pos == buf->last) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1700-        return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-1701-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1702-
./nginx/src/http/modules/ngx_http_proxy_module.c-1703-    if (p->free) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1704-        cl = p->free;
./nginx/src/http/modules/ngx_http_proxy_module.c-1705-        b = cl->buf;
./nginx/src/http/modules/ngx_http_proxy_module.c-1706-        p->free = cl->next;
./nginx/src/http/modules/ngx_http_proxy_module.c:1707:        ngx_free_chain(p->pool, cl);
./nginx/src/http/modules/ngx_http_proxy_module.c-1708-
./nginx/src/http/modules/ngx_http_proxy_module.c-1709-    } else {
./nginx/src/http/modules/ngx_http_proxy_module.c:1710:        b = ngx_alloc_buf(p->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-1711-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1712-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1713-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-1714-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1715-
./nginx/src/http/modules/ngx_http_proxy_module.c-1716-    ngx_memcpy(b, buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-1717-    b->shadow = buf;
./nginx/src/http/modules/ngx_http_proxy_module.c-1718-    b->tag = p->tag;
./nginx/src/http/modules/ngx_http_proxy_module.c-1719-    b->last_shadow = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-1720-    b->recycled = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-1721-    buf->shadow = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-1722-
./nginx/src/http/modules/ngx_http_proxy_module.c:1723:    cl = ngx_alloc_chain_link(p->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-1724-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-1725-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-1726-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-1727-
./nginx/src/http/modules/ngx_http_proxy_module.c-1728-    cl->buf = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-1729-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-1730-
./nginx/src/http/modules/ngx_http_proxy_module.c-1731-    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0, "input buf #%d", b->num);
./nginx/src/http/modules/ngx_http_proxy_module.c-1732-
./nginx/src/http/modules/ngx_http_proxy_module.c-1733-    if (p->in) {
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2054-        rc = ngx_http_proxy_parse_chunked(r, buf);
./nginx/src/http/modules/ngx_http_proxy_module.c-2055-
./nginx/src/http/modules/ngx_http_proxy_module.c-2056-        if (rc == NGX_OK) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2057-
./nginx/src/http/modules/ngx_http_proxy_module.c-2058-            /* a chunk has been parsed successfully */
./nginx/src/http/modules/ngx_http_proxy_module.c-2059-
./nginx/src/http/modules/ngx_http_proxy_module.c-2060-            if (p->free) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2061-                cl = p->free;
./nginx/src/http/modules/ngx_http_proxy_module.c-2062-                b = cl->buf;
./nginx/src/http/modules/ngx_http_proxy_module.c-2063-                p->free = cl->next;
./nginx/src/http/modules/ngx_http_proxy_module.c:2064:                ngx_free_chain(p->pool, cl);
./nginx/src/http/modules/ngx_http_proxy_module.c-2065-
./nginx/src/http/modules/ngx_http_proxy_module.c-2066-            } else {
./nginx/src/http/modules/ngx_http_proxy_module.c:2067:                b = ngx_alloc_buf(p->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-2068-                if (b == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2069-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2070-                }
./nginx/src/http/modules/ngx_http_proxy_module.c-2071-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-2072-
./nginx/src/http/modules/ngx_http_proxy_module.c-2073-            ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-2074-
./nginx/src/http/modules/ngx_http_proxy_module.c-2075-            b->pos = buf->pos;
./nginx/src/http/modules/ngx_http_proxy_module.c-2076-            b->start = buf->start;
./nginx/src/http/modules/ngx_http_proxy_module.c-2077-            b->end = buf->end;
./nginx/src/http/modules/ngx_http_proxy_module.c-2078-            b->tag = p->tag;
./nginx/src/http/modules/ngx_http_proxy_module.c-2079-            b->temporary = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2080-            b->recycled = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2081-
./nginx/src/http/modules/ngx_http_proxy_module.c-2082-            *prev = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-2083-            prev = &b->shadow;
./nginx/src/http/modules/ngx_http_proxy_module.c-2084-
./nginx/src/http/modules/ngx_http_proxy_module.c:2085:            cl = ngx_alloc_chain_link(p->pool);
./nginx/src/http/modules/ngx_http_proxy_module.c-2086-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2087-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2088-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-2089-
./nginx/src/http/modules/ngx_http_proxy_module.c-2090-            cl->buf = b;
./nginx/src/http/modules/ngx_http_proxy_module.c-2091-            cl->next = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-2092-
./nginx/src/http/modules/ngx_http_proxy_module.c-2093-            if (p->in) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2094-                *p->last_in = cl;
./nginx/src/http/modules/ngx_http_proxy_module.c-2095-            } else {
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2180-    ngx_buf_t            *b;
./nginx/src/http/modules/ngx_http_proxy_module.c-2181-    ngx_chain_t          *cl, **ll;
./nginx/src/http/modules/ngx_http_proxy_module.c-2182-    ngx_http_upstream_t  *u;
./nginx/src/http/modules/ngx_http_proxy_module.c-2183-
./nginx/src/http/modules/ngx_http_proxy_module.c-2184-    u = r->upstream;
./nginx/src/http/modules/ngx_http_proxy_module.c-2185-
./nginx/src/http/modules/ngx_http_proxy_module.c-2186-    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2187-        ll = &cl->next;
./nginx/src/http/modules/ngx_http_proxy_module.c-2188-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2189-
./nginx/src/http/modules/ngx_http_proxy_module.c:2190:    cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
./nginx/src/http/modules/ngx_http_proxy_module.c-2191-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2192-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2193-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2194-
./nginx/src/http/modules/ngx_http_proxy_module.c-2195-    *ll = cl;
./nginx/src/http/modules/ngx_http_proxy_module.c-2196-
./nginx/src/http/modules/ngx_http_proxy_module.c-2197-    cl->buf->flush = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2198-    cl->buf->memory = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2199-
./nginx/src/http/modules/ngx_http_proxy_module.c-2200-    b = &u->buffer;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2246-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2247-
./nginx/src/http/modules/ngx_http_proxy_module.c-2248-    for ( ;; ) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2249-
./nginx/src/http/modules/ngx_http_proxy_module.c-2250-        rc = ngx_http_proxy_parse_chunked(r, buf);
./nginx/src/http/modules/ngx_http_proxy_module.c-2251-
./nginx/src/http/modules/ngx_http_proxy_module.c-2252-        if (rc == NGX_OK) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2253-
./nginx/src/http/modules/ngx_http_proxy_module.c-2254-            /* a chunk has been parsed successfully */
./nginx/src/http/modules/ngx_http_proxy_module.c-2255-
./nginx/src/http/modules/ngx_http_proxy_module.c:2256:            cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
./nginx/src/http/modules/ngx_http_proxy_module.c-2257-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2258-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2259-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-2260-
./nginx/src/http/modules/ngx_http_proxy_module.c-2261-            *ll = cl;
./nginx/src/http/modules/ngx_http_proxy_module.c-2262-            ll = &cl->next;
./nginx/src/http/modules/ngx_http_proxy_module.c-2263-
./nginx/src/http/modules/ngx_http_proxy_module.c-2264-            b = cl->buf;
./nginx/src/http/modules/ngx_http_proxy_module.c-2265-
./nginx/src/http/modules/ngx_http_proxy_module.c-2266-            b->flush = 1;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2421-
./nginx/src/http/modules/ngx_http_proxy_module.c-2422-    if (r->headers_in.x_forwarded_for == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2423-        v->len = r->connection->addr_text.len;
./nginx/src/http/modules/ngx_http_proxy_module.c-2424-        v->data = r->connection->addr_text.data;
./nginx/src/http/modules/ngx_http_proxy_module.c-2425-        return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-2426-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2427-
./nginx/src/http/modules/ngx_http_proxy_module.c-2428-    v->len = r->headers_in.x_forwarded_for->value.len
./nginx/src/http/modules/ngx_http_proxy_module.c-2429-             + sizeof(", ") - 1 + r->connection->addr_text.len;
./nginx/src/http/modules/ngx_http_proxy_module.c-2430-
./nginx/src/http/modules/ngx_http_proxy_module.c:2431:    p = ngx_pnalloc(r->pool, v->len);
./nginx/src/http/modules/ngx_http_proxy_module.c-2432-    if (p == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2433-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2434-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2435-
./nginx/src/http/modules/ngx_http_proxy_module.c-2436-    v->data = p;
./nginx/src/http/modules/ngx_http_proxy_module.c-2437-
./nginx/src/http/modules/ngx_http_proxy_module.c-2438-    p = ngx_copy(p, r->headers_in.x_forwarded_for->value.data,
./nginx/src/http/modules/ngx_http_proxy_module.c-2439-                 r->headers_in.x_forwarded_for->value.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-2440-
./nginx/src/http/modules/ngx_http_proxy_module.c-2441-    *p++ = ','; *p++ = ' ';
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2456-
./nginx/src/http/modules/ngx_http_proxy_module.c-2457-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2458-        v->not_found = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2459-        return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-2460-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2461-
./nginx/src/http/modules/ngx_http_proxy_module.c-2462-    v->valid = 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-2463-    v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_proxy_module.c-2464-    v->not_found = 0;
./nginx/src/http/modules/ngx_http_proxy_module.c-2465-
./nginx/src/http/modules/ngx_http_proxy_module.c:2466:    v->data = ngx_pnalloc(r->connection->pool, NGX_SIZE_T_LEN);
./nginx/src/http/modules/ngx_http_proxy_module.c-2467-
./nginx/src/http/modules/ngx_http_proxy_module.c-2468-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2469-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2470-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2471-
./nginx/src/http/modules/ngx_http_proxy_module.c-2472-    v->len = ngx_sprintf(v->data, "%uz", ctx->internal_body_length) - v->data;
./nginx/src/http/modules/ngx_http_proxy_module.c-2473-
./nginx/src/http/modules/ngx_http_proxy_module.c-2474-    return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-2475-}
./nginx/src/http/modules/ngx_http_proxy_module.c-2476-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2682-ngx_http_proxy_rewrite(ngx_http_request_t *r, ngx_table_elt_t *h, size_t prefix,
./nginx/src/http/modules/ngx_http_proxy_module.c-2683-    size_t len, ngx_str_t *replacement)
./nginx/src/http/modules/ngx_http_proxy_module.c-2684-{
./nginx/src/http/modules/ngx_http_proxy_module.c-2685-    u_char  *p, *data;
./nginx/src/http/modules/ngx_http_proxy_module.c-2686-    size_t   new_len;
./nginx/src/http/modules/ngx_http_proxy_module.c-2687-
./nginx/src/http/modules/ngx_http_proxy_module.c-2688-    new_len = replacement->len + h->value.len - len;
./nginx/src/http/modules/ngx_http_proxy_module.c-2689-
./nginx/src/http/modules/ngx_http_proxy_module.c-2690-    if (replacement->len > len) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2691-
./nginx/src/http/modules/ngx_http_proxy_module.c:2692:        data = ngx_pnalloc(r->pool, new_len);
./nginx/src/http/modules/ngx_http_proxy_module.c-2693-        if (data == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2694-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-2695-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-2696-
./nginx/src/http/modules/ngx_http_proxy_module.c-2697-        p = ngx_copy(data, h->value.data, prefix);
./nginx/src/http/modules/ngx_http_proxy_module.c-2698-        p = ngx_copy(p, replacement->data, replacement->len);
./nginx/src/http/modules/ngx_http_proxy_module.c-2699-
./nginx/src/http/modules/ngx_http_proxy_module.c-2700-        ngx_memcpy(p, h->value.data + prefix + len,
./nginx/src/http/modules/ngx_http_proxy_module.c-2701-                   h->value.len - len - prefix);
./nginx/src/http/modules/ngx_http_proxy_module.c-2702-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-2733-
./nginx/src/http/modules/ngx_http_proxy_module.c-2734-    return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-2735-}
./nginx/src/http/modules/ngx_http_proxy_module.c-2736-
./nginx/src/http/modules/ngx_http_proxy_module.c-2737-
./nginx/src/http/modules/ngx_http_proxy_module.c-2738-static void *
./nginx/src/http/modules/ngx_http_proxy_module.c-2739-ngx_http_proxy_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_proxy_module.c-2740-{
./nginx/src/http/modules/ngx_http_proxy_module.c-2741-    ngx_http_proxy_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_proxy_module.c-2742-
./nginx/src/http/modules/ngx_http_proxy_module.c:2743:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_proxy_loc_conf_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-2744-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-2745-        return NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-2746-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-2747-
./nginx/src/http/modules/ngx_http_proxy_module.c-2748-    /*
./nginx/src/http/modules/ngx_http_proxy_module.c-2749-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_proxy_module.c-2750-     *
./nginx/src/http/modules/ngx_http_proxy_module.c-2751-     *     conf->upstream.bufs.num = 0;
./nginx/src/http/modules/ngx_http_proxy_module.c-2752-     *     conf->upstream.ignore_headers = 0;
./nginx/src/http/modules/ngx_http_proxy_module.c-2753-     *     conf->upstream.next_upstream = 0;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3084-    ngx_conf_merge_value(conf->redirect, prev->redirect, 1);
./nginx/src/http/modules/ngx_http_proxy_module.c-3085-
./nginx/src/http/modules/ngx_http_proxy_module.c-3086-    if (conf->redirect) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3087-
./nginx/src/http/modules/ngx_http_proxy_module.c-3088-        if (conf->redirects == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3089-            conf->redirects = prev->redirects;
./nginx/src/http/modules/ngx_http_proxy_module.c-3090-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3091-
./nginx/src/http/modules/ngx_http_proxy_module.c-3092-        if (conf->redirects == NULL && conf->url.data) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3093-
./nginx/src/http/modules/ngx_http_proxy_module.c:3094:            conf->redirects = ngx_array_create(cf->pool, 1,
./nginx/src/http/modules/ngx_http_proxy_module.c-3095-                                             sizeof(ngx_http_proxy_rewrite_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3096-            if (conf->redirects == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3097-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3098-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-3099-
./nginx/src/http/modules/ngx_http_proxy_module.c-3100-            pr = ngx_array_push(conf->redirects);
./nginx/src/http/modules/ngx_http_proxy_module.c-3101-            if (pr == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3102-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3103-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-3104-
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3110-            pr->handler = ngx_http_proxy_rewrite_complex_handler;
./nginx/src/http/modules/ngx_http_proxy_module.c-3111-
./nginx/src/http/modules/ngx_http_proxy_module.c-3112-            if (conf->vars.uri.len) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3113-                pr->pattern.complex.value = conf->url;
./nginx/src/http/modules/ngx_http_proxy_module.c-3114-                pr->replacement.value = conf->location;
./nginx/src/http/modules/ngx_http_proxy_module.c-3115-
./nginx/src/http/modules/ngx_http_proxy_module.c-3116-            } else {
./nginx/src/http/modules/ngx_http_proxy_module.c-3117-                pr->pattern.complex.value.len = conf->url.len
./nginx/src/http/modules/ngx_http_proxy_module.c-3118-                                                + sizeof("/") - 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-3119-
./nginx/src/http/modules/ngx_http_proxy_module.c:3120:                p = ngx_pnalloc(cf->pool, pr->pattern.complex.value.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-3121-                if (p == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3122-                    return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3123-                }
./nginx/src/http/modules/ngx_http_proxy_module.c-3124-
./nginx/src/http/modules/ngx_http_proxy_module.c-3125-                pr->pattern.complex.value.data = p;
./nginx/src/http/modules/ngx_http_proxy_module.c-3126-
./nginx/src/http/modules/ngx_http_proxy_module.c-3127-                p = ngx_cpymem(p, conf->url.data, conf->url.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-3128-                *p = '/';
./nginx/src/http/modules/ngx_http_proxy_module.c-3129-
./nginx/src/http/modules/ngx_http_proxy_module.c-3130-                ngx_str_set(&pr->replacement.value, "/");
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3258-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3259-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3260-
./nginx/src/http/modules/ngx_http_proxy_module.c-3261-    if (ngx_array_init(&headers_merged, cf->temp_pool, 4, sizeof(ngx_keyval_t))
./nginx/src/http/modules/ngx_http_proxy_module.c-3262-        != NGX_OK)
./nginx/src/http/modules/ngx_http_proxy_module.c-3263-    {
./nginx/src/http/modules/ngx_http_proxy_module.c-3264-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3265-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3266-
./nginx/src/http/modules/ngx_http_proxy_module.c-3267-    if (conf->headers_source == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c:3268:        conf->headers_source = ngx_array_create(cf->pool, 4,
./nginx/src/http/modules/ngx_http_proxy_module.c-3269-                                                sizeof(ngx_keyval_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3270-        if (conf->headers_source == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3271-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3272-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3273-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3274-
./nginx/src/http/modules/ngx_http_proxy_module.c:3275:    conf->headers_set_len = ngx_array_create(cf->pool, 64, 1);
./nginx/src/http/modules/ngx_http_proxy_module.c-3276-    if (conf->headers_set_len == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3277-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3278-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3279-
./nginx/src/http/modules/ngx_http_proxy_module.c:3280:    conf->headers_set = ngx_array_create(cf->pool, 512, 1);
./nginx/src/http/modules/ngx_http_proxy_module.c-3281-    if (conf->headers_set == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3282-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3283-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3284-
./nginx/src/http/modules/ngx_http_proxy_module.c-3285-
./nginx/src/http/modules/ngx_http_proxy_module.c-3286-#if (NGX_HTTP_CACHE)
./nginx/src/http/modules/ngx_http_proxy_module.c-3287-
./nginx/src/http/modules/ngx_http_proxy_module.c-3288-    h = conf->upstream.cache ? ngx_http_proxy_cache_headers:
./nginx/src/http/modules/ngx_http_proxy_module.c-3289-                               ngx_http_proxy_headers;
./nginx/src/http/modules/ngx_http_proxy_module.c-3290-#else
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3477-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3478-
./nginx/src/http/modules/ngx_http_proxy_module.c-3479-    *code = (uintptr_t) NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-3480-
./nginx/src/http/modules/ngx_http_proxy_module.c-3481-
./nginx/src/http/modules/ngx_http_proxy_module.c-3482-    hash.hash = &conf->headers_set_hash;
./nginx/src/http/modules/ngx_http_proxy_module.c-3483-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_proxy_module.c-3484-    hash.max_size = conf->headers_hash_max_size;
./nginx/src/http/modules/ngx_http_proxy_module.c-3485-    hash.bucket_size = conf->headers_hash_bucket_size;
./nginx/src/http/modules/ngx_http_proxy_module.c-3486-    hash.name = "proxy_headers_hash";
./nginx/src/http/modules/ngx_http_proxy_module.c:3487:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_proxy_module.c-3488-    hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-3489-
./nginx/src/http/modules/ngx_http_proxy_module.c-3490-    return ngx_hash_init(&hash, headers_names.elts, headers_names.nelts);
./nginx/src/http/modules/ngx_http_proxy_module.c-3491-}
./nginx/src/http/modules/ngx_http_proxy_module.c-3492-
./nginx/src/http/modules/ngx_http_proxy_module.c-3493-
./nginx/src/http/modules/ngx_http_proxy_module.c-3494-static char *
./nginx/src/http/modules/ngx_http_proxy_module.c-3495-ngx_http_proxy_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_proxy_module.c-3496-{
./nginx/src/http/modules/ngx_http_proxy_module.c-3497-    ngx_http_proxy_loc_conf_t *plcf = conf;
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3653-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3654-
./nginx/src/http/modules/ngx_http_proxy_module.c-3655-        if (ngx_strcmp(value[1].data, "default") != 0) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3656-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-3657-                               "invalid parameter \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_proxy_module.c-3658-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3659-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3660-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3661-
./nginx/src/http/modules/ngx_http_proxy_module.c-3662-    if (plcf->redirects == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c:3663:        plcf->redirects = ngx_array_create(cf->pool, 1,
./nginx/src/http/modules/ngx_http_proxy_module.c-3664-                                           sizeof(ngx_http_proxy_rewrite_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3665-        if (plcf->redirects == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3666-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3667-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3668-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3669-
./nginx/src/http/modules/ngx_http_proxy_module.c-3670-    pr = ngx_array_push(plcf->redirects);
./nginx/src/http/modules/ngx_http_proxy_module.c-3671-    if (pr == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3672-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3673-    }
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3693-
./nginx/src/http/modules/ngx_http_proxy_module.c-3694-        ngx_memzero(&pr->replacement, sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3695-
./nginx/src/http/modules/ngx_http_proxy_module.c-3696-        if (plcf->vars.uri.len) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3697-            pr->pattern.complex.value = plcf->url;
./nginx/src/http/modules/ngx_http_proxy_module.c-3698-            pr->replacement.value = plcf->location;
./nginx/src/http/modules/ngx_http_proxy_module.c-3699-
./nginx/src/http/modules/ngx_http_proxy_module.c-3700-        } else {
./nginx/src/http/modules/ngx_http_proxy_module.c-3701-            pr->pattern.complex.value.len = plcf->url.len + sizeof("/") - 1;
./nginx/src/http/modules/ngx_http_proxy_module.c-3702-
./nginx/src/http/modules/ngx_http_proxy_module.c:3703:            p = ngx_pnalloc(cf->pool, pr->pattern.complex.value.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-3704-            if (p == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3705-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3706-            }
./nginx/src/http/modules/ngx_http_proxy_module.c-3707-
./nginx/src/http/modules/ngx_http_proxy_module.c-3708-            pr->pattern.complex.value.data = p;
./nginx/src/http/modules/ngx_http_proxy_module.c-3709-
./nginx/src/http/modules/ngx_http_proxy_module.c-3710-            p = ngx_cpymem(p, plcf->url.data, plcf->url.len);
./nginx/src/http/modules/ngx_http_proxy_module.c-3711-            *p = '/';
./nginx/src/http/modules/ngx_http_proxy_module.c-3712-
./nginx/src/http/modules/ngx_http_proxy_module.c-3713-            ngx_str_set(&pr->replacement.value, "/");
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3786-            plcf->cookie_domains = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-3787-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-3788-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3789-
./nginx/src/http/modules/ngx_http_proxy_module.c-3790-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-3791-                           "invalid parameter \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_proxy_module.c-3792-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3793-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3794-
./nginx/src/http/modules/ngx_http_proxy_module.c-3795-    if (plcf->cookie_domains == NGX_CONF_UNSET_PTR) {
./nginx/src/http/modules/ngx_http_proxy_module.c:3796:        plcf->cookie_domains = ngx_array_create(cf->pool, 1,
./nginx/src/http/modules/ngx_http_proxy_module.c-3797-                                     sizeof(ngx_http_proxy_rewrite_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3798-        if (plcf->cookie_domains == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3799-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3800-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3801-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3802-
./nginx/src/http/modules/ngx_http_proxy_module.c-3803-    pr = ngx_array_push(plcf->cookie_domains);
./nginx/src/http/modules/ngx_http_proxy_module.c-3804-    if (pr == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3805-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3806-    }
--
./nginx/src/http/modules/ngx_http_proxy_module.c-3873-            plcf->cookie_paths = NULL;
./nginx/src/http/modules/ngx_http_proxy_module.c-3874-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-3875-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3876-
./nginx/src/http/modules/ngx_http_proxy_module.c-3877-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_proxy_module.c-3878-                           "invalid parameter \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_proxy_module.c-3879-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3880-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3881-
./nginx/src/http/modules/ngx_http_proxy_module.c-3882-    if (plcf->cookie_paths == NGX_CONF_UNSET_PTR) {
./nginx/src/http/modules/ngx_http_proxy_module.c:3883:        plcf->cookie_paths = ngx_array_create(cf->pool, 1,
./nginx/src/http/modules/ngx_http_proxy_module.c-3884-                                     sizeof(ngx_http_proxy_rewrite_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-3885-        if (plcf->cookie_paths == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3886-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3887-        }
./nginx/src/http/modules/ngx_http_proxy_module.c-3888-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-3889-
./nginx/src/http/modules/ngx_http_proxy_module.c-3890-    pr = ngx_array_push(plcf->cookie_paths);
./nginx/src/http/modules/ngx_http_proxy_module.c-3891-    if (pr == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-3892-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-3893-    }
--
./nginx/src/http/modules/ngx_http_proxy_module.c-4126-}
./nginx/src/http/modules/ngx_http_proxy_module.c-4127-
./nginx/src/http/modules/ngx_http_proxy_module.c-4128-
./nginx/src/http/modules/ngx_http_proxy_module.c-4129-#if (NGX_HTTP_SSL)
./nginx/src/http/modules/ngx_http_proxy_module.c-4130-
./nginx/src/http/modules/ngx_http_proxy_module.c-4131-static ngx_int_t
./nginx/src/http/modules/ngx_http_proxy_module.c-4132-ngx_http_proxy_set_ssl(ngx_conf_t *cf, ngx_http_proxy_loc_conf_t *plcf)
./nginx/src/http/modules/ngx_http_proxy_module.c-4133-{
./nginx/src/http/modules/ngx_http_proxy_module.c-4134-    ngx_pool_cleanup_t  *cln;
./nginx/src/http/modules/ngx_http_proxy_module.c-4135-
./nginx/src/http/modules/ngx_http_proxy_module.c:4136:    plcf->upstream.ssl = ngx_pcalloc(cf->pool, sizeof(ngx_ssl_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-4137-    if (plcf->upstream.ssl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-4138-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4139-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4140-
./nginx/src/http/modules/ngx_http_proxy_module.c-4141-    plcf->upstream.ssl->log = cf->log;
./nginx/src/http/modules/ngx_http_proxy_module.c-4142-
./nginx/src/http/modules/ngx_http_proxy_module.c-4143-    if (ngx_ssl_create(plcf->upstream.ssl,
./nginx/src/http/modules/ngx_http_proxy_module.c-4144-                       NGX_SSL_SSLv2|NGX_SSL_SSLv3|NGX_SSL_TLSv1
./nginx/src/http/modules/ngx_http_proxy_module.c-4145-                                    |NGX_SSL_TLSv1_1|NGX_SSL_TLSv1_2,
./nginx/src/http/modules/ngx_http_proxy_module.c-4146-                       NULL)
./nginx/src/http/modules/ngx_http_proxy_module.c-4147-        != NGX_OK)
./nginx/src/http/modules/ngx_http_proxy_module.c-4148-    {
./nginx/src/http/modules/ngx_http_proxy_module.c-4149-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4150-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4151-
./nginx/src/http/modules/ngx_http_proxy_module.c:4152:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/ngx_http_proxy_module.c-4153-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-4154-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4155-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4156-
./nginx/src/http/modules/ngx_http_proxy_module.c-4157-    cln->handler = ngx_ssl_cleanup_ctx;
./nginx/src/http/modules/ngx_http_proxy_module.c-4158-    cln->data = plcf->upstream.ssl;
./nginx/src/http/modules/ngx_http_proxy_module.c-4159-
./nginx/src/http/modules/ngx_http_proxy_module.c-4160-    return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-4161-}
./nginx/src/http/modules/ngx_http_proxy_module.c-4162-
./nginx/src/http/modules/ngx_http_proxy_module.c-4163-/* used by ngx_http_proxy_update_reroute_location */
./nginx/src/http/modules/ngx_http_proxy_module.c-4164-static ngx_int_t
./nginx/src/http/modules/ngx_http_proxy_module.c-4165-ngx_http_proxy_set_ssl_dynamic(ngx_http_proxy_loc_conf_t *plcf)
./nginx/src/http/modules/ngx_http_proxy_module.c-4166-{
./nginx/src/http/modules/ngx_http_proxy_module.c-4167-    ngx_pool_cleanup_t  *cln;
./nginx/src/http/modules/ngx_http_proxy_module.c-4168-
./nginx/src/http/modules/ngx_http_proxy_module.c:4169:    plcf->upstream.ssl = ngx_pcalloc(ngx_cycle->pool, sizeof(ngx_ssl_t));
./nginx/src/http/modules/ngx_http_proxy_module.c-4170-    if (plcf->upstream.ssl == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-4171-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4172-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4173-
./nginx/src/http/modules/ngx_http_proxy_module.c-4174-    plcf->upstream.ssl->log = ngx_cycle->log;
./nginx/src/http/modules/ngx_http_proxy_module.c-4175-
./nginx/src/http/modules/ngx_http_proxy_module.c-4176-    if (ngx_ssl_create(plcf->upstream.ssl,
./nginx/src/http/modules/ngx_http_proxy_module.c-4177-                       NGX_SSL_SSLv2|NGX_SSL_SSLv3|NGX_SSL_TLSv1
./nginx/src/http/modules/ngx_http_proxy_module.c-4178-                                    |NGX_SSL_TLSv1_1|NGX_SSL_TLSv1_2,
./nginx/src/http/modules/ngx_http_proxy_module.c-4179-                       NULL)
./nginx/src/http/modules/ngx_http_proxy_module.c-4180-        != NGX_OK)
./nginx/src/http/modules/ngx_http_proxy_module.c-4181-    {
./nginx/src/http/modules/ngx_http_proxy_module.c-4182-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4183-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4184-
./nginx/src/http/modules/ngx_http_proxy_module.c:4185:    cln = ngx_pool_cleanup_add(ngx_cycle->pool, 0);
./nginx/src/http/modules/ngx_http_proxy_module.c-4186-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_proxy_module.c-4187-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_proxy_module.c-4188-    }
./nginx/src/http/modules/ngx_http_proxy_module.c-4189-
./nginx/src/http/modules/ngx_http_proxy_module.c-4190-    cln->handler = ngx_ssl_cleanup_ctx;
./nginx/src/http/modules/ngx_http_proxy_module.c-4191-    cln->data = plcf->upstream.ssl;
./nginx/src/http/modules/ngx_http_proxy_module.c-4192-
./nginx/src/http/modules/ngx_http_proxy_module.c-4193-    return NGX_OK;
./nginx/src/http/modules/ngx_http_proxy_module.c-4194-}
./nginx/src/http/modules/ngx_http_proxy_module.c-4195-#endif
--
./nginx/src/http/modules/ngx_http_realip_module.c-212-static ngx_int_t
./nginx/src/http/modules/ngx_http_realip_module.c-213-ngx_http_realip_set_addr(ngx_http_request_t *r, ngx_addr_t *addr)
./nginx/src/http/modules/ngx_http_realip_module.c-214-{
./nginx/src/http/modules/ngx_http_realip_module.c-215-    size_t                  len;
./nginx/src/http/modules/ngx_http_realip_module.c-216-    u_char                 *p;
./nginx/src/http/modules/ngx_http_realip_module.c-217-    u_char                  text[NGX_SOCKADDR_STRLEN];
./nginx/src/http/modules/ngx_http_realip_module.c-218-    ngx_connection_t       *c;
./nginx/src/http/modules/ngx_http_realip_module.c-219-    ngx_pool_cleanup_t     *cln;
./nginx/src/http/modules/ngx_http_realip_module.c-220-    ngx_http_realip_ctx_t  *ctx;
./nginx/src/http/modules/ngx_http_realip_module.c-221-
./nginx/src/http/modules/ngx_http_realip_module.c:222:    cln = ngx_pool_cleanup_add(r->pool, sizeof(ngx_http_realip_ctx_t));
./nginx/src/http/modules/ngx_http_realip_module.c-223-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c-224-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_realip_module.c-225-    }
./nginx/src/http/modules/ngx_http_realip_module.c-226-
./nginx/src/http/modules/ngx_http_realip_module.c-227-    ctx = cln->data;
./nginx/src/http/modules/ngx_http_realip_module.c-228-    ngx_http_set_ctx(r, ctx, ngx_http_realip_module);
./nginx/src/http/modules/ngx_http_realip_module.c-229-
./nginx/src/http/modules/ngx_http_realip_module.c-230-    c = r->connection;
./nginx/src/http/modules/ngx_http_realip_module.c-231-
./nginx/src/http/modules/ngx_http_realip_module.c-232-    len = ngx_sock_ntop(addr->sockaddr, text, NGX_SOCKADDR_STRLEN, 0);
./nginx/src/http/modules/ngx_http_realip_module.c-233-    if (len == 0) {
./nginx/src/http/modules/ngx_http_realip_module.c-234-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_realip_module.c-235-    }
./nginx/src/http/modules/ngx_http_realip_module.c-236-
./nginx/src/http/modules/ngx_http_realip_module.c:237:    p = ngx_pnalloc(c->pool, len);
./nginx/src/http/modules/ngx_http_realip_module.c-238-    if (p == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c-239-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_realip_module.c-240-    }
./nginx/src/http/modules/ngx_http_realip_module.c-241-
./nginx/src/http/modules/ngx_http_realip_module.c-242-    ngx_memcpy(p, text, len);
./nginx/src/http/modules/ngx_http_realip_module.c-243-
./nginx/src/http/modules/ngx_http_realip_module.c-244-    cln->handler = ngx_http_realip_cleanup;
./nginx/src/http/modules/ngx_http_realip_module.c-245-
./nginx/src/http/modules/ngx_http_realip_module.c-246-    ctx->connection = c;
./nginx/src/http/modules/ngx_http_realip_module.c-247-    ctx->sockaddr = c->sockaddr;
--
./nginx/src/http/modules/ngx_http_realip_module.c-277-{
./nginx/src/http/modules/ngx_http_realip_module.c-278-    ngx_http_realip_loc_conf_t *rlcf = conf;
./nginx/src/http/modules/ngx_http_realip_module.c-279-
./nginx/src/http/modules/ngx_http_realip_module.c-280-    ngx_int_t                rc;
./nginx/src/http/modules/ngx_http_realip_module.c-281-    ngx_str_t               *value;
./nginx/src/http/modules/ngx_http_realip_module.c-282-    ngx_cidr_t              *cidr;
./nginx/src/http/modules/ngx_http_realip_module.c-283-
./nginx/src/http/modules/ngx_http_realip_module.c-284-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_realip_module.c-285-
./nginx/src/http/modules/ngx_http_realip_module.c-286-    if (rlcf->from == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c:287:        rlcf->from = ngx_array_create(cf->pool, 2,
./nginx/src/http/modules/ngx_http_realip_module.c-288-                                      sizeof(ngx_cidr_t));
./nginx/src/http/modules/ngx_http_realip_module.c-289-        if (rlcf->from == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c-290-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_realip_module.c-291-        }
./nginx/src/http/modules/ngx_http_realip_module.c-292-    }
./nginx/src/http/modules/ngx_http_realip_module.c-293-
./nginx/src/http/modules/ngx_http_realip_module.c-294-    cidr = ngx_array_push(rlcf->from);
./nginx/src/http/modules/ngx_http_realip_module.c-295-    if (cidr == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c-296-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_realip_module.c-297-    }
--
./nginx/src/http/modules/ngx_http_realip_module.c-347-
./nginx/src/http/modules/ngx_http_realip_module.c-348-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_realip_module.c-349-}
./nginx/src/http/modules/ngx_http_realip_module.c-350-
./nginx/src/http/modules/ngx_http_realip_module.c-351-
./nginx/src/http/modules/ngx_http_realip_module.c-352-static void *
./nginx/src/http/modules/ngx_http_realip_module.c-353-ngx_http_realip_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_realip_module.c-354-{
./nginx/src/http/modules/ngx_http_realip_module.c-355-    ngx_http_realip_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_realip_module.c-356-
./nginx/src/http/modules/ngx_http_realip_module.c:357:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_realip_loc_conf_t));
./nginx/src/http/modules/ngx_http_realip_module.c-358-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_realip_module.c-359-        return NULL;
./nginx/src/http/modules/ngx_http_realip_module.c-360-    }
./nginx/src/http/modules/ngx_http_realip_module.c-361-
./nginx/src/http/modules/ngx_http_realip_module.c-362-    /*
./nginx/src/http/modules/ngx_http_realip_module.c-363-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_realip_module.c-364-     *
./nginx/src/http/modules/ngx_http_realip_module.c-365-     *     conf->from = NULL;
./nginx/src/http/modules/ngx_http_realip_module.c-366-     *     conf->hash = 0;
./nginx/src/http/modules/ngx_http_realip_module.c-367-     *     conf->header = { 0, NULL };
--
./nginx/src/http/modules/ngx_http_split_clients_module.c-113-    char                                *rv;
./nginx/src/http/modules/ngx_http_split_clients_module.c-114-    uint32_t                             sum, last;
./nginx/src/http/modules/ngx_http_split_clients_module.c-115-    ngx_str_t                           *value, name;
./nginx/src/http/modules/ngx_http_split_clients_module.c-116-    ngx_uint_t                           i;
./nginx/src/http/modules/ngx_http_split_clients_module.c-117-    ngx_conf_t                           save;
./nginx/src/http/modules/ngx_http_split_clients_module.c-118-    ngx_http_variable_t                 *var;
./nginx/src/http/modules/ngx_http_split_clients_module.c-119-    ngx_http_split_clients_ctx_t        *ctx;
./nginx/src/http/modules/ngx_http_split_clients_module.c-120-    ngx_http_split_clients_part_t       *part;
./nginx/src/http/modules/ngx_http_split_clients_module.c-121-    ngx_http_compile_complex_value_t     ccv;
./nginx/src/http/modules/ngx_http_split_clients_module.c-122-
./nginx/src/http/modules/ngx_http_split_clients_module.c:123:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_split_clients_ctx_t));
./nginx/src/http/modules/ngx_http_split_clients_module.c-124-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_split_clients_module.c-125-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_split_clients_module.c-126-    }
./nginx/src/http/modules/ngx_http_split_clients_module.c-127-
./nginx/src/http/modules/ngx_http_split_clients_module.c-128-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_split_clients_module.c-129-
./nginx/src/http/modules/ngx_http_split_clients_module.c-130-    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
./nginx/src/http/modules/ngx_http_split_clients_module.c-131-
./nginx/src/http/modules/ngx_http_split_clients_module.c-132-    ccv.cf = cf;
./nginx/src/http/modules/ngx_http_split_clients_module.c-133-    ccv.value = &value[1];
--
./nginx/src/http/modules/ngx_http_split_clients_module.c-149-    name.data++;
./nginx/src/http/modules/ngx_http_split_clients_module.c-150-
./nginx/src/http/modules/ngx_http_split_clients_module.c-151-    var = ngx_http_add_variable(cf, &name, NGX_HTTP_VAR_CHANGEABLE);
./nginx/src/http/modules/ngx_http_split_clients_module.c-152-    if (var == NULL) {
./nginx/src/http/modules/ngx_http_split_clients_module.c-153-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_split_clients_module.c-154-    }
./nginx/src/http/modules/ngx_http_split_clients_module.c-155-
./nginx/src/http/modules/ngx_http_split_clients_module.c-156-    var->get_handler = ngx_http_split_clients_variable;
./nginx/src/http/modules/ngx_http_split_clients_module.c-157-    var->data = (uintptr_t) ctx;
./nginx/src/http/modules/ngx_http_split_clients_module.c-158-
./nginx/src/http/modules/ngx_http_split_clients_module.c:159:    if (ngx_array_init(&ctx->parts, cf->pool, 2,
./nginx/src/http/modules/ngx_http_split_clients_module.c-160-                       sizeof(ngx_http_split_clients_part_t))
./nginx/src/http/modules/ngx_http_split_clients_module.c-161-        != NGX_OK)
./nginx/src/http/modules/ngx_http_split_clients_module.c-162-    {
./nginx/src/http/modules/ngx_http_split_clients_module.c-163-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_split_clients_module.c-164-    }
./nginx/src/http/modules/ngx_http_split_clients_module.c-165-
./nginx/src/http/modules/ngx_http_split_clients_module.c-166-    save = *cf;
./nginx/src/http/modules/ngx_http_split_clients_module.c-167-    cf->ctx = ctx;
./nginx/src/http/modules/ngx_http_split_clients_module.c-168-    cf->handler = ngx_http_split_clients;
./nginx/src/http/modules/ngx_http_split_clients_module.c-169-    cf->handler_conf = conf;
--
./nginx/src/http/modules/ngx_http_memcached_module.c-177-    mlcf = ngx_http_get_module_loc_conf(r, ngx_http_memcached_module);
./nginx/src/http/modules/ngx_http_memcached_module.c-178-
./nginx/src/http/modules/ngx_http_memcached_module.c-179-    u->conf = &mlcf->upstream;
./nginx/src/http/modules/ngx_http_memcached_module.c-180-
./nginx/src/http/modules/ngx_http_memcached_module.c-181-    u->create_request = ngx_http_memcached_create_request;
./nginx/src/http/modules/ngx_http_memcached_module.c-182-    u->reinit_request = ngx_http_memcached_reinit_request;
./nginx/src/http/modules/ngx_http_memcached_module.c-183-    u->process_header = ngx_http_memcached_process_header;
./nginx/src/http/modules/ngx_http_memcached_module.c-184-    u->abort_request = ngx_http_memcached_abort_request;
./nginx/src/http/modules/ngx_http_memcached_module.c-185-    u->finalize_request = ngx_http_memcached_finalize_request;
./nginx/src/http/modules/ngx_http_memcached_module.c-186-
./nginx/src/http/modules/ngx_http_memcached_module.c:187:    ctx = ngx_palloc(r->pool, sizeof(ngx_http_memcached_ctx_t));
./nginx/src/http/modules/ngx_http_memcached_module.c-188-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_memcached_module.c-189-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_memcached_module.c-190-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-191-
./nginx/src/http/modules/ngx_http_memcached_module.c-192-    ctx->rest = NGX_HTTP_MEMCACHED_END;
./nginx/src/http/modules/ngx_http_memcached_module.c-193-    ctx->request = r;
./nginx/src/http/modules/ngx_http_memcached_module.c-194-
./nginx/src/http/modules/ngx_http_memcached_module.c-195-    ngx_http_set_ctx(r, ctx, ngx_http_memcached_module);
./nginx/src/http/modules/ngx_http_memcached_module.c-196-
./nginx/src/http/modules/ngx_http_memcached_module.c-197-    u->input_filter_init = ngx_http_memcached_filter_init;
--
./nginx/src/http/modules/ngx_http_memcached_module.c-224-    if (vv == NULL || vv->not_found || vv->len == 0) {
./nginx/src/http/modules/ngx_http_memcached_module.c-225-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_memcached_module.c-226-                      "the \"$memcached_key\" variable is not set");
./nginx/src/http/modules/ngx_http_memcached_module.c-227-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_memcached_module.c-228-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-229-
./nginx/src/http/modules/ngx_http_memcached_module.c-230-    escape = 2 * ngx_escape_uri(NULL, vv->data, vv->len, NGX_ESCAPE_MEMCACHED);
./nginx/src/http/modules/ngx_http_memcached_module.c-231-
./nginx/src/http/modules/ngx_http_memcached_module.c-232-    len = sizeof("get ") - 1 + vv->len + escape + sizeof(CRLF) - 1;
./nginx/src/http/modules/ngx_http_memcached_module.c-233-
./nginx/src/http/modules/ngx_http_memcached_module.c:234:    b = ngx_create_temp_buf(r->pool, len);
./nginx/src/http/modules/ngx_http_memcached_module.c-235-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_memcached_module.c-236-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_memcached_module.c-237-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-238-
./nginx/src/http/modules/ngx_http_memcached_module.c:239:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_memcached_module.c-240-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_memcached_module.c-241-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_memcached_module.c-242-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-243-
./nginx/src/http/modules/ngx_http_memcached_module.c-244-    cl->buf = b;
./nginx/src/http/modules/ngx_http_memcached_module.c-245-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_memcached_module.c-246-
./nginx/src/http/modules/ngx_http_memcached_module.c-247-    r->upstream->request_bufs = cl;
./nginx/src/http/modules/ngx_http_memcached_module.c-248-
./nginx/src/http/modules/ngx_http_memcached_module.c-249-    *b->last++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';
--
./nginx/src/http/modules/ngx_http_memcached_module.c-432-            u->keepalive = 1;
./nginx/src/http/modules/ngx_http_memcached_module.c-433-        }
./nginx/src/http/modules/ngx_http_memcached_module.c-434-
./nginx/src/http/modules/ngx_http_memcached_module.c-435-        return NGX_OK;
./nginx/src/http/modules/ngx_http_memcached_module.c-436-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-437-
./nginx/src/http/modules/ngx_http_memcached_module.c-438-    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
./nginx/src/http/modules/ngx_http_memcached_module.c-439-        ll = &cl->next;
./nginx/src/http/modules/ngx_http_memcached_module.c-440-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-441-
./nginx/src/http/modules/ngx_http_memcached_module.c:442:    cl = ngx_chain_get_free_buf(ctx->request->pool, &u->free_bufs);
./nginx/src/http/modules/ngx_http_memcached_module.c-443-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_memcached_module.c-444-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_memcached_module.c-445-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-446-
./nginx/src/http/modules/ngx_http_memcached_module.c-447-    cl->buf->flush = 1;
./nginx/src/http/modules/ngx_http_memcached_module.c-448-    cl->buf->memory = 1;
./nginx/src/http/modules/ngx_http_memcached_module.c-449-
./nginx/src/http/modules/ngx_http_memcached_module.c-450-    *ll = cl;
./nginx/src/http/modules/ngx_http_memcached_module.c-451-
./nginx/src/http/modules/ngx_http_memcached_module.c-452-    last = b->last;
--
./nginx/src/http/modules/ngx_http_memcached_module.c-507-                   "finalize http memcached request");
./nginx/src/http/modules/ngx_http_memcached_module.c-508-    return;
./nginx/src/http/modules/ngx_http_memcached_module.c-509-}
./nginx/src/http/modules/ngx_http_memcached_module.c-510-
./nginx/src/http/modules/ngx_http_memcached_module.c-511-
./nginx/src/http/modules/ngx_http_memcached_module.c-512-static void *
./nginx/src/http/modules/ngx_http_memcached_module.c-513-ngx_http_memcached_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_memcached_module.c-514-{
./nginx/src/http/modules/ngx_http_memcached_module.c-515-    ngx_http_memcached_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_memcached_module.c-516-
./nginx/src/http/modules/ngx_http_memcached_module.c:517:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_memcached_loc_conf_t));
./nginx/src/http/modules/ngx_http_memcached_module.c-518-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_memcached_module.c-519-        return NULL;
./nginx/src/http/modules/ngx_http_memcached_module.c-520-    }
./nginx/src/http/modules/ngx_http_memcached_module.c-521-
./nginx/src/http/modules/ngx_http_memcached_module.c-522-    /*
./nginx/src/http/modules/ngx_http_memcached_module.c-523-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_memcached_module.c-524-     *
./nginx/src/http/modules/ngx_http_memcached_module.c-525-     *     conf->upstream.bufs.num = 0;
./nginx/src/http/modules/ngx_http_memcached_module.c-526-     *     conf->upstream.next_upstream = 0;
./nginx/src/http/modules/ngx_http_memcached_module.c-527-     *     conf->upstream.temp_path = NULL;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-90-static ngx_int_t ngx_http_main_request_charset(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-91-    ngx_str_t *name);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-92-static ngx_int_t ngx_http_source_charset(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-93-    ngx_str_t *name);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-94-static ngx_int_t ngx_http_get_charset(ngx_http_request_t *r, ngx_str_t *name);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-95-static ngx_inline void ngx_http_set_charset(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-96-    ngx_str_t *charset);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-97-static ngx_int_t ngx_http_charset_ctx(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-98-    ngx_http_charset_t *charsets, ngx_int_t charset, ngx_int_t source_charset);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-99-static ngx_uint_t ngx_http_charset_recode(ngx_buf_t *b, u_char *table);
./nginx/src/http/modules/ngx_http_charset_filter_module.c:100:static ngx_chain_t *ngx_http_charset_recode_from_utf8(ngx_pool_t *pool,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-101-    ngx_buf_t *buf, ngx_http_charset_ctx_t *ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c:102:static ngx_chain_t *ngx_http_charset_recode_to_utf8(ngx_pool_t *pool,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-103-    ngx_buf_t *buf, ngx_http_charset_ctx_t *ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-104-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:105:static ngx_chain_t *ngx_http_charset_get_buf(ngx_pool_t *pool,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-106-    ngx_http_charset_ctx_t *ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c:107:static ngx_chain_t *ngx_http_charset_get_buffer(ngx_pool_t *pool,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-108-    ngx_http_charset_ctx_t *ctx, size_t size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-109-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-110-static char *ngx_http_charset_map_block(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-111-    void *conf);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-112-static char *ngx_http_charset_map(ngx_conf_t *cf, ngx_command_t *dummy,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-113-    void *conf);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-114-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-115-static char *ngx_http_set_charset_slot(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-116-    void *conf);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-117-static ngx_int_t ngx_http_add_charset(ngx_array_t *charsets, ngx_str_t *name);
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-390-        *src = ctx->charset_name;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-391-        return ctx->charset;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-392-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-393-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-394-    main_charset = &r->main->headers_out.charset;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-395-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-396-    if (main_charset->len == 0) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-397-        return NGX_DECLINED;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-398-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-399-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:400:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_charset_ctx_t));
./nginx/src/http/modules/ngx_http_charset_filter_module.c-401-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-402-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-403-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-404-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-405-    ngx_http_set_ctx(r->main, ctx, ngx_http_charset_filter_module);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-406-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-407-    charset = ngx_http_get_charset(r, main_charset);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-408-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-409-    ctx->charset = charset;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-410-    ctx->charset_name = *main_charset;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-505-    r->headers_out.charset = *charset;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-506-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-507-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-508-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-509-static ngx_int_t
./nginx/src/http/modules/ngx_http_charset_filter_module.c-510-ngx_http_charset_ctx(ngx_http_request_t *r, ngx_http_charset_t *charsets,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-511-    ngx_int_t charset, ngx_int_t source_charset)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-512-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-513-    ngx_http_charset_ctx_t  *ctx;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-514-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:515:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_charset_ctx_t));
./nginx/src/http/modules/ngx_http_charset_filter_module.c-516-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-517-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-518-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-519-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-520-    ngx_http_set_ctx(r, ctx, ngx_http_charset_filter_module);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-521-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-522-    ctx->table = charsets[source_charset].tables[charset];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-523-    ctx->charset = charset;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-524-    ctx->charset_name = charsets[charset].name;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-525-    ctx->length = charsets[charset].length;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-556-    if ((ctx->to_utf8 || ctx->from_utf8) || ctx->busy) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-557-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-558-        out = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-559-        ll = &out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-560-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-561-        for (cl = in; cl; cl = cl->next) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-562-            b = cl->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-563-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-564-            if (ngx_buf_size(b) == 0) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-565-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:566:                *ll = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-567-                if (*ll == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-568-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-569-                }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-570-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-571-                (*ll)->buf = b;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-572-                (*ll)->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-573-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-574-                ll = &(*ll)->next;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-575-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-576-                continue;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-577-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-578-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-579-            if (ctx->to_utf8) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:580:                *ll = ngx_http_charset_recode_to_utf8(r->pool, b, ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-581-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-582-            } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:583:                *ll = ngx_http_charset_recode_from_utf8(r->pool, b, ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-584-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-585-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-586-            if (*ll == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-587-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-588-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-589-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-590-            while (*ll) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-591-                ll = &(*ll)->next;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-592-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-593-        }
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-671-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-672-    } while (p < last);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-673-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-674-    b->in_file = 0;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-675-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-676-    return 1;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-677-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-678-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-679-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-680-static ngx_chain_t *
./nginx/src/http/modules/ngx_http_charset_filter_module.c:681:ngx_http_charset_recode_from_utf8(ngx_pool_t *pool, ngx_buf_t *buf,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-682-    ngx_http_charset_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-683-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-684-    size_t        len, size;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-685-    u_char        c, *p, *src, *dst, *saved, **table;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-686-    uint32_t      n;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-687-    ngx_buf_t    *b;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-688-    ngx_uint_t    i;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-689-    ngx_chain_t  *out, *cl, **ll;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-690-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-691-    src = buf->pos;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-694-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-695-        for ( /* void */ ; src < buf->last; src++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-696-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-697-            if (*src < 0x80) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-698-                continue;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-699-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-700-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-701-            len = src - buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-702-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-703-            if (len > 512) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:704:                out = ngx_http_charset_get_buf(pool, ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-705-                if (out == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-706-                    return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-707-                }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-708-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-709-                b = out->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-710-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-711-                b->temporary = buf->temporary;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-712-                b->memory = buf->memory;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-713-                b->mmap = buf->mmap;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-714-                b->flush = buf->flush;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-738-            } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-739-                out = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-740-                size = len + buf->last - src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-741-                src = buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-742-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-743-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-744-            if (size < NGX_HTML_ENTITY_LEN) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-745-                size += NGX_HTML_ENTITY_LEN;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-746-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-747-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:748:            cl = ngx_http_charset_get_buffer(pool, ctx, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-749-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-750-                return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-751-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-752-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-753-            if (out) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-754-                out->next = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-755-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-756-            } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-757-                out = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-758-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-759-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-760-            b = cl->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-761-            dst = b->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-762-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-763-            goto recode;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-764-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-765-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:766:        out = ngx_alloc_chain_link(pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-767-        if (out == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-768-            return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-769-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-770-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-771-        out->buf = buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-772-        out->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-773-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-774-        return out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-775-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-776-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-777-    /* process incomplete UTF sequence from previous buffer */
./nginx/src/http/modules/ngx_http_charset_filter_module.c-778-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:779:    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pool->log, 0,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-780-                   "http charset utf saved: %z", ctx->saved_len);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-781-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-782-    p = src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-783-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-784-    for (i = ctx->saved_len; i < NGX_UTF_LEN; i++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-785-        ctx->saved[i] = *p++;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-786-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-787-        if (p == buf->last) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-788-            break;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-789-        }
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-800-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-801-        if (p) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-802-            c = p[n & 0xff];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-803-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-804-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-805-    } else if (n == 0xfffffffe) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-806-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-807-        /* incomplete UTF-8 symbol */
./nginx/src/http/modules/ngx_http_charset_filter_module.c-808-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-809-        if (i < NGX_UTF_LEN) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:810:            out = ngx_http_charset_get_buf(pool, ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-811-            if (out == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-812-                return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-813-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-814-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-815-            b = out->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-816-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-817-            b->pos = buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-818-            b->last = buf->last;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-819-            b->sync = 1;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-820-            b->shadow = buf;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-825-            return out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-826-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-827-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-828-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-829-    size = buf->last - buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-830-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-831-    if (size < NGX_HTML_ENTITY_LEN) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-832-        size += NGX_HTML_ENTITY_LEN;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-833-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-834-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:835:    cl = ngx_http_charset_get_buffer(pool, ctx, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-836-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-837-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-838-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-839-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-840-    out = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-841-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-842-    b = cl->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-843-    dst = b->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-844-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-845-    if (c) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-846-        *dst++ = c;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-847-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-848-    } else if (n == 0xfffffffe) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-849-        *dst++ = '?';
./nginx/src/http/modules/ngx_http_charset_filter_module.c-850-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:851:        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pool->log, 0,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-852-                       "http charset invalid utf 0");
./nginx/src/http/modules/ngx_http_charset_filter_module.c-853-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-854-        saved = &ctx->saved[NGX_UTF_LEN];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-855-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-856-    } else if (n > 0x10ffff) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-857-        *dst++ = '?';
./nginx/src/http/modules/ngx_http_charset_filter_module.c-858-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:859:        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pool->log, 0,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-860-                       "http charset invalid utf 1");
./nginx/src/http/modules/ngx_http_charset_filter_module.c-861-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-862-    } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-863-        dst = ngx_sprintf(dst, "&#%uD;", n);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-864-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-865-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-866-    src += (saved - ctx->saved) - ctx->saved_len;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-867-    ctx->saved_len = 0;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-868-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-869-recode:
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-872-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-873-    table = (u_char **) ctx->table;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-874-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-875-    while (src < buf->last) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-876-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-877-        if ((size_t) (b->end - dst) < NGX_HTML_ENTITY_LEN) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-878-            b->last = dst;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-879-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-880-            size = buf->last - src + NGX_HTML_ENTITY_LEN;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-881-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:882:            cl = ngx_http_charset_get_buffer(pool, ctx, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-883-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-884-                return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-885-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-886-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-887-            *ll = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-888-            ll = &cl->next;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-889-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-890-            b = cl->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-891-            dst = b->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-892-        }
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-928-                b->sync = 1;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-929-                b->temporary = 0;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-930-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-931-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-932-            break;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-933-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-934-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-935-        if (n > 0x10ffff) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-936-            *dst++ = '?';
./nginx/src/http/modules/ngx_http_charset_filter_module.c-937-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:938:            ngx_log_debug0(NGX_LOG_DEBUG_HTTP, pool->log, 0,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-939-                           "http charset invalid utf 2");
./nginx/src/http/modules/ngx_http_charset_filter_module.c-940-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-941-            continue;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-942-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-943-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-944-        /* n > 0xffff */
./nginx/src/http/modules/ngx_http_charset_filter_module.c-945-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-946-        dst = ngx_sprintf(dst, "&#%uD;", n);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-947-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-948-
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-952-    b->last_in_chain = buf->last_in_chain;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-953-    b->flush = buf->flush;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-954-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-955-    b->shadow = buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-956-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-957-    return out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-958-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-959-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-960-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-961-static ngx_chain_t *
./nginx/src/http/modules/ngx_http_charset_filter_module.c:962:ngx_http_charset_recode_to_utf8(ngx_pool_t *pool, ngx_buf_t *buf,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-963-    ngx_http_charset_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-964-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-965-    size_t        len, size;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-966-    u_char       *p, *src, *dst, *table;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-967-    ngx_buf_t    *b;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-968-    ngx_chain_t  *out, *cl, **ll;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-969-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-970-    table = ctx->table;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-971-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-972-    for (src = buf->pos; src < buf->last; src++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-973-        if (table[*src * NGX_UTF_LEN] == '\1') {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-974-            continue;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-975-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-976-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-977-        goto recode;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-978-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-979-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:980:    out = ngx_alloc_chain_link(pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-981-    if (out == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-982-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-983-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-984-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-985-    out->buf = buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-986-    out->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-987-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-988-    return out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-989-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-990-recode:
./nginx/src/http/modules/ngx_http_charset_filter_module.c-991-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-992-    /*
./nginx/src/http/modules/ngx_http_charset_filter_module.c-993-     * we assume that there are about half of characters to be recoded,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-994-     * so we preallocate "size / 2 + size / 2 * ctx->length"
./nginx/src/http/modules/ngx_http_charset_filter_module.c-995-     */
./nginx/src/http/modules/ngx_http_charset_filter_module.c-996-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-997-    len = src - buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-998-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-999-    if (len > 512) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1000:        out = ngx_http_charset_get_buf(pool, ctx);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1001-        if (out == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1002-            return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1003-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1004-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1005-        b = out->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1006-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1007-        b->temporary = buf->temporary;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1008-        b->memory = buf->memory;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1009-        b->mmap = buf->mmap;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1010-        b->flush = buf->flush;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1020-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1021-    } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1022-        out = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1023-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1024-        size = buf->last - src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1025-        size = len + size / 2 + size / 2 * ctx->length;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1026-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1027-        src = buf->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1028-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1029-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1030:    cl = ngx_http_charset_get_buffer(pool, ctx, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1031-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1032-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1033-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1034-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1035-    if (out) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1036-        out->next = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1037-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1038-    } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1039-        out = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1040-    }
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1048-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1049-        p = &table[*src++ * NGX_UTF_LEN];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1050-        len = *p++;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1051-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1052-        if ((size_t) (b->end - dst) < len) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1053-            b->last = dst;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1054-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1055-            size = buf->last - src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1056-            size = len + size / 2 + size / 2 * ctx->length;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1057-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1058:            cl = ngx_http_charset_get_buffer(pool, ctx, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1059-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1060-                return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1061-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1062-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1063-            *ll = cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1064-            ll = &cl->next;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1065-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1066-            b = cl->buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1067-            dst = b->pos;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1068-        }
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1079-    b->last_in_chain = buf->last_in_chain;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1080-    b->flush = buf->flush;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1081-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1082-    b->shadow = buf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1083-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1084-    return out;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1085-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1086-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1087-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1088-static ngx_chain_t *
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1089:ngx_http_charset_get_buf(ngx_pool_t *pool, ngx_http_charset_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1090-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1091-    ngx_chain_t  *cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1092-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1093-    cl = ctx->free_bufs;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1094-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1095-    if (cl) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1096-        ctx->free_bufs = cl->next;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1097-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1098-        cl->buf->shadow = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1099-        cl->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1100-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1101-        return cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1102-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1103-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1104:    cl = ngx_alloc_chain_link(pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1105-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1106-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1107-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1108-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1109:    cl->buf = ngx_calloc_buf(pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1110-    if (cl->buf == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1111-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1112-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1113-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1114-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1115-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1116-    cl->buf->tag = (ngx_buf_tag_t) &ngx_http_charset_filter_module;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1117-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1118-    return cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1119-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1120-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1121-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1122-static ngx_chain_t *
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1123:ngx_http_charset_get_buffer(ngx_pool_t *pool, ngx_http_charset_ctx_t *ctx,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1124-    size_t size)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1125-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1126-    ngx_buf_t    *b;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1127-    ngx_chain_t  *cl, **ll;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1128-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1129-    for (ll = &ctx->free_buffers, cl = ctx->free_buffers;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1130-         cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1131-         ll = &cl->next, cl = cl->next)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1132-    {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1133-        b = cl->buf;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1137-            cl->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1138-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1139-            b->pos = b->start;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1140-            b->temporary = 1;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1141-            b->shadow = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1142-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1143-            return cl;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1144-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1145-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1146-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1147:    cl = ngx_alloc_chain_link(pool);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1148-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1149-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1150-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1151-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1152:    cl->buf = ngx_create_temp_buf(pool, size);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1153-    if (cl->buf == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1154-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1155-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1156-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1157-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1158-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1159-    cl->buf->temporary = 1;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1160-    cl->buf->tag = (ngx_buf_tag_t) &ngx_http_charset_filter_module;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1161-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1162-    return cl;
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1211-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1212-    table = ngx_array_push(&mcf->tables);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1213-    if (table == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1214-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1215-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1216-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1217-    table->src = src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1218-    table->dst = dst;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1219-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1220-    if (ngx_strcasecmp(value[2].data, (u_char *) "utf-8") == 0) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1221:        table->src2dst = ngx_pcalloc(cf->pool, 256 * NGX_UTF_LEN);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1222-        if (table->src2dst == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1223-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1224-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1225-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1226:        table->dst2src = ngx_pcalloc(cf->pool, 256 * sizeof(void *));
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1227-        if (table->dst2src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1228-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1229-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1230-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1231:        dst2src = ngx_pcalloc(cf->pool, 256);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1232-        if (dst2src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1233-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1234-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1235-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1236-        pp = (u_char **) &table->dst2src[0];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1237-        pp[0] = dst2src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1238-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1239-        for (i = 0; i < 128; i++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1240-            p = &table->src2dst[i * NGX_UTF_LEN];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1241-            p[0] = '\1';
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1243-            dst2src[i] = (u_char) i;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1244-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1245-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1246-        for (/* void */; i < 256; i++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1247-            p = &table->src2dst[i * NGX_UTF_LEN];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1248-            p[0] = '\1';
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1249-            p[1] = '?';
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1250-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1251-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1252-    } else {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1253:        table->src2dst = ngx_palloc(cf->pool, 256);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1254-        if (table->src2dst == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1255-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1256-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1257-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1258:        table->dst2src = ngx_palloc(cf->pool, 256);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1259-        if (table->dst2src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1260-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1261-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1262-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1263-        for (i = 0; i < 128; i++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1264-            table->src2dst[i] = (u_char) i;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1265-            table->dst2src[i] = (u_char) i;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1266-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1267-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1268-        for (/* void */; i < 256; i++) {
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1356-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1357-                               "invalid value \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1358-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1359-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1360-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1361-        pp = (u_char **) &table->dst2src[0];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1362-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1363-        dst2src = pp[n >> 8];
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1364-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1365-        if (dst2src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1366:            dst2src = ngx_pcalloc(cf->pool, 256);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1367-            if (dst2src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1368-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1369-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1370-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1371-            pp[n >> 8] = dst2src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1372-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1373-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1374-        dst2src[n & 0xff] = (u_char) src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1375-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1376-    } else {
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1480-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1481-    return i;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1482-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1483-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1484-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1485-static void *
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1486-ngx_http_charset_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1487-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1488-    ngx_http_charset_main_conf_t  *mcf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1489-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1490:    mcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_charset_main_conf_t));
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1491-    if (mcf == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1492-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1493-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1494-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1495:    if (ngx_array_init(&mcf->charsets, cf->pool, 2, sizeof(ngx_http_charset_t))
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1496-        != NGX_OK)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1497-    {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1498-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1499-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1500-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1501:    if (ngx_array_init(&mcf->tables, cf->pool, 1,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1502-                       sizeof(ngx_http_charset_tables_t))
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1503-        != NGX_OK)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1504-    {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1505-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1506-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1507-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1508:    if (ngx_array_init(&mcf->recodes, cf->pool, 2,
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1509-                       sizeof(ngx_http_charset_recode_t))
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1510-        != NGX_OK)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1511-    {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1512-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1513-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1514-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1515-    return mcf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1516-}
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1517-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1518-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1519-static void *
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1520-ngx_http_charset_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1521-{
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1522-    ngx_http_charset_loc_conf_t  *lcf;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1523-
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1524:    lcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_charset_loc_conf_t));
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1525-    if (lcf == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1526-        return NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1527-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1528-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1529-    /*
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1530-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1531-     *
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1532-     *     lcf->types = { NULL };
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1533-     *     lcf->types_keys = NULL;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1534-     */
--
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1641-    next:
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1642-        continue;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1643-    }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1644-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1645-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1646-    for (t = 0; t < mcf->tables.nelts; t++) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1647-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1648-        src = charset[tables[t].src].tables;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1649-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1650-        if (src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1651:            src = ngx_pcalloc(cf->pool, sizeof(u_char *) * mcf->charsets.nelts);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1652-            if (src == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1653-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1654-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1655-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1656-            charset[tables[t].src].tables = src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1657-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1658-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1659-        dst = charset[tables[t].dst].tables;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1660-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1661-        if (dst == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c:1662:            dst = ngx_pcalloc(cf->pool, sizeof(u_char *) * mcf->charsets.nelts);
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1663-            if (dst == NULL) {
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1664-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1665-            }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1666-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1667-            charset[tables[t].dst].tables = dst;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1668-        }
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1669-
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1670-        src[tables[t].dst] = tables[t].src2dst;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1671-        dst[tables[t].src] = tables[t].dst2src;
./nginx/src/http/modules/ngx_http_charset_filter_module.c-1672-    }
--
./nginx/src/http/modules/ngx_http_degradation_module.c-149-
./nginx/src/http/modules/ngx_http_degradation_module.c-150-    return 0;
./nginx/src/http/modules/ngx_http_degradation_module.c-151-}
./nginx/src/http/modules/ngx_http_degradation_module.c-152-
./nginx/src/http/modules/ngx_http_degradation_module.c-153-
./nginx/src/http/modules/ngx_http_degradation_module.c-154-static void *
./nginx/src/http/modules/ngx_http_degradation_module.c-155-ngx_http_degradation_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_degradation_module.c-156-{
./nginx/src/http/modules/ngx_http_degradation_module.c-157-    ngx_http_degradation_main_conf_t  *dmcf;
./nginx/src/http/modules/ngx_http_degradation_module.c-158-
./nginx/src/http/modules/ngx_http_degradation_module.c:159:    dmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_degradation_main_conf_t));
./nginx/src/http/modules/ngx_http_degradation_module.c-160-    if (dmcf == NULL) {
./nginx/src/http/modules/ngx_http_degradation_module.c-161-        return NULL;
./nginx/src/http/modules/ngx_http_degradation_module.c-162-    }
./nginx/src/http/modules/ngx_http_degradation_module.c-163-
./nginx/src/http/modules/ngx_http_degradation_module.c-164-    return dmcf;
./nginx/src/http/modules/ngx_http_degradation_module.c-165-}
./nginx/src/http/modules/ngx_http_degradation_module.c-166-
./nginx/src/http/modules/ngx_http_degradation_module.c-167-
./nginx/src/http/modules/ngx_http_degradation_module.c-168-static void *
./nginx/src/http/modules/ngx_http_degradation_module.c-169-ngx_http_degradation_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_degradation_module.c-170-{
./nginx/src/http/modules/ngx_http_degradation_module.c-171-    ngx_http_degradation_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_degradation_module.c-172-
./nginx/src/http/modules/ngx_http_degradation_module.c:173:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_degradation_loc_conf_t));
./nginx/src/http/modules/ngx_http_degradation_module.c-174-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_degradation_module.c-175-        return NULL;
./nginx/src/http/modules/ngx_http_degradation_module.c-176-    }
./nginx/src/http/modules/ngx_http_degradation_module.c-177-
./nginx/src/http/modules/ngx_http_degradation_module.c-178-    conf->degrade = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_degradation_module.c-179-
./nginx/src/http/modules/ngx_http_degradation_module.c-180-    return conf;
./nginx/src/http/modules/ngx_http_degradation_module.c-181-}
./nginx/src/http/modules/ngx_http_degradation_module.c-182-
./nginx/src/http/modules/ngx_http_degradation_module.c-183-
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-208-        ngx_str_set(&expires->key, "Expires");
./nginx/src/http/modules/ngx_http_headers_filter_module.c-209-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-210-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-211-    len = sizeof("Mon, 28 Sep 1970 06:00:00 GMT");
./nginx/src/http/modules/ngx_http_headers_filter_module.c-212-    expires->value.len = len - 1;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-213-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-214-    ccp = r->headers_out.cache_control.elts;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-215-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-216-    if (ccp == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-217-
./nginx/src/http/modules/ngx_http_headers_filter_module.c:218:        if (ngx_array_init(&r->headers_out.cache_control, r->pool,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-219-                           1, sizeof(ngx_table_elt_t *))
./nginx/src/http/modules/ngx_http_headers_filter_module.c-220-            != NGX_OK)
./nginx/src/http/modules/ngx_http_headers_filter_module.c-221-        {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-222-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-223-        }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-224-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-225-        ccp = ngx_array_push(&r->headers_out.cache_control);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-226-        if (ccp == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-227-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-228-        }
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-250-        return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-251-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-252-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-253-    if (conf->expires == NGX_HTTP_EXPIRES_MAX) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-254-        expires->value.data = (u_char *) "Thu, 31 Dec 2037 23:55:55 GMT";
./nginx/src/http/modules/ngx_http_headers_filter_module.c-255-        /* 10 years */
./nginx/src/http/modules/ngx_http_headers_filter_module.c-256-        ngx_str_set(&cc->value, "max-age=315360000");
./nginx/src/http/modules/ngx_http_headers_filter_module.c-257-        return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-258-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-259-
./nginx/src/http/modules/ngx_http_headers_filter_module.c:260:    expires->value.data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-261-    if (expires->value.data == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-262-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-263-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-264-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-265-    if (conf->expires_time == 0 && conf->expires != NGX_HTTP_EXPIRES_DAILY) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-266-        ngx_memcpy(expires->value.data, ngx_cached_http_time.data,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-267-                   ngx_cached_http_time.len + 1);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-268-        ngx_str_set(&cc->value, "max-age=0");
./nginx/src/http/modules/ngx_http_headers_filter_module.c-269-        return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-270-    }
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-286-        max_age = expires_time - now;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-287-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-288-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-289-    ngx_http_time(expires->value.data, expires_time);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-290-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-291-    if (conf->expires_time < 0 || max_age < 0) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-292-        ngx_str_set(&cc->value, "no-cache");
./nginx/src/http/modules/ngx_http_headers_filter_module.c-293-        return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-294-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-295-
./nginx/src/http/modules/ngx_http_headers_filter_module.c:296:    cc->value.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-297-                                 sizeof("max-age=") + NGX_TIME_T_LEN + 1);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-298-    if (cc->value.data == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-299-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-300-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-301-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-302-    cc->value.len = ngx_sprintf(cc->value.data, "max-age=%T", max_age)
./nginx/src/http/modules/ngx_http_headers_filter_module.c-303-                    - cc->value.data;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-304-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-305-    return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-306-}
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-330-static ngx_int_t
./nginx/src/http/modules/ngx_http_headers_filter_module.c-331-ngx_http_add_cache_control(ngx_http_request_t *r, ngx_http_header_val_t *hv,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-332-    ngx_str_t *value)
./nginx/src/http/modules/ngx_http_headers_filter_module.c-333-{
./nginx/src/http/modules/ngx_http_headers_filter_module.c-334-    ngx_table_elt_t  *cc, **ccp;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-335-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-336-    ccp = r->headers_out.cache_control.elts;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-337-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-338-    if (ccp == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-339-
./nginx/src/http/modules/ngx_http_headers_filter_module.c:340:        if (ngx_array_init(&r->headers_out.cache_control, r->pool,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-341-                           1, sizeof(ngx_table_elt_t *))
./nginx/src/http/modules/ngx_http_headers_filter_module.c-342-            != NGX_OK)
./nginx/src/http/modules/ngx_http_headers_filter_module.c-343-        {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-344-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-345-        }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-346-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-347-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-348-    ccp = ngx_array_push(&r->headers_out.cache_control);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-349-    if (ccp == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-350-        return NGX_ERROR;
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-403-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-404-    return NGX_OK;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-405-}
./nginx/src/http/modules/ngx_http_headers_filter_module.c-406-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-407-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-408-static void *
./nginx/src/http/modules/ngx_http_headers_filter_module.c-409-ngx_http_headers_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_headers_filter_module.c-410-{
./nginx/src/http/modules/ngx_http_headers_filter_module.c-411-    ngx_http_headers_conf_t  *conf;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-412-
./nginx/src/http/modules/ngx_http_headers_filter_module.c:413:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_headers_conf_t));
./nginx/src/http/modules/ngx_http_headers_filter_module.c-414-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-415-        return NULL;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-416-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-417-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-418-    /*
./nginx/src/http/modules/ngx_http_headers_filter_module.c-419-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_headers_filter_module.c-420-     *
./nginx/src/http/modules/ngx_http_headers_filter_module.c-421-     *     conf->headers = NULL;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-422-     *     conf->expires_time = 0;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-423-     */
--
./nginx/src/http/modules/ngx_http_headers_filter_module.c-559-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-560-    ngx_str_t                         *value;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-561-    ngx_uint_t                         i;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-562-    ngx_http_header_val_t             *hv;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-563-    ngx_http_set_header_t             *set;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-564-    ngx_http_compile_complex_value_t   ccv;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-565-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-566-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-567-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-568-    if (hcf->headers == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c:569:        hcf->headers = ngx_array_create(cf->pool, 1,
./nginx/src/http/modules/ngx_http_headers_filter_module.c-570-                                        sizeof(ngx_http_header_val_t));
./nginx/src/http/modules/ngx_http_headers_filter_module.c-571-        if (hcf->headers == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-572-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-573-        }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-574-    }
./nginx/src/http/modules/ngx_http_headers_filter_module.c-575-
./nginx/src/http/modules/ngx_http_headers_filter_module.c-576-    hv = ngx_array_push(hcf->headers);
./nginx/src/http/modules/ngx_http_headers_filter_module.c-577-    if (hv == NULL) {
./nginx/src/http/modules/ngx_http_headers_filter_module.c-578-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_headers_filter_module.c-579-    }
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-582-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-583-                      "ngx_http_fastcgi_module does not support "
./nginx/src/http/modules/ngx_http_fastcgi_module.c-584-                      "subrequest in memory");
./nginx/src/http/modules/ngx_http_fastcgi_module.c-585-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-586-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-587-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-588-    if (ngx_http_upstream_create(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-589-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-590-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-591-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:592:    f = ngx_pcalloc(r->pool, sizeof(ngx_http_fastcgi_ctx_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-593-    if (f == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-594-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-595-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-596-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-597-    ngx_http_set_ctx(r, f, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-598-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-599-    flcf = ngx_http_get_module_loc_conf(r, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-600-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-601-    if (flcf->fastcgi_lengths) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-602-        if (ngx_http_fastcgi_eval(r, flcf) != NGX_OK) {
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-616-#endif
./nginx/src/http/modules/ngx_http_fastcgi_module.c-617-    u->create_request = ngx_http_fastcgi_create_request;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-618-    u->reinit_request = ngx_http_fastcgi_reinit_request;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-619-    u->process_header = ngx_http_fastcgi_process_header;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-620-    u->abort_request = ngx_http_fastcgi_abort_request;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-621-    u->finalize_request = ngx_http_fastcgi_finalize_request;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-622-    r->state = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-623-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-624-    u->buffering = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-625-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:626:    u->pipe = ngx_pcalloc(r->pool, sizeof(ngx_event_pipe_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-627-    if (u->pipe == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-628-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-629-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-630-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-631-    u->pipe->input_filter = ngx_http_fastcgi_input_filter;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-632-    u->pipe->input_ctx = r;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-633-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-634-    u->input_filter_init = ngx_http_fastcgi_input_filter_init;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-635-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-636-    rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-653-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-654-    if (ngx_http_script_run(r, &url.url, flcf->fastcgi_lengths->elts, 0,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-655-                            flcf->fastcgi_values->elts)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-656-        == NULL)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-657-    {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-658-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-659-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-660-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-661-    url.no_resolve = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-662-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:663:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-664-         if (url.err) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-665-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-666-                          "%s in upstream \"%V\"", url.err, &url.url);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-667-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-668-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-669-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-670-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-671-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-672-    u = r->upstream;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-673-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:674:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-675-    if (u->resolved == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-676-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-677-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-678-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-679-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-680-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-681-        u->resolved->socklen = url.addrs[0].socklen;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-682-        u->resolved->naddrs = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-683-        u->resolved->host = url.addrs[0].name;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-684-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-778-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-779-        if (flcf->header_params) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-780-            n = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-781-            part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-782-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-783-            while (part) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-784-                n += part->nelts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-785-                part = part->next;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-786-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-787-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:788:            ignored = ngx_palloc(r->pool, n * sizeof(void *));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-789-            if (ignored == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-790-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-791-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-792-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-793-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-794-        part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-795-        header = part->elts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-796-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-797-        for (i = 0; /* void */; i++) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-798-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-802-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-803-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-804-                part = part->next;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-805-                header = part->elts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-806-                i = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-807-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-808-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-809-            if (flcf->header_params) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-810-                if (allocated < header[i].key.len) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-811-                    allocated = header[i].key.len + 16;
./nginx/src/http/modules/ngx_http_fastcgi_module.c:812:                    lowcase_key = ngx_pnalloc(r->pool, allocated);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-813-                    if (lowcase_key == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-814-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-815-                    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-816-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-817-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-818-                hash = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-819-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-820-                for (n = 0; n < header[i].key.len; n++) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-821-                    ch = header[i].key.data[n];
./nginx/src/http/modules/ngx_http_fastcgi_module.c-822-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-862-    size = sizeof(ngx_http_fastcgi_header_t)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-863-           + sizeof(ngx_http_fastcgi_begin_request_t)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-864-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-865-           + sizeof(ngx_http_fastcgi_header_t)  /* NGX_HTTP_FASTCGI_PARAMS */
./nginx/src/http/modules/ngx_http_fastcgi_module.c-866-           + len + padding
./nginx/src/http/modules/ngx_http_fastcgi_module.c-867-           + sizeof(ngx_http_fastcgi_header_t)  /* NGX_HTTP_FASTCGI_PARAMS */
./nginx/src/http/modules/ngx_http_fastcgi_module.c-868-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-869-           + sizeof(ngx_http_fastcgi_header_t); /* NGX_HTTP_FASTCGI_STDIN */
./nginx/src/http/modules/ngx_http_fastcgi_module.c-870-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-871-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:872:    b = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-873-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-874-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-875-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-876-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:877:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-878-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-879-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-880-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-881-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-882-    cl->buf = b;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-883-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-884-    ngx_http_fastcgi_request_start.br.flags =
./nginx/src/http/modules/ngx_http_fastcgi_module.c-885-        flcf->keep_conn ? NGX_HTTP_FASTCGI_KEEP_CONN : 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-886-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-887-    ngx_memcpy(b->pos, &ngx_http_fastcgi_request_start,
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1074-            if (body->buf->in_file) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1075-                file_pos = body->buf->file_pos;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1076-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1077-            } else {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1078-                pos = body->buf->pos;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1079-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1080-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1081-            next = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1082-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1083-            do {
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1084:                b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1085-                if (b == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1086-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1087-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1088-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1089-                ngx_memcpy(b, body->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1090-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1091-                if (body->buf->in_file) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1092-                    b->file_pos = file_pos;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1093-                    file_pos += 32 * 1024;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1094-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1118-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1119-                h->version = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1120-                h->type = NGX_HTTP_FASTCGI_STDIN;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1121-                h->request_id_hi = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1122-                h->request_id_lo = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1123-                h->content_length_hi = (u_char) ((len >> 8) & 0xff);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1124-                h->content_length_lo = (u_char) (len & 0xff);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1125-                h->padding_length = (u_char) padding;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1126-                h->reserved = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1127-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1128:                cl->next = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1129-                if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1130-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1131-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1132-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1133-                cl = cl->next;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1134-                cl->buf = b;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1135-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1136:                b = ngx_create_temp_buf(r->pool,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1137-                                        sizeof(ngx_http_fastcgi_header_t)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1138-                                        + padding);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1139-                if (b == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1140-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1141-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1142-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1143-                if (padding) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1144-                    ngx_memzero(b->last, padding);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1145-                    b->last += padding;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1146-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1147-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1148-                h = (ngx_http_fastcgi_header_t *) b->last;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1149-                b->last += sizeof(ngx_http_fastcgi_header_t);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1150-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1151:                cl->next = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1152-                if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1153-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1154-                }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1155-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1156-                cl = cl->next;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1157-                cl->buf = b;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1158-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1159-            } while (!next);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1160-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1161-            body = body->next;
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1448-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1449-                if (f->split_parts && f->split_parts->nelts) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1450-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1451-                    part = f->split_parts->elts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1452-                    size = u->buffer.pos - part_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1453-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1454-                    for (i = 0; i < f->split_parts->nelts; i++) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1455-                        size += part[i].end - part[i].start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1456-                    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1457-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1458:                    p = ngx_pnalloc(r->pool, size);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1459-                    if (p == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1460-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1461-                    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1462-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1463-                    buf.pos = p;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1464-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1465-                    for (i = 0; i < f->split_parts->nelts; i++) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1466-                        p = ngx_cpymem(p, part[i].start,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1467-                                       part[i].end - part[i].start);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1468-                    }
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1476-                    rc = ngx_http_parse_header_line(r, &buf, 1);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1477-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1478-                    h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1479-                    h->key.data = r->header_name_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1480-                    h->key.data[h->key.len] = '\0';
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1481-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1482-                    h->value.len = r->header_end - r->header_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1483-                    h->value.data = r->header_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1484-                    h->value.data[h->value.len] = '\0';
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1485-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1486:                    h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1487-                    if (h->lowcase_key == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1488-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1489-                    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1490-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1491-                } else {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1492-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1493-                    h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1494-                    h->value.len = r->header_end - r->header_start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1495-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1496:                    h->key.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1497-                                              h->key.len + 1 + h->value.len + 1
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1498-                                              + h->key.len);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1499-                    if (h->key.data == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1500-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1501-                    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1502-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1503-                    h->value.data = h->key.data + h->key.len + 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1504-                    h->lowcase_key = h->key.data + h->key.len + 1
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1505-                                     + h->value.len + 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1506-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1603-        if (rc == NGX_OK) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1604-            continue;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1605-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1606-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1607-        /* rc == NGX_AGAIN */
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1608-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1609-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1610-                       "upstream split a header line in FastCGI records");
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1611-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1612-        if (f->split_parts == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1613:            f->split_parts = ngx_array_create(r->pool, 1,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1614-                                        sizeof(ngx_http_fastcgi_split_part_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1615-            if (f->split_parts == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1616-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1617-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1618-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1619-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1620-        part = ngx_array_push(f->split_parts);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1621-        if (part == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1622-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1623-        }
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1811-        /* f->type == NGX_HTTP_FASTCGI_STDOUT */
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1812-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1813-        if (f->pos == f->last) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1814-            break;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1815-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1816-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1817-        if (p->free) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1818-            cl = p->free;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1819-            b = cl->buf;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1820-            p->free = cl->next;
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1821:            ngx_free_chain(p->pool, cl);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1822-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1823-        } else {
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1824:            b = ngx_alloc_buf(p->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1825-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1826-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1827-            }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1828-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1829-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1830-        ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1831-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1832-        b->pos = f->pos;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1833-        b->start = buf->start;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1834-        b->end = buf->end;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1835-        b->tag = p->tag;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1836-        b->temporary = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1837-        b->recycled = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1838-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1839-        *prev = b;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1840-        prev = &b->shadow;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1841-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:1842:        cl = ngx_alloc_chain_link(p->pool);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1843-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1844-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1845-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1846-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1847-        cl->buf = b;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1848-        cl->next = NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1849-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1850-        if (p->in) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1851-            *p->last_in = cl;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-1852-        } else {
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2056-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2057-    return NGX_OK;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2058-}
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2059-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2060-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2061-static void *
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2062-ngx_http_fastcgi_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2063-{
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2064-    ngx_http_fastcgi_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2065-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2066:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_fastcgi_loc_conf_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2067-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2068-        return NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2069-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2070-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2071-    /*
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2072-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2073-     *
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2074-     *     conf->upstream.bufs.num = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2075-     *     conf->upstream.ignore_headers = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2076-     *     conf->upstream.next_upstream = 0;
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2460-    if (conf->params_source == NULL
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2461-#if (NGX_HTTP_CACHE)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2462-        && (conf->upstream.cache == NULL)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2463-#endif
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2464-       )
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2465-    {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2466-        conf->headers_hash.buckets = (void *) 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2467-        return NGX_OK;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2468-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2469-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2470:    conf->params_len = ngx_array_create(cf->pool, 64, 1);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2471-    if (conf->params_len == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2472-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2473-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2474-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2475:    conf->params = ngx_array_create(cf->pool, 512, 1);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2476-    if (conf->params == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2477-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2478-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2479-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2480-    if (ngx_array_init(&headers_names, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2481-        != NGX_OK)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2482-    {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2483-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2484-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2485-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2638-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2639-    *code = (uintptr_t) NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2640-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2641-    conf->header_params = headers_names.nelts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2642-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2643-    hash.hash = &conf->headers_hash;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2644-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2645-    hash.max_size = 512;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2646-    hash.bucket_size = 64;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2647-    hash.name = "fastcgi_params_hash";
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2648:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2649-    hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2650-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2651-    return ngx_hash_init(&hash, headers_names.elts, headers_names.nelts);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2652-}
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2653-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2654-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2655-static ngx_int_t
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2656-ngx_http_fastcgi_script_name_variable(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2657-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2658-{
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2675-        v->valid = 1;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2676-        v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2677-        v->not_found = 0;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2678-        v->data = f->script_name.data;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2679-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2680-        return NGX_OK;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2681-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2682-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2683-    v->len = f->script_name.len + flcf->index.len;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2684-
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2685:    v->data = ngx_pnalloc(r->pool, v->len);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2686-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2687-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2688-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2689-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2690-    p = ngx_copy(v->data, f->script_name.data, f->script_name.len);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2691-    ngx_memcpy(p, flcf->index.data, flcf->index.len);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2692-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2693-    return NGX_OK;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2694-}
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2695-
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2723-ngx_http_fastcgi_split(ngx_http_request_t *r, ngx_http_fastcgi_loc_conf_t *flcf)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2724-{
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2725-    ngx_http_fastcgi_ctx_t       *f;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2726-#if (NGX_PCRE)
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2727-    ngx_int_t                     n;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2728-    int                           captures[(1 + 2) * 3];
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2729-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2730-    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2731-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2732-    if (f == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2733:        f = ngx_pcalloc(r->pool, sizeof(ngx_http_fastcgi_ctx_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2734-        if (f == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2735-            return NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2736-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2737-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2738-        ngx_http_set_ctx(r, f, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2739-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2740-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2741-    if (f->script_name.len) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2742-        return f;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2743-    }
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2767-    ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2768-                  ngx_regex_exec_n " failed: %i on \"%V\" using \"%V\"",
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2769-                  n, &r->uri, &flcf->split_name);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2770-    return NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2771-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2772-#else
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2773-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2774-    f = ngx_http_get_module_ctx(r, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2775-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2776-    if (f == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2777:        f = ngx_pcalloc(r->pool, sizeof(ngx_http_fastcgi_ctx_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2778-        if (f == NULL) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2779-            return NULL;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2780-        }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2781-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2782-        ngx_http_set_ctx(r, f, ngx_http_fastcgi_module);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2783-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2784-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2785-    f->script_name = r->uri;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2786-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2787-    return f;
--
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2862-    ngx_regex_compile_t   rc;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2863-    u_char                errstr[NGX_MAX_CONF_ERRSTR];
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2864-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2865-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2866-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2867-    flcf->split_name = value[1];
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2868-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2869-    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2870-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2871-    rc.pattern = value[1];
./nginx/src/http/modules/ngx_http_fastcgi_module.c:2872:    rc.pool = cf->pool;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2873-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2874-    rc.err.data = errstr;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2875-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2876-    if (ngx_regex_compile(&rc) != NGX_OK) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2877-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc.err);
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2878-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2879-    }
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2880-
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2881-    if (rc.captures != 2) {
./nginx/src/http/modules/ngx_http_fastcgi_module.c-2882-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-39-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-40-typedef struct {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-41-    ngx_array_t         limits;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-42-    ngx_uint_t          log_level;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-43-} ngx_http_limit_conn_conf_t;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-44-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-45-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-46-static ngx_rbtree_node_t *ngx_http_limit_conn_lookup(ngx_rbtree_t *rbtree,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-47-    ngx_http_variable_value_t *vv, uint32_t hash);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-48-static void ngx_http_limit_conn_cleanup(void *data);
./nginx/src/http/modules/ngx_http_limit_conn_module.c:49:static ngx_inline void ngx_http_limit_conn_cleanup_all(ngx_pool_t *pool);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-50-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-51-static void *ngx_http_limit_conn_create_conf(ngx_conf_t *cf);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-52-static char *ngx_http_limit_conn_merge_conf(ngx_conf_t *cf, void *parent,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-53-    void *child);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-54-static char *ngx_http_limit_conn_zone(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-55-    void *conf);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-56-static char *ngx_http_limit_zone(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-57-    void *conf);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-58-static char *ngx_http_limit_conn(ngx_conf_t *cf, ngx_command_t *cmd,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-59-    void *conf);
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-198-        if (node == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-199-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-200-            n = offsetof(ngx_rbtree_node_t, color)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-201-                + offsetof(ngx_http_limit_conn_node_t, data)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-202-                + len;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-203-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-204-            node = ngx_slab_alloc_locked(shpool, n);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-205-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-206-            if (node == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-207-                ngx_shmtx_unlock(&shpool->mutex);
./nginx/src/http/modules/ngx_http_limit_conn_module.c:208:                ngx_http_limit_conn_cleanup_all(r->pool);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-209-                return NGX_HTTP_SERVICE_UNAVAILABLE;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-210-            }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-211-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-212-            lc = (ngx_http_limit_conn_node_t *) &node->color;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-213-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-214-            node->key = hash;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-215-            lc->len = (u_char) len;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-216-            lc->conn = 1;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-217-            ngx_memcpy(lc->data, vv->data, len);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-218-
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-223-            lc = (ngx_http_limit_conn_node_t *) &node->color;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-224-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-225-            if ((ngx_uint_t) lc->conn >= limits[i].conn) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-226-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-227-                ngx_shmtx_unlock(&shpool->mutex);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-228-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-229-                ngx_log_error(lccf->log_level, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-230-                              "limiting connections by zone \"%V\"",
./nginx/src/http/modules/ngx_http_limit_conn_module.c-231-                              &limits[i].shm_zone->shm.name);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-232-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:233:                ngx_http_limit_conn_cleanup_all(r->pool);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-234-                return NGX_HTTP_SERVICE_UNAVAILABLE;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-235-            }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-236-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-237-            lc->conn++;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-238-        }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-239-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-240-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-241-                       "limit conn: %08XD %d", node->key, lc->conn);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-242-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-243-        ngx_shmtx_unlock(&shpool->mutex);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-244-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:245:        cln = ngx_pool_cleanup_add(r->pool,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-246-                                   sizeof(ngx_http_limit_conn_cleanup_t));
./nginx/src/http/modules/ngx_http_limit_conn_module.c-247-        if (cln == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-248-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-249-        }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-250-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-251-        cln->handler = ngx_http_limit_conn_cleanup;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-252-        lccln = cln->data;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-253-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-254-        lccln->shm_zone = limits[i].shm_zone;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-255-        lccln->node = node;
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-365-    if (lc->conn == 0) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-366-        ngx_rbtree_delete(ctx->rbtree, node);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-367-        ngx_slab_free_locked(shpool, node);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-368-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-369-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-370-    ngx_shmtx_unlock(&shpool->mutex);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-371-}
./nginx/src/http/modules/ngx_http_limit_conn_module.c-372-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-373-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-374-static ngx_inline void
./nginx/src/http/modules/ngx_http_limit_conn_module.c:375:ngx_http_limit_conn_cleanup_all(ngx_pool_t *pool)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-376-{
./nginx/src/http/modules/ngx_http_limit_conn_module.c-377-    ngx_pool_cleanup_t  *cln;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-378-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:379:    cln = pool->cleanup;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-380-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-381-    while (cln && cln->handler == ngx_http_limit_conn_cleanup) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-382-        ngx_http_limit_conn_cleanup(cln->data);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-383-        cln = cln->next;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-384-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-385-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:386:    pool->cleanup = cln;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-387-}
./nginx/src/http/modules/ngx_http_limit_conn_module.c-388-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-389-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-390-static ngx_int_t
./nginx/src/http/modules/ngx_http_limit_conn_module.c-391-ngx_http_limit_conn_init_zone(ngx_shm_zone_t *shm_zone, void *data)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-392-{
./nginx/src/http/modules/ngx_http_limit_conn_module.c-393-    ngx_http_limit_conn_ctx_t  *octx = data;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-394-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-395-    size_t                      len;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-396-    ngx_slab_pool_t            *shpool;
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-448-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-449-    return NGX_OK;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-450-}
./nginx/src/http/modules/ngx_http_limit_conn_module.c-451-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-452-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-453-static void *
./nginx/src/http/modules/ngx_http_limit_conn_module.c-454-ngx_http_limit_conn_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-455-{
./nginx/src/http/modules/ngx_http_limit_conn_module.c-456-    ngx_http_limit_conn_conf_t  *conf;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-457-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:458:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_conn_conf_t));
./nginx/src/http/modules/ngx_http_limit_conn_module.c-459-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-460-        return NULL;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-461-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-462-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-463-    /*
./nginx/src/http/modules/ngx_http_limit_conn_module.c-464-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_limit_conn_module.c-465-     *
./nginx/src/http/modules/ngx_http_limit_conn_module.c-466-     *     conf->limits.elts = NULL;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-467-     */
./nginx/src/http/modules/ngx_http_limit_conn_module.c-468-
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-538-            }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-539-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-540-            continue;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-541-        }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-542-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-543-        if (value[i].data[0] == '$') {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-544-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-545-            value[i].len--;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-546-            value[i].data++;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-547-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:548:            ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_conn_ctx_t));
./nginx/src/http/modules/ngx_http_limit_conn_module.c-549-            if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-550-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-551-            }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-552-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-553-            ctx->index = ngx_http_get_variable_index(cf, &value[i]);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-554-            if (ctx->index == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-555-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-556-            }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-557-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-558-            ctx->var = value[i];
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-615-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-616-    if (value[2].data[0] != '$') {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-617-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-618-                           "invalid variable name \"%V\"", &value[2]);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-619-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-620-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-621-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-622-    value[2].len--;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-623-    value[2].data++;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-624-
./nginx/src/http/modules/ngx_http_limit_conn_module.c:625:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_conn_ctx_t));
./nginx/src/http/modules/ngx_http_limit_conn_module.c-626-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-627-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-628-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-629-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-630-    ctx->index = ngx_http_get_variable_index(cf, &value[2]);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-631-    if (ctx->index == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-632-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-633-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-634-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-635-    ctx->var = value[2];
--
./nginx/src/http/modules/ngx_http_limit_conn_module.c-686-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-687-    shm_zone = ngx_shared_memory_add(cf, &value[1], 0,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-688-                                     &ngx_http_limit_conn_module);
./nginx/src/http/modules/ngx_http_limit_conn_module.c-689-    if (shm_zone == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-690-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-691-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-692-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-693-    limits = lccf->limits.elts;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-694-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-695-    if (limits == NULL) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c:696:        if (ngx_array_init(&lccf->limits, cf->pool, 1,
./nginx/src/http/modules/ngx_http_limit_conn_module.c-697-                           sizeof(ngx_http_limit_conn_limit_t))
./nginx/src/http/modules/ngx_http_limit_conn_module.c-698-            != NGX_OK)
./nginx/src/http/modules/ngx_http_limit_conn_module.c-699-        {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-700-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_conn_module.c-701-        }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-702-    }
./nginx/src/http/modules/ngx_http_limit_conn_module.c-703-
./nginx/src/http/modules/ngx_http_limit_conn_module.c-704-    for (i = 0; i < lccf->limits.nelts; i++) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-705-        if (shm_zone == limits[i].shm_zone) {
./nginx/src/http/modules/ngx_http_limit_conn_module.c-706-            return "is duplicate";
--
./nginx/src/http/modules/ngx_http_secure_link_module.c-132-    expires = 0;
./nginx/src/http/modules/ngx_http_secure_link_module.c-133-
./nginx/src/http/modules/ngx_http_secure_link_module.c-134-    if (p) {
./nginx/src/http/modules/ngx_http_secure_link_module.c-135-        val.len = p++ - val.data;
./nginx/src/http/modules/ngx_http_secure_link_module.c-136-
./nginx/src/http/modules/ngx_http_secure_link_module.c-137-        expires = ngx_atotm(p, last - p);
./nginx/src/http/modules/ngx_http_secure_link_module.c-138-        if (expires <= 0) {
./nginx/src/http/modules/ngx_http_secure_link_module.c-139-            goto not_found;
./nginx/src/http/modules/ngx_http_secure_link_module.c-140-        }
./nginx/src/http/modules/ngx_http_secure_link_module.c-141-
./nginx/src/http/modules/ngx_http_secure_link_module.c:142:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_secure_link_ctx_t));
./nginx/src/http/modules/ngx_http_secure_link_module.c-143-        if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_secure_link_module.c-144-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_secure_link_module.c-145-        }
./nginx/src/http/modules/ngx_http_secure_link_module.c-146-
./nginx/src/http/modules/ngx_http_secure_link_module.c-147-        ngx_http_set_ctx(r, ctx, ngx_http_secure_link_module);
./nginx/src/http/modules/ngx_http_secure_link_module.c-148-
./nginx/src/http/modules/ngx_http_secure_link_module.c-149-        ctx->expires.len = last - p;
./nginx/src/http/modules/ngx_http_secure_link_module.c-150-        ctx->expires.data = p;
./nginx/src/http/modules/ngx_http_secure_link_module.c-151-    }
./nginx/src/http/modules/ngx_http_secure_link_module.c-152-
--
./nginx/src/http/modules/ngx_http_secure_link_module.c-288-
./nginx/src/http/modules/ngx_http_secure_link_module.c-289-    return NGX_OK;
./nginx/src/http/modules/ngx_http_secure_link_module.c-290-}
./nginx/src/http/modules/ngx_http_secure_link_module.c-291-
./nginx/src/http/modules/ngx_http_secure_link_module.c-292-
./nginx/src/http/modules/ngx_http_secure_link_module.c-293-static void *
./nginx/src/http/modules/ngx_http_secure_link_module.c-294-ngx_http_secure_link_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_secure_link_module.c-295-{
./nginx/src/http/modules/ngx_http_secure_link_module.c-296-    ngx_http_secure_link_conf_t  *conf;
./nginx/src/http/modules/ngx_http_secure_link_module.c-297-
./nginx/src/http/modules/ngx_http_secure_link_module.c:298:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_secure_link_conf_t));
./nginx/src/http/modules/ngx_http_secure_link_module.c-299-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_secure_link_module.c-300-        return NULL;
./nginx/src/http/modules/ngx_http_secure_link_module.c-301-    }
./nginx/src/http/modules/ngx_http_secure_link_module.c-302-
./nginx/src/http/modules/ngx_http_secure_link_module.c-303-    /*
./nginx/src/http/modules/ngx_http_secure_link_module.c-304-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_secure_link_module.c-305-     *
./nginx/src/http/modules/ngx_http_secure_link_module.c-306-     *     conf->variable = NULL;
./nginx/src/http/modules/ngx_http_secure_link_module.c-307-     *     conf->md5 = NULL;
./nginx/src/http/modules/ngx_http_secure_link_module.c-308-     *     conf->secret = { 0, NULL };
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-209-    {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-210-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-211-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-212-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-213-    ctx = ngx_http_get_module_ctx(r, ngx_http_xslt_filter_module);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-214-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-215-    if (ctx) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-216-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-217-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-218-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:219:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_xslt_filter_ctx_t));
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-220-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-221-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-222-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-223-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-224-    ngx_http_set_ctx(r, ctx, ngx_http_xslt_filter_module);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-225-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-226-    r->main_filter_need_in_memory = 1;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-227-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-228-    return NGX_OK;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-229-}
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-304-    ngx_chain_t          out;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-305-    ngx_pool_cleanup_t  *cln;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-306-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-307-    ctx->done = 1;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-308-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-309-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-310-        return ngx_http_filter_finalize_request(r, &ngx_http_xslt_filter_module,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-311-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-312-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-313-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:314:    cln = ngx_pool_cleanup_add(r->pool, 0);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-315-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-316-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-317-        ngx_free(b->pos);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-318-        return ngx_http_filter_finalize_request(r, &ngx_http_xslt_filter_module,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-319-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-320-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-321-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-322-    if (r == r->main) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-323-        r->headers_out.content_length_n = b->last - b->pos;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-324-
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-478-    xmlDocPtr                         doc, res;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-479-    ngx_http_xslt_sheet_t            *sheet;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-480-    ngx_http_xslt_filter_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-481-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-482-    conf = ngx_http_get_module_loc_conf(r, ngx_http_xslt_filter_module);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-483-    sheet = conf->sheets.elts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-484-    doc = ctx->doc;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-485-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-486-    /* preallocate array for 4 params */
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-487-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:488:    if (ngx_array_init(&ctx->params, r->pool, 4 * 2 + 1, sizeof(char *))
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-489-        != NGX_OK)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-490-    {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-491-        xmlFreeDoc(doc);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-492-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-493-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-494-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-495-    for (i = 0; i < conf->sheets.nelts; i++) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-496-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-497-        ctx->transform = xsltNewTransformContext(sheet[i].stylesheet, doc);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-498-        if (ctx->transform == NULL) {
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-559-                      "xsltSaveResultToString() failed");
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-560-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-561-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-562-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-563-    if (len == 0) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-564-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-565-                      "xsltSaveResultToString() returned zero-length result");
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-566-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-567-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-568-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:569:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-570-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-571-        ngx_free(buf);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-572-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-573-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-574-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-575-    b->pos = buf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-576-    b->last = buf + len;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-577-    b->memory = 1;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-578-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-579-    if (encoding) {
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-809-    xmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_xslt_filter_module);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-810-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-811-    file = xmcf->dtd_files.elts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-812-    for (i = 0; i < xmcf->dtd_files.nelts; i++) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-813-        if (ngx_strcmp(file[i].name, value[1].data) == 0) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-814-            xlcf->dtd = file[i].data;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-815-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-816-        }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-817-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-818-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:819:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-820-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-821-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-822-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-823-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-824-    xlcf->dtd = xmlParseDTD(NULL, (xmlChar *) value[1].data);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-825-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-826-    if (xlcf->dtd == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-827-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0, "xmlParseDTD() failed");
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-828-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-829-    }
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-854-    ngx_pool_cleanup_t                *cln;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-855-    ngx_http_xslt_file_t              *file;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-856-    ngx_http_xslt_sheet_t             *sheet;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-857-    ngx_http_xslt_param_t             *param;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-858-    ngx_http_compile_complex_value_t   ccv;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-859-    ngx_http_xslt_filter_main_conf_t  *xmcf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-860-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-861-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-862-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-863-    if (xlcf->sheets.elts == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:864:        if (ngx_array_init(&xlcf->sheets, cf->pool, 1,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-865-                           sizeof(ngx_http_xslt_sheet_t))
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-866-            != NGX_OK)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-867-        {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-868-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-869-        }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-870-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-871-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-872-    sheet = ngx_array_push(&xlcf->sheets);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-873-    if (sheet == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-874-        return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-883-    xmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_xslt_filter_module);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-884-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-885-    file = xmcf->sheet_files.elts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-886-    for (i = 0; i < xmcf->sheet_files.nelts; i++) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-887-        if (ngx_strcmp(file[i].name, value[1].data) == 0) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-888-            sheet->stylesheet = file[i].data;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-889-            goto found;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-890-        }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-891-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-892-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:893:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-894-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-895-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-896-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-897-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-898-    sheet->stylesheet = xsltParseStylesheetFile(value[1].data);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-899-    if (sheet->stylesheet == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-900-        ngx_conf_log_error(NGX_LOG_ERR, cf, 0,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-901-                           "xsltParseStylesheetFile(\"%s\") failed",
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-902-                           value[1].data);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-903-        return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-915-    file->data = sheet->stylesheet;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-916-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-917-found:
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-918-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-919-    n = cf->args->nelts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-920-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-921-    if (n == 2) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-922-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-923-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-924-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:925:    if (ngx_array_init(&sheet->params, cf->pool, n - 2,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-926-                       sizeof(ngx_http_xslt_param_t))
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-927-        != NGX_OK)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-928-    {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-929-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-930-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-931-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-932-    for (i = 2; i < n; i++) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-933-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-934-        param = ngx_array_push(&sheet->params);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-935-        if (param == NULL) {
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-958-{
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-959-    ngx_http_xslt_filter_loc_conf_t  *xlcf = conf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-960-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-961-    ngx_http_xslt_param_t            *param;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-962-    ngx_http_compile_complex_value_t  ccv;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-963-    ngx_str_t                        *value;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-964-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-965-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-966-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-967-    if (xlcf->params == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:968:        xlcf->params = ngx_array_create(cf->pool, 2,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-969-                                        sizeof(ngx_http_xslt_param_t));
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-970-        if (xlcf->params == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-971-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-972-        }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-973-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-974-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-975-    param = ngx_array_push(xlcf->params);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-976-    if (param == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-977-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-978-    }
--
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1007-{
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1008-    xsltFreeStylesheet(data);
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1009-}
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1010-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1011-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1012-static void *
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1013-ngx_http_xslt_filter_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1014-{
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1015-    ngx_http_xslt_filter_main_conf_t  *conf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1016-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:1017:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_xslt_filter_main_conf_t));
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1018-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1019-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1020-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1021-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:1022:    if (ngx_array_init(&conf->dtd_files, cf->pool, 1,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1023-                       sizeof(ngx_http_xslt_file_t))
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1024-        != NGX_OK)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1025-    {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1026-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1027-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1028-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:1029:    if (ngx_array_init(&conf->sheet_files, cf->pool, 1,
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1030-                       sizeof(ngx_http_xslt_file_t))
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1031-        != NGX_OK)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1032-    {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1033-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1034-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1035-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1036-    return conf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1037-}
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1038-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1039-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1040-static void *
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1041-ngx_http_xslt_filter_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1042-{
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1043-    ngx_http_xslt_filter_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1044-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c:1045:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_xslt_filter_loc_conf_t));
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1046-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1047-        return NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1048-    }
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1049-
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1050-    /*
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1051-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1052-     *
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1053-     *     conf->dtd = NULL;
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1054-     *     conf->sheets = { NULL };
./nginx/src/http/modules/ngx_http_xslt_filter_module.c-1055-     *     conf->types = { NULL };
--
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-96-static ngx_int_t
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-97-ngx_http_upstream_init_ip_hash_peer(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-98-    ngx_http_upstream_srv_conf_t *us)
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-99-{
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-100-    struct sockaddr_in                     *sin;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-101-#if (NGX_HAVE_INET6)
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-102-    struct sockaddr_in6                    *sin6;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-103-#endif
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-104-    ngx_http_upstream_ip_hash_peer_data_t  *iphp;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-105-
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c:106:    iphp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_ip_hash_peer_data_t));
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-107-    if (iphp == NULL) {
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-108-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-109-    }
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-110-
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-111-    r->upstream->peer.data = &iphp->rrp;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-112-
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-113-    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-114-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-115-    }
./nginx/src/http/modules/ngx_http_upstream_ip_hash_module.c-116-
--
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-105-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-106-    n = peers->number;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-107-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-108-    if (peers->next) {
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-109-        n += peers->next->number;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-110-    }
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-111-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-112-    lcf = ngx_http_conf_upstream_srv_conf(us,
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-113-                                          ngx_http_upstream_least_conn_module);
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-114-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c:115:    lcf->conns = ngx_pcalloc(cf->pool, sizeof(ngx_uint_t) * n);
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-116-    if (lcf->conns == NULL) {
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-117-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-118-    }
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-119-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-120-    us->peer.init = ngx_http_upstream_init_least_conn_peer;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-121-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-122-    return NGX_OK;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-123-}
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-124-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-125-
--
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-129-{
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-130-    ngx_http_upstream_lc_peer_data_t     *lcp;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-131-    ngx_http_upstream_least_conn_conf_t  *lcf;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-132-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-133-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-134-                   "init least conn peer");
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-135-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-136-    lcf = ngx_http_conf_upstream_srv_conf(us,
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-137-                                          ngx_http_upstream_least_conn_module);
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-138-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c:139:    lcp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_lc_peer_data_t));
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-140-    if (lcp == NULL) {
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-141-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-142-    }
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-143-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-144-    lcp->conns = lcf->conns;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-145-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-146-    r->upstream->peer.data = &lcp->rrp;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-147-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-148-    if (ngx_http_upstream_init_round_robin_peer(r, us) != NGX_OK) {
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-149-        return NGX_ERROR;
--
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-373-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-374-    lcp->free_rr_peer(pc, &lcp->rrp, state);
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-375-}
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-376-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-377-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-378-static void *
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-379-ngx_http_upstream_least_conn_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-380-{
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-381-    ngx_http_upstream_least_conn_conf_t  *conf;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-382-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c:383:    conf = ngx_pcalloc(cf->pool,
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-384-                       sizeof(ngx_http_upstream_least_conn_conf_t));
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-385-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-386-        return NULL;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-387-    }
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-388-
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-389-    /*
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-390-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-391-     *
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-392-     *     conf->conns = NULL;
./nginx/src/http/modules/ngx_http_upstream_least_conn_module.c-393-     */
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-430-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-431-                      "ngx_http_uwsgi_module does not support "
./nginx/src/http/modules/ngx_http_uwsgi_module.c-432-                      "subrequests in memory");
./nginx/src/http/modules/ngx_http_uwsgi_module.c-433-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-434-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-435-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-436-    if (ngx_http_upstream_create(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-437-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-438-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-439-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:440:    status = ngx_pcalloc(r->pool, sizeof(ngx_http_status_t));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-441-    if (status == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-442-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-443-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-444-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-445-    ngx_http_set_ctx(r, status, ngx_http_uwsgi_module);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-446-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-447-    uwcf = ngx_http_get_module_loc_conf(r, ngx_http_uwsgi_module);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-448-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-449-    if (uwcf->uwsgi_lengths) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-450-        if (ngx_http_uwsgi_eval(r, uwcf) != NGX_OK) {
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-464-#endif
./nginx/src/http/modules/ngx_http_uwsgi_module.c-465-    u->create_request = ngx_http_uwsgi_create_request;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-466-    u->reinit_request = ngx_http_uwsgi_reinit_request;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-467-    u->process_header = ngx_http_uwsgi_process_status_line;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-468-    u->abort_request = ngx_http_uwsgi_abort_request;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-469-    u->finalize_request = ngx_http_uwsgi_finalize_request;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-470-    r->state = 0;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-471-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-472-    u->buffering = uwcf->upstream.buffering;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-473-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:474:    u->pipe = ngx_pcalloc(r->pool, sizeof(ngx_event_pipe_t));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-475-    if (u->pipe == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-476-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-477-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-478-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-479-    u->pipe->input_filter = ngx_event_pipe_copy_input_filter;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-480-    u->pipe->input_ctx = r;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-481-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-482-    rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-483-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-484-    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-499-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-500-    if (ngx_http_script_run(r, &url.url, uwcf->uwsgi_lengths->elts, 0,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-501-                            uwcf->uwsgi_values->elts)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-502-        == NULL)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-503-    {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-504-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-505-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-506-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-507-    url.no_resolve = 1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-508-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:509:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-510-        if (url.err) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-511-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-512-                          "%s in upstream \"%V\"", url.err, &url.url);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-513-        }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-514-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-515-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-516-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-517-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-518-    u = r->upstream;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-519-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:520:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-521-    if (u->resolved == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-522-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-523-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-524-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-525-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-526-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-527-        u->resolved->socklen = url.addrs[0].socklen;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-528-        u->resolved->naddrs = 1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-529-        u->resolved->host = url.addrs[0].name;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-530-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-621-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-622-        if (uwcf->header_params) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-623-            n = 0;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-624-            part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-625-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-626-            while (part) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-627-                n += part->nelts;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-628-                part = part->next;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-629-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-630-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:631:            ignored = ngx_palloc(r->pool, n * sizeof(void *));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-632-            if (ignored == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-633-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-634-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-635-        }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-636-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-637-        part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-638-        header = part->elts;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-639-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-640-        for (i = 0; /* void */ ; i++) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-641-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-645-                }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-646-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-647-                part = part->next;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-648-                header = part->elts;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-649-                i = 0;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-650-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-651-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-652-            if (uwcf->header_params) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-653-                if (allocated < header[i].key.len) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-654-                    allocated = header[i].key.len + 16;
./nginx/src/http/modules/ngx_http_uwsgi_module.c:655:                    lowcase_key = ngx_pnalloc(r->pool, allocated);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-656-                    if (lowcase_key == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-657-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-658-                    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-659-                }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-660-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-661-                hash = 0;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-662-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-663-                for (n = 0; n < header[i].key.len; n++) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-664-                    ch = header[i].key.data[n];
./nginx/src/http/modules/ngx_http_uwsgi_module.c-665-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-689-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-690-#if 0
./nginx/src/http/modules/ngx_http_uwsgi_module.c-691-    /* allow custom uwsgi packet */
./nginx/src/http/modules/ngx_http_uwsgi_module.c-692-    if (len > 0 && len < 2) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-693-        ngx_log_error (NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-694-                       "uwsgi request is too little: %uz", len);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-695-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-696-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-697-#endif
./nginx/src/http/modules/ngx_http_uwsgi_module.c-698-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:699:    b = ngx_create_temp_buf(r->pool, len + 4);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-700-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-701-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-702-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-703-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:704:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-705-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-706-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-707-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-708-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-709-    cl->buf = b;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-710-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-711-    *b->last++ = (u_char) uwcf->modifier1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-712-    *b->last++ = (u_char) (len & 0xff);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-713-    *b->last++ = (u_char) ((len >> 8) & 0xff);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-714-    *b->last++ = (u_char) uwcf->modifier2;
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-832-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-833-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-834-    b->last = ngx_copy(b->last, uwcf->uwsgi_string.data,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-835-                       uwcf->uwsgi_string.len);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-836-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-837-    if (uwcf->upstream.pass_request_body) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-838-        body = r->upstream->request_bufs;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-839-        r->upstream->request_bufs = cl;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-840-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-841-        while (body) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c:842:            b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-843-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-844-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-845-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-846-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-847-            ngx_memcpy(b, body->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-848-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:849:            cl->next = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-850-            if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-851-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-852-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-853-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-854-            cl = cl->next;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-855-            cl->buf = b;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-856-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-857-            body = body->next;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-858-        }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-859-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-919-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-920-    if (u->state) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-921-        u->state->status = status->code;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-922-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-923-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-924-    u->headers_in.status_n = status->code;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-925-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-926-    len = status->end - status->start;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-927-    u->headers_in.status_line.len = len;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-928-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:929:    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-930-    if (u->headers_in.status_line.data == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-931-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-932-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-933-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-934-    ngx_memcpy(u->headers_in.status_line.data, status->start, len);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-935-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-936-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-937-                   "http uwsgi status %ui \"%V\"",
./nginx/src/http/modules/ngx_http_uwsgi_module.c-938-                   u->headers_in.status_n, &u->headers_in.status_line);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-939-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-966-            h = ngx_list_push(&r->upstream->headers_in.headers);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-967-            if (h == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-968-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-969-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-970-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-971-            h->hash = r->header_hash;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-972-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-973-            h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-974-            h->value.len = r->header_end - r->header_start;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-975-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:976:            h->key.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_uwsgi_module.c-977-                                      h->key.len + 1 + h->value.len + 1
./nginx/src/http/modules/ngx_http_uwsgi_module.c-978-                                      + h->key.len);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-979-            if (h->key.data == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-980-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-981-            }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-982-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-983-            h->value.data = h->key.data + h->key.len + 1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-984-            h->lowcase_key = h->key.data + h->key.len + 1 + h->value.len + 1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-985-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-986-            ngx_memcpy(h->key.data, r->header_name_start, h->key.len);
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1084-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1085-    return;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1086-}
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1087-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1088-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1089-static void *
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1090-ngx_http_uwsgi_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1091-{
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1092-    ngx_http_uwsgi_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1093-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:1094:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_uwsgi_loc_conf_t));
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1095-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1096-        return NULL;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1097-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1098-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1099-    conf->modifier1 = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1100-    conf->modifier2 = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1101-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1102-    conf->upstream.store = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1103-    conf->upstream.store_access = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1104-    conf->upstream.buffering = NGX_CONF_UNSET;
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1454-    if (conf->params_source == NULL
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1455-#if (NGX_HTTP_CACHE)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1456-        && (conf->upstream.cache == NULL)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1457-#endif
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1458-       )
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1459-    {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1460-        conf->headers_hash.buckets = (void *) 1;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1461-        return NGX_OK;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1462-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1463-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:1464:    conf->params_len = ngx_array_create(cf->pool, 64, 1);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1465-    if (conf->params_len == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1466-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1467-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1468-
./nginx/src/http/modules/ngx_http_uwsgi_module.c:1469:    conf->params = ngx_array_create(cf->pool, 512, 1);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1470-    if (conf->params == NULL) {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1471-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1472-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1473-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1474-    if (ngx_array_init(&headers_names, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1475-        != NGX_OK)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1476-    {
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1477-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1478-    }
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1479-
--
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1632-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1633-    *code = (uintptr_t) NULL;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1634-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1635-    conf->header_params = headers_names.nelts;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1636-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1637-    hash.hash = &conf->headers_hash;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1638-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1639-    hash.max_size = 512;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1640-    hash.bucket_size = 64;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1641-    hash.name = "uwsgi_params_hash";
./nginx/src/http/modules/ngx_http_uwsgi_module.c:1642:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1643-    hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1644-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1645-    return ngx_hash_init(&hash, headers_names.elts, headers_names.nelts);
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1646-}
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1647-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1648-
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1649-static char *
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1650-ngx_http_uwsgi_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1651-{
./nginx/src/http/modules/ngx_http_uwsgi_module.c-1652-    ngx_http_uwsgi_loc_conf_t *uwcf = conf;
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-159-        /* skipping location rewrite phase for server null location */
./nginx/src/http/modules/ngx_http_rewrite_module.c-160-        return NGX_DECLINED;
./nginx/src/http/modules/ngx_http_rewrite_module.c-161-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-162-
./nginx/src/http/modules/ngx_http_rewrite_module.c-163-    rlcf = ngx_http_get_module_loc_conf(r, ngx_http_rewrite_module);
./nginx/src/http/modules/ngx_http_rewrite_module.c-164-
./nginx/src/http/modules/ngx_http_rewrite_module.c-165-    if (rlcf->codes == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-166-        return NGX_DECLINED;
./nginx/src/http/modules/ngx_http_rewrite_module.c-167-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-168-
./nginx/src/http/modules/ngx_http_rewrite_module.c:169:    e = ngx_pcalloc(r->pool, sizeof(ngx_http_script_engine_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-170-    if (e == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-171-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-172-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-173-
./nginx/src/http/modules/ngx_http_rewrite_module.c:174:    e->sp = ngx_pcalloc(r->pool,
./nginx/src/http/modules/ngx_http_rewrite_module.c-175-                        rlcf->stack_size * sizeof(ngx_http_variable_value_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-176-    if (e->sp == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-177-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-178-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-179-
./nginx/src/http/modules/ngx_http_rewrite_module.c-180-    e->ip = rlcf->codes->elts;
./nginx/src/http/modules/ngx_http_rewrite_module.c-181-    e->request = r;
./nginx/src/http/modules/ngx_http_rewrite_module.c-182-    e->quote = 1;
./nginx/src/http/modules/ngx_http_rewrite_module.c-183-    e->log = rlcf->log;
./nginx/src/http/modules/ngx_http_rewrite_module.c-184-    e->status = NGX_DECLINED;
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-232-
./nginx/src/http/modules/ngx_http_rewrite_module.c-233-    return NGX_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-234-}
./nginx/src/http/modules/ngx_http_rewrite_module.c-235-
./nginx/src/http/modules/ngx_http_rewrite_module.c-236-
./nginx/src/http/modules/ngx_http_rewrite_module.c-237-static void *
./nginx/src/http/modules/ngx_http_rewrite_module.c-238-ngx_http_rewrite_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_rewrite_module.c-239-{
./nginx/src/http/modules/ngx_http_rewrite_module.c-240-    ngx_http_rewrite_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-241-
./nginx/src/http/modules/ngx_http_rewrite_module.c:242:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_rewrite_loc_conf_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-243-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-244-        return NULL;
./nginx/src/http/modules/ngx_http_rewrite_module.c-245-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-246-
./nginx/src/http/modules/ngx_http_rewrite_module.c-247-    conf->stack_size = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_rewrite_module.c-248-    conf->log = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_rewrite_module.c-249-    conf->uninitialized_variable_warn = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_rewrite_module.c-250-
./nginx/src/http/modules/ngx_http_rewrite_module.c-251-    return conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-252-}
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-317-
./nginx/src/http/modules/ngx_http_rewrite_module.c-318-    ngx_str_t                         *value;
./nginx/src/http/modules/ngx_http_rewrite_module.c-319-    ngx_uint_t                         last;
./nginx/src/http/modules/ngx_http_rewrite_module.c-320-    ngx_regex_compile_t                rc;
./nginx/src/http/modules/ngx_http_rewrite_module.c-321-    ngx_http_script_code_pt           *code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-322-    ngx_http_script_compile_t          sc;
./nginx/src/http/modules/ngx_http_rewrite_module.c-323-    ngx_http_script_regex_code_t      *regex;
./nginx/src/http/modules/ngx_http_rewrite_module.c-324-    ngx_http_script_regex_end_code_t  *regex_end;
./nginx/src/http/modules/ngx_http_rewrite_module.c-325-    u_char                             errstr[NGX_MAX_CONF_ERRSTR];
./nginx/src/http/modules/ngx_http_rewrite_module.c-326-
./nginx/src/http/modules/ngx_http_rewrite_module.c:327:    regex = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-328-                                       sizeof(ngx_http_script_regex_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-329-    if (regex == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-330-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-331-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-332-
./nginx/src/http/modules/ngx_http_rewrite_module.c-333-    ngx_memzero(regex, sizeof(ngx_http_script_regex_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-334-
./nginx/src/http/modules/ngx_http_rewrite_module.c-335-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_rewrite_module.c-336-
./nginx/src/http/modules/ngx_http_rewrite_module.c-337-    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-451-
./nginx/src/http/modules/ngx_http_rewrite_module.c-452-static char *
./nginx/src/http/modules/ngx_http_rewrite_module.c-453-ngx_http_rewrite_log(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_rewrite_module.c-454-{
./nginx/src/http/modules/ngx_http_rewrite_module.c-455-    ngx_http_rewrite_loc_conf_t  *lcf = conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-456-
./nginx/src/http/modules/ngx_http_rewrite_module.c-457-    u_char                            *p;
./nginx/src/http/modules/ngx_http_rewrite_module.c-458-    ngx_str_t                         *value;
./nginx/src/http/modules/ngx_http_rewrite_module.c-459-    ngx_http_script_log_code_t     *ret;
./nginx/src/http/modules/ngx_http_rewrite_module.c-460-
./nginx/src/http/modules/ngx_http_rewrite_module.c:461:    ret = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-462-                                     sizeof(ngx_http_script_log_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-463-    if (ret == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-464-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-465-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-466-
./nginx/src/http/modules/ngx_http_rewrite_module.c-467-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_rewrite_module.c-468-
./nginx/src/http/modules/ngx_http_rewrite_module.c-469-    ngx_memzero(ret, sizeof(ngx_http_script_log_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-470-
./nginx/src/http/modules/ngx_http_rewrite_module.c-471-	/* set callback function */
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-483-static char *
./nginx/src/http/modules/ngx_http_rewrite_module.c-484-ngx_http_rewrite_return(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_rewrite_module.c-485-{
./nginx/src/http/modules/ngx_http_rewrite_module.c-486-    ngx_http_rewrite_loc_conf_t  *lcf = conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-487-
./nginx/src/http/modules/ngx_http_rewrite_module.c-488-    u_char                            *p;
./nginx/src/http/modules/ngx_http_rewrite_module.c-489-    ngx_str_t                         *value, *v;
./nginx/src/http/modules/ngx_http_rewrite_module.c-490-    ngx_http_script_return_code_t     *ret;
./nginx/src/http/modules/ngx_http_rewrite_module.c-491-    ngx_http_compile_complex_value_t   ccv;
./nginx/src/http/modules/ngx_http_rewrite_module.c-492-
./nginx/src/http/modules/ngx_http_rewrite_module.c:493:    ret = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-494-                                     sizeof(ngx_http_script_return_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-495-    if (ret == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-496-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-497-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-498-
./nginx/src/http/modules/ngx_http_rewrite_module.c-499-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_rewrite_module.c-500-
./nginx/src/http/modules/ngx_http_rewrite_module.c-501-    ngx_memzero(ret, sizeof(ngx_http_script_return_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-502-
./nginx/src/http/modules/ngx_http_rewrite_module.c-503-    ret->code = ngx_http_script_return_code;
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-551-}
./nginx/src/http/modules/ngx_http_rewrite_module.c-552-
./nginx/src/http/modules/ngx_http_rewrite_module.c-553-
./nginx/src/http/modules/ngx_http_rewrite_module.c-554-static char *
./nginx/src/http/modules/ngx_http_rewrite_module.c-555-ngx_http_rewrite_break(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_rewrite_module.c-556-{
./nginx/src/http/modules/ngx_http_rewrite_module.c-557-    ngx_http_rewrite_loc_conf_t *lcf = conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-558-
./nginx/src/http/modules/ngx_http_rewrite_module.c-559-    ngx_http_script_code_pt  *code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-560-
./nginx/src/http/modules/ngx_http_rewrite_module.c:561:    code = ngx_http_script_start_code(cf->pool, &lcf->codes, sizeof(uintptr_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-562-    if (code == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-563-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-564-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-565-
./nginx/src/http/modules/ngx_http_rewrite_module.c-566-    *code = ngx_http_script_break_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-567-
./nginx/src/http/modules/ngx_http_rewrite_module.c-568-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-569-}
./nginx/src/http/modules/ngx_http_rewrite_module.c-570-
./nginx/src/http/modules/ngx_http_rewrite_module.c-571-
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-578-    char                         *rv;
./nginx/src/http/modules/ngx_http_rewrite_module.c-579-    u_char                       *elts;
./nginx/src/http/modules/ngx_http_rewrite_module.c-580-    ngx_uint_t                    i;
./nginx/src/http/modules/ngx_http_rewrite_module.c-581-    ngx_conf_t                    save;
./nginx/src/http/modules/ngx_http_rewrite_module.c-582-    ngx_http_module_t            *module;
./nginx/src/http/modules/ngx_http_rewrite_module.c-583-    ngx_http_conf_ctx_t          *ctx, *pctx;
./nginx/src/http/modules/ngx_http_rewrite_module.c-584-    ngx_http_core_loc_conf_t     *clcf, *pclcf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-585-    ngx_http_script_if_code_t    *if_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-586-    ngx_http_rewrite_loc_conf_t  *nlcf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-587-
./nginx/src/http/modules/ngx_http_rewrite_module.c:588:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-589-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-590-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-591-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-592-
./nginx/src/http/modules/ngx_http_rewrite_module.c-593-    pctx = cf->ctx;
./nginx/src/http/modules/ngx_http_rewrite_module.c-594-    ctx->main_conf = pctx->main_conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-595-    ctx->srv_conf = pctx->srv_conf;
./nginx/src/http/modules/ngx_http_rewrite_module.c-596-
./nginx/src/http/modules/ngx_http_rewrite_module.c:597:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/modules/ngx_http_rewrite_module.c-598-    if (ctx->loc_conf == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-599-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-600-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-601-
./nginx/src/http/modules/ngx_http_rewrite_module.c-602-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-603-        if (ngx_modules[i]->type != NGX_HTTP_MODULE) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-604-            continue;
./nginx/src/http/modules/ngx_http_rewrite_module.c-605-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-606-
./nginx/src/http/modules/ngx_http_rewrite_module.c-607-        module = ngx_modules[i]->ctx;
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-753-
./nginx/src/http/modules/ngx_http_rewrite_module.c-754-        len = value[cur].len;
./nginx/src/http/modules/ngx_http_rewrite_module.c-755-        p = value[cur].data;
./nginx/src/http/modules/ngx_http_rewrite_module.c-756-
./nginx/src/http/modules/ngx_http_rewrite_module.c-757-        if (len == 1 && p[0] == '=') {
./nginx/src/http/modules/ngx_http_rewrite_module.c-758-
./nginx/src/http/modules/ngx_http_rewrite_module.c-759-            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-760-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-761-            }
./nginx/src/http/modules/ngx_http_rewrite_module.c-762-
./nginx/src/http/modules/ngx_http_rewrite_module.c:763:            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-764-                                              sizeof(uintptr_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-765-            if (code == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-766-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-767-            }
./nginx/src/http/modules/ngx_http_rewrite_module.c-768-
./nginx/src/http/modules/ngx_http_rewrite_module.c-769-            *code = ngx_http_script_equal_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-770-
./nginx/src/http/modules/ngx_http_rewrite_module.c-771-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-772-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-773-
./nginx/src/http/modules/ngx_http_rewrite_module.c-774-        if (len == 2 && p[0] == '!' && p[1] == '=') {
./nginx/src/http/modules/ngx_http_rewrite_module.c-775-
./nginx/src/http/modules/ngx_http_rewrite_module.c-776-            if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-777-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-778-            }
./nginx/src/http/modules/ngx_http_rewrite_module.c-779-
./nginx/src/http/modules/ngx_http_rewrite_module.c:780:            code = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-781-                                              sizeof(uintptr_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-782-            if (code == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-783-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-784-            }
./nginx/src/http/modules/ngx_http_rewrite_module.c-785-
./nginx/src/http/modules/ngx_http_rewrite_module.c-786-            *code = ngx_http_script_not_equal_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-787-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-788-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-789-
./nginx/src/http/modules/ngx_http_rewrite_module.c-790-        if ((len == 1 && p[0] == '~')
./nginx/src/http/modules/ngx_http_rewrite_module.c-791-            || (len == 2 && p[0] == '~' && p[1] == '*')
./nginx/src/http/modules/ngx_http_rewrite_module.c-792-            || (len == 2 && p[0] == '!' && p[1] == '~')
./nginx/src/http/modules/ngx_http_rewrite_module.c-793-            || (len == 3 && p[0] == '!' && p[1] == '~' && p[2] == '*'))
./nginx/src/http/modules/ngx_http_rewrite_module.c-794-        {
./nginx/src/http/modules/ngx_http_rewrite_module.c:795:            regex = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-796-                                         sizeof(ngx_http_script_regex_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-797-            if (regex == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-798-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-799-            }
./nginx/src/http/modules/ngx_http_rewrite_module.c-800-
./nginx/src/http/modules/ngx_http_rewrite_module.c-801-            ngx_memzero(regex, sizeof(ngx_http_script_regex_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-802-
./nginx/src/http/modules/ngx_http_rewrite_module.c-803-            ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-804-
./nginx/src/http/modules/ngx_http_rewrite_module.c-805-            rc.pattern = value[last];
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-836-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-837-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-838-
./nginx/src/http/modules/ngx_http_rewrite_module.c-839-        value[last].data[value[last].len] = '\0';
./nginx/src/http/modules/ngx_http_rewrite_module.c-840-        value[last].len++;
./nginx/src/http/modules/ngx_http_rewrite_module.c-841-
./nginx/src/http/modules/ngx_http_rewrite_module.c-842-        if (ngx_http_rewrite_value(cf, lcf, &value[last]) != NGX_CONF_OK) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-843-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-844-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-845-
./nginx/src/http/modules/ngx_http_rewrite_module.c:846:        fop = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-847-                                          sizeof(ngx_http_script_file_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-848-        if (fop == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-849-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-850-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-851-
./nginx/src/http/modules/ngx_http_rewrite_module.c-852-        fop->code = ngx_http_script_file_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-853-
./nginx/src/http/modules/ngx_http_rewrite_module.c-854-        if (p[1] == 'f') {
./nginx/src/http/modules/ngx_http_rewrite_module.c-855-            fop->op = ngx_http_script_file_plain;
./nginx/src/http/modules/ngx_http_rewrite_module.c-856-            return NGX_CONF_OK;
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-914-
./nginx/src/http/modules/ngx_http_rewrite_module.c-915-    value->len--;
./nginx/src/http/modules/ngx_http_rewrite_module.c-916-    value->data++;
./nginx/src/http/modules/ngx_http_rewrite_module.c-917-
./nginx/src/http/modules/ngx_http_rewrite_module.c-918-    index = ngx_http_get_variable_index(cf, value);
./nginx/src/http/modules/ngx_http_rewrite_module.c-919-
./nginx/src/http/modules/ngx_http_rewrite_module.c-920-    if (index == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-921-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-922-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-923-
./nginx/src/http/modules/ngx_http_rewrite_module.c:924:    var_code = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-925-                                          sizeof(ngx_http_script_var_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-926-    if (var_code == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-927-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-928-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-929-
./nginx/src/http/modules/ngx_http_rewrite_module.c-930-    var_code->code = ngx_http_script_var_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-931-    var_code->index = index;
./nginx/src/http/modules/ngx_http_rewrite_module.c-932-
./nginx/src/http/modules/ngx_http_rewrite_module.c-933-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-934-}
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-973-    {
./nginx/src/http/modules/ngx_http_rewrite_module.c-974-        v->get_handler = ngx_http_rewrite_var;
./nginx/src/http/modules/ngx_http_rewrite_module.c-975-        v->data = index;
./nginx/src/http/modules/ngx_http_rewrite_module.c-976-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-977-
./nginx/src/http/modules/ngx_http_rewrite_module.c-978-    if (ngx_http_rewrite_value(cf, lcf, &value[2]) != NGX_CONF_OK) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-979-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-980-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-981-
./nginx/src/http/modules/ngx_http_rewrite_module.c-982-    if (v->set_handler) {
./nginx/src/http/modules/ngx_http_rewrite_module.c:983:        vhcode = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-984-                                   sizeof(ngx_http_script_var_handler_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-985-        if (vhcode == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-986-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-987-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-988-
./nginx/src/http/modules/ngx_http_rewrite_module.c-989-        vhcode->code = ngx_http_script_var_set_handler_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-990-        vhcode->handler = v->set_handler;
./nginx/src/http/modules/ngx_http_rewrite_module.c-991-        vhcode->data = v->data;
./nginx/src/http/modules/ngx_http_rewrite_module.c-992-
./nginx/src/http/modules/ngx_http_rewrite_module.c-993-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-994-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-995-
./nginx/src/http/modules/ngx_http_rewrite_module.c:996:    vcode = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-997-                                       sizeof(ngx_http_script_var_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-998-    if (vcode == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-999-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1000-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-1001-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1002-    vcode->code = ngx_http_script_set_var_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1003-    vcode->index = (uintptr_t) index;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1004-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1005-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1006-}
--
./nginx/src/http/modules/ngx_http_rewrite_module.c-1011-    ngx_str_t *value)
./nginx/src/http/modules/ngx_http_rewrite_module.c-1012-{
./nginx/src/http/modules/ngx_http_rewrite_module.c-1013-    ngx_int_t                              n;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1014-    ngx_http_script_compile_t              sc;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1015-    ngx_http_script_value_code_t          *val;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1016-    ngx_http_script_complex_value_code_t  *complex;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1017-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1018-    n = ngx_http_script_variables_count(value);
./nginx/src/http/modules/ngx_http_rewrite_module.c-1019-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1020-    if (n == 0) {
./nginx/src/http/modules/ngx_http_rewrite_module.c:1021:        val = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-1022-                                         sizeof(ngx_http_script_value_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-1023-        if (val == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-1024-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1025-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-1026-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1027-        n = ngx_atoi(value->data, value->len);
./nginx/src/http/modules/ngx_http_rewrite_module.c-1028-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1029-        if (n == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-1030-            n = 0;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1031-        }
./nginx/src/http/modules/ngx_http_rewrite_module.c-1032-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1033-        val->code = ngx_http_script_value_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1034-        val->value = (uintptr_t) n;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1035-        val->text_len = (uintptr_t) value->len;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1036-        val->text_data = (uintptr_t) value->data;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1037-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1038-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1039-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-1040-
./nginx/src/http/modules/ngx_http_rewrite_module.c:1041:    complex = ngx_http_script_start_code(cf->pool, &lcf->codes,
./nginx/src/http/modules/ngx_http_rewrite_module.c-1042-                                 sizeof(ngx_http_script_complex_value_code_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-1043-    if (complex == NULL) {
./nginx/src/http/modules/ngx_http_rewrite_module.c-1044-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1045-    }
./nginx/src/http/modules/ngx_http_rewrite_module.c-1046-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1047-    complex->code = ngx_http_script_complex_value_code;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1048-    complex->lengths = NULL;
./nginx/src/http/modules/ngx_http_rewrite_module.c-1049-
./nginx/src/http/modules/ngx_http_rewrite_module.c-1050-    ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
./nginx/src/http/modules/ngx_http_rewrite_module.c-1051-
--
./nginx/src/http/modules/ngx_http_limit_req_module.c-663-
./nginx/src/http/modules/ngx_http_limit_req_module.c-664-    return NGX_OK;
./nginx/src/http/modules/ngx_http_limit_req_module.c-665-}
./nginx/src/http/modules/ngx_http_limit_req_module.c-666-
./nginx/src/http/modules/ngx_http_limit_req_module.c-667-
./nginx/src/http/modules/ngx_http_limit_req_module.c-668-static void *
./nginx/src/http/modules/ngx_http_limit_req_module.c-669-ngx_http_limit_req_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_limit_req_module.c-670-{
./nginx/src/http/modules/ngx_http_limit_req_module.c-671-    ngx_http_limit_req_conf_t  *conf;
./nginx/src/http/modules/ngx_http_limit_req_module.c-672-
./nginx/src/http/modules/ngx_http_limit_req_module.c:673:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_req_conf_t));
./nginx/src/http/modules/ngx_http_limit_req_module.c-674-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-675-        return NULL;
./nginx/src/http/modules/ngx_http_limit_req_module.c-676-    }
./nginx/src/http/modules/ngx_http_limit_req_module.c-677-
./nginx/src/http/modules/ngx_http_limit_req_module.c-678-    /*
./nginx/src/http/modules/ngx_http_limit_req_module.c-679-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_limit_req_module.c-680-     *
./nginx/src/http/modules/ngx_http_limit_req_module.c-681-     *     conf->limits.elts = NULL;
./nginx/src/http/modules/ngx_http_limit_req_module.c-682-     */
./nginx/src/http/modules/ngx_http_limit_req_module.c-683-
--
./nginx/src/http/modules/ngx_http_limit_req_module.c-785-            }
./nginx/src/http/modules/ngx_http_limit_req_module.c-786-
./nginx/src/http/modules/ngx_http_limit_req_module.c-787-            continue;
./nginx/src/http/modules/ngx_http_limit_req_module.c-788-        }
./nginx/src/http/modules/ngx_http_limit_req_module.c-789-
./nginx/src/http/modules/ngx_http_limit_req_module.c-790-        if (value[i].data[0] == '$') {
./nginx/src/http/modules/ngx_http_limit_req_module.c-791-
./nginx/src/http/modules/ngx_http_limit_req_module.c-792-            value[i].len--;
./nginx/src/http/modules/ngx_http_limit_req_module.c-793-            value[i].data++;
./nginx/src/http/modules/ngx_http_limit_req_module.c-794-
./nginx/src/http/modules/ngx_http_limit_req_module.c:795:            ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_limit_req_ctx_t));
./nginx/src/http/modules/ngx_http_limit_req_module.c-796-            if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-797-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_req_module.c-798-            }
./nginx/src/http/modules/ngx_http_limit_req_module.c-799-
./nginx/src/http/modules/ngx_http_limit_req_module.c-800-            ctx->index = ngx_http_get_variable_index(cf, &value[i]);
./nginx/src/http/modules/ngx_http_limit_req_module.c-801-            if (ctx->index == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-802-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_req_module.c-803-            }
./nginx/src/http/modules/ngx_http_limit_req_module.c-804-
./nginx/src/http/modules/ngx_http_limit_req_module.c-805-            ctx->var = value[i];
--
./nginx/src/http/modules/ngx_http_limit_req_module.c-915-    if (shm_zone->data == NULL) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-916-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_limit_req_module.c-917-                           "unknown limit_req_zone \"%V\"",
./nginx/src/http/modules/ngx_http_limit_req_module.c-918-                           &shm_zone->shm.name);
./nginx/src/http/modules/ngx_http_limit_req_module.c-919-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_req_module.c-920-    }
./nginx/src/http/modules/ngx_http_limit_req_module.c-921-
./nginx/src/http/modules/ngx_http_limit_req_module.c-922-    limits = lrcf->limits.elts;
./nginx/src/http/modules/ngx_http_limit_req_module.c-923-
./nginx/src/http/modules/ngx_http_limit_req_module.c-924-    if (limits == NULL) {
./nginx/src/http/modules/ngx_http_limit_req_module.c:925:        if (ngx_array_init(&lrcf->limits, cf->pool, 1,
./nginx/src/http/modules/ngx_http_limit_req_module.c-926-                           sizeof(ngx_http_limit_req_limit_t))
./nginx/src/http/modules/ngx_http_limit_req_module.c-927-            != NGX_OK)
./nginx/src/http/modules/ngx_http_limit_req_module.c-928-        {
./nginx/src/http/modules/ngx_http_limit_req_module.c-929-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_limit_req_module.c-930-        }
./nginx/src/http/modules/ngx_http_limit_req_module.c-931-    }
./nginx/src/http/modules/ngx_http_limit_req_module.c-932-
./nginx/src/http/modules/ngx_http_limit_req_module.c-933-    for (i = 0; i < lrcf->limits.nelts; i++) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-934-        if (shm_zone == limits[i].shm_zone) {
./nginx/src/http/modules/ngx_http_limit_req_module.c-935-            return "is duplicate";
--
./nginx/src/http/modules/ngx_http_map_module.c-145-
./nginx/src/http/modules/ngx_http_map_module.c-146-    return NGX_OK;
./nginx/src/http/modules/ngx_http_map_module.c-147-}
./nginx/src/http/modules/ngx_http_map_module.c-148-
./nginx/src/http/modules/ngx_http_map_module.c-149-
./nginx/src/http/modules/ngx_http_map_module.c-150-static void *
./nginx/src/http/modules/ngx_http_map_module.c-151-ngx_http_map_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_map_module.c-152-{
./nginx/src/http/modules/ngx_http_map_module.c-153-    ngx_http_map_conf_t  *mcf;
./nginx/src/http/modules/ngx_http_map_module.c-154-
./nginx/src/http/modules/ngx_http_map_module.c:155:    mcf = ngx_palloc(cf->pool, sizeof(ngx_http_map_conf_t));
./nginx/src/http/modules/ngx_http_map_module.c-156-    if (mcf == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-157-        return NULL;
./nginx/src/http/modules/ngx_http_map_module.c-158-    }
./nginx/src/http/modules/ngx_http_map_module.c-159-
./nginx/src/http/modules/ngx_http_map_module.c-160-    mcf->hash_max_size = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_map_module.c-161-    mcf->hash_bucket_size = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_map_module.c-162-
./nginx/src/http/modules/ngx_http_map_module.c-163-    return mcf;
./nginx/src/http/modules/ngx_http_map_module.c-164-}
./nginx/src/http/modules/ngx_http_map_module.c-165-
./nginx/src/http/modules/ngx_http_map_module.c-166-
./nginx/src/http/modules/ngx_http_map_module.c-167-static char *
./nginx/src/http/modules/ngx_http_map_module.c-168-ngx_http_map_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_map_module.c-169-{
./nginx/src/http/modules/ngx_http_map_module.c-170-    ngx_http_map_conf_t  *mcf = conf;
./nginx/src/http/modules/ngx_http_map_module.c-171-
./nginx/src/http/modules/ngx_http_map_module.c-172-    char                              *rv;
./nginx/src/http/modules/ngx_http_map_module.c-173-    ngx_str_t                         *value, name;
./nginx/src/http/modules/ngx_http_map_module.c-174-    ngx_conf_t                         save;
./nginx/src/http/modules/ngx_http_map_module.c:175:    ngx_pool_t                        *pool;
./nginx/src/http/modules/ngx_http_map_module.c-176-    ngx_hash_init_t                    hash;
./nginx/src/http/modules/ngx_http_map_module.c-177-    ngx_http_map_ctx_t                *map;
./nginx/src/http/modules/ngx_http_map_module.c-178-    ngx_http_variable_t               *var;
./nginx/src/http/modules/ngx_http_map_module.c-179-    ngx_http_map_conf_ctx_t            ctx;
./nginx/src/http/modules/ngx_http_map_module.c-180-    ngx_http_compile_complex_value_t   ccv;
./nginx/src/http/modules/ngx_http_map_module.c-181-
./nginx/src/http/modules/ngx_http_map_module.c-182-    if (mcf->hash_max_size == NGX_CONF_UNSET_UINT) {
./nginx/src/http/modules/ngx_http_map_module.c-183-        mcf->hash_max_size = 2048;
./nginx/src/http/modules/ngx_http_map_module.c-184-    }
./nginx/src/http/modules/ngx_http_map_module.c-185-
./nginx/src/http/modules/ngx_http_map_module.c-186-    if (mcf->hash_bucket_size == NGX_CONF_UNSET_UINT) {
./nginx/src/http/modules/ngx_http_map_module.c-187-        mcf->hash_bucket_size = ngx_cacheline_size;
./nginx/src/http/modules/ngx_http_map_module.c-188-
./nginx/src/http/modules/ngx_http_map_module.c-189-    } else {
./nginx/src/http/modules/ngx_http_map_module.c-190-        mcf->hash_bucket_size = ngx_align(mcf->hash_bucket_size,
./nginx/src/http/modules/ngx_http_map_module.c-191-                                          ngx_cacheline_size);
./nginx/src/http/modules/ngx_http_map_module.c-192-    }
./nginx/src/http/modules/ngx_http_map_module.c-193-
./nginx/src/http/modules/ngx_http_map_module.c:194:    map = ngx_pcalloc(cf->pool, sizeof(ngx_http_map_ctx_t));
./nginx/src/http/modules/ngx_http_map_module.c-195-    if (map == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-196-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-197-    }
./nginx/src/http/modules/ngx_http_map_module.c-198-
./nginx/src/http/modules/ngx_http_map_module.c-199-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_map_module.c-200-
./nginx/src/http/modules/ngx_http_map_module.c-201-    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
./nginx/src/http/modules/ngx_http_map_module.c-202-
./nginx/src/http/modules/ngx_http_map_module.c-203-    ccv.cf = cf;
./nginx/src/http/modules/ngx_http_map_module.c-204-    ccv.value = &value[1];
--
./nginx/src/http/modules/ngx_http_map_module.c-220-    name.data++;
./nginx/src/http/modules/ngx_http_map_module.c-221-
./nginx/src/http/modules/ngx_http_map_module.c-222-    var = ngx_http_add_variable(cf, &name, NGX_HTTP_VAR_CHANGEABLE);
./nginx/src/http/modules/ngx_http_map_module.c-223-    if (var == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-224-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-225-    }
./nginx/src/http/modules/ngx_http_map_module.c-226-
./nginx/src/http/modules/ngx_http_map_module.c-227-    var->get_handler = ngx_http_map_variable;
./nginx/src/http/modules/ngx_http_map_module.c-228-    var->data = (uintptr_t) map;
./nginx/src/http/modules/ngx_http_map_module.c-229-
./nginx/src/http/modules/ngx_http_map_module.c:230:    pool = ngx_create_pool(16384, cf->log);
./nginx/src/http/modules/ngx_http_map_module.c:231:    if (pool == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-232-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-233-    }
./nginx/src/http/modules/ngx_http_map_module.c-234-
./nginx/src/http/modules/ngx_http_map_module.c:235:    ctx.keys.pool = cf->pool;
./nginx/src/http/modules/ngx_http_map_module.c:236:    ctx.keys.temp_pool = pool;
./nginx/src/http/modules/ngx_http_map_module.c-237-
./nginx/src/http/modules/ngx_http_map_module.c-238-    if (ngx_hash_keys_array_init(&ctx.keys, NGX_HASH_LARGE) != NGX_OK) {
./nginx/src/http/modules/ngx_http_map_module.c:239:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-240-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-241-    }
./nginx/src/http/modules/ngx_http_map_module.c-242-
./nginx/src/http/modules/ngx_http_map_module.c:243:    ctx.values_hash = ngx_pcalloc(pool, sizeof(ngx_array_t) * ctx.keys.hsize);
./nginx/src/http/modules/ngx_http_map_module.c-244-    if (ctx.values_hash == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c:245:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-246-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-247-    }
./nginx/src/http/modules/ngx_http_map_module.c-248-
./nginx/src/http/modules/ngx_http_map_module.c:249:    if (ngx_array_init(&ctx.var_values, cf->pool, 2,
./nginx/src/http/modules/ngx_http_map_module.c-250-                       sizeof(ngx_http_variable_value_t))
./nginx/src/http/modules/ngx_http_map_module.c-251-        != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-252-    {
./nginx/src/http/modules/ngx_http_map_module.c:253:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-254-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-255-    }
./nginx/src/http/modules/ngx_http_map_module.c-256-
./nginx/src/http/modules/ngx_http_map_module.c-257-#if (NGX_PCRE)
./nginx/src/http/modules/ngx_http_map_module.c:258:    if (ngx_array_init(&ctx.regexes, cf->pool, 2, sizeof(ngx_http_map_regex_t))
./nginx/src/http/modules/ngx_http_map_module.c-259-        != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-260-    {
./nginx/src/http/modules/ngx_http_map_module.c:261:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-262-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-263-    }
./nginx/src/http/modules/ngx_http_map_module.c-264-#endif
./nginx/src/http/modules/ngx_http_map_module.c-265-
./nginx/src/http/modules/ngx_http_map_module.c-266-    ctx.default_value = NULL;
./nginx/src/http/modules/ngx_http_map_module.c-267-    ctx.cf = &save;
./nginx/src/http/modules/ngx_http_map_module.c-268-    ctx.hostnames = 0;
./nginx/src/http/modules/ngx_http_map_module.c-269-
./nginx/src/http/modules/ngx_http_map_module.c-270-    save = *cf;
./nginx/src/http/modules/ngx_http_map_module.c:271:    cf->pool = pool;
./nginx/src/http/modules/ngx_http_map_module.c-272-    cf->ctx = &ctx;
./nginx/src/http/modules/ngx_http_map_module.c-273-    cf->handler = ngx_http_map;
./nginx/src/http/modules/ngx_http_map_module.c-274-    cf->handler_conf = conf;
./nginx/src/http/modules/ngx_http_map_module.c-275-
./nginx/src/http/modules/ngx_http_map_module.c-276-    rv = ngx_conf_parse(cf, NULL);
./nginx/src/http/modules/ngx_http_map_module.c-277-
./nginx/src/http/modules/ngx_http_map_module.c-278-    *cf = save;
./nginx/src/http/modules/ngx_http_map_module.c-279-
./nginx/src/http/modules/ngx_http_map_module.c-280-    if (rv != NGX_CONF_OK) {
./nginx/src/http/modules/ngx_http_map_module.c:281:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-282-        return rv;
./nginx/src/http/modules/ngx_http_map_module.c-283-    }
./nginx/src/http/modules/ngx_http_map_module.c-284-
./nginx/src/http/modules/ngx_http_map_module.c-285-    map->default_value = ctx.default_value ? ctx.default_value:
./nginx/src/http/modules/ngx_http_map_module.c-286-                                             &ngx_http_variable_null_value;
./nginx/src/http/modules/ngx_http_map_module.c-287-
./nginx/src/http/modules/ngx_http_map_module.c-288-    map->hostnames = ctx.hostnames;
./nginx/src/http/modules/ngx_http_map_module.c-289-
./nginx/src/http/modules/ngx_http_map_module.c-290-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_map_module.c-291-    hash.max_size = mcf->hash_max_size;
./nginx/src/http/modules/ngx_http_map_module.c-292-    hash.bucket_size = mcf->hash_bucket_size;
./nginx/src/http/modules/ngx_http_map_module.c-293-    hash.name = "map_hash";
./nginx/src/http/modules/ngx_http_map_module.c:294:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_map_module.c-295-
./nginx/src/http/modules/ngx_http_map_module.c-296-    if (ctx.keys.keys.nelts) {
./nginx/src/http/modules/ngx_http_map_module.c-297-        hash.hash = &map->map.hash.hash;
./nginx/src/http/modules/ngx_http_map_module.c-298-        hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_map_module.c-299-
./nginx/src/http/modules/ngx_http_map_module.c-300-        if (ngx_hash_init(&hash, ctx.keys.keys.elts, ctx.keys.keys.nelts)
./nginx/src/http/modules/ngx_http_map_module.c-301-            != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-302-        {
./nginx/src/http/modules/ngx_http_map_module.c:303:            ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-304-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-305-        }
./nginx/src/http/modules/ngx_http_map_module.c-306-    }
./nginx/src/http/modules/ngx_http_map_module.c-307-
./nginx/src/http/modules/ngx_http_map_module.c-308-    if (ctx.keys.dns_wc_head.nelts) {
./nginx/src/http/modules/ngx_http_map_module.c-309-
./nginx/src/http/modules/ngx_http_map_module.c-310-        ngx_qsort(ctx.keys.dns_wc_head.elts,
./nginx/src/http/modules/ngx_http_map_module.c-311-                  (size_t) ctx.keys.dns_wc_head.nelts,
./nginx/src/http/modules/ngx_http_map_module.c-312-                  sizeof(ngx_hash_key_t), ngx_http_map_cmp_dns_wildcards);
./nginx/src/http/modules/ngx_http_map_module.c-313-
./nginx/src/http/modules/ngx_http_map_module.c-314-        hash.hash = NULL;
./nginx/src/http/modules/ngx_http_map_module.c:315:        hash.temp_pool = pool;
./nginx/src/http/modules/ngx_http_map_module.c-316-
./nginx/src/http/modules/ngx_http_map_module.c-317-        if (ngx_hash_wildcard_init(&hash, ctx.keys.dns_wc_head.elts,
./nginx/src/http/modules/ngx_http_map_module.c-318-                                   ctx.keys.dns_wc_head.nelts)
./nginx/src/http/modules/ngx_http_map_module.c-319-            != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-320-        {
./nginx/src/http/modules/ngx_http_map_module.c:321:            ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-322-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-323-        }
./nginx/src/http/modules/ngx_http_map_module.c-324-
./nginx/src/http/modules/ngx_http_map_module.c-325-        map->map.hash.wc_head = (ngx_hash_wildcard_t *) hash.hash;
./nginx/src/http/modules/ngx_http_map_module.c-326-    }
./nginx/src/http/modules/ngx_http_map_module.c-327-
./nginx/src/http/modules/ngx_http_map_module.c-328-    if (ctx.keys.dns_wc_tail.nelts) {
./nginx/src/http/modules/ngx_http_map_module.c-329-
./nginx/src/http/modules/ngx_http_map_module.c-330-        ngx_qsort(ctx.keys.dns_wc_tail.elts,
./nginx/src/http/modules/ngx_http_map_module.c-331-                  (size_t) ctx.keys.dns_wc_tail.nelts,
./nginx/src/http/modules/ngx_http_map_module.c-332-                  sizeof(ngx_hash_key_t), ngx_http_map_cmp_dns_wildcards);
./nginx/src/http/modules/ngx_http_map_module.c-333-
./nginx/src/http/modules/ngx_http_map_module.c-334-        hash.hash = NULL;
./nginx/src/http/modules/ngx_http_map_module.c:335:        hash.temp_pool = pool;
./nginx/src/http/modules/ngx_http_map_module.c-336-
./nginx/src/http/modules/ngx_http_map_module.c-337-        if (ngx_hash_wildcard_init(&hash, ctx.keys.dns_wc_tail.elts,
./nginx/src/http/modules/ngx_http_map_module.c-338-                                   ctx.keys.dns_wc_tail.nelts)
./nginx/src/http/modules/ngx_http_map_module.c-339-            != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-340-        {
./nginx/src/http/modules/ngx_http_map_module.c:341:            ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-342-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-343-        }
./nginx/src/http/modules/ngx_http_map_module.c-344-
./nginx/src/http/modules/ngx_http_map_module.c-345-        map->map.hash.wc_tail = (ngx_hash_wildcard_t *) hash.hash;
./nginx/src/http/modules/ngx_http_map_module.c-346-    }
./nginx/src/http/modules/ngx_http_map_module.c-347-
./nginx/src/http/modules/ngx_http_map_module.c-348-#if (NGX_PCRE)
./nginx/src/http/modules/ngx_http_map_module.c-349-
./nginx/src/http/modules/ngx_http_map_module.c-350-    if (ctx.regexes.nelts) {
./nginx/src/http/modules/ngx_http_map_module.c-351-        map->map.regex = ctx.regexes.elts;
./nginx/src/http/modules/ngx_http_map_module.c-352-        map->map.nregex = ctx.regexes.nelts;
./nginx/src/http/modules/ngx_http_map_module.c-353-    }
./nginx/src/http/modules/ngx_http_map_module.c-354-
./nginx/src/http/modules/ngx_http_map_module.c-355-#endif
./nginx/src/http/modules/ngx_http_map_module.c-356-
./nginx/src/http/modules/ngx_http_map_module.c:357:    ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_map_module.c-358-
./nginx/src/http/modules/ngx_http_map_module.c-359-    return rv;
./nginx/src/http/modules/ngx_http_map_module.c-360-}
./nginx/src/http/modules/ngx_http_map_module.c-361-
./nginx/src/http/modules/ngx_http_map_module.c-362-
./nginx/src/http/modules/ngx_http_map_module.c-363-static int ngx_libc_cdecl
./nginx/src/http/modules/ngx_http_map_module.c-364-ngx_http_map_cmp_dns_wildcards(const void *one, const void *two)
./nginx/src/http/modules/ngx_http_map_module.c-365-{
./nginx/src/http/modules/ngx_http_map_module.c-366-    ngx_hash_key_t  *first, *second;
./nginx/src/http/modules/ngx_http_map_module.c-367-
--
./nginx/src/http/modules/ngx_http_map_module.c-450-                continue;
./nginx/src/http/modules/ngx_http_map_module.c-451-            }
./nginx/src/http/modules/ngx_http_map_module.c-452-
./nginx/src/http/modules/ngx_http_map_module.c-453-            if (ngx_strncmp(value[1].data, vp[i]->data, value[1].len) == 0) {
./nginx/src/http/modules/ngx_http_map_module.c-454-                var = vp[i];
./nginx/src/http/modules/ngx_http_map_module.c-455-                goto found;
./nginx/src/http/modules/ngx_http_map_module.c-456-            }
./nginx/src/http/modules/ngx_http_map_module.c-457-        }
./nginx/src/http/modules/ngx_http_map_module.c-458-
./nginx/src/http/modules/ngx_http_map_module.c-459-    } else {
./nginx/src/http/modules/ngx_http_map_module.c:460:        if (ngx_array_init(&ctx->values_hash[key], cf->pool, 4,
./nginx/src/http/modules/ngx_http_map_module.c-461-                           sizeof(ngx_http_variable_value_t *))
./nginx/src/http/modules/ngx_http_map_module.c-462-            != NGX_OK)
./nginx/src/http/modules/ngx_http_map_module.c-463-        {
./nginx/src/http/modules/ngx_http_map_module.c-464-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-465-        }
./nginx/src/http/modules/ngx_http_map_module.c-466-    }
./nginx/src/http/modules/ngx_http_map_module.c-467-
./nginx/src/http/modules/ngx_http_map_module.c:468:    var = ngx_palloc(ctx->keys.pool, sizeof(ngx_http_variable_value_t));
./nginx/src/http/modules/ngx_http_map_module.c-469-    if (var == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-470-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-471-    }
./nginx/src/http/modules/ngx_http_map_module.c-472-
./nginx/src/http/modules/ngx_http_map_module.c-473-    var->len = value[1].len;
./nginx/src/http/modules/ngx_http_map_module.c:474:    var->data = ngx_pstrdup(ctx->keys.pool, &value[1]);
./nginx/src/http/modules/ngx_http_map_module.c-475-    if (var->data == NULL) {
./nginx/src/http/modules/ngx_http_map_module.c-476-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_map_module.c-477-    }
./nginx/src/http/modules/ngx_http_map_module.c-478-
./nginx/src/http/modules/ngx_http_map_module.c-479-    var->valid = 1;
./nginx/src/http/modules/ngx_http_map_module.c-480-    var->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_map_module.c-481-    var->not_found = 0;
./nginx/src/http/modules/ngx_http_map_module.c-482-
./nginx/src/http/modules/ngx_http_map_module.c-483-    vp = ngx_array_push(&ctx->values_hash[key]);
./nginx/src/http/modules/ngx_http_map_module.c-484-    if (vp == NULL) {
--
./nginx/src/http/modules/ngx_http_mp4_module.c-439-    of.directio = NGX_MAX_OFF_T_VALUE;
./nginx/src/http/modules/ngx_http_mp4_module.c-440-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_mp4_module.c-441-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_mp4_module.c-442-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_mp4_module.c-443-    of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_mp4_module.c-444-
./nginx/src/http/modules/ngx_http_mp4_module.c-445-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_mp4_module.c-446-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-447-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-448-
./nginx/src/http/modules/ngx_http_mp4_module.c:449:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_mp4_module.c-450-        != NGX_OK)
./nginx/src/http/modules/ngx_http_mp4_module.c-451-    {
./nginx/src/http/modules/ngx_http_mp4_module.c-452-        switch (of.err) {
./nginx/src/http/modules/ngx_http_mp4_module.c-453-
./nginx/src/http/modules/ngx_http_mp4_module.c-454-        case 0:
./nginx/src/http/modules/ngx_http_mp4_module.c-455-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-456-
./nginx/src/http/modules/ngx_http_mp4_module.c-457-        case NGX_ENOENT:
./nginx/src/http/modules/ngx_http_mp4_module.c-458-        case NGX_ENOTDIR:
./nginx/src/http/modules/ngx_http_mp4_module.c-459-        case NGX_ENAMETOOLONG:
--
./nginx/src/http/modules/ngx_http_mp4_module.c-514-             * after dot so strtod() is used instead of atofp().  NaNs and
./nginx/src/http/modules/ngx_http_mp4_module.c-515-             * infinities become negative numbers after (int) conversion.
./nginx/src/http/modules/ngx_http_mp4_module.c-516-             */
./nginx/src/http/modules/ngx_http_mp4_module.c-517-
./nginx/src/http/modules/ngx_http_mp4_module.c-518-            ngx_set_errno(0);
./nginx/src/http/modules/ngx_http_mp4_module.c-519-            start = (int) (strtod((char *) value.data, NULL) * 1000);
./nginx/src/http/modules/ngx_http_mp4_module.c-520-
./nginx/src/http/modules/ngx_http_mp4_module.c-521-            if (ngx_errno == 0 && start >= 0) {
./nginx/src/http/modules/ngx_http_mp4_module.c-522-                r->allow_ranges = 0;
./nginx/src/http/modules/ngx_http_mp4_module.c-523-
./nginx/src/http/modules/ngx_http_mp4_module.c:524:                mp4 = ngx_pcalloc(r->pool, sizeof(ngx_http_mp4_file_t));
./nginx/src/http/modules/ngx_http_mp4_module.c-525-                if (mp4 == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-526-                    return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-527-                }
./nginx/src/http/modules/ngx_http_mp4_module.c-528-
./nginx/src/http/modules/ngx_http_mp4_module.c-529-                mp4->file.fd = of.fd;
./nginx/src/http/modules/ngx_http_mp4_module.c-530-                mp4->file.name = path;
./nginx/src/http/modules/ngx_http_mp4_module.c-531-                mp4->file.log = r->connection->log;;
./nginx/src/http/modules/ngx_http_mp4_module.c-532-                mp4->end = of.size;
./nginx/src/http/modules/ngx_http_mp4_module.c-533-                mp4->start = (ngx_uint_t) start;
./nginx/src/http/modules/ngx_http_mp4_module.c-534-                mp4->request = r;
./nginx/src/http/modules/ngx_http_mp4_module.c-535-
./nginx/src/http/modules/ngx_http_mp4_module.c-536-                switch (ngx_http_mp4_process(mp4)) {
./nginx/src/http/modules/ngx_http_mp4_module.c-537-
./nginx/src/http/modules/ngx_http_mp4_module.c-538-                case NGX_DECLINED:
./nginx/src/http/modules/ngx_http_mp4_module.c-539-                    if (mp4->buffer) {
./nginx/src/http/modules/ngx_http_mp4_module.c:540:                        ngx_pfree(r->pool, mp4->buffer);
./nginx/src/http/modules/ngx_http_mp4_module.c-541-                    }
./nginx/src/http/modules/ngx_http_mp4_module.c-542-
./nginx/src/http/modules/ngx_http_mp4_module.c:543:                    ngx_pfree(r->pool, mp4);
./nginx/src/http/modules/ngx_http_mp4_module.c-544-                    mp4 = NULL;
./nginx/src/http/modules/ngx_http_mp4_module.c-545-
./nginx/src/http/modules/ngx_http_mp4_module.c-546-                    break;
./nginx/src/http/modules/ngx_http_mp4_module.c-547-
./nginx/src/http/modules/ngx_http_mp4_module.c-548-                case NGX_OK:
./nginx/src/http/modules/ngx_http_mp4_module.c-549-                    r->headers_out.content_length_n = mp4->content_length;
./nginx/src/http/modules/ngx_http_mp4_module.c-550-                    break;
./nginx/src/http/modules/ngx_http_mp4_module.c-551-
./nginx/src/http/modules/ngx_http_mp4_module.c-552-                default: /* NGX_ERROR */
./nginx/src/http/modules/ngx_http_mp4_module.c-553-                    if (mp4->buffer) {
./nginx/src/http/modules/ngx_http_mp4_module.c:554:                        ngx_pfree(r->pool, mp4->buffer);
./nginx/src/http/modules/ngx_http_mp4_module.c-555-                    }
./nginx/src/http/modules/ngx_http_mp4_module.c-556-
./nginx/src/http/modules/ngx_http_mp4_module.c:557:                    ngx_pfree(r->pool, mp4);
./nginx/src/http/modules/ngx_http_mp4_module.c-558-
./nginx/src/http/modules/ngx_http_mp4_module.c-559-                    return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-560-                }
./nginx/src/http/modules/ngx_http_mp4_module.c-561-            }
./nginx/src/http/modules/ngx_http_mp4_module.c-562-        }
./nginx/src/http/modules/ngx_http_mp4_module.c-563-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-564-
./nginx/src/http/modules/ngx_http_mp4_module.c-565-    log->action = "sending mp4 to client";
./nginx/src/http/modules/ngx_http_mp4_module.c-566-
./nginx/src/http/modules/ngx_http_mp4_module.c-567-    if (clcf->directio <= of.size) {
--
./nginx/src/http/modules/ngx_http_mp4_module.c-584-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-585-
./nginx/src/http/modules/ngx_http_mp4_module.c-586-    r->headers_out.status = NGX_HTTP_OK;
./nginx/src/http/modules/ngx_http_mp4_module.c-587-    r->headers_out.last_modified_time = of.mtime;
./nginx/src/http/modules/ngx_http_mp4_module.c-588-
./nginx/src/http/modules/ngx_http_mp4_module.c-589-    if (ngx_http_set_content_type(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_mp4_module.c-590-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-591-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-592-
./nginx/src/http/modules/ngx_http_mp4_module.c-593-    if (mp4 == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c:594:        b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_mp4_module.c-595-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-596-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-597-        }
./nginx/src/http/modules/ngx_http_mp4_module.c-598-
./nginx/src/http/modules/ngx_http_mp4_module.c:599:        b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/modules/ngx_http_mp4_module.c-600-        if (b->file == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-601-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-602-        }
./nginx/src/http/modules/ngx_http_mp4_module.c-603-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-604-
./nginx/src/http/modules/ngx_http_mp4_module.c-605-    rc = ngx_http_send_header(r);
./nginx/src/http/modules/ngx_http_mp4_module.c-606-
./nginx/src/http/modules/ngx_http_mp4_module.c-607-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/modules/ngx_http_mp4_module.c-608-        return rc;
./nginx/src/http/modules/ngx_http_mp4_module.c-609-    }
--
./nginx/src/http/modules/ngx_http_mp4_module.c-898-        mp4->buffer_size = (size_t) (mp4->end - mp4->offset);
./nginx/src/http/modules/ngx_http_mp4_module.c-899-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-900-
./nginx/src/http/modules/ngx_http_mp4_module.c-901-    if (mp4->buffer_size < size) {
./nginx/src/http/modules/ngx_http_mp4_module.c-902-        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
./nginx/src/http/modules/ngx_http_mp4_module.c-903-                      "\"%s\" mp4 file truncated", mp4->file.name.data);
./nginx/src/http/modules/ngx_http_mp4_module.c-904-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-905-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-906-
./nginx/src/http/modules/ngx_http_mp4_module.c-907-    if (mp4->buffer == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c:908:        mp4->buffer = ngx_palloc(mp4->request->pool, mp4->buffer_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-909-        if (mp4->buffer == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-910-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-911-        }
./nginx/src/http/modules/ngx_http_mp4_module.c-912-
./nginx/src/http/modules/ngx_http_mp4_module.c-913-        mp4->buffer_start = mp4->buffer;
./nginx/src/http/modules/ngx_http_mp4_module.c-914-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-915-
./nginx/src/http/modules/ngx_http_mp4_module.c-916-    n = ngx_read_file(&mp4->file, mp4->buffer_start, mp4->buffer_size,
./nginx/src/http/modules/ngx_http_mp4_module.c-917-                      mp4->offset);
./nginx/src/http/modules/ngx_http_mp4_module.c-918-
--
./nginx/src/http/modules/ngx_http_mp4_module.c-947-        || ngx_mp4_atom_data(mp4) + atom_data_size > mp4->buffer_end)
./nginx/src/http/modules/ngx_http_mp4_module.c-948-    {
./nginx/src/http/modules/ngx_http_mp4_module.c-949-        ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
./nginx/src/http/modules/ngx_http_mp4_module.c-950-                      "\"%s\" mp4 ftyp atom is too large:%uL",
./nginx/src/http/modules/ngx_http_mp4_module.c-951-                      mp4->file.name.data, atom_data_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-952-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-953-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-954-
./nginx/src/http/modules/ngx_http_mp4_module.c-955-    atom_size = sizeof(ngx_mp4_atom_header_t) + (size_t) atom_data_size;
./nginx/src/http/modules/ngx_http_mp4_module.c-956-
./nginx/src/http/modules/ngx_http_mp4_module.c:957:    ftyp_atom = ngx_palloc(mp4->request->pool, atom_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-958-    if (ftyp_atom == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-959-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-960-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-961-
./nginx/src/http/modules/ngx_http_mp4_module.c-962-    ngx_mp4_set_32value(ftyp_atom, atom_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-963-    ngx_mp4_set_atom_name(ftyp_atom, 'f', 't', 'y', 'p');
./nginx/src/http/modules/ngx_http_mp4_module.c-964-
./nginx/src/http/modules/ngx_http_mp4_module.c-965-    /*
./nginx/src/http/modules/ngx_http_mp4_module.c-966-     * only moov atom content is guaranteed to be in mp4->buffer
./nginx/src/http/modules/ngx_http_mp4_module.c-967-     * during sending response, so ftyp atom content should be copied
--
./nginx/src/http/modules/ngx_http_mp4_module.c-1015-    if (atom_data_size > mp4->buffer_size) {
./nginx/src/http/modules/ngx_http_mp4_module.c-1016-
./nginx/src/http/modules/ngx_http_mp4_module.c-1017-        if (atom_data_size > conf->max_buffer_size) {
./nginx/src/http/modules/ngx_http_mp4_module.c-1018-            ngx_log_error(NGX_LOG_ERR, mp4->file.log, 0,
./nginx/src/http/modules/ngx_http_mp4_module.c-1019-                          "\"%s\" mp4 moov atom is too large:%uL, "
./nginx/src/http/modules/ngx_http_mp4_module.c-1020-                          "you may want to increase mp4_max_buffer_size",
./nginx/src/http/modules/ngx_http_mp4_module.c-1021-                          mp4->file.name.data, atom_data_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-1022-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-1023-        }
./nginx/src/http/modules/ngx_http_mp4_module.c-1024-
./nginx/src/http/modules/ngx_http_mp4_module.c:1025:        ngx_pfree(mp4->request->pool, mp4->buffer);
./nginx/src/http/modules/ngx_http_mp4_module.c-1026-        mp4->buffer = NULL;
./nginx/src/http/modules/ngx_http_mp4_module.c-1027-        mp4->buffer_pos = NULL;
./nginx/src/http/modules/ngx_http_mp4_module.c-1028-        mp4->buffer_end = NULL;
./nginx/src/http/modules/ngx_http_mp4_module.c-1029-
./nginx/src/http/modules/ngx_http_mp4_module.c-1030-        mp4->buffer_size = (size_t) atom_data_size
./nginx/src/http/modules/ngx_http_mp4_module.c-1031-                         + NGX_HTTP_MP4_MOOV_BUFFER_EXCESS * no_mdat;
./nginx/src/http/modules/ngx_http_mp4_module.c-1032-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-1033-
./nginx/src/http/modules/ngx_http_mp4_module.c-1034-    if (ngx_http_mp4_read(mp4, (size_t) atom_data_size) != NGX_OK) {
./nginx/src/http/modules/ngx_http_mp4_module.c-1035-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_mp4_module.c-1036-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-1037-
./nginx/src/http/modules/ngx_http_mp4_module.c-1038-    mp4->trak.elts = &mp4->traks;
./nginx/src/http/modules/ngx_http_mp4_module.c-1039-    mp4->trak.size = sizeof(ngx_http_mp4_trak_t);
./nginx/src/http/modules/ngx_http_mp4_module.c-1040-    mp4->trak.nalloc = 2;
./nginx/src/http/modules/ngx_http_mp4_module.c:1041:    mp4->trak.pool = mp4->request->pool;
./nginx/src/http/modules/ngx_http_mp4_module.c-1042-
./nginx/src/http/modules/ngx_http_mp4_module.c-1043-    atom = &mp4->moov_atom_buf;
./nginx/src/http/modules/ngx_http_mp4_module.c-1044-    atom->temporary = 1;
./nginx/src/http/modules/ngx_http_mp4_module.c-1045-    atom->pos = mp4->moov_atom_header;
./nginx/src/http/modules/ngx_http_mp4_module.c-1046-    atom->last = mp4->moov_atom_header + 8;
./nginx/src/http/modules/ngx_http_mp4_module.c-1047-
./nginx/src/http/modules/ngx_http_mp4_module.c-1048-    mp4->moov_atom.buf = &mp4->moov_atom_buf;
./nginx/src/http/modules/ngx_http_mp4_module.c-1049-
./nginx/src/http/modules/ngx_http_mp4_module.c-1050-    rc = ngx_http_mp4_read_atom(mp4, ngx_http_mp4_moov_atoms, atom_data_size);
./nginx/src/http/modules/ngx_http_mp4_module.c-1051-
--
./nginx/src/http/modules/ngx_http_mp4_module.c-2999-
./nginx/src/http/modules/ngx_http_mp4_module.c-3000-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_mp4_module.c-3001-}
./nginx/src/http/modules/ngx_http_mp4_module.c-3002-
./nginx/src/http/modules/ngx_http_mp4_module.c-3003-
./nginx/src/http/modules/ngx_http_mp4_module.c-3004-static void *
./nginx/src/http/modules/ngx_http_mp4_module.c-3005-ngx_http_mp4_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_mp4_module.c-3006-{
./nginx/src/http/modules/ngx_http_mp4_module.c-3007-    ngx_http_mp4_conf_t  *conf;
./nginx/src/http/modules/ngx_http_mp4_module.c-3008-
./nginx/src/http/modules/ngx_http_mp4_module.c:3009:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_mp4_conf_t));
./nginx/src/http/modules/ngx_http_mp4_module.c-3010-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_mp4_module.c-3011-        return NULL;
./nginx/src/http/modules/ngx_http_mp4_module.c-3012-    }
./nginx/src/http/modules/ngx_http_mp4_module.c-3013-
./nginx/src/http/modules/ngx_http_mp4_module.c-3014-    conf->buffer_size = NGX_CONF_UNSET_SIZE;
./nginx/src/http/modules/ngx_http_mp4_module.c-3015-    conf->max_buffer_size = NGX_CONF_UNSET_SIZE;
./nginx/src/http/modules/ngx_http_mp4_module.c-3016-
./nginx/src/http/modules/ngx_http_mp4_module.c-3017-    return conf;
./nginx/src/http/modules/ngx_http_mp4_module.c-3018-}
./nginx/src/http/modules/ngx_http_mp4_module.c-3019-
--
./nginx/src/http/modules/ngx_http_geoip_module.c-409-                                    ngx_http_geoip_addr(r, gcf));
./nginx/src/http/modules/ngx_http_geoip_module.c-410-#else
./nginx/src/http/modules/ngx_http_geoip_module.c-411-    val = GeoIP_name_by_ipnum(gcf->org, ngx_http_geoip_addr(r, gcf));
./nginx/src/http/modules/ngx_http_geoip_module.c-412-#endif
./nginx/src/http/modules/ngx_http_geoip_module.c-413-
./nginx/src/http/modules/ngx_http_geoip_module.c-414-    if (val == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-415-        goto not_found;
./nginx/src/http/modules/ngx_http_geoip_module.c-416-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-417-
./nginx/src/http/modules/ngx_http_geoip_module.c-418-    len = ngx_strlen(val);
./nginx/src/http/modules/ngx_http_geoip_module.c:419:    v->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-420-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-421-        ngx_free(val);
./nginx/src/http/modules/ngx_http_geoip_module.c-422-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-423-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-424-
./nginx/src/http/modules/ngx_http_geoip_module.c-425-    ngx_memcpy(v->data, val, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-426-
./nginx/src/http/modules/ngx_http_geoip_module.c-427-    v->len = len;
./nginx/src/http/modules/ngx_http_geoip_module.c-428-    v->valid = 1;
./nginx/src/http/modules/ngx_http_geoip_module.c-429-    v->no_cacheable = 0;
--
./nginx/src/http/modules/ngx_http_geoip_module.c-453-    if (gr == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-454-        goto not_found;
./nginx/src/http/modules/ngx_http_geoip_module.c-455-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-456-
./nginx/src/http/modules/ngx_http_geoip_module.c-457-    val = *(char **) ((char *) gr + data);
./nginx/src/http/modules/ngx_http_geoip_module.c-458-    if (val == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-459-        goto no_value;
./nginx/src/http/modules/ngx_http_geoip_module.c-460-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-461-
./nginx/src/http/modules/ngx_http_geoip_module.c-462-    len = ngx_strlen(val);
./nginx/src/http/modules/ngx_http_geoip_module.c:463:    v->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-464-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-465-        GeoIPRecord_delete(gr);
./nginx/src/http/modules/ngx_http_geoip_module.c-466-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-467-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-468-
./nginx/src/http/modules/ngx_http_geoip_module.c-469-    ngx_memcpy(v->data, val, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-470-
./nginx/src/http/modules/ngx_http_geoip_module.c-471-    v->len = len;
./nginx/src/http/modules/ngx_http_geoip_module.c-472-    v->valid = 1;
./nginx/src/http/modules/ngx_http_geoip_module.c-473-    v->no_cacheable = 0;
--
./nginx/src/http/modules/ngx_http_geoip_module.c-504-
./nginx/src/http/modules/ngx_http_geoip_module.c-505-    val = GeoIP_region_name_by_code(gr->country_code, gr->region);
./nginx/src/http/modules/ngx_http_geoip_module.c-506-
./nginx/src/http/modules/ngx_http_geoip_module.c-507-    GeoIPRecord_delete(gr);
./nginx/src/http/modules/ngx_http_geoip_module.c-508-
./nginx/src/http/modules/ngx_http_geoip_module.c-509-    if (val == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-510-        goto not_found;
./nginx/src/http/modules/ngx_http_geoip_module.c-511-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-512-
./nginx/src/http/modules/ngx_http_geoip_module.c-513-    len = ngx_strlen(val);
./nginx/src/http/modules/ngx_http_geoip_module.c:514:    v->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-515-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-516-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-517-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-518-
./nginx/src/http/modules/ngx_http_geoip_module.c-519-    ngx_memcpy(v->data, val, len);
./nginx/src/http/modules/ngx_http_geoip_module.c-520-
./nginx/src/http/modules/ngx_http_geoip_module.c-521-    v->len = len;
./nginx/src/http/modules/ngx_http_geoip_module.c-522-    v->valid = 1;
./nginx/src/http/modules/ngx_http_geoip_module.c-523-    v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_geoip_module.c-524-    v->not_found = 0;
--
./nginx/src/http/modules/ngx_http_geoip_module.c-539-{
./nginx/src/http/modules/ngx_http_geoip_module.c-540-    float         val;
./nginx/src/http/modules/ngx_http_geoip_module.c-541-    GeoIPRecord  *gr;
./nginx/src/http/modules/ngx_http_geoip_module.c-542-
./nginx/src/http/modules/ngx_http_geoip_module.c-543-    gr = ngx_http_geoip_get_city_record(r);
./nginx/src/http/modules/ngx_http_geoip_module.c-544-    if (gr == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-545-        v->not_found = 1;
./nginx/src/http/modules/ngx_http_geoip_module.c-546-        return NGX_OK;
./nginx/src/http/modules/ngx_http_geoip_module.c-547-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-548-
./nginx/src/http/modules/ngx_http_geoip_module.c:549:    v->data = ngx_pnalloc(r->pool, NGX_INT64_LEN + 5);
./nginx/src/http/modules/ngx_http_geoip_module.c-550-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-551-        GeoIPRecord_delete(gr);
./nginx/src/http/modules/ngx_http_geoip_module.c-552-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-553-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-554-
./nginx/src/http/modules/ngx_http_geoip_module.c-555-    val = *(float *) ((char *) gr + data);
./nginx/src/http/modules/ngx_http_geoip_module.c-556-
./nginx/src/http/modules/ngx_http_geoip_module.c-557-    v->len = ngx_sprintf(v->data, "%.4f", val) - v->data;
./nginx/src/http/modules/ngx_http_geoip_module.c-558-
./nginx/src/http/modules/ngx_http_geoip_module.c-559-    GeoIPRecord_delete(gr);
--
./nginx/src/http/modules/ngx_http_geoip_module.c-568-{
./nginx/src/http/modules/ngx_http_geoip_module.c-569-    int           val;
./nginx/src/http/modules/ngx_http_geoip_module.c-570-    GeoIPRecord  *gr;
./nginx/src/http/modules/ngx_http_geoip_module.c-571-
./nginx/src/http/modules/ngx_http_geoip_module.c-572-    gr = ngx_http_geoip_get_city_record(r);
./nginx/src/http/modules/ngx_http_geoip_module.c-573-    if (gr == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-574-        v->not_found = 1;
./nginx/src/http/modules/ngx_http_geoip_module.c-575-        return NGX_OK;
./nginx/src/http/modules/ngx_http_geoip_module.c-576-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-577-
./nginx/src/http/modules/ngx_http_geoip_module.c:578:    v->data = ngx_pnalloc(r->pool, NGX_INT64_LEN);
./nginx/src/http/modules/ngx_http_geoip_module.c-579-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-580-        GeoIPRecord_delete(gr);
./nginx/src/http/modules/ngx_http_geoip_module.c-581-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-582-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-583-
./nginx/src/http/modules/ngx_http_geoip_module.c-584-    val = *(int *) ((char *) gr + data);
./nginx/src/http/modules/ngx_http_geoip_module.c-585-
./nginx/src/http/modules/ngx_http_geoip_module.c-586-    v->len = ngx_sprintf(v->data, "%d", val) - v->data;
./nginx/src/http/modules/ngx_http_geoip_module.c-587-
./nginx/src/http/modules/ngx_http_geoip_module.c-588-    GeoIPRecord_delete(gr);
--
./nginx/src/http/modules/ngx_http_geoip_module.c-632-    return NGX_OK;
./nginx/src/http/modules/ngx_http_geoip_module.c-633-}
./nginx/src/http/modules/ngx_http_geoip_module.c-634-
./nginx/src/http/modules/ngx_http_geoip_module.c-635-
./nginx/src/http/modules/ngx_http_geoip_module.c-636-static void *
./nginx/src/http/modules/ngx_http_geoip_module.c-637-ngx_http_geoip_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_geoip_module.c-638-{
./nginx/src/http/modules/ngx_http_geoip_module.c-639-    ngx_pool_cleanup_t     *cln;
./nginx/src/http/modules/ngx_http_geoip_module.c-640-    ngx_http_geoip_conf_t  *conf;
./nginx/src/http/modules/ngx_http_geoip_module.c-641-
./nginx/src/http/modules/ngx_http_geoip_module.c:642:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_geoip_conf_t));
./nginx/src/http/modules/ngx_http_geoip_module.c-643-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-644-        return NULL;
./nginx/src/http/modules/ngx_http_geoip_module.c-645-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-646-
./nginx/src/http/modules/ngx_http_geoip_module.c-647-    conf->proxy_recursive = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_geoip_module.c-648-
./nginx/src/http/modules/ngx_http_geoip_module.c:649:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/ngx_http_geoip_module.c-650-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-651-        return NULL;
./nginx/src/http/modules/ngx_http_geoip_module.c-652-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-653-
./nginx/src/http/modules/ngx_http_geoip_module.c-654-    cln->handler = ngx_http_geoip_cleanup;
./nginx/src/http/modules/ngx_http_geoip_module.c-655-    cln->data = conf;
./nginx/src/http/modules/ngx_http_geoip_module.c-656-
./nginx/src/http/modules/ngx_http_geoip_module.c-657-    return conf;
./nginx/src/http/modules/ngx_http_geoip_module.c-658-}
./nginx/src/http/modules/ngx_http_geoip_module.c-659-
--
./nginx/src/http/modules/ngx_http_geoip_module.c-850-    ngx_str_t   *value;
./nginx/src/http/modules/ngx_http_geoip_module.c-851-    ngx_cidr_t  cidr, *c;
./nginx/src/http/modules/ngx_http_geoip_module.c-852-
./nginx/src/http/modules/ngx_http_geoip_module.c-853-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_geoip_module.c-854-
./nginx/src/http/modules/ngx_http_geoip_module.c-855-    if (ngx_http_geoip_cidr_value(cf, &value[1], &cidr) != NGX_OK) {
./nginx/src/http/modules/ngx_http_geoip_module.c-856-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-857-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-858-
./nginx/src/http/modules/ngx_http_geoip_module.c-859-    if (gcf->proxies == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c:860:        gcf->proxies = ngx_array_create(cf->pool, 4, sizeof(ngx_cidr_t));
./nginx/src/http/modules/ngx_http_geoip_module.c-861-        if (gcf->proxies == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-862-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-863-        }
./nginx/src/http/modules/ngx_http_geoip_module.c-864-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-865-
./nginx/src/http/modules/ngx_http_geoip_module.c-866-    c = ngx_array_push(gcf->proxies);
./nginx/src/http/modules/ngx_http_geoip_module.c-867-    if (c == NULL) {
./nginx/src/http/modules/ngx_http_geoip_module.c-868-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_geoip_module.c-869-    }
./nginx/src/http/modules/ngx_http_geoip_module.c-870-
--
./nginx/src/http/modules/ngx_http_static_module.c-92-    of.directio = clcf->directio;
./nginx/src/http/modules/ngx_http_static_module.c-93-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_static_module.c-94-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_static_module.c-95-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_static_module.c-96-    of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_static_module.c-97-
./nginx/src/http/modules/ngx_http_static_module.c-98-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_static_module.c-99-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-100-    }
./nginx/src/http/modules/ngx_http_static_module.c-101-
./nginx/src/http/modules/ngx_http_static_module.c:102:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_static_module.c-103-        != NGX_OK)
./nginx/src/http/modules/ngx_http_static_module.c-104-    {
./nginx/src/http/modules/ngx_http_static_module.c-105-        switch (of.err) {
./nginx/src/http/modules/ngx_http_static_module.c-106-
./nginx/src/http/modules/ngx_http_static_module.c-107-        case 0:
./nginx/src/http/modules/ngx_http_static_module.c-108-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-109-
./nginx/src/http/modules/ngx_http_static_module.c-110-        case NGX_ENOENT:
./nginx/src/http/modules/ngx_http_static_module.c-111-        case NGX_ENOTDIR:
./nginx/src/http/modules/ngx_http_static_module.c-112-        case NGX_ENAMETOOLONG:
--
./nginx/src/http/modules/ngx_http_static_module.c-143-    r->root_tested = !r->error_page;
./nginx/src/http/modules/ngx_http_static_module.c-144-
./nginx/src/http/modules/ngx_http_static_module.c-145-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, log, 0, "http static fd: %d", of.fd);
./nginx/src/http/modules/ngx_http_static_module.c-146-
./nginx/src/http/modules/ngx_http_static_module.c-147-    if (of.is_dir) {
./nginx/src/http/modules/ngx_http_static_module.c-148-
./nginx/src/http/modules/ngx_http_static_module.c-149-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http dir");
./nginx/src/http/modules/ngx_http_static_module.c-150-
./nginx/src/http/modules/ngx_http_static_module.c-151-        ngx_http_clear_location(r);
./nginx/src/http/modules/ngx_http_static_module.c-152-
./nginx/src/http/modules/ngx_http_static_module.c:153:        r->headers_out.location = ngx_palloc(r->pool, sizeof(ngx_table_elt_t));
./nginx/src/http/modules/ngx_http_static_module.c-154-        if (r->headers_out.location == NULL) {
./nginx/src/http/modules/ngx_http_static_module.c-155-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-156-        }
./nginx/src/http/modules/ngx_http_static_module.c-157-
./nginx/src/http/modules/ngx_http_static_module.c-158-        len = r->uri.len + 1;
./nginx/src/http/modules/ngx_http_static_module.c-159-
./nginx/src/http/modules/ngx_http_static_module.c-160-        if (!clcf->alias && clcf->root_lengths == NULL && r->args.len == 0) {
./nginx/src/http/modules/ngx_http_static_module.c-161-            location = path.data + clcf->root.len;
./nginx/src/http/modules/ngx_http_static_module.c-162-
./nginx/src/http/modules/ngx_http_static_module.c-163-            *last = '/';
./nginx/src/http/modules/ngx_http_static_module.c-164-
./nginx/src/http/modules/ngx_http_static_module.c-165-        } else {
./nginx/src/http/modules/ngx_http_static_module.c-166-            if (r->args.len) {
./nginx/src/http/modules/ngx_http_static_module.c-167-                len += r->args.len + 1;
./nginx/src/http/modules/ngx_http_static_module.c-168-            }
./nginx/src/http/modules/ngx_http_static_module.c-169-
./nginx/src/http/modules/ngx_http_static_module.c:170:            location = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_static_module.c-171-            if (location == NULL) {
./nginx/src/http/modules/ngx_http_static_module.c-172-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-173-            }
./nginx/src/http/modules/ngx_http_static_module.c-174-
./nginx/src/http/modules/ngx_http_static_module.c-175-            last = ngx_copy(location, r->uri.data, r->uri.len);
./nginx/src/http/modules/ngx_http_static_module.c-176-
./nginx/src/http/modules/ngx_http_static_module.c-177-            *last = '/';
./nginx/src/http/modules/ngx_http_static_module.c-178-
./nginx/src/http/modules/ngx_http_static_module.c-179-            if (r->args.len) {
./nginx/src/http/modules/ngx_http_static_module.c-180-                *++last = '?';
--
./nginx/src/http/modules/ngx_http_static_module.c-225-    }
./nginx/src/http/modules/ngx_http_static_module.c-226-
./nginx/src/http/modules/ngx_http_static_module.c-227-    if (r != r->main && of.size == 0) {
./nginx/src/http/modules/ngx_http_static_module.c-228-        return ngx_http_send_header(r);
./nginx/src/http/modules/ngx_http_static_module.c-229-    }
./nginx/src/http/modules/ngx_http_static_module.c-230-
./nginx/src/http/modules/ngx_http_static_module.c-231-    r->allow_ranges = 1;
./nginx/src/http/modules/ngx_http_static_module.c-232-
./nginx/src/http/modules/ngx_http_static_module.c-233-    /* we need to allocate all before the header would be sent */
./nginx/src/http/modules/ngx_http_static_module.c-234-
./nginx/src/http/modules/ngx_http_static_module.c:235:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_static_module.c-236-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_static_module.c-237-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-238-    }
./nginx/src/http/modules/ngx_http_static_module.c-239-
./nginx/src/http/modules/ngx_http_static_module.c:240:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/modules/ngx_http_static_module.c-241-    if (b->file == NULL) {
./nginx/src/http/modules/ngx_http_static_module.c-242-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_static_module.c-243-    }
./nginx/src/http/modules/ngx_http_static_module.c-244-
./nginx/src/http/modules/ngx_http_static_module.c-245-    rc = ngx_http_send_header(r);
./nginx/src/http/modules/ngx_http_static_module.c-246-
./nginx/src/http/modules/ngx_http_static_module.c-247-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/modules/ngx_http_static_module.c-248-        return rc;
./nginx/src/http/modules/ngx_http_static_module.c-249-    }
./nginx/src/http/modules/ngx_http_static_module.c-250-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-325-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-326-    slcf = ngx_http_get_module_loc_conf(r, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-327-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-328-    if (!slcf->enable
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-329-        || r->headers_out.content_length_n == 0
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-330-        || ngx_http_test_content_type(r, &slcf->types) == NULL)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-331-    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-332-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-333-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-334-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:335:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_ssi_ctx_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-336-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-337-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-338-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-339-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-340-    ngx_http_set_ctx(r, ctx, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-341-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-342-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-343-    ctx->value_len = slcf->value_len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-344-    ctx->last_out = &ctx->out;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-345-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-346-    ctx->encoding = NGX_HTTP_SSI_ENTITY_ENCODING;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-347-    ctx->output = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-348-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-349-    ctx->params.elts = ctx->params_array;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-350-    ctx->params.size = sizeof(ngx_table_elt_t);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-351-    ctx->params.nalloc = NGX_HTTP_SSI_PARAMS_N;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:352:    ctx->params.pool = r->pool;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-353-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-354-    ngx_str_set(&ctx->timefmt, "%A, %d-%b-%Y %H:%M:%S %Z");
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-355-    ngx_str_set(&ctx->errmsg,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-356-                "[an error occurred while processing the directive]");
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-357-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-358-    r->filter_need_in_memory = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-359-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-360-    if (r == r->main) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-361-        ngx_http_clear_content_length(r);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-362-        ngx_http_clear_last_modified(r);
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-391-            && ctx->buf == NULL
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-392-            && ctx->in == NULL
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-393-            && ctx->busy == NULL))
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-394-    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-395-        return ngx_http_next_body_filter(r, in);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-396-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-397-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-398-    /* add the incoming chain to the chain ctx->in */
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-399-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-400-    if (in) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:401:        if (ngx_chain_add_copy(r->pool, &ctx->in, in) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-402-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-403-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-404-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-405-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-406-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-407-                   "http ssi filter \"%V?%V\"", &r->uri, &r->args);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-408-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-409-    if (ctx->wait) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-410-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-411-        if (r != r->connection->data) {
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-473-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-474-                    if (ctx->saved) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-475-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-476-                        if (ctx->free) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-477-                            cl = ctx->free;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-478-                            ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-479-                            b = cl->buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-480-                            ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-481-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-482-                        } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:483:                            b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-484-                            if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-485-                                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-486-                            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-487-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:488:                            cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-489-                            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-490-                                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-491-                            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-492-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-493-                            cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-494-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-495-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-496-                        b->memory = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-497-                        b->pos = ngx_http_ssi_string;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-498-                        b->last = ngx_http_ssi_string + ctx->saved;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-502-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-503-                        ctx->saved = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-504-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-505-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-506-                    if (ctx->free) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-507-                        cl = ctx->free;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-508-                        ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-509-                        b = cl->buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-510-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-511-                    } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:512:                        b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-513-                        if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-514-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-515-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-516-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:517:                        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-518-                        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-519-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-520-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-521-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-522-                        cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-523-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-524-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-525-                    ngx_memcpy(b, ctx->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-526-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-527-                    b->pos = ctx->copy_start;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-543-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-544-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-545-                    cl->next = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-546-                    *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-547-                    ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-548-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-549-                } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-550-                    if (ctx->block
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-551-                        && ctx->saved + (ctx->copy_end - ctx->copy_start))
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-552-                    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:553:                        b = ngx_create_temp_buf(r->pool,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-554-                               ctx->saved + (ctx->copy_end - ctx->copy_start));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-555-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-556-                        if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-557-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-558-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-559-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-560-                        if (ctx->saved) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-561-                            b->last = ngx_cpymem(b->pos, ngx_http_ssi_string,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-562-                                                 ctx->saved);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-563-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-564-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-565-                        b->last = ngx_cpymem(b->last, ctx->copy_start,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-566-                                             ctx->copy_end - ctx->copy_start);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-567-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:568:                        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-569-                        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-570-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-571-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-572-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-573-                        cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-574-                        cl->next = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-575-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-576-                        b = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-577-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-578-                        mctx = ngx_http_get_module_ctx(r->main,
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-634-                        /* reconstruct the SSI command text */
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-635-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-636-                        len = 5 + ctx->command.len + 4;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-637-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-638-                        param = ctx->params.elts;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-639-                        for (i = 0; i < ctx->params.nelts; i++) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-640-                            len += 1 + param[i].key.len + 2
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-641-                                + param[i].value.len + 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-642-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-643-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:644:                        b = ngx_create_temp_buf(r->pool, len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-645-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-646-                        if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-647-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-648-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-649-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:650:                        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-651-                        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-652-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-653-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-654-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-655-                        cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-656-                        cl->next = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-657-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-658-                        *b->last++ = '<';
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-659-                        *b->last++ = '!';
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-660-                        *b->last++ = '-';
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-812-                continue;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-813-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-814-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-815-            if (ctx->free) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-816-                cl = ctx->free;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-817-                ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-818-                b = cl->buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-819-                ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-820-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-821-            } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:822:                b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-823-                if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-824-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-825-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-826-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:827:                cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-828-                if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-829-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-830-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-831-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-832-                cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-833-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-834-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-835-            b->memory = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-836-            b->pos = ctx->errmsg.data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-837-            b->last = ctx->errmsg.data + ctx->errmsg.len;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-845-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-846-        if (ctx->buf->last_buf || ngx_buf_in_memory(ctx->buf)) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-847-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-848-                if (ctx->free) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-849-                    cl = ctx->free;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-850-                    ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-851-                    b = cl->buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-852-                    ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-853-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-854-                } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:855:                    b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-856-                    if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-857-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-858-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-859-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:860:                    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-861-                    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-862-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-863-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-864-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-865-                    cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-866-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-867-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-868-                b->sync = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-869-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-870-                cl->next = NULL;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1119-        case ssi_precommand_state:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1120-            switch (ch) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1121-            case ' ':
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1122-            case CR:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1123-            case LF:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1124-            case '\t':
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1125-                break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1126-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1127-            default:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1128-                ctx->command.len = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1129:                ctx->command.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1130-                                                NGX_HTTP_SSI_COMMAND_LEN);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1131-                if (ctx->command.data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1132-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1133-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1134-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1135-                ctx->command.data[0] = ch;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1136-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1137-                ctx->key = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1138-                ctx->key = ngx_hash(ctx->key, ch);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1139-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1186-                state = ssi_comment_end0_state;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1187-                break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1188-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1189-            default:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1190-                ctx->param = ngx_array_push(&ctx->params);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1191-                if (ctx->param == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1192-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1193-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1194-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1195-                ctx->param->key.len = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1196:                ctx->param->key.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1197-                                                   NGX_HTTP_SSI_PARAM_LEN);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1198-                if (ctx->param->key.data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1199-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1200-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1201-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1202-                ctx->param->key.data[0] = ch;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1203-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1204-                ctx->param->value.len = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1205-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1206-                if (ctx->value_buf == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1207:                    ctx->param->value.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1208-                                                         ctx->value_len + 1);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1209-                    if (ctx->param->value.data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1210-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1211-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1212-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1213-                } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1214-                    ctx->param->value.data = ctx->value_buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1215-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1216-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1217-                state = ssi_param_state;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1386-                break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1387-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1388-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1389-            ctx->param->value.data[ctx->param->value.len++] = ch;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1390-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1391-            break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1392-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1393-        case ssi_postparam_state:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1394-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1395-            if (ctx->param->value.len + 1 < ctx->value_len / 2) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1396:                value = ngx_pnalloc(r->pool, ctx->param->value.len + 1);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1397-                if (value == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1398-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1399-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1400-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1401-                ngx_memcpy(value, ctx->param->value.data,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1402-                           ctx->param->value.len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1403-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1404-                ctx->value_buf = ctx->param->value.data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1405-                ctx->param->value.data = value;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1406-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1546-    ctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1547-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1548-#if (NGX_PCRE)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1549-    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1550-    ngx_str_t  *value;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1551-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1552-    if (key >= '0' && key <= '9') {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1553-        i = key - '0';
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1554-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1555-        if (i < ctx->ncaptures) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1556:            value = ngx_palloc(r->pool, sizeof(ngx_str_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1557-            if (value == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1558-                return NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1559-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1560-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1561-            i *= 2;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1562-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1563-            value->data = ctx->captures_data + ctx->captures[i];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1564-            value->len = ctx->captures[i + 1] - ctx->captures[i];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1565-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1566-            return value;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1628-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1629-            for (prefix = r->uri.len; prefix; prefix--) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1630-                if (r->uri.data[prefix - 1] == '/') {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1631-                    break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1632-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1633-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1634-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1635-            if (prefix) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1636-                len = prefix + text->len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1637-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1638:                data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1639-                if (data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1640-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1641-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1642-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1643-                p = ngx_copy(data, r->uri.data, prefix);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1644-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1645-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1646-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1647-        quoted = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1648-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1666-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1667-            *p++ = ch;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1668-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1669-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1670-        text->len = p - data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1671-        text->data = data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1672-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1673-        return NGX_OK;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1674-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1675-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1676:    if (ngx_array_init(&lengths, r->pool, 8, sizeof(size_t *)) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1677-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1678-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1679-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1680:    if (ngx_array_init(&values, r->pool, 8, sizeof(u_char *)) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1681-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1682-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1683-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1684-    len = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1685-    i = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1686-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1687-    while (i < text->len) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1688-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1689-        if (text->data[i] == '$') {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1690-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1825-                            break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1826-                        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1827-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1828-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1829-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1830-                break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1831-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1832-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1833-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1834-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1835:    p = ngx_pnalloc(r->pool, len + ((flags & NGX_HTTP_SSI_ADD_ZERO) ? 1 : 0));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1836-    if (p == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1837-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1838-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1839-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1840-    text->len = len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1841-    text->data = p;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1842-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1843-    p = ngx_copy(p, r->uri.data, prefix);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1844-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1845-    for (i = 0; i < values.nelts; i++) {
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1868-    ngx_int_t             key;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1869-    ngx_str_t            *vv, name, value;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1870-    ngx_uint_t            i, n;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1871-    ngx_http_ssi_ctx_t   *ctx;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1872-    ngx_http_ssi_var_t   *var;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1873-    ngx_regex_compile_t   rgc;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1874-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1875-    ngx_memzero(&rgc, sizeof(ngx_regex_compile_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1876-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1877-    rgc.pattern = *pattern;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1878:    rgc.pool = r->pool;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1879-    rgc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1880-    rgc.err.data = errstr;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1881-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1882-    if (ngx_regex_compile(&rgc) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1883-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0, "%V", &rgc.err);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1884-        return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1885-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1886-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1887-    n = (rgc.captures + 1) * 3;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1888-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1889:    captures = ngx_palloc(r->pool, n * sizeof(int));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1890-    if (captures == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1891-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1892-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1893-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1894-    rc = ngx_regex_exec(rgc.regex, str, captures, n);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1895-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1896-    if (rc < NGX_REGEX_NO_MATCHED) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1897-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1898-                      ngx_regex_exec_n " failed: %i on \"%V\" using \"%V\"",
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1899-                      rc, str, pattern);
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1906-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1907-    ctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1908-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1909-    ctx->ncaptures = rc;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1910-    ctx->captures = captures;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1911-    ctx->captures_data = str->data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1912-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1913-    if (rgc.named_captures > 0) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1914-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1915-        if (ctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:1916:            ctx->variables = ngx_list_create(r->pool, 4,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1917-                                             sizeof(ngx_http_ssi_var_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1918-            if (ctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1919-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1920-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1921-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1922-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1923-        size = rgc.name_size;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1924-        p = rgc.names;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1925-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-1926-        for (i = 0; i < (ngx_uint_t) rgc.named_captures; i++, p += size) {
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2079-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2080-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2081-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2082-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2083-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2084-                      "\"stub\"=\"%V\" for \"include\" not found", stub);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2085-        return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2086-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2087-    found:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2088-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2089:        psr = ngx_palloc(r->pool, sizeof(ngx_http_post_subrequest_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2090-        if (psr == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2091-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2092-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2093-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2094-        psr->handler = ngx_http_ssi_stub_output;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2095-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2096-        if (bl[i].count++) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2097-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2098-            out = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2099-            ll = &out;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2100-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2101-            for (tl = bl[i].bufs; tl; tl = tl->next) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2102-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2103-                if (ctx->free) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2104-                    cl = ctx->free;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2105-                    ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2106-                    b = cl->buf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2107-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2108-                } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2109:                    b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2110-                    if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2111-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2112-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2113-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2114:                    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2115-                    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2116-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2117-                    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2118-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2119-                    cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2120-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2121-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2122-                ngx_memcpy(b, tl->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2123-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2124-                b->pos = b->start;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2135-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2136-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2137-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2138-    if (wait) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2139-        flags |= NGX_HTTP_SUBREQUEST_WAITED;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2140-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2141-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2142-    if (set) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2143-        key = ngx_hash_strlow(set->data, set->data, set->len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2144-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2145:        psr = ngx_palloc(r->pool, sizeof(ngx_http_post_subrequest_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2146-        if (psr == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2147-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2148-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2149-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2150-        psr->handler = ngx_http_ssi_set_variable;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2151-        psr->data = ngx_http_ssi_get_variable(r, set, key);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2152-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2153-        if (psr->data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2154-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2155-            if (mctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2156:                mctx->variables = ngx_list_create(r->pool, 4,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2157-                                                  sizeof(ngx_http_ssi_var_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2158-                if (mctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2159-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2160-                }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2161-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2162-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2163-            var = ngx_list_push(mctx->variables);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2164-            if (var == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2165-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2166-            }
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2313-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2314-    p = value->data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2315-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2316-    switch (ctx->encoding) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2317-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2318-    case NGX_HTTP_SSI_URL_ENCODING:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2319-        len = 2 * ngx_escape_uri(NULL, value->data, value->len,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2320-                                 NGX_ESCAPE_HTML);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2321-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2322-        if (len) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2323:            p = ngx_pnalloc(r->pool, value->len + len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2324-            if (p == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2325-                return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2326-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2327-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2328-            (void) ngx_escape_uri(p, value->data, value->len, NGX_ESCAPE_HTML);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2329-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2330-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2331-        len += value->len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2332-        break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2333-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2334-    case NGX_HTTP_SSI_ENTITY_ENCODING:
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2335-        len = ngx_escape_html(NULL, value->data, value->len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2336-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2337-        if (len) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2338:            p = ngx_pnalloc(r->pool, value->len + len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2339-            if (p == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2340-                return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2341-            }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2342-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2343-            (void) ngx_escape_html(p, value->data, value->len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2344-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2345-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2346-        len += value->len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2347-        break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2348-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2349-    default: /* NGX_HTTP_SSI_NO_ENCODING */
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2350-        len = value->len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2351-        break;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2352-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2353-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2354:    b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2355-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2356-        return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2357-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2358-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2359:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2360-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2361-        return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2362-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2363-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2364-    b->memory = 1;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2365-    b->pos = p;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2366-    b->last = p + len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2367-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2368-    cl->buf = b;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2369-    cl->next = NULL;
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2377-static ngx_int_t
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2378-ngx_http_ssi_config(ngx_http_request_t *r, ngx_http_ssi_ctx_t *ctx,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2379-    ngx_str_t **params)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2380-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2381-    ngx_str_t  *value;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2382-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2383-    value = params[NGX_HTTP_SSI_CONFIG_TIMEFMT];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2384-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2385-    if (value) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2386-        ctx->timefmt.len = value->len;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2387:        ctx->timefmt.data = ngx_pnalloc(r->pool, value->len + 1);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2388-        if (ctx->timefmt.data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2389-            return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2390-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2391-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2392-        ngx_cpystrn(ctx->timefmt.data, value->data, value->len + 1);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2393-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2394-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2395-    value = params[NGX_HTTP_SSI_CONFIG_ERRMSG];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2396-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2397-    if (value) {
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2407-    ngx_str_t **params)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2408-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2409-    ngx_int_t            key, rc;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2410-    ngx_str_t           *name, *value, *vv;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2411-    ngx_http_ssi_var_t  *var;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2412-    ngx_http_ssi_ctx_t  *mctx;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2413-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2414-    mctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2415-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2416-    if (mctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2417:        mctx->variables = ngx_list_create(r->pool, 4,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2418-                                          sizeof(ngx_http_ssi_var_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2419-        if (mctx->variables == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2420-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2421-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2422-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2423-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2424-    name = params[NGX_HTTP_SSI_SET_VAR];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2425-    value = params[NGX_HTTP_SSI_SET_VALUE];
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2426-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2427-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2672-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2673-    ngx_http_ssi_ctx_t    *mctx;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2674-    ngx_http_ssi_block_t  *bl;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2675-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2676-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2677-                   "ssi block");
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2678-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2679-    mctx = ngx_http_get_module_ctx(r->main, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2680-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2681-    if (mctx->blocks == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2682:        mctx->blocks = ngx_array_create(r->pool, 4,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2683-                                        sizeof(ngx_http_ssi_block_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2684-        if (mctx->blocks == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2685-            return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2686-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2687-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2688-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2689-    bl = ngx_array_push(mctx->blocks);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2690-    if (bl == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2691-        return NGX_HTTP_SSI_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2692-    }
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2730-    v->not_found = 0;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2731-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2732-    tp = ngx_timeofday();
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2733-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2734-    ctx = ngx_http_get_module_ctx(r, ngx_http_ssi_filter_module);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2735-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2736-    if (ctx == NULL
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2737-        || (ctx->timefmt.len == sizeof("%s") - 1
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2738-            && ctx->timefmt.data[0] == '%' && ctx->timefmt.data[1] == 's'))
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2739-    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2740:        v->data = ngx_pnalloc(r->pool, NGX_TIME_T_LEN);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2741-        if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2742-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2743-        }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2744-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2745-        v->len = ngx_sprintf(v->data, "%T", tp->sec) - v->data;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2746-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2747-        return NGX_OK;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2748-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2749-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2750-    if (gmt) {
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2752-    } else {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2753-        ngx_libc_localtime(tp->sec, &tm);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2754-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2755-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2756-    v->len = strftime(buf, NGX_HTTP_SSI_DATE_LEN,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2757-                      (char *) ctx->timefmt.data, &tm);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2758-    if (v->len == 0) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2759-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2760-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2761-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2762:    v->data = ngx_pnalloc(r->pool, v->len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2763-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2764-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2765-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2766-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2767-    ngx_memcpy(v->data, buf, v->len);
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2768-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2769-    return NGX_OK;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2770-}
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2771-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2772-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2808-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2809-    return NGX_OK;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2810-}
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2811-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2812-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2813-static void *
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2814-ngx_http_ssi_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2815-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2816-    ngx_http_ssi_main_conf_t  *smcf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2817-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2818:    smcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssi_main_conf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2819-    if (smcf == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2820-        return NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2821-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2822-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2823:    smcf->commands.pool = cf->pool;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2824-    smcf->commands.temp_pool = cf->temp_pool;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2825-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2826-    if (ngx_hash_keys_array_init(&smcf->commands, NGX_HASH_SMALL) != NGX_OK) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2827-        return NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2828-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2829-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2830-    return smcf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2831-}
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2832-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2833-
--
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2836-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2837-    ngx_http_ssi_main_conf_t *smcf = conf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2838-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2839-    ngx_hash_init_t  hash;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2840-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2841-    hash.hash = &smcf->hash;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2842-    hash.key = ngx_hash_key;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2843-    hash.max_size = 1024;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2844-    hash.bucket_size = ngx_cacheline_size;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2845-    hash.name = "ssi_command_hash";
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2846:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2847-    hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2848-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2849-    if (ngx_hash_init(&hash, smcf->commands.keys.elts,
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2850-                      smcf->commands.keys.nelts)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2851-        != NGX_OK)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2852-    {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2853-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2854-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2855-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2856-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2857-}
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2858-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2859-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2860-static void *
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2861-ngx_http_ssi_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2862-{
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2863-    ngx_http_ssi_loc_conf_t  *slcf;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2864-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c:2865:    slcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_ssi_loc_conf_t));
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2866-    if (slcf == NULL) {
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2867-        return NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2868-    }
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2869-
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2870-    /*
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2871-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2872-     *
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2873-     *     conf->types = { NULL };
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2874-     *     conf->types_keys = NULL;
./nginx/src/http/modules/ngx_http_ssi_filter_module.c-2875-     */
--
./nginx/src/http/modules/ngx_http_browser_module.c-415-
./nginx/src/http/modules/ngx_http_browser_module.c-416-    return NGX_OK;
./nginx/src/http/modules/ngx_http_browser_module.c-417-}
./nginx/src/http/modules/ngx_http_browser_module.c-418-
./nginx/src/http/modules/ngx_http_browser_module.c-419-
./nginx/src/http/modules/ngx_http_browser_module.c-420-static void *
./nginx/src/http/modules/ngx_http_browser_module.c-421-ngx_http_browser_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_browser_module.c-422-{
./nginx/src/http/modules/ngx_http_browser_module.c-423-    ngx_http_browser_conf_t  *conf;
./nginx/src/http/modules/ngx_http_browser_module.c-424-
./nginx/src/http/modules/ngx_http_browser_module.c:425:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_browser_conf_t));
./nginx/src/http/modules/ngx_http_browser_module.c-426-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-427-        return NULL;
./nginx/src/http/modules/ngx_http_browser_module.c-428-    }
./nginx/src/http/modules/ngx_http_browser_module.c-429-
./nginx/src/http/modules/ngx_http_browser_module.c-430-    /*
./nginx/src/http/modules/ngx_http_browser_module.c-431-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_browser_module.c-432-     *
./nginx/src/http/modules/ngx_http_browser_module.c-433-     *     conf->modern_browsers = NULL;
./nginx/src/http/modules/ngx_http_browser_module.c-434-     *     conf->ancient_browsers = NULL;
./nginx/src/http/modules/ngx_http_browser_module.c-435-     *     conf->modern_browser_value = NULL;
--
./nginx/src/http/modules/ngx_http_browser_module.c-553-    if (cf->args->nelts == 2) {
./nginx/src/http/modules/ngx_http_browser_module.c-554-        if (ngx_strcmp(value[1].data, "unlisted") == 0) {
./nginx/src/http/modules/ngx_http_browser_module.c-555-            bcf->modern_unlisted_browsers = 1;
./nginx/src/http/modules/ngx_http_browser_module.c-556-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_browser_module.c-557-        }
./nginx/src/http/modules/ngx_http_browser_module.c-558-
./nginx/src/http/modules/ngx_http_browser_module.c-559-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-560-    }
./nginx/src/http/modules/ngx_http_browser_module.c-561-
./nginx/src/http/modules/ngx_http_browser_module.c-562-    if (bcf->modern_browsers == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c:563:        bcf->modern_browsers = ngx_array_create(cf->pool, 5,
./nginx/src/http/modules/ngx_http_browser_module.c-564-                                            sizeof(ngx_http_modern_browser_t));
./nginx/src/http/modules/ngx_http_browser_module.c-565-        if (bcf->modern_browsers == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-566-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-567-        }
./nginx/src/http/modules/ngx_http_browser_module.c-568-    }
./nginx/src/http/modules/ngx_http_browser_module.c-569-
./nginx/src/http/modules/ngx_http_browser_module.c-570-    browser = ngx_array_push(bcf->modern_browsers);
./nginx/src/http/modules/ngx_http_browser_module.c-571-    if (browser == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-572-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-573-    }
--
./nginx/src/http/modules/ngx_http_browser_module.c-639-
./nginx/src/http/modules/ngx_http_browser_module.c-640-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_browser_module.c-641-
./nginx/src/http/modules/ngx_http_browser_module.c-642-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/modules/ngx_http_browser_module.c-643-        if (ngx_strcmp(value[i].data, "netscape4") == 0) {
./nginx/src/http/modules/ngx_http_browser_module.c-644-            bcf->netscape4 = 1;
./nginx/src/http/modules/ngx_http_browser_module.c-645-            continue;
./nginx/src/http/modules/ngx_http_browser_module.c-646-        }
./nginx/src/http/modules/ngx_http_browser_module.c-647-
./nginx/src/http/modules/ngx_http_browser_module.c-648-        if (bcf->ancient_browsers == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c:649:            bcf->ancient_browsers = ngx_array_create(cf->pool, 4,
./nginx/src/http/modules/ngx_http_browser_module.c-650-                                                     sizeof(ngx_str_t));
./nginx/src/http/modules/ngx_http_browser_module.c-651-            if (bcf->ancient_browsers == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-652-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-653-            }
./nginx/src/http/modules/ngx_http_browser_module.c-654-        }
./nginx/src/http/modules/ngx_http_browser_module.c-655-
./nginx/src/http/modules/ngx_http_browser_module.c-656-        browser = ngx_array_push(bcf->ancient_browsers);
./nginx/src/http/modules/ngx_http_browser_module.c-657-        if (browser == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-658-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-659-        }
--
./nginx/src/http/modules/ngx_http_browser_module.c-665-}
./nginx/src/http/modules/ngx_http_browser_module.c-666-
./nginx/src/http/modules/ngx_http_browser_module.c-667-
./nginx/src/http/modules/ngx_http_browser_module.c-668-static char *
./nginx/src/http/modules/ngx_http_browser_module.c-669-ngx_http_modern_browser_value(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_browser_module.c-670-{
./nginx/src/http/modules/ngx_http_browser_module.c-671-    ngx_http_browser_conf_t *bcf = conf;
./nginx/src/http/modules/ngx_http_browser_module.c-672-
./nginx/src/http/modules/ngx_http_browser_module.c-673-    ngx_str_t  *value;
./nginx/src/http/modules/ngx_http_browser_module.c-674-
./nginx/src/http/modules/ngx_http_browser_module.c:675:    bcf->modern_browser_value = ngx_palloc(cf->pool,
./nginx/src/http/modules/ngx_http_browser_module.c-676-                                           sizeof(ngx_http_variable_value_t));
./nginx/src/http/modules/ngx_http_browser_module.c-677-    if (bcf->modern_browser_value == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-678-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-679-    }
./nginx/src/http/modules/ngx_http_browser_module.c-680-
./nginx/src/http/modules/ngx_http_browser_module.c-681-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_browser_module.c-682-
./nginx/src/http/modules/ngx_http_browser_module.c-683-    bcf->modern_browser_value->len = value[1].len;
./nginx/src/http/modules/ngx_http_browser_module.c-684-    bcf->modern_browser_value->valid = 1;
./nginx/src/http/modules/ngx_http_browser_module.c-685-    bcf->modern_browser_value->no_cacheable = 0;
--
./nginx/src/http/modules/ngx_http_browser_module.c-690-}
./nginx/src/http/modules/ngx_http_browser_module.c-691-
./nginx/src/http/modules/ngx_http_browser_module.c-692-
./nginx/src/http/modules/ngx_http_browser_module.c-693-static char *
./nginx/src/http/modules/ngx_http_browser_module.c-694-ngx_http_ancient_browser_value(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_browser_module.c-695-{
./nginx/src/http/modules/ngx_http_browser_module.c-696-    ngx_http_browser_conf_t *bcf = conf;
./nginx/src/http/modules/ngx_http_browser_module.c-697-
./nginx/src/http/modules/ngx_http_browser_module.c-698-    ngx_str_t  *value;
./nginx/src/http/modules/ngx_http_browser_module.c-699-
./nginx/src/http/modules/ngx_http_browser_module.c:700:    bcf->ancient_browser_value = ngx_palloc(cf->pool,
./nginx/src/http/modules/ngx_http_browser_module.c-701-                                            sizeof(ngx_http_variable_value_t));
./nginx/src/http/modules/ngx_http_browser_module.c-702-    if (bcf->ancient_browser_value == NULL) {
./nginx/src/http/modules/ngx_http_browser_module.c-703-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_browser_module.c-704-    }
./nginx/src/http/modules/ngx_http_browser_module.c-705-
./nginx/src/http/modules/ngx_http_browser_module.c-706-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_browser_module.c-707-
./nginx/src/http/modules/ngx_http_browser_module.c-708-    bcf->ancient_browser_value->len = value[1].len;
./nginx/src/http/modules/ngx_http_browser_module.c-709-    bcf->ancient_browser_value->valid = 1;
./nginx/src/http/modules/ngx_http_browser_module.c-710-    bcf->ancient_browser_value->no_cacheable = 0;
--
./nginx/src/http/modules/ngx_http_auth_basic_module.c-262-            left = 0;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-263-        }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-264-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-265-        offset += n;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-266-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-267-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-268-    ngx_http_auth_basic_close(&file);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-269-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-270-    if (state == sw_passwd) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-271-        pwd.len = i - passwd;
./nginx/src/http/modules/ngx_http_auth_basic_module.c:272:        pwd.data = ngx_pnalloc(r->pool, pwd.len + 1);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-273-        if (pwd.data == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-274-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-275-        }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-276-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-277-        ngx_cpystrn(pwd.data, &buf[passwd], pwd.len + 1);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-278-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-279-        return ngx_http_auth_basic_crypt_handler(r, NULL, &pwd, &realm);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-280-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-281-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-282-    ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
--
./nginx/src/http/modules/ngx_http_auth_basic_module.c-287-}
./nginx/src/http/modules/ngx_http_auth_basic_module.c-288-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-289-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-290-static ngx_int_t
./nginx/src/http/modules/ngx_http_auth_basic_module.c-291-ngx_http_auth_basic_crypt_handler(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_auth_basic_module.c-292-    ngx_http_auth_basic_ctx_t *ctx, ngx_str_t *passwd, ngx_str_t *realm)
./nginx/src/http/modules/ngx_http_auth_basic_module.c-293-{
./nginx/src/http/modules/ngx_http_auth_basic_module.c-294-    ngx_int_t   rc;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-295-    u_char     *encrypted;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-296-
./nginx/src/http/modules/ngx_http_auth_basic_module.c:297:    rc = ngx_crypt(r->pool, r->headers_in.passwd.data, passwd->data,
./nginx/src/http/modules/ngx_http_auth_basic_module.c-298-                   &encrypted);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-299-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-300-    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_auth_basic_module.c-301-                   "rc: %d user: \"%V\" salt: \"%s\"",
./nginx/src/http/modules/ngx_http_auth_basic_module.c-302-                   rc, &r->headers_in.user, passwd->data);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-303-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-304-    if (rc == NGX_OK) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-305-        if (ngx_strcmp(encrypted, passwd->data) == 0) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-306-            return NGX_OK;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-307-        }
--
./nginx/src/http/modules/ngx_http_auth_basic_module.c-316-        return ngx_http_auth_basic_set_realm(r, realm);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-317-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-318-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-319-    if (rc == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-320-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-321-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-322-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-323-    /* rc == NGX_AGAIN */
./nginx/src/http/modules/ngx_http_auth_basic_module.c-324-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-325-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c:326:        ctx = ngx_palloc(r->pool, sizeof(ngx_http_auth_basic_ctx_t));
./nginx/src/http/modules/ngx_http_auth_basic_module.c-327-        if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-328-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-329-        }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-330-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-331-        ngx_http_set_ctx(r, ctx, ngx_http_auth_basic_module);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-332-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-333-        ctx->passwd.len = passwd->len;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-334-        passwd->len++;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-335-
./nginx/src/http/modules/ngx_http_auth_basic_module.c:336:        ctx->passwd.data = ngx_pstrdup(r->pool, passwd);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-337-        if (ctx->passwd.data == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-338-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-339-        }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-340-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-341-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-342-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-343-    /* TODO: add mutex event */
./nginx/src/http/modules/ngx_http_auth_basic_module.c-344-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-345-    return rc;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-346-}
--
./nginx/src/http/modules/ngx_http_auth_basic_module.c-352-    size_t   len;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-353-    u_char  *basic, *p;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-354-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-355-    r->headers_out.www_authenticate = ngx_list_push(&r->headers_out.headers);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-356-    if (r->headers_out.www_authenticate == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-357-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-358-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-359-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-360-    len = sizeof("Basic realm=\"\"") - 1 + realm->len;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-361-
./nginx/src/http/modules/ngx_http_auth_basic_module.c:362:    basic = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-363-    if (basic == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-364-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-365-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-366-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-367-    p = ngx_cpymem(basic, "Basic realm=\"", sizeof("Basic realm=\"") - 1);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-368-    p = ngx_cpymem(p, realm->data, realm->len);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-369-    *p = '"';
./nginx/src/http/modules/ngx_http_auth_basic_module.c-370-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-371-    r->headers_out.www_authenticate->hash = 1;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-372-    ngx_str_set(&r->headers_out.www_authenticate->key, "WWW-Authenticate");
--
./nginx/src/http/modules/ngx_http_auth_basic_module.c-384-                      ngx_close_file_n " \"%s\" failed", file->name.data);
./nginx/src/http/modules/ngx_http_auth_basic_module.c-385-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-386-}
./nginx/src/http/modules/ngx_http_auth_basic_module.c-387-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-388-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-389-static void *
./nginx/src/http/modules/ngx_http_auth_basic_module.c-390-ngx_http_auth_basic_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_auth_basic_module.c-391-{
./nginx/src/http/modules/ngx_http_auth_basic_module.c-392-    ngx_http_auth_basic_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-393-
./nginx/src/http/modules/ngx_http_auth_basic_module.c:394:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_auth_basic_loc_conf_t));
./nginx/src/http/modules/ngx_http_auth_basic_module.c-395-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_auth_basic_module.c-396-        return NULL;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-397-    }
./nginx/src/http/modules/ngx_http_auth_basic_module.c-398-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-399-    return conf;
./nginx/src/http/modules/ngx_http_auth_basic_module.c-400-}
./nginx/src/http/modules/ngx_http_auth_basic_module.c-401-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-402-
./nginx/src/http/modules/ngx_http_auth_basic_module.c-403-static char *
./nginx/src/http/modules/ngx_http_auth_basic_module.c-404-ngx_http_auth_basic_merge_loc_conf(ngx_conf_t *cf, void *parent, void *child)
--
./nginx/src/http/modules/ngx_http_index_module.c-207-        of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_index_module.c-208-        of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_index_module.c-209-        of.test_only = 1;
./nginx/src/http/modules/ngx_http_index_module.c-210-        of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_index_module.c-211-        of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_index_module.c-212-
./nginx/src/http/modules/ngx_http_index_module.c-213-        if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_index_module.c-214-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-215-        }
./nginx/src/http/modules/ngx_http_index_module.c-216-
./nginx/src/http/modules/ngx_http_index_module.c:217:        if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_index_module.c-218-            != NGX_OK)
./nginx/src/http/modules/ngx_http_index_module.c-219-        {
./nginx/src/http/modules/ngx_http_index_module.c-220-            ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, of.err,
./nginx/src/http/modules/ngx_http_index_module.c-221-                           "%s \"%s\" failed", of.failed, path.data);
./nginx/src/http/modules/ngx_http_index_module.c-222-
./nginx/src/http/modules/ngx_http_index_module.c-223-            if (of.err == 0) {
./nginx/src/http/modules/ngx_http_index_module.c-224-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-225-            }
./nginx/src/http/modules/ngx_http_index_module.c-226-
./nginx/src/http/modules/ngx_http_index_module.c-227-#if (NGX_HAVE_OPENAT)
--
./nginx/src/http/modules/ngx_http_index_module.c-258-
./nginx/src/http/modules/ngx_http_index_module.c-259-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-260-        }
./nginx/src/http/modules/ngx_http_index_module.c-261-
./nginx/src/http/modules/ngx_http_index_module.c-262-        uri.len = r->uri.len + len - 1;
./nginx/src/http/modules/ngx_http_index_module.c-263-
./nginx/src/http/modules/ngx_http_index_module.c-264-        if (!clcf->alias) {
./nginx/src/http/modules/ngx_http_index_module.c-265-            uri.data = path.data + root;
./nginx/src/http/modules/ngx_http_index_module.c-266-
./nginx/src/http/modules/ngx_http_index_module.c-267-        } else {
./nginx/src/http/modules/ngx_http_index_module.c:268:            uri.data = ngx_pnalloc(r->pool, uri.len);
./nginx/src/http/modules/ngx_http_index_module.c-269-            if (uri.data == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-270-                return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-271-            }
./nginx/src/http/modules/ngx_http_index_module.c-272-
./nginx/src/http/modules/ngx_http_index_module.c-273-            p = ngx_copy(uri.data, r->uri.data, r->uri.len);
./nginx/src/http/modules/ngx_http_index_module.c-274-            ngx_memcpy(p, name, len - 1);
./nginx/src/http/modules/ngx_http_index_module.c-275-        }
./nginx/src/http/modules/ngx_http_index_module.c-276-
./nginx/src/http/modules/ngx_http_index_module.c-277-        return ngx_http_internal_redirect(r, &uri, &r->args);
./nginx/src/http/modules/ngx_http_index_module.c-278-    }
--
./nginx/src/http/modules/ngx_http_index_module.c-306-
./nginx/src/http/modules/ngx_http_index_module.c-307-    of.test_dir = 1;
./nginx/src/http/modules/ngx_http_index_module.c-308-    of.test_only = 1;
./nginx/src/http/modules/ngx_http_index_module.c-309-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_index_module.c-310-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_index_module.c-311-
./nginx/src/http/modules/ngx_http_index_module.c-312-    if (ngx_http_set_disable_symlinks(r, clcf, &dir, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_index_module.c-313-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-314-    }
./nginx/src/http/modules/ngx_http_index_module.c-315-
./nginx/src/http/modules/ngx_http_index_module.c:316:    if (ngx_open_cached_file(clcf->open_file_cache, &dir, &of, r->pool)
./nginx/src/http/modules/ngx_http_index_module.c-317-        != NGX_OK)
./nginx/src/http/modules/ngx_http_index_module.c-318-    {
./nginx/src/http/modules/ngx_http_index_module.c-319-        if (of.err) {
./nginx/src/http/modules/ngx_http_index_module.c-320-
./nginx/src/http/modules/ngx_http_index_module.c-321-#if (NGX_HAVE_OPENAT)
./nginx/src/http/modules/ngx_http_index_module.c-322-            if (of.err == NGX_EMLINK
./nginx/src/http/modules/ngx_http_index_module.c-323-                || of.err == NGX_ELOOP)
./nginx/src/http/modules/ngx_http_index_module.c-324-            {
./nginx/src/http/modules/ngx_http_index_module.c-325-                return NGX_HTTP_FORBIDDEN;
./nginx/src/http/modules/ngx_http_index_module.c-326-            }
--
./nginx/src/http/modules/ngx_http_index_module.c-382-
./nginx/src/http/modules/ngx_http_index_module.c-383-    return NGX_HTTP_NOT_FOUND;
./nginx/src/http/modules/ngx_http_index_module.c-384-}
./nginx/src/http/modules/ngx_http_index_module.c-385-
./nginx/src/http/modules/ngx_http_index_module.c-386-
./nginx/src/http/modules/ngx_http_index_module.c-387-static void *
./nginx/src/http/modules/ngx_http_index_module.c-388-ngx_http_index_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_index_module.c-389-{
./nginx/src/http/modules/ngx_http_index_module.c-390-    ngx_http_index_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_index_module.c-391-
./nginx/src/http/modules/ngx_http_index_module.c:392:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_index_loc_conf_t));
./nginx/src/http/modules/ngx_http_index_module.c-393-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-394-        return NULL;
./nginx/src/http/modules/ngx_http_index_module.c-395-    }
./nginx/src/http/modules/ngx_http_index_module.c-396-
./nginx/src/http/modules/ngx_http_index_module.c-397-    conf->indices = NULL;
./nginx/src/http/modules/ngx_http_index_module.c-398-    conf->max_index_len = 0;
./nginx/src/http/modules/ngx_http_index_module.c-399-
./nginx/src/http/modules/ngx_http_index_module.c-400-    return conf;
./nginx/src/http/modules/ngx_http_index_module.c-401-}
./nginx/src/http/modules/ngx_http_index_module.c-402-
--
./nginx/src/http/modules/ngx_http_index_module.c-408-    ngx_http_index_loc_conf_t  *conf = child;
./nginx/src/http/modules/ngx_http_index_module.c-409-
./nginx/src/http/modules/ngx_http_index_module.c-410-    ngx_http_index_t  *index;
./nginx/src/http/modules/ngx_http_index_module.c-411-
./nginx/src/http/modules/ngx_http_index_module.c-412-    if (conf->indices == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-413-        conf->indices = prev->indices;
./nginx/src/http/modules/ngx_http_index_module.c-414-        conf->max_index_len = prev->max_index_len;
./nginx/src/http/modules/ngx_http_index_module.c-415-    }
./nginx/src/http/modules/ngx_http_index_module.c-416-
./nginx/src/http/modules/ngx_http_index_module.c-417-    if (conf->indices == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c:418:        conf->indices = ngx_array_create(cf->pool, 1, sizeof(ngx_http_index_t));
./nginx/src/http/modules/ngx_http_index_module.c-419-        if (conf->indices == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-420-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-421-        }
./nginx/src/http/modules/ngx_http_index_module.c-422-
./nginx/src/http/modules/ngx_http_index_module.c-423-        index = ngx_array_push(conf->indices);
./nginx/src/http/modules/ngx_http_index_module.c-424-        if (index == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-425-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-426-        }
./nginx/src/http/modules/ngx_http_index_module.c-427-
./nginx/src/http/modules/ngx_http_index_module.c-428-        index->name.len = sizeof(NGX_HTTP_DEFAULT_INDEX);
--
./nginx/src/http/modules/ngx_http_index_module.c-464-ngx_http_index_set_index(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_index_module.c-465-{
./nginx/src/http/modules/ngx_http_index_module.c-466-    ngx_http_index_loc_conf_t *ilcf = conf;
./nginx/src/http/modules/ngx_http_index_module.c-467-
./nginx/src/http/modules/ngx_http_index_module.c-468-    ngx_str_t                  *value;
./nginx/src/http/modules/ngx_http_index_module.c-469-    ngx_uint_t                  i, n;
./nginx/src/http/modules/ngx_http_index_module.c-470-    ngx_http_index_t           *index;
./nginx/src/http/modules/ngx_http_index_module.c-471-    ngx_http_script_compile_t   sc;
./nginx/src/http/modules/ngx_http_index_module.c-472-
./nginx/src/http/modules/ngx_http_index_module.c-473-    if (ilcf->indices == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c:474:        ilcf->indices = ngx_array_create(cf->pool, 2, sizeof(ngx_http_index_t));
./nginx/src/http/modules/ngx_http_index_module.c-475-        if (ilcf->indices == NULL) {
./nginx/src/http/modules/ngx_http_index_module.c-476-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_index_module.c-477-        }
./nginx/src/http/modules/ngx_http_index_module.c-478-    }
./nginx/src/http/modules/ngx_http_index_module.c-479-
./nginx/src/http/modules/ngx_http_index_module.c-480-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_index_module.c-481-
./nginx/src/http/modules/ngx_http_index_module.c-482-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/modules/ngx_http_index_module.c-483-
./nginx/src/http/modules/ngx_http_index_module.c-484-        if (value[i].data[0] == '/' && i != cf->args->nelts - 1) {
--
./nginx/src/http/modules/ngx_http_log_module.c-323-                buffer->pos = p;
./nginx/src/http/modules/ngx_http_log_module.c-324-
./nginx/src/http/modules/ngx_http_log_module.c-325-                continue;
./nginx/src/http/modules/ngx_http_log_module.c-326-            }
./nginx/src/http/modules/ngx_http_log_module.c-327-
./nginx/src/http/modules/ngx_http_log_module.c-328-            if (buffer->event && buffer->event->timer_set) {
./nginx/src/http/modules/ngx_http_log_module.c-329-                ngx_del_timer(buffer->event);
./nginx/src/http/modules/ngx_http_log_module.c-330-            }
./nginx/src/http/modules/ngx_http_log_module.c-331-        }
./nginx/src/http/modules/ngx_http_log_module.c-332-
./nginx/src/http/modules/ngx_http_log_module.c:333:        line = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_log_module.c-334-        if (line == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-335-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-336-        }
./nginx/src/http/modules/ngx_http_log_module.c-337-
./nginx/src/http/modules/ngx_http_log_module.c-338-        p = line;
./nginx/src/http/modules/ngx_http_log_module.c-339-
./nginx/src/http/modules/ngx_http_log_module.c-340-        for (i = 0; i < log[l].format->ops->nelts; i++) {
./nginx/src/http/modules/ngx_http_log_module.c-341-            p = op[i].run(r, p, &op[i]);
./nginx/src/http/modules/ngx_http_log_module.c-342-        }
./nginx/src/http/modules/ngx_http_log_module.c-343-
--
./nginx/src/http/modules/ngx_http_log_module.c-448-        of.test_dir = 1;
./nginx/src/http/modules/ngx_http_log_module.c-449-        of.test_only = 1;
./nginx/src/http/modules/ngx_http_log_module.c-450-        of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_log_module.c-451-        of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_log_module.c-452-
./nginx/src/http/modules/ngx_http_log_module.c-453-        if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-454-            /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-455-            return len;
./nginx/src/http/modules/ngx_http_log_module.c-456-        }
./nginx/src/http/modules/ngx_http_log_module.c-457-
./nginx/src/http/modules/ngx_http_log_module.c:458:        if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_log_module.c-459-            != NGX_OK)
./nginx/src/http/modules/ngx_http_log_module.c-460-        {
./nginx/src/http/modules/ngx_http_log_module.c-461-            if (of.err == 0) {
./nginx/src/http/modules/ngx_http_log_module.c-462-                /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-463-                return len;
./nginx/src/http/modules/ngx_http_log_module.c-464-            }
./nginx/src/http/modules/ngx_http_log_module.c-465-
./nginx/src/http/modules/ngx_http_log_module.c-466-            ngx_log_error(NGX_LOG_ERR, r->connection->log, of.err,
./nginx/src/http/modules/ngx_http_log_module.c-467-                          "testing \"%s\" existence failed", path.data);
./nginx/src/http/modules/ngx_http_log_module.c-468-
--
./nginx/src/http/modules/ngx_http_log_module.c-500-    of.log = 1;
./nginx/src/http/modules/ngx_http_log_module.c-501-    of.valid = llcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_log_module.c-502-    of.min_uses = llcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_log_module.c-503-    of.directio = NGX_OPEN_FILE_DIRECTIO_OFF;
./nginx/src/http/modules/ngx_http_log_module.c-504-
./nginx/src/http/modules/ngx_http_log_module.c-505-    if (ngx_http_set_disable_symlinks(r, clcf, &log, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-506-        /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-507-        return len;
./nginx/src/http/modules/ngx_http_log_module.c-508-    }
./nginx/src/http/modules/ngx_http_log_module.c-509-
./nginx/src/http/modules/ngx_http_log_module.c:510:    if (ngx_open_cached_file(llcf->open_file_cache, &log, &of, r->pool)
./nginx/src/http/modules/ngx_http_log_module.c-511-        != NGX_OK)
./nginx/src/http/modules/ngx_http_log_module.c-512-    {
./nginx/src/http/modules/ngx_http_log_module.c-513-        ngx_log_error(NGX_LOG_CRIT, r->connection->log, ngx_errno,
./nginx/src/http/modules/ngx_http_log_module.c-514-                      "%s \"%s\" failed", of.failed, log.data);
./nginx/src/http/modules/ngx_http_log_module.c-515-        /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-516-        return len;
./nginx/src/http/modules/ngx_http_log_module.c-517-    }
./nginx/src/http/modules/ngx_http_log_module.c-518-
./nginx/src/http/modules/ngx_http_log_module.c-519-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_log_module.c-520-                   "http log #%d", of.fd);
--
./nginx/src/http/modules/ngx_http_log_module.c-530-static ssize_t
./nginx/src/http/modules/ngx_http_log_module.c-531-ngx_http_log_gzip(ngx_fd_t fd, u_char *buf, size_t len, ngx_int_t level,
./nginx/src/http/modules/ngx_http_log_module.c-532-    ngx_log_t *log)
./nginx/src/http/modules/ngx_http_log_module.c-533-{
./nginx/src/http/modules/ngx_http_log_module.c-534-    int          rc, wbits, memlevel;
./nginx/src/http/modules/ngx_http_log_module.c-535-    u_char      *out;
./nginx/src/http/modules/ngx_http_log_module.c-536-    size_t       size;
./nginx/src/http/modules/ngx_http_log_module.c-537-    ssize_t      n;
./nginx/src/http/modules/ngx_http_log_module.c-538-    z_stream     zstream;
./nginx/src/http/modules/ngx_http_log_module.c-539-    ngx_err_t    err;
./nginx/src/http/modules/ngx_http_log_module.c:540:    ngx_pool_t  *pool;
./nginx/src/http/modules/ngx_http_log_module.c-541-
./nginx/src/http/modules/ngx_http_log_module.c-542-    wbits = MAX_WBITS;
./nginx/src/http/modules/ngx_http_log_module.c-543-    memlevel = MAX_MEM_LEVEL - 1;
./nginx/src/http/modules/ngx_http_log_module.c-544-
./nginx/src/http/modules/ngx_http_log_module.c-545-    while ((ssize_t) len < ((1 << (wbits - 1)) - 262)) {
./nginx/src/http/modules/ngx_http_log_module.c-546-        wbits--;
./nginx/src/http/modules/ngx_http_log_module.c-547-        memlevel--;
./nginx/src/http/modules/ngx_http_log_module.c-548-    }
./nginx/src/http/modules/ngx_http_log_module.c-549-
./nginx/src/http/modules/ngx_http_log_module.c-550-    /*
./nginx/src/http/modules/ngx_http_log_module.c-551-     * This is a formula from deflateBound() for conservative upper bound of
./nginx/src/http/modules/ngx_http_log_module.c-552-     * compressed data plus 18 bytes of gzip wrapper.
./nginx/src/http/modules/ngx_http_log_module.c-553-     */
./nginx/src/http/modules/ngx_http_log_module.c-554-
./nginx/src/http/modules/ngx_http_log_module.c-555-    size = len + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;
./nginx/src/http/modules/ngx_http_log_module.c-556-
./nginx/src/http/modules/ngx_http_log_module.c-557-    ngx_memzero(&zstream, sizeof(z_stream));
./nginx/src/http/modules/ngx_http_log_module.c-558-
./nginx/src/http/modules/ngx_http_log_module.c:559:    pool = ngx_create_pool(256, log);
./nginx/src/http/modules/ngx_http_log_module.c:560:    if (pool == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-561-        /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-562-        return len;
./nginx/src/http/modules/ngx_http_log_module.c-563-    }
./nginx/src/http/modules/ngx_http_log_module.c-564-
./nginx/src/http/modules/ngx_http_log_module.c:565:    pool->log = log;
./nginx/src/http/modules/ngx_http_log_module.c-566-
./nginx/src/http/modules/ngx_http_log_module.c-567-    zstream.zalloc = ngx_http_log_gzip_alloc;
./nginx/src/http/modules/ngx_http_log_module.c-568-    zstream.zfree = ngx_http_log_gzip_free;
./nginx/src/http/modules/ngx_http_log_module.c:569:    zstream.opaque = pool;
./nginx/src/http/modules/ngx_http_log_module.c-570-
./nginx/src/http/modules/ngx_http_log_module.c:571:    out = ngx_pnalloc(pool, size);
./nginx/src/http/modules/ngx_http_log_module.c-572-    if (out == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-573-        goto done;
./nginx/src/http/modules/ngx_http_log_module.c-574-    }
./nginx/src/http/modules/ngx_http_log_module.c-575-
./nginx/src/http/modules/ngx_http_log_module.c-576-    zstream.next_in = buf;
./nginx/src/http/modules/ngx_http_log_module.c-577-    zstream.avail_in = len;
./nginx/src/http/modules/ngx_http_log_module.c-578-    zstream.next_out = out;
./nginx/src/http/modules/ngx_http_log_module.c-579-    zstream.avail_out = size;
./nginx/src/http/modules/ngx_http_log_module.c-580-
./nginx/src/http/modules/ngx_http_log_module.c-581-    rc = deflateInit2(&zstream, (int) level, Z_DEFLATED, wbits + 16, memlevel,
--
./nginx/src/http/modules/ngx_http_log_module.c-612-    if (rc != Z_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-613-        ngx_log_error(NGX_LOG_ALERT, log, 0, "deflateEnd() failed: %d", rc);
./nginx/src/http/modules/ngx_http_log_module.c-614-        goto done;
./nginx/src/http/modules/ngx_http_log_module.c-615-    }
./nginx/src/http/modules/ngx_http_log_module.c-616-
./nginx/src/http/modules/ngx_http_log_module.c-617-    n = ngx_write_fd(fd, out, size);
./nginx/src/http/modules/ngx_http_log_module.c-618-
./nginx/src/http/modules/ngx_http_log_module.c-619-    if (n != (ssize_t) size) {
./nginx/src/http/modules/ngx_http_log_module.c-620-        err = (n == -1) ? ngx_errno : 0;
./nginx/src/http/modules/ngx_http_log_module.c-621-
./nginx/src/http/modules/ngx_http_log_module.c:622:        ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_log_module.c-623-
./nginx/src/http/modules/ngx_http_log_module.c-624-        ngx_set_errno(err);
./nginx/src/http/modules/ngx_http_log_module.c-625-        return -1;
./nginx/src/http/modules/ngx_http_log_module.c-626-    }
./nginx/src/http/modules/ngx_http_log_module.c-627-
./nginx/src/http/modules/ngx_http_log_module.c-628-done:
./nginx/src/http/modules/ngx_http_log_module.c-629-
./nginx/src/http/modules/ngx_http_log_module.c:630:    ngx_destroy_pool(pool);
./nginx/src/http/modules/ngx_http_log_module.c-631-
./nginx/src/http/modules/ngx_http_log_module.c-632-    /* simulate successful logging */
./nginx/src/http/modules/ngx_http_log_module.c-633-    return len;
./nginx/src/http/modules/ngx_http_log_module.c-634-}
./nginx/src/http/modules/ngx_http_log_module.c-635-
./nginx/src/http/modules/ngx_http_log_module.c-636-
./nginx/src/http/modules/ngx_http_log_module.c-637-static void *
./nginx/src/http/modules/ngx_http_log_module.c-638-ngx_http_log_gzip_alloc(void *opaque, u_int items, u_int size)
./nginx/src/http/modules/ngx_http_log_module.c-639-{
./nginx/src/http/modules/ngx_http_log_module.c:640:    ngx_pool_t *pool = opaque;
./nginx/src/http/modules/ngx_http_log_module.c-641-
./nginx/src/http/modules/ngx_http_log_module.c:642:    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, pool->log, 0,
./nginx/src/http/modules/ngx_http_log_module.c-643-                   "gzip alloc: n:%ud s:%ud", items, size);
./nginx/src/http/modules/ngx_http_log_module.c-644-
./nginx/src/http/modules/ngx_http_log_module.c:645:    return ngx_palloc(pool, items * size);
./nginx/src/http/modules/ngx_http_log_module.c-646-}
./nginx/src/http/modules/ngx_http_log_module.c-647-
./nginx/src/http/modules/ngx_http_log_module.c-648-
./nginx/src/http/modules/ngx_http_log_module.c-649-static void
./nginx/src/http/modules/ngx_http_log_module.c-650-ngx_http_log_gzip_free(void *opaque, void *address)
./nginx/src/http/modules/ngx_http_log_module.c-651-{
./nginx/src/http/modules/ngx_http_log_module.c-652-#if 0
./nginx/src/http/modules/ngx_http_log_module.c:653:    ngx_pool_t *pool = opaque;
./nginx/src/http/modules/ngx_http_log_module.c-654-
./nginx/src/http/modules/ngx_http_log_module.c:655:    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, pool->log, 0, "gzip free: %p", address);
./nginx/src/http/modules/ngx_http_log_module.c-656-#endif
./nginx/src/http/modules/ngx_http_log_module.c-657-}
./nginx/src/http/modules/ngx_http_log_module.c-658-
./nginx/src/http/modules/ngx_http_log_module.c-659-#endif
./nginx/src/http/modules/ngx_http_log_module.c-660-
./nginx/src/http/modules/ngx_http_log_module.c-661-
./nginx/src/http/modules/ngx_http_log_module.c-662-static void
./nginx/src/http/modules/ngx_http_log_module.c-663-ngx_http_log_flush(ngx_open_file_t *file, ngx_log_t *log)
./nginx/src/http/modules/ngx_http_log_module.c-664-{
./nginx/src/http/modules/ngx_http_log_module.c-665-    size_t               len;
--
./nginx/src/http/modules/ngx_http_log_module.c-977-}
./nginx/src/http/modules/ngx_http_log_module.c-978-
./nginx/src/http/modules/ngx_http_log_module.c-979-
./nginx/src/http/modules/ngx_http_log_module.c-980-static void *
./nginx/src/http/modules/ngx_http_log_module.c-981-ngx_http_log_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_log_module.c-982-{
./nginx/src/http/modules/ngx_http_log_module.c-983-    ngx_http_log_main_conf_t  *conf;
./nginx/src/http/modules/ngx_http_log_module.c-984-
./nginx/src/http/modules/ngx_http_log_module.c-985-    ngx_http_log_fmt_t  *fmt;
./nginx/src/http/modules/ngx_http_log_module.c-986-
./nginx/src/http/modules/ngx_http_log_module.c:987:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_main_conf_t));
./nginx/src/http/modules/ngx_http_log_module.c-988-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-989-        return NULL;
./nginx/src/http/modules/ngx_http_log_module.c-990-    }
./nginx/src/http/modules/ngx_http_log_module.c-991-
./nginx/src/http/modules/ngx_http_log_module.c:992:    if (ngx_array_init(&conf->formats, cf->pool, 4, sizeof(ngx_http_log_fmt_t))
./nginx/src/http/modules/ngx_http_log_module.c-993-        != NGX_OK)
./nginx/src/http/modules/ngx_http_log_module.c-994-    {
./nginx/src/http/modules/ngx_http_log_module.c-995-        return NULL;
./nginx/src/http/modules/ngx_http_log_module.c-996-    }
./nginx/src/http/modules/ngx_http_log_module.c-997-
./nginx/src/http/modules/ngx_http_log_module.c-998-    fmt = ngx_array_push(&conf->formats);
./nginx/src/http/modules/ngx_http_log_module.c-999-    if (fmt == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1000-        return NULL;
./nginx/src/http/modules/ngx_http_log_module.c-1001-    }
./nginx/src/http/modules/ngx_http_log_module.c-1002-
./nginx/src/http/modules/ngx_http_log_module.c-1003-    ngx_str_set(&fmt->name, "combined");
./nginx/src/http/modules/ngx_http_log_module.c-1004-
./nginx/src/http/modules/ngx_http_log_module.c-1005-    fmt->flushes = NULL;
./nginx/src/http/modules/ngx_http_log_module.c-1006-
./nginx/src/http/modules/ngx_http_log_module.c:1007:    fmt->ops = ngx_array_create(cf->pool, 16, sizeof(ngx_http_log_op_t));
./nginx/src/http/modules/ngx_http_log_module.c-1008-    if (fmt->ops == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1009-        return NULL;
./nginx/src/http/modules/ngx_http_log_module.c-1010-    }
./nginx/src/http/modules/ngx_http_log_module.c-1011-
./nginx/src/http/modules/ngx_http_log_module.c-1012-    return conf;
./nginx/src/http/modules/ngx_http_log_module.c-1013-}
./nginx/src/http/modules/ngx_http_log_module.c-1014-
./nginx/src/http/modules/ngx_http_log_module.c-1015-
./nginx/src/http/modules/ngx_http_log_module.c-1016-static void *
./nginx/src/http/modules/ngx_http_log_module.c-1017-ngx_http_log_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_log_module.c-1018-{
./nginx/src/http/modules/ngx_http_log_module.c-1019-    ngx_http_log_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_log_module.c-1020-
./nginx/src/http/modules/ngx_http_log_module.c:1021:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_loc_conf_t));
./nginx/src/http/modules/ngx_http_log_module.c-1022-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1023-        return NULL;
./nginx/src/http/modules/ngx_http_log_module.c-1024-    }
./nginx/src/http/modules/ngx_http_log_module.c-1025-
./nginx/src/http/modules/ngx_http_log_module.c-1026-    conf->open_file_cache = NGX_CONF_UNSET_PTR;
./nginx/src/http/modules/ngx_http_log_module.c-1027-
./nginx/src/http/modules/ngx_http_log_module.c-1028-    return conf;
./nginx/src/http/modules/ngx_http_log_module.c-1029-}
./nginx/src/http/modules/ngx_http_log_module.c-1030-
./nginx/src/http/modules/ngx_http_log_module.c-1031-
--
./nginx/src/http/modules/ngx_http_log_module.c-1054-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_log_module.c-1055-    }
./nginx/src/http/modules/ngx_http_log_module.c-1056-
./nginx/src/http/modules/ngx_http_log_module.c-1057-    conf->logs = prev->logs;
./nginx/src/http/modules/ngx_http_log_module.c-1058-    conf->off = prev->off;
./nginx/src/http/modules/ngx_http_log_module.c-1059-
./nginx/src/http/modules/ngx_http_log_module.c-1060-    if (conf->logs || conf->off) {
./nginx/src/http/modules/ngx_http_log_module.c-1061-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_log_module.c-1062-    }
./nginx/src/http/modules/ngx_http_log_module.c-1063-
./nginx/src/http/modules/ngx_http_log_module.c:1064:    conf->logs = ngx_array_create(cf->pool, 2, sizeof(ngx_http_log_t));
./nginx/src/http/modules/ngx_http_log_module.c-1065-    if (conf->logs == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1066-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1067-    }
./nginx/src/http/modules/ngx_http_log_module.c-1068-
./nginx/src/http/modules/ngx_http_log_module.c-1069-    log = ngx_array_push(conf->logs);
./nginx/src/http/modules/ngx_http_log_module.c-1070-    if (log == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1071-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1072-    }
./nginx/src/http/modules/ngx_http_log_module.c-1073-
./nginx/src/http/modules/ngx_http_log_module.c-1074-    log->file = ngx_conf_open_file(cf->cycle, &ngx_http_access_log);
--
./nginx/src/http/modules/ngx_http_log_module.c-1157-                name.len = value[1].len - sizeof("syslog");
./nginx/src/http/modules/ngx_http_log_module.c-1158-                name.data = value[1].data + sizeof("syslog");
./nginx/src/http/modules/ngx_http_log_module.c-1159-            }
./nginx/src/http/modules/ngx_http_log_module.c-1160-        }
./nginx/src/http/modules/ngx_http_log_module.c-1161-    } else {
./nginx/src/http/modules/ngx_http_log_module.c-1162-        name = value[1];
./nginx/src/http/modules/ngx_http_log_module.c-1163-    }
./nginx/src/http/modules/ngx_http_log_module.c-1164-#endif
./nginx/src/http/modules/ngx_http_log_module.c-1165-
./nginx/src/http/modules/ngx_http_log_module.c-1166-    if (llcf->logs == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c:1167:        llcf->logs = ngx_array_create(cf->pool, 2, sizeof(ngx_http_log_t));
./nginx/src/http/modules/ngx_http_log_module.c-1168-        if (llcf->logs == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1169-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1170-        }
./nginx/src/http/modules/ngx_http_log_module.c-1171-    }
./nginx/src/http/modules/ngx_http_log_module.c-1172-
./nginx/src/http/modules/ngx_http_log_module.c-1173-    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_log_module);
./nginx/src/http/modules/ngx_http_log_module.c-1174-
./nginx/src/http/modules/ngx_http_log_module.c-1175-    log = ngx_array_push(llcf->logs);
./nginx/src/http/modules/ngx_http_log_module.c-1176-    if (log == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1177-        return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_log_module.c-1194-
./nginx/src/http/modules/ngx_http_log_module.c-1195-        if (n == 0) {
./nginx/src/http/modules/ngx_http_log_module.c-1196-            log->file = ngx_conf_open_file(cf->cycle, &name);
./nginx/src/http/modules/ngx_http_log_module.c-1197-            if (log->file == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1198-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1199-            }
./nginx/src/http/modules/ngx_http_log_module.c-1200-        } else {
./nginx/src/http/modules/ngx_http_log_module.c-1201-            if (ngx_conf_full_name(cf->cycle, &name, 0) != NGX_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-1202-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1203-            }
./nginx/src/http/modules/ngx_http_log_module.c:1204:            log->script = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_script_t));
./nginx/src/http/modules/ngx_http_log_module.c-1205-            if (log->script == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1206-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1207-            }
./nginx/src/http/modules/ngx_http_log_module.c-1208-            ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
./nginx/src/http/modules/ngx_http_log_module.c-1209-            sc.cf = cf;
./nginx/src/http/modules/ngx_http_log_module.c-1210-            sc.source = &name;
./nginx/src/http/modules/ngx_http_log_module.c-1211-            sc.lengths = &log->script->lengths;
./nginx/src/http/modules/ngx_http_log_module.c-1212-            sc.values = &log->script->values;
./nginx/src/http/modules/ngx_http_log_module.c-1213-            sc.variables = n;
./nginx/src/http/modules/ngx_http_log_module.c-1214-            sc.complete_lengths = 1;
--
./nginx/src/http/modules/ngx_http_log_module.c-1231-        log->file = ngx_conf_open_file(cf->cycle, &value[1]);
./nginx/src/http/modules/ngx_http_log_module.c-1232-        if (log->file == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1233-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1234-        }
./nginx/src/http/modules/ngx_http_log_module.c-1235-        
./nginx/src/http/modules/ngx_http_log_module.c-1236-    } else {
./nginx/src/http/modules/ngx_http_log_module.c-1237-        if (ngx_conf_full_name(cf->cycle, &value[1], 0) != NGX_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-1238-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1239-        }
./nginx/src/http/modules/ngx_http_log_module.c-1240-
./nginx/src/http/modules/ngx_http_log_module.c:1241:        log->script = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_script_t));
./nginx/src/http/modules/ngx_http_log_module.c-1242-        if (log->script == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1243-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1244-        }
./nginx/src/http/modules/ngx_http_log_module.c-1245-
./nginx/src/http/modules/ngx_http_log_module.c-1246-        ngx_memzero(&sc, sizeof(ngx_http_script_compile_t));
./nginx/src/http/modules/ngx_http_log_module.c-1247-
./nginx/src/http/modules/ngx_http_log_module.c-1248-        sc.cf = cf;
./nginx/src/http/modules/ngx_http_log_module.c-1249-        sc.source = &value[1];
./nginx/src/http/modules/ngx_http_log_module.c-1250-        sc.lengths = &log->script->lengths;
./nginx/src/http/modules/ngx_http_log_module.c-1251-        sc.values = &log->script->values;
--
./nginx/src/http/modules/ngx_http_log_module.c-1386-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_log_module.c-1387-                                   "access_log \"%V\" already defined "
./nginx/src/http/modules/ngx_http_log_module.c-1388-                                   "with conflicting parameters",
./nginx/src/http/modules/ngx_http_log_module.c-1389-                                   &value[1]);
./nginx/src/http/modules/ngx_http_log_module.c-1390-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1391-            }
./nginx/src/http/modules/ngx_http_log_module.c-1392-
./nginx/src/http/modules/ngx_http_log_module.c-1393-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_log_module.c-1394-        }
./nginx/src/http/modules/ngx_http_log_module.c-1395-
./nginx/src/http/modules/ngx_http_log_module.c:1396:        buffer = ngx_pcalloc(cf->pool, sizeof(ngx_http_log_buf_t));
./nginx/src/http/modules/ngx_http_log_module.c-1397-        if (buffer == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1398-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1399-        }
./nginx/src/http/modules/ngx_http_log_module.c-1400-
./nginx/src/http/modules/ngx_http_log_module.c:1401:        buffer->start = ngx_pnalloc(cf->pool, size);
./nginx/src/http/modules/ngx_http_log_module.c-1402-        if (buffer->start == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1403-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1404-        }
./nginx/src/http/modules/ngx_http_log_module.c-1405-
./nginx/src/http/modules/ngx_http_log_module.c-1406-        buffer->pos = buffer->start;
./nginx/src/http/modules/ngx_http_log_module.c-1407-        buffer->last = buffer->start + size;
./nginx/src/http/modules/ngx_http_log_module.c-1408-
./nginx/src/http/modules/ngx_http_log_module.c-1409-        if (flush) {
./nginx/src/http/modules/ngx_http_log_module.c:1410:            buffer->event = ngx_pcalloc(cf->pool, sizeof(ngx_event_t));
./nginx/src/http/modules/ngx_http_log_module.c-1411-            if (buffer->event == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1412-                return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1413-            }
./nginx/src/http/modules/ngx_http_log_module.c-1414-
./nginx/src/http/modules/ngx_http_log_module.c-1415-            buffer->event->data = log->file;
./nginx/src/http/modules/ngx_http_log_module.c-1416-            buffer->event->handler = ngx_http_log_flush_handler;
./nginx/src/http/modules/ngx_http_log_module.c-1417-            buffer->event->log = &cf->cycle->new_log;
./nginx/src/http/modules/ngx_http_log_module.c-1418-
./nginx/src/http/modules/ngx_http_log_module.c-1419-            buffer->flush = flush;
./nginx/src/http/modules/ngx_http_log_module.c-1420-        }
--
./nginx/src/http/modules/ngx_http_log_module.c-1458-        }
./nginx/src/http/modules/ngx_http_log_module.c-1459-    }
./nginx/src/http/modules/ngx_http_log_module.c-1460-
./nginx/src/http/modules/ngx_http_log_module.c-1461-    fmt = ngx_array_push(&lmcf->formats);
./nginx/src/http/modules/ngx_http_log_module.c-1462-    if (fmt == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1463-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1464-    }
./nginx/src/http/modules/ngx_http_log_module.c-1465-
./nginx/src/http/modules/ngx_http_log_module.c-1466-    fmt->name = value[1];
./nginx/src/http/modules/ngx_http_log_module.c-1467-
./nginx/src/http/modules/ngx_http_log_module.c:1468:    fmt->flushes = ngx_array_create(cf->pool, 4, sizeof(ngx_int_t));
./nginx/src/http/modules/ngx_http_log_module.c-1469-    if (fmt->flushes == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1470-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1471-    }
./nginx/src/http/modules/ngx_http_log_module.c-1472-
./nginx/src/http/modules/ngx_http_log_module.c:1473:    fmt->ops = ngx_array_create(cf->pool, 16, sizeof(ngx_http_log_op_t));
./nginx/src/http/modules/ngx_http_log_module.c-1474-    if (fmt->ops == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1475-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1476-    }
./nginx/src/http/modules/ngx_http_log_module.c-1477-
./nginx/src/http/modules/ngx_http_log_module.c-1478-    return ngx_http_log_compile_format(cf, fmt->flushes, fmt->ops, cf->args, 2);
./nginx/src/http/modules/ngx_http_log_module.c-1479-}
./nginx/src/http/modules/ngx_http_log_module.c-1480-
./nginx/src/http/modules/ngx_http_log_module.c-1481-
./nginx/src/http/modules/ngx_http_log_module.c-1482-static char *
./nginx/src/http/modules/ngx_http_log_module.c-1483-ngx_http_log_compile_format(ngx_conf_t *cf, ngx_array_t *flushes,
--
./nginx/src/http/modules/ngx_http_log_module.c-1608-                    op->data = 0;
./nginx/src/http/modules/ngx_http_log_module.c-1609-
./nginx/src/http/modules/ngx_http_log_module.c-1610-                    while (len--) {
./nginx/src/http/modules/ngx_http_log_module.c-1611-                        op->data <<= 8;
./nginx/src/http/modules/ngx_http_log_module.c-1612-                        op->data |= data[len];
./nginx/src/http/modules/ngx_http_log_module.c-1613-                    }
./nginx/src/http/modules/ngx_http_log_module.c-1614-
./nginx/src/http/modules/ngx_http_log_module.c-1615-                } else {
./nginx/src/http/modules/ngx_http_log_module.c-1616-                    op->run = ngx_http_log_copy_long;
./nginx/src/http/modules/ngx_http_log_module.c-1617-
./nginx/src/http/modules/ngx_http_log_module.c:1618:                    p = ngx_pnalloc(cf->pool, len);
./nginx/src/http/modules/ngx_http_log_module.c-1619-                    if (p == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1620-                        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1621-                    }
./nginx/src/http/modules/ngx_http_log_module.c-1622-
./nginx/src/http/modules/ngx_http_log_module.c-1623-                    ngx_memcpy(p, data, len);
./nginx/src/http/modules/ngx_http_log_module.c-1624-                    op->data = (uintptr_t) p;
./nginx/src/http/modules/ngx_http_log_module.c-1625-                }
./nginx/src/http/modules/ngx_http_log_module.c-1626-            }
./nginx/src/http/modules/ngx_http_log_module.c-1627-        }
./nginx/src/http/modules/ngx_http_log_module.c-1628-    }
--
./nginx/src/http/modules/ngx_http_log_module.c-1724-    if (llcf->open_file_cache == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1725-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_log_module.c-1726-    }
./nginx/src/http/modules/ngx_http_log_module.c-1727-
./nginx/src/http/modules/ngx_http_log_module.c-1728-    if (max == 0) {
./nginx/src/http/modules/ngx_http_log_module.c-1729-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_log_module.c-1730-                        "\"open_log_file_cache\" must have \"max\" parameter");
./nginx/src/http/modules/ngx_http_log_module.c-1731-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1732-    }
./nginx/src/http/modules/ngx_http_log_module.c-1733-
./nginx/src/http/modules/ngx_http_log_module.c:1734:    llcf->open_file_cache = ngx_open_file_cache_init(cf->pool, max, inactive);
./nginx/src/http/modules/ngx_http_log_module.c-1735-
./nginx/src/http/modules/ngx_http_log_module.c-1736-    if (llcf->open_file_cache) {
./nginx/src/http/modules/ngx_http_log_module.c-1737-
./nginx/src/http/modules/ngx_http_log_module.c-1738-        llcf->open_file_cache_valid = valid;
./nginx/src/http/modules/ngx_http_log_module.c-1739-        llcf->open_file_cache_min_uses = min_uses;
./nginx/src/http/modules/ngx_http_log_module.c-1740-
./nginx/src/http/modules/ngx_http_log_module.c-1741-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_log_module.c-1742-    }
./nginx/src/http/modules/ngx_http_log_module.c-1743-
./nginx/src/http/modules/ngx_http_log_module.c-1744-    return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_log_module.c-1751-    ngx_str_t                  *value;
./nginx/src/http/modules/ngx_http_log_module.c-1752-    ngx_array_t                 a;
./nginx/src/http/modules/ngx_http_log_module.c-1753-    ngx_http_handler_pt        *h;
./nginx/src/http/modules/ngx_http_log_module.c-1754-    ngx_http_log_fmt_t         *fmt;
./nginx/src/http/modules/ngx_http_log_module.c-1755-    ngx_http_log_main_conf_t   *lmcf;
./nginx/src/http/modules/ngx_http_log_module.c-1756-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/modules/ngx_http_log_module.c-1757-
./nginx/src/http/modules/ngx_http_log_module.c-1758-    lmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_log_module);
./nginx/src/http/modules/ngx_http_log_module.c-1759-
./nginx/src/http/modules/ngx_http_log_module.c-1760-    if (lmcf->combined_used) {
./nginx/src/http/modules/ngx_http_log_module.c:1761:        if (ngx_array_init(&a, cf->pool, 1, sizeof(ngx_str_t)) != NGX_OK) {
./nginx/src/http/modules/ngx_http_log_module.c-1762-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1763-        }
./nginx/src/http/modules/ngx_http_log_module.c-1764-
./nginx/src/http/modules/ngx_http_log_module.c-1765-        value = ngx_array_push(&a);
./nginx/src/http/modules/ngx_http_log_module.c-1766-        if (value == NULL) {
./nginx/src/http/modules/ngx_http_log_module.c-1767-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_log_module.c-1768-        }
./nginx/src/http/modules/ngx_http_log_module.c-1769-
./nginx/src/http/modules/ngx_http_log_module.c-1770-        *value = ngx_http_combined_fmt;
./nginx/src/http/modules/ngx_http_log_module.c-1771-        fmt = lmcf->formats.elts;
--
./nginx/src/http/modules/ngx_http_flv_module.c-107-    of.directio = clcf->directio;
./nginx/src/http/modules/ngx_http_flv_module.c-108-    of.valid = clcf->open_file_cache_valid;
./nginx/src/http/modules/ngx_http_flv_module.c-109-    of.min_uses = clcf->open_file_cache_min_uses;
./nginx/src/http/modules/ngx_http_flv_module.c-110-    of.errors = clcf->open_file_cache_errors;
./nginx/src/http/modules/ngx_http_flv_module.c-111-    of.events = clcf->open_file_cache_events;
./nginx/src/http/modules/ngx_http_flv_module.c-112-
./nginx/src/http/modules/ngx_http_flv_module.c-113-    if (ngx_http_set_disable_symlinks(r, clcf, &path, &of) != NGX_OK) {
./nginx/src/http/modules/ngx_http_flv_module.c-114-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-115-    }
./nginx/src/http/modules/ngx_http_flv_module.c-116-
./nginx/src/http/modules/ngx_http_flv_module.c:117:    if (ngx_open_cached_file(clcf->open_file_cache, &path, &of, r->pool)
./nginx/src/http/modules/ngx_http_flv_module.c-118-        != NGX_OK)
./nginx/src/http/modules/ngx_http_flv_module.c-119-    {
./nginx/src/http/modules/ngx_http_flv_module.c-120-        switch (of.err) {
./nginx/src/http/modules/ngx_http_flv_module.c-121-
./nginx/src/http/modules/ngx_http_flv_module.c-122-        case 0:
./nginx/src/http/modules/ngx_http_flv_module.c-123-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-124-
./nginx/src/http/modules/ngx_http_flv_module.c-125-        case NGX_ENOENT:
./nginx/src/http/modules/ngx_http_flv_module.c-126-        case NGX_ENOTDIR:
./nginx/src/http/modules/ngx_http_flv_module.c-127-        case NGX_ENAMETOOLONG:
--
./nginx/src/http/modules/ngx_http_flv_module.c-192-
./nginx/src/http/modules/ngx_http_flv_module.c-193-    r->headers_out.status = NGX_HTTP_OK;
./nginx/src/http/modules/ngx_http_flv_module.c-194-    r->headers_out.content_length_n = len;
./nginx/src/http/modules/ngx_http_flv_module.c-195-    r->headers_out.last_modified_time = of.mtime;
./nginx/src/http/modules/ngx_http_flv_module.c-196-
./nginx/src/http/modules/ngx_http_flv_module.c-197-    if (ngx_http_set_content_type(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_flv_module.c-198-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-199-    }
./nginx/src/http/modules/ngx_http_flv_module.c-200-
./nginx/src/http/modules/ngx_http_flv_module.c-201-    if (i == 0) {
./nginx/src/http/modules/ngx_http_flv_module.c:202:        b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_flv_module.c-203-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_flv_module.c-204-            return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-205-        }
./nginx/src/http/modules/ngx_http_flv_module.c-206-
./nginx/src/http/modules/ngx_http_flv_module.c-207-        b->pos = ngx_flv_header;
./nginx/src/http/modules/ngx_http_flv_module.c-208-        b->last = ngx_flv_header + sizeof(ngx_flv_header) - 1;
./nginx/src/http/modules/ngx_http_flv_module.c-209-        b->memory = 1;
./nginx/src/http/modules/ngx_http_flv_module.c-210-
./nginx/src/http/modules/ngx_http_flv_module.c-211-        out[0].buf = b;
./nginx/src/http/modules/ngx_http_flv_module.c-212-        out[0].next = &out[1];
./nginx/src/http/modules/ngx_http_flv_module.c-213-    }
./nginx/src/http/modules/ngx_http_flv_module.c-214-
./nginx/src/http/modules/ngx_http_flv_module.c-215-
./nginx/src/http/modules/ngx_http_flv_module.c:216:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_flv_module.c-217-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_flv_module.c-218-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-219-    }
./nginx/src/http/modules/ngx_http_flv_module.c-220-
./nginx/src/http/modules/ngx_http_flv_module.c:221:    b->file = ngx_pcalloc(r->pool, sizeof(ngx_file_t));
./nginx/src/http/modules/ngx_http_flv_module.c-222-    if (b->file == NULL) {
./nginx/src/http/modules/ngx_http_flv_module.c-223-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_flv_module.c-224-    }
./nginx/src/http/modules/ngx_http_flv_module.c-225-
./nginx/src/http/modules/ngx_http_flv_module.c-226-    r->allow_ranges = 1;
./nginx/src/http/modules/ngx_http_flv_module.c-227-
./nginx/src/http/modules/ngx_http_flv_module.c-228-    rc = ngx_http_send_header(r);
./nginx/src/http/modules/ngx_http_flv_module.c-229-
./nginx/src/http/modules/ngx_http_flv_module.c-230-    if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/modules/ngx_http_flv_module.c-231-        return rc;
--
./nginx/src/http/modules/ngx_http_scgi_module.c-397-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_scgi_module.c-398-                      "ngx_http_scgi_module does not support "
./nginx/src/http/modules/ngx_http_scgi_module.c-399-                      "subrequests in memory");
./nginx/src/http/modules/ngx_http_scgi_module.c-400-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-401-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-402-
./nginx/src/http/modules/ngx_http_scgi_module.c-403-    if (ngx_http_upstream_create(r) != NGX_OK) {
./nginx/src/http/modules/ngx_http_scgi_module.c-404-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-405-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-406-
./nginx/src/http/modules/ngx_http_scgi_module.c:407:    status = ngx_pcalloc(r->pool, sizeof(ngx_http_status_t));
./nginx/src/http/modules/ngx_http_scgi_module.c-408-    if (status == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-409-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-410-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-411-
./nginx/src/http/modules/ngx_http_scgi_module.c-412-    ngx_http_set_ctx(r, status, ngx_http_scgi_module);
./nginx/src/http/modules/ngx_http_scgi_module.c-413-
./nginx/src/http/modules/ngx_http_scgi_module.c-414-    scf = ngx_http_get_module_loc_conf(r, ngx_http_scgi_module);
./nginx/src/http/modules/ngx_http_scgi_module.c-415-
./nginx/src/http/modules/ngx_http_scgi_module.c-416-    if (scf->scgi_lengths) {
./nginx/src/http/modules/ngx_http_scgi_module.c-417-        if (ngx_http_scgi_eval(r, scf) != NGX_OK) {
--
./nginx/src/http/modules/ngx_http_scgi_module.c-431-#endif
./nginx/src/http/modules/ngx_http_scgi_module.c-432-    u->create_request = ngx_http_scgi_create_request;
./nginx/src/http/modules/ngx_http_scgi_module.c-433-    u->reinit_request = ngx_http_scgi_reinit_request;
./nginx/src/http/modules/ngx_http_scgi_module.c-434-    u->process_header = ngx_http_scgi_process_status_line;
./nginx/src/http/modules/ngx_http_scgi_module.c-435-    u->abort_request = ngx_http_scgi_abort_request;
./nginx/src/http/modules/ngx_http_scgi_module.c-436-    u->finalize_request = ngx_http_scgi_finalize_request;
./nginx/src/http/modules/ngx_http_scgi_module.c-437-    r->state = 0;
./nginx/src/http/modules/ngx_http_scgi_module.c-438-
./nginx/src/http/modules/ngx_http_scgi_module.c-439-    u->buffering = scf->upstream.buffering;
./nginx/src/http/modules/ngx_http_scgi_module.c-440-
./nginx/src/http/modules/ngx_http_scgi_module.c:441:    u->pipe = ngx_pcalloc(r->pool, sizeof(ngx_event_pipe_t));
./nginx/src/http/modules/ngx_http_scgi_module.c-442-    if (u->pipe == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-443-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-444-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-445-
./nginx/src/http/modules/ngx_http_scgi_module.c-446-    u->pipe->input_filter = ngx_event_pipe_copy_input_filter;
./nginx/src/http/modules/ngx_http_scgi_module.c-447-    u->pipe->input_ctx = r;
./nginx/src/http/modules/ngx_http_scgi_module.c-448-
./nginx/src/http/modules/ngx_http_scgi_module.c-449-    rc = ngx_http_read_client_request_body(r, ngx_http_upstream_init);
./nginx/src/http/modules/ngx_http_scgi_module.c-450-
./nginx/src/http/modules/ngx_http_scgi_module.c-451-    if (rc >= NGX_HTTP_SPECIAL_RESPONSE) {
--
./nginx/src/http/modules/ngx_http_scgi_module.c-466-
./nginx/src/http/modules/ngx_http_scgi_module.c-467-    if (ngx_http_script_run(r, &url.url, scf->scgi_lengths->elts, 0,
./nginx/src/http/modules/ngx_http_scgi_module.c-468-                            scf->scgi_values->elts)
./nginx/src/http/modules/ngx_http_scgi_module.c-469-        == NULL)
./nginx/src/http/modules/ngx_http_scgi_module.c-470-    {
./nginx/src/http/modules/ngx_http_scgi_module.c-471-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-472-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-473-
./nginx/src/http/modules/ngx_http_scgi_module.c-474-    url.no_resolve = 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-475-
./nginx/src/http/modules/ngx_http_scgi_module.c:476:    if (ngx_parse_url(r->pool, &url) != NGX_OK) {
./nginx/src/http/modules/ngx_http_scgi_module.c-477-        if (url.err) {
./nginx/src/http/modules/ngx_http_scgi_module.c-478-            ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_scgi_module.c-479-                          "%s in upstream \"%V\"", url.err, &url.url);
./nginx/src/http/modules/ngx_http_scgi_module.c-480-        }
./nginx/src/http/modules/ngx_http_scgi_module.c-481-
./nginx/src/http/modules/ngx_http_scgi_module.c-482-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-483-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-484-
./nginx/src/http/modules/ngx_http_scgi_module.c-485-    u = r->upstream;
./nginx/src/http/modules/ngx_http_scgi_module.c-486-
./nginx/src/http/modules/ngx_http_scgi_module.c:487:    u->resolved = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_resolved_t));
./nginx/src/http/modules/ngx_http_scgi_module.c-488-    if (u->resolved == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-489-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-490-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-491-
./nginx/src/http/modules/ngx_http_scgi_module.c-492-    if (url.addrs && url.addrs[0].sockaddr) {
./nginx/src/http/modules/ngx_http_scgi_module.c-493-        u->resolved->sockaddr = url.addrs[0].sockaddr;
./nginx/src/http/modules/ngx_http_scgi_module.c-494-        u->resolved->socklen = url.addrs[0].socklen;
./nginx/src/http/modules/ngx_http_scgi_module.c-495-        u->resolved->naddrs = 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-496-        u->resolved->host = url.addrs[0].name;
./nginx/src/http/modules/ngx_http_scgi_module.c-497-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-594-
./nginx/src/http/modules/ngx_http_scgi_module.c-595-        if (scf->header_params) {
./nginx/src/http/modules/ngx_http_scgi_module.c-596-            n = 0;
./nginx/src/http/modules/ngx_http_scgi_module.c-597-            part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_scgi_module.c-598-
./nginx/src/http/modules/ngx_http_scgi_module.c-599-            while (part) {
./nginx/src/http/modules/ngx_http_scgi_module.c-600-                n += part->nelts;
./nginx/src/http/modules/ngx_http_scgi_module.c-601-                part = part->next;
./nginx/src/http/modules/ngx_http_scgi_module.c-602-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-603-
./nginx/src/http/modules/ngx_http_scgi_module.c:604:            ignored = ngx_palloc(r->pool, n * sizeof(void *));
./nginx/src/http/modules/ngx_http_scgi_module.c-605-            if (ignored == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-606-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-607-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-608-        }
./nginx/src/http/modules/ngx_http_scgi_module.c-609-
./nginx/src/http/modules/ngx_http_scgi_module.c-610-        part = &r->headers_in.headers.part;
./nginx/src/http/modules/ngx_http_scgi_module.c-611-        header = part->elts;
./nginx/src/http/modules/ngx_http_scgi_module.c-612-
./nginx/src/http/modules/ngx_http_scgi_module.c-613-        for (i = 0; /* void */; i++) {
./nginx/src/http/modules/ngx_http_scgi_module.c-614-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-618-                }
./nginx/src/http/modules/ngx_http_scgi_module.c-619-
./nginx/src/http/modules/ngx_http_scgi_module.c-620-                part = part->next;
./nginx/src/http/modules/ngx_http_scgi_module.c-621-                header = part->elts;
./nginx/src/http/modules/ngx_http_scgi_module.c-622-                i = 0;
./nginx/src/http/modules/ngx_http_scgi_module.c-623-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-624-
./nginx/src/http/modules/ngx_http_scgi_module.c-625-            if (scf->header_params) {
./nginx/src/http/modules/ngx_http_scgi_module.c-626-                if (allocated < header[i].key.len) {
./nginx/src/http/modules/ngx_http_scgi_module.c-627-                    allocated = header[i].key.len + 16;
./nginx/src/http/modules/ngx_http_scgi_module.c:628:                    lowcase_key = ngx_pnalloc(r->pool, allocated);
./nginx/src/http/modules/ngx_http_scgi_module.c-629-                    if (lowcase_key == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-630-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-631-                    }
./nginx/src/http/modules/ngx_http_scgi_module.c-632-                }
./nginx/src/http/modules/ngx_http_scgi_module.c-633-
./nginx/src/http/modules/ngx_http_scgi_module.c-634-                hash = 0;
./nginx/src/http/modules/ngx_http_scgi_module.c-635-
./nginx/src/http/modules/ngx_http_scgi_module.c-636-                for (n = 0; n < header[i].key.len; n++) {
./nginx/src/http/modules/ngx_http_scgi_module.c-637-                    ch = header[i].key.data[n];
./nginx/src/http/modules/ngx_http_scgi_module.c-638-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-653-                }
./nginx/src/http/modules/ngx_http_scgi_module.c-654-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-655-
./nginx/src/http/modules/ngx_http_scgi_module.c-656-            len += sizeof("HTTP_") - 1 + header[i].key.len + 1
./nginx/src/http/modules/ngx_http_scgi_module.c-657-                + header[i].value.len + 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-658-        }
./nginx/src/http/modules/ngx_http_scgi_module.c-659-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-660-
./nginx/src/http/modules/ngx_http_scgi_module.c-661-    /* netstring: "length:" + packet + "," */
./nginx/src/http/modules/ngx_http_scgi_module.c-662-
./nginx/src/http/modules/ngx_http_scgi_module.c:663:    b = ngx_create_temp_buf(r->pool, NGX_SIZE_T_LEN + 1 + len + 1);
./nginx/src/http/modules/ngx_http_scgi_module.c-664-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-665-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-666-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-667-
./nginx/src/http/modules/ngx_http_scgi_module.c:668:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_scgi_module.c-669-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-670-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-671-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-672-
./nginx/src/http/modules/ngx_http_scgi_module.c-673-    cl->buf = b;
./nginx/src/http/modules/ngx_http_scgi_module.c-674-
./nginx/src/http/modules/ngx_http_scgi_module.c-675-    b->last = ngx_snprintf(b->last,
./nginx/src/http/modules/ngx_http_scgi_module.c-676-                           NGX_SIZE_T_LEN + 1 + sizeof("CONTENT_LENGTH")
./nginx/src/http/modules/ngx_http_scgi_module.c-677-                           + NGX_OFF_T_LEN + 1,
./nginx/src/http/modules/ngx_http_scgi_module.c-678-                           "%ui:CONTENT_LENGTH%Z%V%Z",
--
./nginx/src/http/modules/ngx_http_scgi_module.c-792-         }
./nginx/src/http/modules/ngx_http_scgi_module.c-793-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-794-
./nginx/src/http/modules/ngx_http_scgi_module.c-795-    *b->last++ = (u_char) ',';
./nginx/src/http/modules/ngx_http_scgi_module.c-796-
./nginx/src/http/modules/ngx_http_scgi_module.c-797-    if (scf->upstream.pass_request_body) {
./nginx/src/http/modules/ngx_http_scgi_module.c-798-        body = r->upstream->request_bufs;
./nginx/src/http/modules/ngx_http_scgi_module.c-799-        r->upstream->request_bufs = cl;
./nginx/src/http/modules/ngx_http_scgi_module.c-800-
./nginx/src/http/modules/ngx_http_scgi_module.c-801-        while (body) {
./nginx/src/http/modules/ngx_http_scgi_module.c:802:            b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_scgi_module.c-803-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-804-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-805-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-806-
./nginx/src/http/modules/ngx_http_scgi_module.c-807-            ngx_memcpy(b, body->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_scgi_module.c-808-
./nginx/src/http/modules/ngx_http_scgi_module.c:809:            cl->next = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_scgi_module.c-810-            if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-811-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-812-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-813-
./nginx/src/http/modules/ngx_http_scgi_module.c-814-            cl = cl->next;
./nginx/src/http/modules/ngx_http_scgi_module.c-815-            cl->buf = b;
./nginx/src/http/modules/ngx_http_scgi_module.c-816-
./nginx/src/http/modules/ngx_http_scgi_module.c-817-            body = body->next;
./nginx/src/http/modules/ngx_http_scgi_module.c-818-        }
./nginx/src/http/modules/ngx_http_scgi_module.c-819-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-879-
./nginx/src/http/modules/ngx_http_scgi_module.c-880-    if (u->state) {
./nginx/src/http/modules/ngx_http_scgi_module.c-881-        u->state->status = status->code;
./nginx/src/http/modules/ngx_http_scgi_module.c-882-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-883-
./nginx/src/http/modules/ngx_http_scgi_module.c-884-    u->headers_in.status_n = status->code;
./nginx/src/http/modules/ngx_http_scgi_module.c-885-
./nginx/src/http/modules/ngx_http_scgi_module.c-886-    len = status->end - status->start;
./nginx/src/http/modules/ngx_http_scgi_module.c-887-    u->headers_in.status_line.len = len;
./nginx/src/http/modules/ngx_http_scgi_module.c-888-
./nginx/src/http/modules/ngx_http_scgi_module.c:889:    u->headers_in.status_line.data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_scgi_module.c-890-    if (u->headers_in.status_line.data == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-891-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-892-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-893-
./nginx/src/http/modules/ngx_http_scgi_module.c-894-    ngx_memcpy(u->headers_in.status_line.data, status->start, len);
./nginx/src/http/modules/ngx_http_scgi_module.c-895-
./nginx/src/http/modules/ngx_http_scgi_module.c-896-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_scgi_module.c-897-                   "http scgi status %ui \"%V\"",
./nginx/src/http/modules/ngx_http_scgi_module.c-898-                   u->headers_in.status_n, &u->headers_in.status_line);
./nginx/src/http/modules/ngx_http_scgi_module.c-899-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-926-            h = ngx_list_push(&r->upstream->headers_in.headers);
./nginx/src/http/modules/ngx_http_scgi_module.c-927-            if (h == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-928-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-929-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-930-
./nginx/src/http/modules/ngx_http_scgi_module.c-931-            h->hash = r->header_hash;
./nginx/src/http/modules/ngx_http_scgi_module.c-932-
./nginx/src/http/modules/ngx_http_scgi_module.c-933-            h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/modules/ngx_http_scgi_module.c-934-            h->value.len = r->header_end - r->header_start;
./nginx/src/http/modules/ngx_http_scgi_module.c-935-
./nginx/src/http/modules/ngx_http_scgi_module.c:936:            h->key.data = ngx_pnalloc(r->pool,
./nginx/src/http/modules/ngx_http_scgi_module.c-937-                                      h->key.len + 1 + h->value.len + 1
./nginx/src/http/modules/ngx_http_scgi_module.c-938-                                      + h->key.len);
./nginx/src/http/modules/ngx_http_scgi_module.c-939-            if (h->key.data == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-940-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-941-            }
./nginx/src/http/modules/ngx_http_scgi_module.c-942-
./nginx/src/http/modules/ngx_http_scgi_module.c-943-            h->value.data = h->key.data + h->key.len + 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-944-            h->lowcase_key = h->key.data + h->key.len + 1 + h->value.len + 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-945-
./nginx/src/http/modules/ngx_http_scgi_module.c-946-            ngx_memcpy(h->key.data, r->header_name_start, h->key.len);
--
./nginx/src/http/modules/ngx_http_scgi_module.c-1044-
./nginx/src/http/modules/ngx_http_scgi_module.c-1045-    return;
./nginx/src/http/modules/ngx_http_scgi_module.c-1046-}
./nginx/src/http/modules/ngx_http_scgi_module.c-1047-
./nginx/src/http/modules/ngx_http_scgi_module.c-1048-
./nginx/src/http/modules/ngx_http_scgi_module.c-1049-static void *
./nginx/src/http/modules/ngx_http_scgi_module.c-1050-ngx_http_scgi_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_scgi_module.c-1051-{
./nginx/src/http/modules/ngx_http_scgi_module.c-1052-    ngx_http_scgi_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_scgi_module.c-1053-
./nginx/src/http/modules/ngx_http_scgi_module.c:1054:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_scgi_loc_conf_t));
./nginx/src/http/modules/ngx_http_scgi_module.c-1055-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-1056-        return NULL;
./nginx/src/http/modules/ngx_http_scgi_module.c-1057-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-1058-
./nginx/src/http/modules/ngx_http_scgi_module.c-1059-    conf->upstream.store = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_scgi_module.c-1060-    conf->upstream.store_access = NGX_CONF_UNSET_UINT;
./nginx/src/http/modules/ngx_http_scgi_module.c-1061-    conf->upstream.buffering = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_scgi_module.c-1062-    conf->upstream.ignore_client_abort = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_scgi_module.c-1063-
./nginx/src/http/modules/ngx_http_scgi_module.c-1064-    conf->upstream.connect_timeout = NGX_CONF_UNSET_MSEC;
--
./nginx/src/http/modules/ngx_http_scgi_module.c-1406-    if (conf->params_source == NULL
./nginx/src/http/modules/ngx_http_scgi_module.c-1407-#if (NGX_HTTP_CACHE)
./nginx/src/http/modules/ngx_http_scgi_module.c-1408-        && (conf->upstream.cache == NULL)
./nginx/src/http/modules/ngx_http_scgi_module.c-1409-#endif
./nginx/src/http/modules/ngx_http_scgi_module.c-1410-       )
./nginx/src/http/modules/ngx_http_scgi_module.c-1411-    {
./nginx/src/http/modules/ngx_http_scgi_module.c-1412-        conf->headers_hash.buckets = (void *) 1;
./nginx/src/http/modules/ngx_http_scgi_module.c-1413-        return NGX_OK;
./nginx/src/http/modules/ngx_http_scgi_module.c-1414-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-1415-
./nginx/src/http/modules/ngx_http_scgi_module.c:1416:    conf->params_len = ngx_array_create(cf->pool, 64, 1);
./nginx/src/http/modules/ngx_http_scgi_module.c-1417-    if (conf->params_len == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-1418-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-1419-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-1420-
./nginx/src/http/modules/ngx_http_scgi_module.c:1421:    conf->params = ngx_array_create(cf->pool, 512, 1);
./nginx/src/http/modules/ngx_http_scgi_module.c-1422-    if (conf->params == NULL) {
./nginx/src/http/modules/ngx_http_scgi_module.c-1423-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-1424-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-1425-
./nginx/src/http/modules/ngx_http_scgi_module.c-1426-    if (ngx_array_init(&headers_names, cf->temp_pool, 4, sizeof(ngx_hash_key_t))
./nginx/src/http/modules/ngx_http_scgi_module.c-1427-        != NGX_OK)
./nginx/src/http/modules/ngx_http_scgi_module.c-1428-    {
./nginx/src/http/modules/ngx_http_scgi_module.c-1429-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_scgi_module.c-1430-    }
./nginx/src/http/modules/ngx_http_scgi_module.c-1431-
--
./nginx/src/http/modules/ngx_http_scgi_module.c-1591-
./nginx/src/http/modules/ngx_http_scgi_module.c-1592-    *code = (uintptr_t) NULL;
./nginx/src/http/modules/ngx_http_scgi_module.c-1593-
./nginx/src/http/modules/ngx_http_scgi_module.c-1594-    conf->header_params = headers_names.nelts;
./nginx/src/http/modules/ngx_http_scgi_module.c-1595-
./nginx/src/http/modules/ngx_http_scgi_module.c-1596-    hash.hash = &conf->headers_hash;
./nginx/src/http/modules/ngx_http_scgi_module.c-1597-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_scgi_module.c-1598-    hash.max_size = 512;
./nginx/src/http/modules/ngx_http_scgi_module.c-1599-    hash.bucket_size = 64;
./nginx/src/http/modules/ngx_http_scgi_module.c-1600-    hash.name = "scgi_params_hash";
./nginx/src/http/modules/ngx_http_scgi_module.c:1601:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_scgi_module.c-1602-    hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_scgi_module.c-1603-
./nginx/src/http/modules/ngx_http_scgi_module.c-1604-    return ngx_hash_init(&hash, headers_names.elts, headers_names.nelts);
./nginx/src/http/modules/ngx_http_scgi_module.c-1605-}
./nginx/src/http/modules/ngx_http_scgi_module.c-1606-
./nginx/src/http/modules/ngx_http_scgi_module.c-1607-
./nginx/src/http/modules/ngx_http_scgi_module.c-1608-static char *
./nginx/src/http/modules/ngx_http_scgi_module.c-1609-ngx_http_scgi_pass(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
./nginx/src/http/modules/ngx_http_scgi_module.c-1610-{
./nginx/src/http/modules/ngx_http_scgi_module.c-1611-    ngx_http_scgi_loc_conf_t *scf = conf;
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-136-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-137-    slcf = ngx_http_get_module_loc_conf(r, ngx_http_sub_filter_module);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-138-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-139-    if (slcf->match.len == 0
./nginx/src/http/modules/ngx_http_sub_filter_module.c-140-        || r->headers_out.content_length_n == 0
./nginx/src/http/modules/ngx_http_sub_filter_module.c-141-        || ngx_http_test_content_type(r, &slcf->types) == NULL)
./nginx/src/http/modules/ngx_http_sub_filter_module.c-142-    {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-143-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-144-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-145-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:146:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_sub_ctx_t));
./nginx/src/http/modules/ngx_http_sub_filter_module.c-147-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-148-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-149-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-150-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:151:    ctx->saved.data = ngx_pnalloc(r->pool, slcf->match.len);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-152-    if (ctx->saved.data == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-153-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-154-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-155-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:156:    ctx->looked.data = ngx_pnalloc(r->pool, slcf->match.len);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-157-    if (ctx->looked.data == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-158-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-159-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-160-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-161-    ngx_http_set_ctx(r, ctx, ngx_http_sub_filter_module);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-162-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-163-    ctx->match = slcf->match;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-164-    ctx->last_out = &ctx->out;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-165-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-166-    r->filter_need_in_memory = 1;
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-204-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-205-            }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-206-        }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-207-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-208-        return ngx_http_next_body_filter(r, in);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-209-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-210-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-211-    /* add the incoming chain to the chain ctx->in */
./nginx/src/http/modules/ngx_http_sub_filter_module.c-212-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-213-    if (in) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c:214:        if (ngx_chain_add_copy(r->pool, &ctx->in, in) != NGX_OK) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-215-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-216-        }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-217-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-218-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-219-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_sub_filter_module.c-220-                   "http sub filter \"%V\"", &r->uri);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-221-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-222-    while (ctx->in || ctx->buf) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-223-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-224-        if (ctx->buf == NULL) {
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-256-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-257-                if (ctx->saved.len) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-258-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-259-                    if (ctx->free) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-260-                        cl = ctx->free;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-261-                        ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-262-                        b = cl->buf;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-263-                        ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_sub_filter_module.c-264-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-265-                    } else {
./nginx/src/http/modules/ngx_http_sub_filter_module.c:266:                        b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-267-                        if (b == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-268-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-269-                        }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-270-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:271:                        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-272-                        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-273-                            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-274-                        }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-275-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-276-                        cl->buf = b;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-277-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-278-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:279:                    b->pos = ngx_pnalloc(r->pool, ctx->saved.len);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-280-                    if (b->pos == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-281-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-282-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-283-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-284-                    ngx_memcpy(b->pos, ctx->saved.data, ctx->saved.len);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-285-                    b->last = b->pos + ctx->saved.len;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-286-                    b->memory = 1;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-287-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-288-                    *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-289-                    ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-290-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-291-                    ctx->saved.len = 0;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-292-                }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-293-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-294-                if (ctx->free) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-295-                    cl = ctx->free;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-296-                    ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-297-                    b = cl->buf;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-298-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-299-                } else {
./nginx/src/http/modules/ngx_http_sub_filter_module.c:300:                    b = ngx_alloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-301-                    if (b == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-302-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-303-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-304-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:305:                    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-306-                    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-307-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-308-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-309-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-310-                    cl->buf = b;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-311-                }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-312-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-313-                ngx_memcpy(b, ctx->buf, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_sub_filter_module.c-314-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-315-                b->pos = ctx->copy_start;
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-337-                ctx->copy_end = NULL;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-338-            }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-339-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-340-            if (rc == NGX_AGAIN) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-341-                continue;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-342-            }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-343-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-344-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-345-            /* rc == NGX_OK */
./nginx/src/http/modules/ngx_http_sub_filter_module.c-346-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:347:            b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-348-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-349-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-350-            }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-351-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:352:            cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-353-            if (cl == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-354-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-355-            }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-356-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-357-            slcf = ngx_http_get_module_loc_conf(r, ngx_http_sub_filter_module);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-358-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-359-            if (ctx->sub.data == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-360-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-361-                if (ngx_http_complex_value(r, &slcf->value, &ctx->sub)
./nginx/src/http/modules/ngx_http_sub_filter_module.c-362-                    != NGX_OK)
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-386-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-387-        if (ctx->buf->last_buf || ngx_buf_in_memory(ctx->buf)) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-388-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-389-                if (ctx->free) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-390-                    cl = ctx->free;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-391-                    ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-392-                    b = cl->buf;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-393-                    ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_sub_filter_module.c-394-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-395-                } else {
./nginx/src/http/modules/ngx_http_sub_filter_module.c:396:                    b = ngx_calloc_buf(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-397-                    if (b == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-398-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-399-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-400-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:401:                    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_sub_filter_module.c-402-                    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-403-                        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-404-                    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-405-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-406-                    cl->buf = b;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-407-                }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-408-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-409-                b->sync = 1;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-410-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-411-                cl->next = NULL;
--
./nginx/src/http/modules/ngx_http_sub_filter_module.c-649-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-650-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-651-}
./nginx/src/http/modules/ngx_http_sub_filter_module.c-652-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-653-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-654-static void *
./nginx/src/http/modules/ngx_http_sub_filter_module.c-655-ngx_http_sub_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_sub_filter_module.c-656-{
./nginx/src/http/modules/ngx_http_sub_filter_module.c-657-    ngx_http_sub_loc_conf_t  *slcf;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-658-
./nginx/src/http/modules/ngx_http_sub_filter_module.c:659:    slcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_sub_loc_conf_t));
./nginx/src/http/modules/ngx_http_sub_filter_module.c-660-    if (slcf == NULL) {
./nginx/src/http/modules/ngx_http_sub_filter_module.c-661-        return NULL;
./nginx/src/http/modules/ngx_http_sub_filter_module.c-662-    }
./nginx/src/http/modules/ngx_http_sub_filter_module.c-663-
./nginx/src/http/modules/ngx_http_sub_filter_module.c-664-    /*
./nginx/src/http/modules/ngx_http_sub_filter_module.c-665-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_sub_filter_module.c-666-     *
./nginx/src/http/modules/ngx_http_sub_filter_module.c-667-     *     conf->match = { 0, NULL };
./nginx/src/http/modules/ngx_http_sub_filter_module.c-668-     *     conf->sub = { 0, NULL };
./nginx/src/http/modules/ngx_http_sub_filter_module.c-669-     *     conf->sub_lengths = NULL;
--
./nginx/src/http/modules/ngx_http_random_index_module.c-134-            level = NGX_LOG_CRIT;
./nginx/src/http/modules/ngx_http_random_index_module.c-135-            rc = NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_random_index_module.c-136-        }
./nginx/src/http/modules/ngx_http_random_index_module.c-137-
./nginx/src/http/modules/ngx_http_random_index_module.c-138-        ngx_log_error(level, r->connection->log, err,
./nginx/src/http/modules/ngx_http_random_index_module.c-139-                      ngx_open_dir_n " \"%s\" failed", path.data);
./nginx/src/http/modules/ngx_http_random_index_module.c-140-
./nginx/src/http/modules/ngx_http_random_index_module.c-141-        return rc;
./nginx/src/http/modules/ngx_http_random_index_module.c-142-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-143-
./nginx/src/http/modules/ngx_http_random_index_module.c:144:    if (ngx_array_init(&names, r->pool, 32, sizeof(ngx_str_t)) != NGX_OK) {
./nginx/src/http/modules/ngx_http_random_index_module.c-145-        return ngx_http_random_index_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_random_index_module.c-146-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-147-
./nginx/src/http/modules/ngx_http_random_index_module.c-148-    filename = path.data;
./nginx/src/http/modules/ngx_http_random_index_module.c-149-    filename[path.len] = '/';
./nginx/src/http/modules/ngx_http_random_index_module.c-150-
./nginx/src/http/modules/ngx_http_random_index_module.c-151-    for ( ;; ) {
./nginx/src/http/modules/ngx_http_random_index_module.c-152-        ngx_set_errno(0);
./nginx/src/http/modules/ngx_http_random_index_module.c-153-
./nginx/src/http/modules/ngx_http_random_index_module.c-154-        if (ngx_read_dir(&dir) == NGX_ERROR) {
--
./nginx/src/http/modules/ngx_http_random_index_module.c-173-        len = ngx_de_namelen(&dir);
./nginx/src/http/modules/ngx_http_random_index_module.c-174-
./nginx/src/http/modules/ngx_http_random_index_module.c-175-        if (dir.type == 0 || ngx_de_is_link(&dir)) {
./nginx/src/http/modules/ngx_http_random_index_module.c-176-
./nginx/src/http/modules/ngx_http_random_index_module.c-177-            /* 1 byte for '/' and 1 byte for terminating '\0' */
./nginx/src/http/modules/ngx_http_random_index_module.c-178-
./nginx/src/http/modules/ngx_http_random_index_module.c-179-            if (path.len + 1 + len + 1 > allocated) {
./nginx/src/http/modules/ngx_http_random_index_module.c-180-                allocated = path.len + 1 + len + 1
./nginx/src/http/modules/ngx_http_random_index_module.c-181-                                     + NGX_HTTP_RANDOM_INDEX_PREALLOCATE;
./nginx/src/http/modules/ngx_http_random_index_module.c-182-
./nginx/src/http/modules/ngx_http_random_index_module.c:183:                filename = ngx_pnalloc(r->pool, allocated);
./nginx/src/http/modules/ngx_http_random_index_module.c-184-                if (filename == NULL) {
./nginx/src/http/modules/ngx_http_random_index_module.c-185-                    return ngx_http_random_index_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_random_index_module.c-186-                }
./nginx/src/http/modules/ngx_http_random_index_module.c-187-
./nginx/src/http/modules/ngx_http_random_index_module.c-188-                last = ngx_cpystrn(filename, path.data, path.len + 1);
./nginx/src/http/modules/ngx_http_random_index_module.c-189-                *last++ = '/';
./nginx/src/http/modules/ngx_http_random_index_module.c-190-            }
./nginx/src/http/modules/ngx_http_random_index_module.c-191-
./nginx/src/http/modules/ngx_http_random_index_module.c-192-            ngx_cpystrn(last, ngx_de_name(&dir), len + 1);
./nginx/src/http/modules/ngx_http_random_index_module.c-193-
--
./nginx/src/http/modules/ngx_http_random_index_module.c-213-            continue;
./nginx/src/http/modules/ngx_http_random_index_module.c-214-        }
./nginx/src/http/modules/ngx_http_random_index_module.c-215-
./nginx/src/http/modules/ngx_http_random_index_module.c-216-        name = ngx_array_push(&names);
./nginx/src/http/modules/ngx_http_random_index_module.c-217-        if (name == NULL) {
./nginx/src/http/modules/ngx_http_random_index_module.c-218-            return ngx_http_random_index_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_random_index_module.c-219-        }
./nginx/src/http/modules/ngx_http_random_index_module.c-220-
./nginx/src/http/modules/ngx_http_random_index_module.c-221-        name->len = len;
./nginx/src/http/modules/ngx_http_random_index_module.c-222-
./nginx/src/http/modules/ngx_http_random_index_module.c:223:        name->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_random_index_module.c-224-        if (name->data == NULL) {
./nginx/src/http/modules/ngx_http_random_index_module.c-225-            return ngx_http_random_index_error(r, &dir, &path);
./nginx/src/http/modules/ngx_http_random_index_module.c-226-        }
./nginx/src/http/modules/ngx_http_random_index_module.c-227-
./nginx/src/http/modules/ngx_http_random_index_module.c-228-        ngx_memcpy(name->data, ngx_de_name(&dir), len);
./nginx/src/http/modules/ngx_http_random_index_module.c-229-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-230-
./nginx/src/http/modules/ngx_http_random_index_module.c-231-    if (ngx_close_dir(&dir) == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_random_index_module.c-232-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, ngx_errno,
./nginx/src/http/modules/ngx_http_random_index_module.c-233-                      ngx_close_dir_n " \"%s\" failed", &path);
--
./nginx/src/http/modules/ngx_http_random_index_module.c-238-    if (n == 0) {
./nginx/src/http/modules/ngx_http_random_index_module.c-239-        return NGX_DECLINED;
./nginx/src/http/modules/ngx_http_random_index_module.c-240-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-241-
./nginx/src/http/modules/ngx_http_random_index_module.c-242-    name = names.elts;
./nginx/src/http/modules/ngx_http_random_index_module.c-243-
./nginx/src/http/modules/ngx_http_random_index_module.c-244-    n = (ngx_uint_t) (((uint64_t) ngx_random() * n) / 0x80000000);
./nginx/src/http/modules/ngx_http_random_index_module.c-245-
./nginx/src/http/modules/ngx_http_random_index_module.c-246-    uri.len = r->uri.len + name[n].len;
./nginx/src/http/modules/ngx_http_random_index_module.c-247-
./nginx/src/http/modules/ngx_http_random_index_module.c:248:    uri.data = ngx_pnalloc(r->pool, uri.len);
./nginx/src/http/modules/ngx_http_random_index_module.c-249-    if (uri.data == NULL) {
./nginx/src/http/modules/ngx_http_random_index_module.c-250-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_random_index_module.c-251-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-252-
./nginx/src/http/modules/ngx_http_random_index_module.c-253-    last = ngx_copy(uri.data, r->uri.data, r->uri.len);
./nginx/src/http/modules/ngx_http_random_index_module.c-254-    ngx_memcpy(last, name[n].data, name[n].len);
./nginx/src/http/modules/ngx_http_random_index_module.c-255-
./nginx/src/http/modules/ngx_http_random_index_module.c-256-    return ngx_http_internal_redirect(r, &uri, &r->args);
./nginx/src/http/modules/ngx_http_random_index_module.c-257-}
./nginx/src/http/modules/ngx_http_random_index_module.c-258-
--
./nginx/src/http/modules/ngx_http_random_index_module.c-268-
./nginx/src/http/modules/ngx_http_random_index_module.c-269-    return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_random_index_module.c-270-}
./nginx/src/http/modules/ngx_http_random_index_module.c-271-
./nginx/src/http/modules/ngx_http_random_index_module.c-272-
./nginx/src/http/modules/ngx_http_random_index_module.c-273-static void *
./nginx/src/http/modules/ngx_http_random_index_module.c-274-ngx_http_random_index_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_random_index_module.c-275-{
./nginx/src/http/modules/ngx_http_random_index_module.c-276-    ngx_http_random_index_loc_conf_t  *conf;
./nginx/src/http/modules/ngx_http_random_index_module.c-277-
./nginx/src/http/modules/ngx_http_random_index_module.c:278:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_random_index_loc_conf_t));
./nginx/src/http/modules/ngx_http_random_index_module.c-279-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_random_index_module.c-280-        return NULL;
./nginx/src/http/modules/ngx_http_random_index_module.c-281-    }
./nginx/src/http/modules/ngx_http_random_index_module.c-282-
./nginx/src/http/modules/ngx_http_random_index_module.c-283-    conf->enable = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_random_index_module.c-284-
./nginx/src/http/modules/ngx_http_random_index_module.c-285-    return conf;
./nginx/src/http/modules/ngx_http_random_index_module.c-286-}
./nginx/src/http/modules/ngx_http_random_index_module.c-287-
./nginx/src/http/modules/ngx_http_random_index_module.c-288-
--
./nginx/src/http/modules/ngx_http_referer_module.c-239-
./nginx/src/http/modules/ngx_http_referer_module.c-240-    return NGX_OK;
./nginx/src/http/modules/ngx_http_referer_module.c-241-}
./nginx/src/http/modules/ngx_http_referer_module.c-242-
./nginx/src/http/modules/ngx_http_referer_module.c-243-
./nginx/src/http/modules/ngx_http_referer_module.c-244-static void *
./nginx/src/http/modules/ngx_http_referer_module.c-245-ngx_http_referer_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_referer_module.c-246-{
./nginx/src/http/modules/ngx_http_referer_module.c-247-    ngx_http_referer_conf_t  *conf;
./nginx/src/http/modules/ngx_http_referer_module.c-248-
./nginx/src/http/modules/ngx_http_referer_module.c:249:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_referer_conf_t));
./nginx/src/http/modules/ngx_http_referer_module.c-250-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-251-        return NULL;
./nginx/src/http/modules/ngx_http_referer_module.c-252-    }
./nginx/src/http/modules/ngx_http_referer_module.c-253-
./nginx/src/http/modules/ngx_http_referer_module.c-254-#if (NGX_PCRE)
./nginx/src/http/modules/ngx_http_referer_module.c-255-    conf->regex = NGX_CONF_UNSET_PTR;
./nginx/src/http/modules/ngx_http_referer_module.c-256-#endif
./nginx/src/http/modules/ngx_http_referer_module.c-257-
./nginx/src/http/modules/ngx_http_referer_module.c-258-    conf->no_referer = NGX_CONF_UNSET;
./nginx/src/http/modules/ngx_http_referer_module.c-259-    conf->blocked_referer = NGX_CONF_UNSET;
--
./nginx/src/http/modules/ngx_http_referer_module.c-304-                              prev->referer_hash_max_size, 2048);
./nginx/src/http/modules/ngx_http_referer_module.c-305-    ngx_conf_merge_uint_value(conf->referer_hash_bucket_size,
./nginx/src/http/modules/ngx_http_referer_module.c-306-                              prev->referer_hash_bucket_size, 64);
./nginx/src/http/modules/ngx_http_referer_module.c-307-    conf->referer_hash_bucket_size = ngx_align(conf->referer_hash_bucket_size,
./nginx/src/http/modules/ngx_http_referer_module.c-308-                                               ngx_cacheline_size);
./nginx/src/http/modules/ngx_http_referer_module.c-309-
./nginx/src/http/modules/ngx_http_referer_module.c-310-    hash.key = ngx_hash_key_lc;
./nginx/src/http/modules/ngx_http_referer_module.c-311-    hash.max_size = conf->referer_hash_max_size;
./nginx/src/http/modules/ngx_http_referer_module.c-312-    hash.bucket_size = conf->referer_hash_bucket_size;
./nginx/src/http/modules/ngx_http_referer_module.c-313-    hash.name = "referer_hash";
./nginx/src/http/modules/ngx_http_referer_module.c:314:    hash.pool = cf->pool;
./nginx/src/http/modules/ngx_http_referer_module.c-315-
./nginx/src/http/modules/ngx_http_referer_module.c-316-    if (conf->keys->keys.nelts) {
./nginx/src/http/modules/ngx_http_referer_module.c-317-        hash.hash = &conf->hash.hash;
./nginx/src/http/modules/ngx_http_referer_module.c-318-        hash.temp_pool = NULL;
./nginx/src/http/modules/ngx_http_referer_module.c-319-
./nginx/src/http/modules/ngx_http_referer_module.c-320-        if (ngx_hash_init(&hash, conf->keys->keys.elts, conf->keys->keys.nelts)
./nginx/src/http/modules/ngx_http_referer_module.c-321-            != NGX_OK)
./nginx/src/http/modules/ngx_http_referer_module.c-322-        {
./nginx/src/http/modules/ngx_http_referer_module.c-323-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-324-        }
--
./nginx/src/http/modules/ngx_http_referer_module.c-403-    }
./nginx/src/http/modules/ngx_http_referer_module.c-404-
./nginx/src/http/modules/ngx_http_referer_module.c-405-    var->get_handler = ngx_http_referer_variable;
./nginx/src/http/modules/ngx_http_referer_module.c-406-
./nginx/src/http/modules/ngx_http_referer_module.c-407-    if (rlcf->keys == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-408-        rlcf->keys = ngx_pcalloc(cf->temp_pool, sizeof(ngx_hash_keys_arrays_t));
./nginx/src/http/modules/ngx_http_referer_module.c-409-        if (rlcf->keys == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-410-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-411-        }
./nginx/src/http/modules/ngx_http_referer_module.c-412-
./nginx/src/http/modules/ngx_http_referer_module.c:413:        rlcf->keys->pool = cf->pool;
./nginx/src/http/modules/ngx_http_referer_module.c:414:        rlcf->keys->temp_pool = cf->pool;
./nginx/src/http/modules/ngx_http_referer_module.c-415-
./nginx/src/http/modules/ngx_http_referer_module.c-416-        if (ngx_hash_keys_array_init(rlcf->keys, NGX_HASH_SMALL) != NGX_OK) {
./nginx/src/http/modules/ngx_http_referer_module.c-417-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-418-        }
./nginx/src/http/modules/ngx_http_referer_module.c-419-    }
./nginx/src/http/modules/ngx_http_referer_module.c-420-
./nginx/src/http/modules/ngx_http_referer_module.c-421-    value = cf->args->elts;
./nginx/src/http/modules/ngx_http_referer_module.c-422-
./nginx/src/http/modules/ngx_http_referer_module.c-423-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/modules/ngx_http_referer_module.c-424-        if (value[i].len == 0) {
--
./nginx/src/http/modules/ngx_http_referer_module.c-500-ngx_http_add_referer(ngx_conf_t *cf, ngx_hash_keys_arrays_t *keys,
./nginx/src/http/modules/ngx_http_referer_module.c-501-    ngx_str_t *value, ngx_str_t *uri)
./nginx/src/http/modules/ngx_http_referer_module.c-502-{
./nginx/src/http/modules/ngx_http_referer_module.c-503-    ngx_int_t   rc;
./nginx/src/http/modules/ngx_http_referer_module.c-504-    ngx_str_t  *u;
./nginx/src/http/modules/ngx_http_referer_module.c-505-
./nginx/src/http/modules/ngx_http_referer_module.c-506-    if (uri->len == 0) {
./nginx/src/http/modules/ngx_http_referer_module.c-507-        u = NGX_HTTP_REFERER_NO_URI_PART;
./nginx/src/http/modules/ngx_http_referer_module.c-508-
./nginx/src/http/modules/ngx_http_referer_module.c-509-    } else {
./nginx/src/http/modules/ngx_http_referer_module.c:510:        u = ngx_palloc(cf->pool, sizeof(ngx_str_t));
./nginx/src/http/modules/ngx_http_referer_module.c-511-        if (u == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-512-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-513-        }
./nginx/src/http/modules/ngx_http_referer_module.c-514-
./nginx/src/http/modules/ngx_http_referer_module.c-515-        *u = *uri;
./nginx/src/http/modules/ngx_http_referer_module.c-516-    }
./nginx/src/http/modules/ngx_http_referer_module.c-517-
./nginx/src/http/modules/ngx_http_referer_module.c-518-    rc = ngx_hash_add_key(keys, value, u, NGX_HASH_WILDCARD_KEY);
./nginx/src/http/modules/ngx_http_referer_module.c-519-
./nginx/src/http/modules/ngx_http_referer_module.c-520-    if (rc == NGX_OK) {
--
./nginx/src/http/modules/ngx_http_referer_module.c-543-    ngx_regex_elt_t      *re;
./nginx/src/http/modules/ngx_http_referer_module.c-544-    ngx_regex_compile_t   rc;
./nginx/src/http/modules/ngx_http_referer_module.c-545-    u_char                errstr[NGX_MAX_CONF_ERRSTR];
./nginx/src/http/modules/ngx_http_referer_module.c-546-
./nginx/src/http/modules/ngx_http_referer_module.c-547-    if (name->len == 1) {
./nginx/src/http/modules/ngx_http_referer_module.c-548-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "empty regex in \"%V\"", name);
./nginx/src/http/modules/ngx_http_referer_module.c-549-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-550-    }
./nginx/src/http/modules/ngx_http_referer_module.c-551-
./nginx/src/http/modules/ngx_http_referer_module.c-552-    if (rlcf->regex == NGX_CONF_UNSET_PTR) {
./nginx/src/http/modules/ngx_http_referer_module.c:553:        rlcf->regex = ngx_array_create(cf->pool, 2, sizeof(ngx_regex_elt_t));
./nginx/src/http/modules/ngx_http_referer_module.c-554-        if (rlcf->regex == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-555-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-556-        }
./nginx/src/http/modules/ngx_http_referer_module.c-557-    }
./nginx/src/http/modules/ngx_http_referer_module.c-558-
./nginx/src/http/modules/ngx_http_referer_module.c-559-    re = ngx_array_push(rlcf->regex);
./nginx/src/http/modules/ngx_http_referer_module.c-560-    if (re == NULL) {
./nginx/src/http/modules/ngx_http_referer_module.c-561-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-562-    }
./nginx/src/http/modules/ngx_http_referer_module.c-563-
--
./nginx/src/http/modules/ngx_http_referer_module.c-567-
./nginx/src/http/modules/ngx_http_referer_module.c-568-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_referer_module.c-569-    }
./nginx/src/http/modules/ngx_http_referer_module.c-570-
./nginx/src/http/modules/ngx_http_referer_module.c-571-    name->len--;
./nginx/src/http/modules/ngx_http_referer_module.c-572-    name->data++;
./nginx/src/http/modules/ngx_http_referer_module.c-573-
./nginx/src/http/modules/ngx_http_referer_module.c-574-    ngx_memzero(&rc, sizeof(ngx_regex_compile_t));
./nginx/src/http/modules/ngx_http_referer_module.c-575-
./nginx/src/http/modules/ngx_http_referer_module.c-576-    rc.pattern = *name;
./nginx/src/http/modules/ngx_http_referer_module.c:577:    rc.pool = cf->pool;
./nginx/src/http/modules/ngx_http_referer_module.c-578-    rc.options = NGX_REGEX_CASELESS;
./nginx/src/http/modules/ngx_http_referer_module.c-579-    rc.err.len = NGX_MAX_CONF_ERRSTR;
./nginx/src/http/modules/ngx_http_referer_module.c-580-    rc.err.data = errstr;
./nginx/src/http/modules/ngx_http_referer_module.c-581-
./nginx/src/http/modules/ngx_http_referer_module.c-582-    if (ngx_regex_compile(&rc) != NGX_OK) {
./nginx/src/http/modules/ngx_http_referer_module.c-583-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc.err);
./nginx/src/http/modules/ngx_http_referer_module.c-584-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_referer_module.c-585-    }
./nginx/src/http/modules/ngx_http_referer_module.c-586-
./nginx/src/http/modules/ngx_http_referer_module.c-587-    re->regex = rc.regex;
--
./nginx/src/http/modules/ngx_http_addition_filter_module.c-105-    conf = ngx_http_get_module_loc_conf(r, ngx_http_addition_filter_module);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-106-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-107-    if (conf->before_body.len == 0 && conf->after_body.len == 0) {
./nginx/src/http/modules/ngx_http_addition_filter_module.c-108-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-109-    }
./nginx/src/http/modules/ngx_http_addition_filter_module.c-110-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-111-    if (ngx_http_test_content_type(r, &conf->types) == NULL) {
./nginx/src/http/modules/ngx_http_addition_filter_module.c-112-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-113-    }
./nginx/src/http/modules/ngx_http_addition_filter_module.c-114-
./nginx/src/http/modules/ngx_http_addition_filter_module.c:115:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_addition_ctx_t));
./nginx/src/http/modules/ngx_http_addition_filter_module.c-116-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_addition_filter_module.c-117-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_addition_filter_module.c-118-    }
./nginx/src/http/modules/ngx_http_addition_filter_module.c-119-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-120-    ngx_http_set_ctx(r, ctx, ngx_http_addition_filter_module);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-121-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-122-    ngx_http_clear_content_length(r);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-123-    ngx_http_clear_accept_ranges(r);
./nginx/src/http/modules/ngx_http_addition_filter_module.c-124-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-125-    return ngx_http_next_header_filter(r);
--
./nginx/src/http/modules/ngx_http_addition_filter_module.c-204-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-205-    return NGX_OK;
./nginx/src/http/modules/ngx_http_addition_filter_module.c-206-}
./nginx/src/http/modules/ngx_http_addition_filter_module.c-207-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-208-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-209-static void *
./nginx/src/http/modules/ngx_http_addition_filter_module.c-210-ngx_http_addition_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_addition_filter_module.c-211-{
./nginx/src/http/modules/ngx_http_addition_filter_module.c-212-    ngx_http_addition_conf_t  *conf;
./nginx/src/http/modules/ngx_http_addition_filter_module.c-213-
./nginx/src/http/modules/ngx_http_addition_filter_module.c:214:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_addition_conf_t));
./nginx/src/http/modules/ngx_http_addition_filter_module.c-215-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_addition_filter_module.c-216-        return NULL;
./nginx/src/http/modules/ngx_http_addition_filter_module.c-217-    }
./nginx/src/http/modules/ngx_http_addition_filter_module.c-218-
./nginx/src/http/modules/ngx_http_addition_filter_module.c-219-    /*
./nginx/src/http/modules/ngx_http_addition_filter_module.c-220-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_addition_filter_module.c-221-     *
./nginx/src/http/modules/ngx_http_addition_filter_module.c-222-     *     conf->before_body = { 0, NULL };
./nginx/src/http/modules/ngx_http_addition_filter_module.c-223-     *     conf->after_body = { 0, NULL };
./nginx/src/http/modules/ngx_http_addition_filter_module.c-224-     *     conf->types = { NULL };
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-294-    ngx_table_elt_t        **cookies;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-295-    ngx_http_userid_ctx_t   *ctx;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-296-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-297-    ctx = ngx_http_get_module_ctx(r, ngx_http_userid_filter_module);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-298-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-299-    if (ctx) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-300-        return ctx;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-301-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-302-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-303-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c:304:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_userid_ctx_t));
./nginx/src/http/modules/ngx_http_userid_filter_module.c-305-        if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-306-            return NULL;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-307-        }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-308-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-309-        ngx_http_set_ctx(r, ctx, ngx_http_userid_filter_module);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-310-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-311-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-312-    n = ngx_http_parse_multi_header_lines(&r->headers_in.cookies, &conf->name,
./nginx/src/http/modules/ngx_http_userid_filter_module.c-313-                                          &ctx->cookie);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-314-    if (n == NGX_DECLINED) {
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-376-    len = conf->name.len + 1 + ngx_base64_encoded_length(16) + conf->path.len;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-377-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-378-    if (conf->expires) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-379-        len += sizeof(expires) - 1 + 2;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-380-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-381-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-382-    if (conf->domain.len) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-383-        len += conf->domain.len;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-384-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-385-
./nginx/src/http/modules/ngx_http_userid_filter_module.c:386:    cookie = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-387-    if (cookie == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-388-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-389-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-390-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-391-    p = ngx_copy(cookie, conf->name.data, conf->name.len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-392-    *p++ = '=';
./nginx/src/http/modules/ngx_http_userid_filter_module.c-393-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-394-    if (ctx->uid_got[3] == 0 || ctx->reset) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-395-        src.len = 16;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-396-        src.data = (u_char *) ctx->uid_set;
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-562-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-563-    return NGX_OK;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-564-}
./nginx/src/http/modules/ngx_http_userid_filter_module.c-565-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-566-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-567-static ngx_int_t
./nginx/src/http/modules/ngx_http_userid_filter_module.c-568-ngx_http_userid_variable(ngx_http_request_t *r, ngx_http_variable_value_t *v,
./nginx/src/http/modules/ngx_http_userid_filter_module.c-569-    ngx_str_t *name, uint32_t *uid)
./nginx/src/http/modules/ngx_http_userid_filter_module.c-570-{
./nginx/src/http/modules/ngx_http_userid_filter_module.c-571-    v->len = name->len + sizeof("=00001111222233334444555566667777") - 1;
./nginx/src/http/modules/ngx_http_userid_filter_module.c:572:    v->data = ngx_pnalloc(r->pool, v->len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-573-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-574-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-575-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-576-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-577-    v->valid = 1;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-578-    v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-579-    v->not_found = 0;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-580-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-581-    ngx_sprintf(v->data, "%V=%08XD%08XD%08XD%08XD",
./nginx/src/http/modules/ngx_http_userid_filter_module.c-582-                name, uid[0], uid[1], uid[2], uid[3]);
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-632-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-633-    return NGX_OK;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-634-}
./nginx/src/http/modules/ngx_http_userid_filter_module.c-635-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-636-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-637-static void *
./nginx/src/http/modules/ngx_http_userid_filter_module.c-638-ngx_http_userid_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_userid_filter_module.c-639-{
./nginx/src/http/modules/ngx_http_userid_filter_module.c-640-    ngx_http_userid_conf_t  *conf;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-641-
./nginx/src/http/modules/ngx_http_userid_filter_module.c:642:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_userid_conf_t));
./nginx/src/http/modules/ngx_http_userid_filter_module.c-643-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-644-        return NULL;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-645-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-646-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-647-    /*
./nginx/src/http/modules/ngx_http_userid_filter_module.c-648-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_userid_filter_module.c-649-     *
./nginx/src/http/modules/ngx_http_userid_filter_module.c-650-     *     conf->name = { 0, NULL };
./nginx/src/http/modules/ngx_http_userid_filter_module.c-651-     *     conf->domain = { 0, NULL };
./nginx/src/http/modules/ngx_http_userid_filter_module.c-652-     *     conf->path = { 0, NULL };
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-706-{
./nginx/src/http/modules/ngx_http_userid_filter_module.c-707-    ngx_str_t  *domain = data;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-708-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-709-    u_char  *p, *new;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-710-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-711-    if (ngx_strcmp(domain->data, "none") == 0) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-712-        ngx_str_set(domain, "");
./nginx/src/http/modules/ngx_http_userid_filter_module.c-713-        return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-714-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-715-
./nginx/src/http/modules/ngx_http_userid_filter_module.c:716:    new = ngx_pnalloc(cf->pool, sizeof("; domain=") - 1 + domain->len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-717-    if (new == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-718-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-719-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-720-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-721-    p = ngx_cpymem(new, "; domain=", sizeof("; domain=") - 1);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-722-    ngx_memcpy(p, domain->data, domain->len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-723-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-724-    domain->len += sizeof("; domain=") - 1;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-725-    domain->data = new;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-726-
--
./nginx/src/http/modules/ngx_http_userid_filter_module.c-728-}
./nginx/src/http/modules/ngx_http_userid_filter_module.c-729-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-730-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-731-static char *
./nginx/src/http/modules/ngx_http_userid_filter_module.c-732-ngx_http_userid_path(ngx_conf_t *cf, void *post, void *data)
./nginx/src/http/modules/ngx_http_userid_filter_module.c-733-{
./nginx/src/http/modules/ngx_http_userid_filter_module.c-734-    ngx_str_t  *path = data;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-735-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-736-    u_char  *p, *new;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-737-
./nginx/src/http/modules/ngx_http_userid_filter_module.c:738:    new = ngx_pnalloc(cf->pool, sizeof("; path=") - 1 + path->len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-739-    if (new == NULL) {
./nginx/src/http/modules/ngx_http_userid_filter_module.c-740-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-741-    }
./nginx/src/http/modules/ngx_http_userid_filter_module.c-742-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-743-    p = ngx_cpymem(new, "; path=", sizeof("; path=") - 1);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-744-    ngx_memcpy(p, path->data, path->len);
./nginx/src/http/modules/ngx_http_userid_filter_module.c-745-
./nginx/src/http/modules/ngx_http_userid_filter_module.c-746-    path->len += sizeof("; path=") - 1;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-747-    path->data = new;
./nginx/src/http/modules/ngx_http_userid_filter_module.c-748-
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-226-                           (u_char *) "multipart/x-mixed-replace",
./nginx/src/http/modules/ngx_http_image_filter_module.c-227-                           sizeof("multipart/x-mixed-replace") - 1)
./nginx/src/http/modules/ngx_http_image_filter_module.c-228-           == 0)
./nginx/src/http/modules/ngx_http_image_filter_module.c-229-    {
./nginx/src/http/modules/ngx_http_image_filter_module.c-230-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_image_filter_module.c-231-                      "image filter: multipart/x-mixed-replace response");
./nginx/src/http/modules/ngx_http_image_filter_module.c-232-
./nginx/src/http/modules/ngx_http_image_filter_module.c-233-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-234-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-235-
./nginx/src/http/modules/ngx_http_image_filter_module.c:236:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_image_filter_ctx_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-237-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-238-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-239-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-240-
./nginx/src/http/modules/ngx_http_image_filter_module.c-241-    ngx_http_set_ctx(r, ctx, ngx_http_image_filter_module);
./nginx/src/http/modules/ngx_http_image_filter_module.c-242-
./nginx/src/http/modules/ngx_http_image_filter_module.c-243-    len = r->headers_out.content_length_n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-244-
./nginx/src/http/modules/ngx_http_image_filter_module.c-245-    if (len != -1 && len > (off_t) conf->buffer_size) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-246-        ngx_log_error(NGX_LOG_ERR, r->connection->log, 0,
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-444-{
./nginx/src/http/modules/ngx_http_image_filter_module.c-445-    u_char                       *p;
./nginx/src/http/modules/ngx_http_image_filter_module.c-446-    size_t                        size, rest;
./nginx/src/http/modules/ngx_http_image_filter_module.c-447-    ngx_buf_t                    *b;
./nginx/src/http/modules/ngx_http_image_filter_module.c-448-    ngx_chain_t                  *cl;
./nginx/src/http/modules/ngx_http_image_filter_module.c-449-    ngx_http_image_filter_ctx_t  *ctx;
./nginx/src/http/modules/ngx_http_image_filter_module.c-450-
./nginx/src/http/modules/ngx_http_image_filter_module.c-451-    ctx = ngx_http_get_module_ctx(r, ngx_http_image_filter_module);
./nginx/src/http/modules/ngx_http_image_filter_module.c-452-
./nginx/src/http/modules/ngx_http_image_filter_module.c-453-    if (ctx->image == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c:454:        ctx->image = ngx_palloc(r->pool, ctx->length);
./nginx/src/http/modules/ngx_http_image_filter_module.c-455-        if (ctx->image == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-456-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-457-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-458-
./nginx/src/http/modules/ngx_http_image_filter_module.c-459-        ctx->last = ctx->image;
./nginx/src/http/modules/ngx_http_image_filter_module.c-460-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-461-
./nginx/src/http/modules/ngx_http_image_filter_module.c-462-    p = ctx->last;
./nginx/src/http/modules/ngx_http_image_filter_module.c-463-
./nginx/src/http/modules/ngx_http_image_filter_module.c-464-    for (cl = in; cl; cl = cl->next) {
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-541-    return ngx_http_image_resize(r, ctx);
./nginx/src/http/modules/ngx_http_image_filter_module.c-542-}
./nginx/src/http/modules/ngx_http_image_filter_module.c-543-
./nginx/src/http/modules/ngx_http_image_filter_module.c-544-
./nginx/src/http/modules/ngx_http_image_filter_module.c-545-static ngx_buf_t *
./nginx/src/http/modules/ngx_http_image_filter_module.c-546-ngx_http_image_json(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_image_filter_module.c-547-{
./nginx/src/http/modules/ngx_http_image_filter_module.c-548-    size_t      len;
./nginx/src/http/modules/ngx_http_image_filter_module.c-549-    ngx_buf_t  *b;
./nginx/src/http/modules/ngx_http_image_filter_module.c-550-
./nginx/src/http/modules/ngx_http_image_filter_module.c:551:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-552-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-553-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-554-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-555-
./nginx/src/http/modules/ngx_http_image_filter_module.c-556-    b->memory = 1;
./nginx/src/http/modules/ngx_http_image_filter_module.c-557-    b->last_buf = 1;
./nginx/src/http/modules/ngx_http_image_filter_module.c-558-
./nginx/src/http/modules/ngx_http_image_filter_module.c-559-    ngx_http_clean_header(r);
./nginx/src/http/modules/ngx_http_image_filter_module.c-560-
./nginx/src/http/modules/ngx_http_image_filter_module.c-561-    r->headers_out.status = NGX_HTTP_OK;
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-568-
./nginx/src/http/modules/ngx_http_image_filter_module.c-569-        ngx_http_image_length(r, b);
./nginx/src/http/modules/ngx_http_image_filter_module.c-570-
./nginx/src/http/modules/ngx_http_image_filter_module.c-571-        return b;
./nginx/src/http/modules/ngx_http_image_filter_module.c-572-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-573-
./nginx/src/http/modules/ngx_http_image_filter_module.c-574-    len = sizeof("{ \"img\" : "
./nginx/src/http/modules/ngx_http_image_filter_module.c-575-                 "{ \"width\": , \"height\": , \"type\": \"jpeg\" } }" CRLF) - 1
./nginx/src/http/modules/ngx_http_image_filter_module.c-576-          + 2 * NGX_SIZE_T_LEN;
./nginx/src/http/modules/ngx_http_image_filter_module.c-577-
./nginx/src/http/modules/ngx_http_image_filter_module.c:578:    b->pos = ngx_pnalloc(r->pool, len);
./nginx/src/http/modules/ngx_http_image_filter_module.c-579-    if (b->pos == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-580-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-581-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-582-
./nginx/src/http/modules/ngx_http_image_filter_module.c-583-    b->last = ngx_sprintf(b->pos,
./nginx/src/http/modules/ngx_http_image_filter_module.c-584-                          "{ \"img\" : "
./nginx/src/http/modules/ngx_http_image_filter_module.c-585-                                       "{ \"width\": %uz,"
./nginx/src/http/modules/ngx_http_image_filter_module.c-586-                                        " \"height\": %uz,"
./nginx/src/http/modules/ngx_http_image_filter_module.c-587-                                        " \"type\": \"%s\" } }" CRLF,
./nginx/src/http/modules/ngx_http_image_filter_module.c-588-                          ctx->width, ctx->height,
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-592-
./nginx/src/http/modules/ngx_http_image_filter_module.c-593-    return b;
./nginx/src/http/modules/ngx_http_image_filter_module.c-594-}
./nginx/src/http/modules/ngx_http_image_filter_module.c-595-
./nginx/src/http/modules/ngx_http_image_filter_module.c-596-
./nginx/src/http/modules/ngx_http_image_filter_module.c-597-static ngx_buf_t *
./nginx/src/http/modules/ngx_http_image_filter_module.c-598-ngx_http_image_asis(ngx_http_request_t *r, ngx_http_image_filter_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_image_filter_module.c-599-{
./nginx/src/http/modules/ngx_http_image_filter_module.c-600-    ngx_buf_t  *b;
./nginx/src/http/modules/ngx_http_image_filter_module.c-601-
./nginx/src/http/modules/ngx_http_image_filter_module.c:602:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-603-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-604-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-605-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-606-
./nginx/src/http/modules/ngx_http_image_filter_module.c-607-    b->pos = ctx->image;
./nginx/src/http/modules/ngx_http_image_filter_module.c-608-    b->last = ctx->last;
./nginx/src/http/modules/ngx_http_image_filter_module.c-609-    b->memory = 1;
./nginx/src/http/modules/ngx_http_image_filter_module.c-610-    b->last_buf = 1;
./nginx/src/http/modules/ngx_http_image_filter_module.c-611-
./nginx/src/http/modules/ngx_http_image_filter_module.c-612-    ngx_http_image_length(r, b);
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-962-    if (sharpen > 0) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-963-        gdImageSharpen(dst, sharpen);
./nginx/src/http/modules/ngx_http_image_filter_module.c-964-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-965-
./nginx/src/http/modules/ngx_http_image_filter_module.c-966-    out = ngx_http_image_out(r, ctx->type, dst, &size);
./nginx/src/http/modules/ngx_http_image_filter_module.c-967-
./nginx/src/http/modules/ngx_http_image_filter_module.c-968-    ngx_log_debug3(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_image_filter_module.c-969-                   "image: %d x %d %d", sx, sy, colors);
./nginx/src/http/modules/ngx_http_image_filter_module.c-970-
./nginx/src/http/modules/ngx_http_image_filter_module.c-971-    gdImageDestroy(dst);
./nginx/src/http/modules/ngx_http_image_filter_module.c:972:    ngx_pfree(r->pool, ctx->image);
./nginx/src/http/modules/ngx_http_image_filter_module.c-973-
./nginx/src/http/modules/ngx_http_image_filter_module.c-974-    if (out == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-975-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-976-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-977-
./nginx/src/http/modules/ngx_http_image_filter_module.c:978:    cln = ngx_pool_cleanup_add(r->pool, 0);
./nginx/src/http/modules/ngx_http_image_filter_module.c-979-    if (cln == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-980-        gdFree(out);
./nginx/src/http/modules/ngx_http_image_filter_module.c-981-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-982-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-983-
./nginx/src/http/modules/ngx_http_image_filter_module.c:984:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-985-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-986-        gdFree(out);
./nginx/src/http/modules/ngx_http_image_filter_module.c-987-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-988-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-989-
./nginx/src/http/modules/ngx_http_image_filter_module.c-990-    cln->handler = ngx_http_image_cleanup;
./nginx/src/http/modules/ngx_http_image_filter_module.c-991-    cln->data = out;
./nginx/src/http/modules/ngx_http_image_filter_module.c-992-
./nginx/src/http/modules/ngx_http_image_filter_module.c-993-    b->pos = out;
./nginx/src/http/modules/ngx_http_image_filter_module.c-994-    b->last = out + size;
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1157-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1158-    return 0;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1159-}
./nginx/src/http/modules/ngx_http_image_filter_module.c-1160-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1161-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1162-static void *
./nginx/src/http/modules/ngx_http_image_filter_module.c-1163-ngx_http_image_filter_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_image_filter_module.c-1164-{
./nginx/src/http/modules/ngx_http_image_filter_module.c-1165-    ngx_http_image_filter_conf_t  *conf;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1166-
./nginx/src/http/modules/ngx_http_image_filter_module.c:1167:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_image_filter_conf_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1168-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1169-        return NULL;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1170-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1171-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1172-    /*
./nginx/src/http/modules/ngx_http_image_filter_module.c-1173-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_image_filter_module.c-1174-     *
./nginx/src/http/modules/ngx_http_image_filter_module.c-1175-     *     conf->width = 0;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1176-     *     conf->height = 0;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1177-     *     conf->angle = 0;
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1294-            if (cv.lengths == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1295-                n = ngx_http_image_filter_value(&value[i]);
./nginx/src/http/modules/ngx_http_image_filter_module.c-1296-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1297-                if (n != 90 && n != 180 && n != 270) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1298-                    goto failed;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1299-                }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1300-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1301-                imcf->angle = (ngx_uint_t) n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1302-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1303-            } else {
./nginx/src/http/modules/ngx_http_image_filter_module.c:1304:                imcf->acv = ngx_palloc(cf->pool,
./nginx/src/http/modules/ngx_http_image_filter_module.c-1305-                                       sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1306-                if (imcf->acv == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1307-                    return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1308-                }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1309-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1310-                *imcf->acv = cv;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1311-            }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1312-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1313-            return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1314-
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1340-    if (cv.lengths == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1341-        n = ngx_http_image_filter_value(&value[i]);
./nginx/src/http/modules/ngx_http_image_filter_module.c-1342-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1343-        if (n == 0) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1344-            goto failed;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1345-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1346-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1347-        imcf->width = (ngx_uint_t) n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1348-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1349-    } else {
./nginx/src/http/modules/ngx_http_image_filter_module.c:1350:        imcf->wcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1351-        if (imcf->wcv == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1352-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1353-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1354-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1355-        *imcf->wcv = cv;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1356-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1357-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1358-    ngx_memzero(&ccv, sizeof(ngx_http_compile_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1359-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1360-    ccv.cf = cf;
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1368-    if (cv.lengths == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1369-        n = ngx_http_image_filter_value(&value[i]);
./nginx/src/http/modules/ngx_http_image_filter_module.c-1370-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1371-        if (n == 0) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1372-            goto failed;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1373-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1374-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1375-        imcf->height = (ngx_uint_t) n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1376-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1377-    } else {
./nginx/src/http/modules/ngx_http_image_filter_module.c:1378:        imcf->hcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1379-        if (imcf->hcv == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1380-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1381-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1382-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1383-        *imcf->hcv = cv;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1384-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1385-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1386-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1387-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1388-failed:
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1422-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1423-        if (n <= 0) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1424-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_image_filter_module.c-1425-                               "invalid value \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_image_filter_module.c-1426-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1427-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1428-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1429-        imcf->jpeg_quality = (ngx_uint_t) n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1430-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1431-    } else {
./nginx/src/http/modules/ngx_http_image_filter_module.c:1432:        imcf->jqcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1433-        if (imcf->jqcv == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1434-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1435-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1436-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1437-        *imcf->jqcv = cv;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1438-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1439-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1440-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1441-}
./nginx/src/http/modules/ngx_http_image_filter_module.c-1442-
--
./nginx/src/http/modules/ngx_http_image_filter_module.c-1469-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1470-        if (n < 0) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1471-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_image_filter_module.c-1472-                               "invalid value \"%V\"", &value[1]);
./nginx/src/http/modules/ngx_http_image_filter_module.c-1473-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1474-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1475-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1476-        imcf->sharpen = (ngx_uint_t) n;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1477-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1478-    } else {
./nginx/src/http/modules/ngx_http_image_filter_module.c:1479:        imcf->shcv = ngx_palloc(cf->pool, sizeof(ngx_http_complex_value_t));
./nginx/src/http/modules/ngx_http_image_filter_module.c-1480-        if (imcf->shcv == NULL) {
./nginx/src/http/modules/ngx_http_image_filter_module.c-1481-            return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1482-        }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1483-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1484-        *imcf->shcv = cv;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1485-    }
./nginx/src/http/modules/ngx_http_image_filter_module.c-1486-
./nginx/src/http/modules/ngx_http_image_filter_module.c-1487-    return NGX_CONF_OK;
./nginx/src/http/modules/ngx_http_image_filter_module.c-1488-}
./nginx/src/http/modules/ngx_http_image_filter_module.c-1489-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-289-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-290-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-291-        if (!conf->enable_deflate && r->deflate_use) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-292-            r->deflate_use = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-293-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-294-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-295-    } else if (!r->gzip_ok) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-296-        return ngx_http_next_header_filter(r);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-297-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-298-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:299:    ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_gzip_ctx_t));
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-300-    if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-301-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-302-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-303-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-304-    ngx_http_set_ctx(r, ctx, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-305-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-306-    ctx->request = r;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-307-    ctx->buffering = (conf->postpone_gzipping != 0);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-308-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-309-    ngx_http_gzip_filter_memory(r, ctx);
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-379-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-380-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-381-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-382-    if (ctx->preallocated == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-383-        if (ngx_http_gzip_filter_deflate_start(r, ctx) != NGX_OK) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-384-            goto failed;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-385-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-386-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-387-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-388-    if (in) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:389:        if (ngx_chain_add_copy(r->pool, &ctx->in, in) != NGX_OK) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-390-            goto failed;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-391-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-392-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-393-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-394-    if (ctx->nomem) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-395-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-396-        /* flush busy buffers */
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-397-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-398-        if (ngx_http_next_body_filter(r, NULL) == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-399-            goto failed;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-400-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-401-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-402-        cl = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-403-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:404:        ngx_chain_update_chains(r->pool, &ctx->free, &ctx->busy, &cl,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-405-                                (ngx_buf_tag_t) &ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-406-        ctx->nomem = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-407-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-408-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-409-    for ( ;; ) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-410-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-411-        /* cycle while we can write to a client */
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-412-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-413-        for ( ;; ) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-414-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-464-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-465-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-466-        rc = ngx_http_next_body_filter(r, ctx->out);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-467-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-468-        if (rc == NGX_ERROR) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-469-            goto failed;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-470-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-471-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-472-        ngx_http_gzip_filter_free_copy_buf(r, ctx);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-473-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:474:        ngx_chain_update_chains(r->pool, &ctx->free, &ctx->busy, &ctx->out,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-475-                                (ngx_buf_tag_t) &ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-476-        ctx->last_out = &ctx->out;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-477-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-478-        ctx->nomem = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-479-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-480-        if (ctx->done) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-481-            return rc;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-482-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-483-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-484-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-485-    /* unreachable */
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-486-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-487-failed:
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-488-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-489-    ctx->done = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-490-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-491-    if (ctx->preallocated) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-492-        deflateEnd(&ctx->zstream);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-493-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:494:        ngx_pfree(r->pool, ctx->preallocated);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-495-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-496-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-497-    ngx_http_gzip_filter_free_copy_buf(r, ctx);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-498-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-499-    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-500-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-501-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-502-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-503-static void
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-504-ngx_http_gzip_filter_memory(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-561-    ll = &ctx->in;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-562-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-563-    for (cl = ctx->in; cl; cl = cl->next) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-564-        buffered += cl->buf->last - cl->buf->pos;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-565-        ll = &cl->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-566-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-567-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-568-    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-569-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-570-    while (in) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:571:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-572-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-573-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-574-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-575-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-576-        b = in->buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-577-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-578-        size = b->last - b->pos;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-579-        buffered += size;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-580-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-581-        if (b->flush || b->last_buf || buffered > conf->postpone_gzipping) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-582-            ctx->buffering = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-583-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-584-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-585-        if (ctx->buffering && size) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-586-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:587:            buf = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-588-            if (buf == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-589-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-590-            }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-591-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-592-            buf->last = ngx_cpymem(buf->pos, b->pos, size);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-593-            b->pos = b->last;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-594-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-595-            buf->last_buf = b->last_buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-596-            buf->tag = (ngx_buf_tag_t) &ngx_http_gzip_filter_module;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-597-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-614-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-615-static ngx_int_t
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-616-ngx_http_gzip_filter_deflate_start(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-617-    ngx_http_gzip_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-618-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-619-    int                    rc;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-620-    ngx_http_gzip_conf_t  *conf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-621-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-622-    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-623-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:624:    ctx->preallocated = ngx_palloc(r->pool, ctx->allocated);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-625-    if (ctx->preallocated == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-626-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-627-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-628-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-629-    ctx->free_mem = ctx->preallocated;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-630-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-631-    ctx->zstream.zalloc = ngx_http_gzip_filter_alloc;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-632-    ctx->zstream.zfree = ngx_http_gzip_filter_free;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-633-    ctx->zstream.opaque = ctx;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-634-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-650-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-651-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-652-static ngx_int_t
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-653-ngx_http_gzip_filter_gzheader(ngx_http_request_t *r, ngx_http_gzip_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-654-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-655-    ngx_buf_t      *b;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-656-    ngx_chain_t    *cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-657-    static u_char  gzheader[10] =
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-658-                               { 0x1f, 0x8b, Z_DEFLATED, 0, 0, 0, 0, 0, 0, 3 };
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-659-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:660:    b = ngx_pcalloc(r->pool, sizeof(ngx_buf_t));
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-661-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-662-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-663-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-664-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-665-    b->memory = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-666-    b->pos = gzheader;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-667-    b->last = b->pos + 10;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-668-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:669:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-670-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-671-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-672-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-673-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-674-    cl->buf = b;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-675-    cl->next = ctx->out;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-676-    ctx->out = cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-677-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-678-    ctx->gzheader = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-679-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-753-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-754-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-755-    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-756-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-757-    if (ctx->free) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-758-        ctx->out_buf = ctx->free->buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-759-        ctx->free = ctx->free->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-760-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-761-    } else if (ctx->bufs < conf->bufs.num) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-762-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:763:        ctx->out_buf = ngx_create_temp_buf(r->pool, conf->bufs.size);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-764-        if (ctx->out_buf == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-765-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-766-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-767-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-768-        ctx->out_buf->tag = (ngx_buf_tag_t) &ngx_http_gzip_filter_module;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-769-        ctx->out_buf->recycled = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-770-        ctx->bufs++;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-771-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-772-    } else {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-773-        ctx->nomem = 1;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-820-            ctx->zstream.next_in = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-821-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-822-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-823-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-824-    ctx->out_buf->last = ctx->zstream.next_out;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-825-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-826-    if (ctx->zstream.avail_out == 0) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-827-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-828-        /* zlib wants to output some more gzipped data */
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-829-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:830:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-831-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-832-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-833-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-834-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-835-        cl->buf = ctx->out_buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-836-        cl->next = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-837-        *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-838-        ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-839-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-840-        ctx->redo = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-841-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-842-        return NGX_AGAIN;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-843-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-844-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-845-    ctx->redo = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-846-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-847-    if (ctx->flush == Z_SYNC_FLUSH) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-848-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-849-        ctx->flush = Z_NO_FLUSH;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-850-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:851:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-852-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-853-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-854-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-855-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-856-        b = ctx->out_buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-857-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-858-        if (ngx_buf_size(b) == 0) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-859-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:860:            b = ngx_calloc_buf(ctx->request->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-861-            if (b == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-862-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-863-            }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-864-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-865-        } else {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-866-            ctx->zstream.avail_out = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-867-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-868-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-869-        b->flush = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-870-
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-882-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-883-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-884-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-885-        return NGX_OK;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-886-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-887-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-888-    conf = ngx_http_get_module_loc_conf(r, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-889-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-890-    if (conf->no_buffer && ctx->in == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-891-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:892:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-893-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-894-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-895-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-896-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-897-        cl->buf = ctx->out_buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-898-        cl->next = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-899-        *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-900-        ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-901-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-902-        return NGX_OK;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-928-    ngx_http_gzip_filter_fetch_add(r, ctx->zin, ctx->zout);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-929-   
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-930-    rc = deflateEnd(&ctx->zstream);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-931-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-932-    if (rc != Z_OK) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-933-        ngx_log_error(NGX_LOG_ALERT, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-934-                      "deflateEnd() failed: %d", rc);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-935-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-936-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-937-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:938:    ngx_pfree(r->pool, ctx->preallocated);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-939-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:940:    cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-941-    if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-942-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-943-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-944-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-945-    cl->buf = ctx->out_buf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-946-    cl->next = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-947-    *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-948-    ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-949-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-950-    if (r->deflate_use) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-951-        cl->buf->last_buf = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-952-        goto skip_gzip_trailer;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-953-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-954-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-955-    if (ctx->zstream.avail_out >= 8) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-956-        trailer = (struct gztrailer *) ctx->out_buf->last;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-957-        ctx->out_buf->last += 8;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-958-        ctx->out_buf->last_buf = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-959-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-960-    } else {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:961:        b = ngx_create_temp_buf(r->pool, 8);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-962-        if (b == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-963-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-964-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-965-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-966-        b->last_buf = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-967-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:968:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-969-        if (cl == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-970-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-971-        }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-972-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-973-        cl->buf = b;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-974-        cl->next = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-975-        *ctx->last_out = cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-976-        ctx->last_out = &cl->next;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-977-        trailer = (struct gztrailer *) b->pos;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-978-        b->last += 8;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1038-                       "gzip alloc: n:%ud s:%ud a:%ud p:%p",
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1039-                       items, size, alloc, p);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1040-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1041-        return p;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1042-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1043-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1044-    ngx_log_error(NGX_LOG_ALERT, ctx->request->connection->log, 0,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1045-                  "gzip filter failed to use preallocated memory: %ud of %ud",
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1046-                  items * size, ctx->allocated);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1047-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1048:    p = ngx_palloc(ctx->request->pool, items * size);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1049-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1050-    return p;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1051-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1052-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1053-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1054-static void
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1055-ngx_http_gzip_filter_free(void *opaque, void *address)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1056-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1057-#if 0
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1058-    ngx_http_gzip_ctx_t *ctx = opaque;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1063-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1064-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1065-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1066-static void
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1067-ngx_http_gzip_filter_free_copy_buf(ngx_http_request_t *r,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1068-    ngx_http_gzip_ctx_t *ctx)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1069-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1070-    ngx_chain_t  *cl;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1071-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1072-    for (cl = ctx->copied; cl; cl = cl->next) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1073:        ngx_pfree(r->pool, cl->buf->start);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1074-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1075-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1076-    ctx->copied = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1077-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1078-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1079-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1080-static ngx_int_t
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1081-ngx_http_gzip_add_variables(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1082-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1083-    ngx_http_variable_t  *var;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1104-    v->no_cacheable = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1105-    v->not_found = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1106-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1107-    ctx = ngx_http_get_module_ctx(r, ngx_http_gzip_filter_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1108-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1109-    if (ctx == NULL || ctx->zout == 0) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1110-        v->not_found = 1;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1111-        return NGX_OK;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1112-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1113-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1114:    v->data = ngx_pnalloc(r->pool, NGX_INT32_LEN + 3);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1115-    if (v->data == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1116-        return NGX_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1117-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1118-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1119-    zint = (ngx_uint_t) (ctx->zin / ctx->zout);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1120-    zfrac = (ngx_uint_t) ((ctx->zin * 100 / ctx->zout) % 100);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1121-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1122-    if ((ctx->zin * 1000 / ctx->zout) % 10 > 4) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1123-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1124-        /* the rounding, e.g., 2.125 to 2.13 */
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1135-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1136-    return NGX_OK;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1137-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1138-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1139-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1140-static void *
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1141-ngx_http_gzip_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1142-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1143-    ngx_http_gzip_conf_t  *conf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1144-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1145:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_gzip_conf_t));
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1146-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1147-        return NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1148-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1149-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1150-    /*
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1151-     * set by ngx_pcalloc():
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1152-     *
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1153-     *     conf->bufs.num = 0;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1154-     *     conf->types = { NULL };
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1155-     *     conf->types_keys = NULL;
--
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1261-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1262-    return "must be 512, 1k, 2k, 4k, 8k, 16k, 32k, 64k, or 128k";
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1263-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1264-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1265-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1266-static void *
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1267-ngx_http_gzip_server_create_conf(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1268-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1269-    ngx_http_gzip_stat_filter_conf_t  *conf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1270-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1271:    conf = ngx_pcalloc(cf->pool, sizeof(ngx_http_gzip_stat_filter_conf_t));
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1272-    if (conf == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1273-        return NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1274-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1275-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1276-    conf->sh = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1277-    conf->shpool = NULL;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1278-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1279-    return conf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1280-}
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1281-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1282-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1283-static char *
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1284-ngx_http_gzip_server_merge_conf(ngx_conf_t *cf, void *parent, void *child)
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1285-{
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1286-    ngx_str_t                    zone_name;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1287-    ngx_http_server_name_t      *sn;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1288-    ngx_http_gzip_stat_filter_conf_t  *clcf = child;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1289-    ngx_http_core_srv_conf_t    *cscf;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1290-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c:1291:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (256));
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1292-    if (zone_name.data == NULL) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1293-        return NGX_CONF_ERROR;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1294-    }
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1295-
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1296-    cscf = ngx_http_conf_get_module_srv_conf(cf, ngx_http_core_module);
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1297-    sn = cscf->server_names.elts;
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1298-    if (cscf->server_names.nelts == 0) {
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1299-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1300-                "server_name directive reqired.");
./nginx/src/http/modules/ngx_http_gzip_filter_module.c-1301-        return NGX_CONF_ERROR;
--
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-71-    if (r->headers_out.content_length_n == -1 && r->headers_out.status >= 200) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-72-        if (r->http_version < NGX_HTTP_VERSION_11) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-73-            r->keepalive = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-74-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-75-        } else {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-76-            clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-77-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-78-            if (clcf->chunked_transfer_encoding) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-79-                r->chunked = 1;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-80-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:81:                ctx = ngx_pcalloc(r->pool,
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-82-                                  sizeof(ngx_http_chunked_filter_ctx_t));
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-83-                if (ctx == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-84-                    return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-85-                }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-86-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-87-                ngx_http_set_ctx(r, ctx, ngx_http_chunked_filter_module);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-88-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-89-            } else {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-90-                r->keepalive = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-91-            }
--
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-122-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-123-                       "http chunk: %d", ngx_buf_size(cl->buf));
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-124-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-125-        size += ngx_buf_size(cl->buf);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-126-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-127-        if (cl->buf->flush
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-128-            || cl->buf->sync
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-129-            || ngx_buf_in_memory(cl->buf)
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-130-            || cl->buf->in_file)
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-131-        {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:132:            tl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-133-            if (tl == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-134-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-135-            }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-136-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-137-            tl->buf = cl->buf;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-138-            *ll = tl;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-139-            ll = &tl->next;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-140-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-141-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-142-        if (cl->next == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-143-            break;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-144-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-145-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-146-        cl = cl->next;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-147-    }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-148-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-149-    if (size) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:150:        tl = ngx_chain_get_free_buf(r->pool, &ctx->free);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-151-        if (tl == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-152-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-153-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-154-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-155-        b = tl->buf;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-156-        chunk = b->start;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-157-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-158-        if (chunk == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-159-            /* the "0000000000000000" is 64-bit hexadecimal string */
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-160-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:161:            chunk = ngx_palloc(r->pool, sizeof("0000000000000000" CRLF) - 1);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-162-            if (chunk == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-163-                return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-164-            }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-165-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-166-            b->start = chunk;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-167-            b->end = chunk + sizeof("0000000000000000" CRLF) - 1;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-168-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-169-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-170-        b->tag = (ngx_buf_tag_t) &ngx_http_chunked_filter_module;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-171-        b->memory = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-172-        b->temporary = 1;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-173-        b->pos = chunk;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-174-        b->last = ngx_sprintf(chunk, "%xO" CRLF, size);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-175-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-176-        tl->next = out;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-177-        out = tl;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-178-    }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-179-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-180-    if (cl->buf->last_buf) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:181:        tl = ngx_chain_get_free_buf(r->pool, &ctx->free);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-182-        if (tl == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-183-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-184-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-185-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-186-        b = tl->buf;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-187-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-188-        b->tag = (ngx_buf_tag_t) &ngx_http_chunked_filter_module;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-189-        b->temporary = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-190-        b->memory = 1;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-191-        b->last_buf = 1;
--
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-194-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-195-        cl->buf->last_buf = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-196-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-197-        *ll = tl;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-198-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-199-        if (size == 0) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-200-            b->pos += 2;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-201-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-202-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-203-    } else if (size > 0) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:204:        tl = ngx_chain_get_free_buf(r->pool, &ctx->free);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-205-        if (tl == NULL) {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-206-            return NGX_ERROR;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-207-        }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-208-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-209-        b = tl->buf;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-210-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-211-        b->tag = (ngx_buf_tag_t) &ngx_http_chunked_filter_module;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-212-        b->temporary = 0;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-213-        b->memory = 1;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-214-        b->pos = (u_char *) CRLF;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-215-        b->last = b->pos + 2;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-216-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-217-        *ll = tl;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-218-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-219-    } else {
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-220-        *ll = NULL;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-221-    }
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-222-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-223-    rc = ngx_http_next_body_filter(r, out);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-224-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c:225:    ngx_chain_update_chains(r->pool, &ctx->free, &ctx->busy, &out,
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-226-                            (ngx_buf_tag_t) &ngx_http_chunked_filter_module);
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-227-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-228-    return rc;
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-229-}
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-230-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-231-
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-232-static ngx_int_t
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-233-ngx_http_chunked_filter_init(ngx_conf_t *cf)
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-234-{
./nginx/src/http/modules/ngx_http_chunked_filter_module.c-235-    ngx_http_next_header_filter = ngx_http_top_header_filter;
--
./nginx/src/http/modules/ngx_http_stub_status_module.c-86-        if (rc == NGX_ERROR || rc > NGX_OK || r->header_only) {
./nginx/src/http/modules/ngx_http_stub_status_module.c-87-            return rc;
./nginx/src/http/modules/ngx_http_stub_status_module.c-88-        }
./nginx/src/http/modules/ngx_http_stub_status_module.c-89-    }
./nginx/src/http/modules/ngx_http_stub_status_module.c-90-
./nginx/src/http/modules/ngx_http_stub_status_module.c-91-    size = sizeof("Active connections:  \n") + NGX_ATOMIC_T_LEN
./nginx/src/http/modules/ngx_http_stub_status_module.c-92-           + sizeof("server accepts handled requests\n") - 1
./nginx/src/http/modules/ngx_http_stub_status_module.c-93-           + 6 + 3 * NGX_ATOMIC_T_LEN
./nginx/src/http/modules/ngx_http_stub_status_module.c-94-           + sizeof("Reading:  Writing:  Waiting:  \n") + 3 * NGX_ATOMIC_T_LEN;
./nginx/src/http/modules/ngx_http_stub_status_module.c-95-
./nginx/src/http/modules/ngx_http_stub_status_module.c:96:    b = ngx_create_temp_buf(r->pool, size);
./nginx/src/http/modules/ngx_http_stub_status_module.c-97-    if (b == NULL) {
./nginx/src/http/modules/ngx_http_stub_status_module.c-98-        return NGX_HTTP_INTERNAL_SERVER_ERROR;
./nginx/src/http/modules/ngx_http_stub_status_module.c-99-    }
./nginx/src/http/modules/ngx_http_stub_status_module.c-100-
./nginx/src/http/modules/ngx_http_stub_status_module.c-101-    out.buf = b;
./nginx/src/http/modules/ngx_http_stub_status_module.c-102-    out.next = NULL;
./nginx/src/http/modules/ngx_http_stub_status_module.c-103-
./nginx/src/http/modules/ngx_http_stub_status_module.c-104-    ap = *ngx_stat_accepted;
./nginx/src/http/modules/ngx_http_stub_status_module.c-105-    hn = *ngx_stat_handled;
./nginx/src/http/modules/ngx_http_stub_status_module.c-106-    ac = *ngx_stat_active;
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-185-    ngx_str_t                   uri, args, *handler;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-186-    ngx_http_perl_ctx_t        *ctx;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-187-    ngx_http_perl_loc_conf_t   *plcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-188-    ngx_http_perl_main_conf_t  *pmcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-189-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-190-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0, "perl handler");
./nginx/src/http/modules/perl/ngx_http_perl_module.c-191-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-192-    ctx = ngx_http_get_module_ctx(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-193-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-194-    if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c:195:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_perl_ctx_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-196-        if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-197-            ngx_http_finalize_request(r, NGX_ERROR);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-198-            return;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-199-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-200-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-201-        ngx_http_set_ctx(r, ctx, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-202-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-203-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-204-    pmcf = ngx_http_get_module_main_conf(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-205-
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-299-    ngx_str_t                   value;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-300-    ngx_http_perl_ctx_t        *ctx;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-301-    ngx_http_perl_main_conf_t  *pmcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-302-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-303-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/perl/ngx_http_perl_module.c-304-                   "perl variable handler");
./nginx/src/http/modules/perl/ngx_http_perl_module.c-305-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-306-    ctx = ngx_http_get_module_ctx(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-307-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-308-    if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c:309:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_perl_ctx_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-310-        if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-311-            return NGX_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-312-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-313-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-314-        ngx_http_set_ctx(r, ctx, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-315-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-316-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-317-    pmcf = ngx_http_get_module_main_conf(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-318-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-319-    value.data = NULL;
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-361-    ngx_uint_t                  i;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-362-    ngx_http_perl_ctx_t        *ctx;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-363-    ngx_http_perl_main_conf_t  *pmcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-364-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-365-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/modules/perl/ngx_http_perl_module.c-366-                   "perl ssi handler");
./nginx/src/http/modules/perl/ngx_http_perl_module.c-367-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-368-    ctx = ngx_http_get_module_ctx(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-369-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-370-    if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c:371:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_http_perl_ctx_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-372-        if (ctx == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-373-            return NGX_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-374-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-375-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-376-        ngx_http_set_ctx(r, ctx, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-377-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-378-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-379-    pmcf = ngx_http_get_module_main_conf(r, ngx_http_perl_module);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-380-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-381-    ctx->ssi = ssi_ctx;
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-407-#endif
./nginx/src/http/modules/perl/ngx_http_perl_module.c-408-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-409-    sv = newSVpvn((char *) handler->data, handler->len);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-410-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-411-    args = &params[NGX_HTTP_PERL_SSI_ARG];
./nginx/src/http/modules/perl/ngx_http_perl_module.c-412-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-413-    if (args) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-414-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-415-        for (i = 0; args[i]; i++) { /* void */ }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-416-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:417:        asv = ngx_pcalloc(r->pool, (i + 1) * sizeof(SV *));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-418-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-419-        if (asv == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-420-            SvREFCNT_dec(sv);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-421-            return NGX_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-422-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-423-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-424-        asv[0] = (SV *) i;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-425-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-426-        for (i = 0; args[i]; i++) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-427-            asv[i + 1] = newSVpvn((char *) args[i]->data, args[i]->len);
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-451-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-452-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-453-static char *
./nginx/src/http/modules/perl/ngx_http_perl_module.c-454-ngx_http_perl_init_interpreter(ngx_conf_t *cf, ngx_http_perl_main_conf_t *pmcf)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-455-{
./nginx/src/http/modules/perl/ngx_http_perl_module.c-456-    ngx_str_t           *m;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-457-    ngx_uint_t           i;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-458-#if (NGX_HAVE_PERL_MULTIPLICITY)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-459-    ngx_pool_cleanup_t  *cln;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-460-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:461:    cln = ngx_pool_cleanup_add(cf->pool, 0);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-462-    if (cln == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-463-        return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-464-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-465-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-466-#endif
./nginx/src/http/modules/perl/ngx_http_perl_module.c-467-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-468-#ifdef NGX_PERL_MODULES
./nginx/src/http/modules/perl/ngx_http_perl_module.c-469-    if (pmcf->modules == NGX_CONF_UNSET_PTR) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-470-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:471:        pmcf->modules = ngx_array_create(cf->pool, 1, sizeof(ngx_str_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-472-        if (pmcf->modules == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-473-            return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-474-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-475-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-476-        m = ngx_array_push(pmcf->modules);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-477-        if (m == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-478-            return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-479-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-480-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-481-        ngx_str_set(m, NGX_PERL_MODULES);
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-570-    PERL_SET_CONTEXT(perl);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-571-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-572-    perl_construct(perl);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-573-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-574-#ifdef PERL_EXIT_DESTRUCT_END
./nginx/src/http/modules/perl/ngx_http_perl_module.c-575-    PL_exit_flags |= PERL_EXIT_DESTRUCT_END;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-576-#endif
./nginx/src/http/modules/perl/ngx_http_perl_module.c-577-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-578-    n = (pmcf->modules != NGX_CONF_UNSET_PTR) ? pmcf->modules->nelts * 2 : 0;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-579-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:580:    embedding = ngx_palloc(cf->pool, (4 + n) * sizeof(char *));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-581-    if (embedding == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-582-        goto fail;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-583-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-584-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-585-    embedding[0] = "";
./nginx/src/http/modules/perl/ngx_http_perl_module.c-586-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-587-    if (n++) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-588-        m = pmcf->modules->elts;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-589-        for (i = 0; i < pmcf->modules->nelts; i++) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-590-            embedding[2 * i + 1] = "-I";
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-709-        if (rv == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-710-            status = POPi;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-711-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-712-            ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
./nginx/src/http/modules/perl/ngx_http_perl_module.c-713-                           "call_sv: %d", status);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-714-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-715-        } else {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-716-            line = SvPVx(POPs, n_a);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-717-            rv->len = n_a;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-718-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:719:            rv->data = ngx_pnalloc(r->pool, n_a);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-720-            if (rv->data == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-721-                return NGX_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-722-            }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-723-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-724-            ngx_memcpy(rv->data, line, n_a);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-725-        }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-726-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-727-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-728-    PUTBACK;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-729-
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-785-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-786-    *sv = NULL;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-787-}
./nginx/src/http/modules/perl/ngx_http_perl_module.c-788-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-789-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-790-static void *
./nginx/src/http/modules/perl/ngx_http_perl_module.c-791-ngx_http_perl_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-792-{
./nginx/src/http/modules/perl/ngx_http_perl_module.c-793-    ngx_http_perl_main_conf_t  *pmcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-794-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:795:    pmcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_perl_main_conf_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-796-    if (pmcf == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-797-        return NULL;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-798-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-799-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-800-    pmcf->modules = NGX_CONF_UNSET_PTR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-801-    pmcf->requires = NGX_CONF_UNSET_PTR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-802-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-803-    return pmcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-804-}
./nginx/src/http/modules/perl/ngx_http_perl_module.c-805-
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-867-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-868-    return NGX_OK;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-869-}
./nginx/src/http/modules/perl/ngx_http_perl_module.c-870-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-871-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-872-static void *
./nginx/src/http/modules/perl/ngx_http_perl_module.c-873-ngx_http_perl_create_loc_conf(ngx_conf_t *cf)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-874-{
./nginx/src/http/modules/perl/ngx_http_perl_module.c-875-    ngx_http_perl_loc_conf_t *plcf;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-876-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:877:    plcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_perl_loc_conf_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-878-    if (plcf == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-879-        return NULL;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-880-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-881-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-882-    /*
./nginx/src/http/modules/perl/ngx_http_perl_module.c-883-     * set by ngx_pcalloc():
./nginx/src/http/modules/perl/ngx_http_perl_module.c-884-     *
./nginx/src/http/modules/perl/ngx_http_perl_module.c-885-     *     plcf->handler = { 0, NULL };
./nginx/src/http/modules/perl/ngx_http_perl_module.c-886-     */
./nginx/src/http/modules/perl/ngx_http_perl_module.c-887-
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-975-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-976-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-977-    value[1].len--;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-978-    value[1].data++;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-979-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-980-    v = ngx_http_add_variable(cf, &value[1], NGX_HTTP_VAR_CHANGEABLE);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-981-    if (v == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-982-        return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-983-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-984-
./nginx/src/http/modules/perl/ngx_http_perl_module.c:985:    pv = ngx_palloc(cf->pool, sizeof(ngx_http_perl_variable_t));
./nginx/src/http/modules/perl/ngx_http_perl_module.c-986-    if (pv == NULL) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-987-        return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-988-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-989-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-990-    index = ngx_http_get_variable_index(cf, &value[1]);
./nginx/src/http/modules/perl/ngx_http_perl_module.c-991-    if (index == NGX_ERROR) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-992-        return NGX_CONF_ERROR;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-993-    }
./nginx/src/http/modules/perl/ngx_http_perl_module.c-994-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-995-    pmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_perl_module);
--
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1047-    return NGX_OK;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1048-}
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1049-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1050-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1051-static void
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1052-ngx_http_perl_exit(ngx_cycle_t *cycle)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1053-{
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1054-#if (NGX_HAVE_PERL_MULTIPLICITY)
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1055-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1056-    /*
./nginx/src/http/modules/perl/ngx_http_perl_module.c:1057:     * the master exit hook is run before global pool cleanup,
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1058-     * therefore just set flag here
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1059-     */
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1060-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1061-    ngx_perl_term = 1;
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1062-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1063-#else
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1064-
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1065-    if (nginx_stash) {
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1066-        ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cycle->log, 0, "perl term");
./nginx/src/http/modules/perl/ngx_http_perl_module.c-1067-
--
./nginx/src/http/ngx_http_variables.c-390-
./nginx/src/http/ngx_http_variables.c-391-        if (!(v->flags & NGX_HTTP_VAR_CHANGEABLE)) {
./nginx/src/http/ngx_http_variables.c-392-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_variables.c-393-                               "the duplicate \"%V\" variable", name);
./nginx/src/http/ngx_http_variables.c-394-            return NULL;
./nginx/src/http/ngx_http_variables.c-395-        }
./nginx/src/http/ngx_http_variables.c-396-
./nginx/src/http/ngx_http_variables.c-397-        return v;
./nginx/src/http/ngx_http_variables.c-398-    }
./nginx/src/http/ngx_http_variables.c-399-
./nginx/src/http/ngx_http_variables.c:400:    v = ngx_palloc(cf->pool, sizeof(ngx_http_variable_t));
./nginx/src/http/ngx_http_variables.c-401-    if (v == NULL) {
./nginx/src/http/ngx_http_variables.c-402-        return NULL;
./nginx/src/http/ngx_http_variables.c-403-    }
./nginx/src/http/ngx_http_variables.c-404-
./nginx/src/http/ngx_http_variables.c-405-    v->name.len = name->len;
./nginx/src/http/ngx_http_variables.c:406:    v->name.data = ngx_pnalloc(cf->pool, name->len);
./nginx/src/http/ngx_http_variables.c-407-    if (v->name.data == NULL) {
./nginx/src/http/ngx_http_variables.c-408-        return NULL;
./nginx/src/http/ngx_http_variables.c-409-    }
./nginx/src/http/ngx_http_variables.c-410-
./nginx/src/http/ngx_http_variables.c-411-    ngx_strlow(v->name.data, name->data, name->len);
./nginx/src/http/ngx_http_variables.c-412-
./nginx/src/http/ngx_http_variables.c-413-    v->set_handler = NULL;
./nginx/src/http/ngx_http_variables.c-414-    v->get_handler = NULL;
./nginx/src/http/ngx_http_variables.c-415-    v->data = 0;
./nginx/src/http/ngx_http_variables.c-416-    v->flags = flags;
--
./nginx/src/http/ngx_http_variables.c-443-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_variables.c-444-                           "invalid variable name \"$\"");
./nginx/src/http/ngx_http_variables.c-445-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-446-    }
./nginx/src/http/ngx_http_variables.c-447-
./nginx/src/http/ngx_http_variables.c-448-    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-449-
./nginx/src/http/ngx_http_variables.c-450-    v = cmcf->variables.elts;
./nginx/src/http/ngx_http_variables.c-451-
./nginx/src/http/ngx_http_variables.c-452-    if (v == NULL) {
./nginx/src/http/ngx_http_variables.c:453:        if (ngx_array_init(&cmcf->variables, cf->pool, 4,
./nginx/src/http/ngx_http_variables.c-454-                           sizeof(ngx_http_variable_t))
./nginx/src/http/ngx_http_variables.c-455-            != NGX_OK)
./nginx/src/http/ngx_http_variables.c-456-        {
./nginx/src/http/ngx_http_variables.c-457-            return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-458-        }
./nginx/src/http/ngx_http_variables.c-459-
./nginx/src/http/ngx_http_variables.c-460-    } else {
./nginx/src/http/ngx_http_variables.c-461-        for (i = 0; i < cmcf->variables.nelts; i++) {
./nginx/src/http/ngx_http_variables.c-462-            if (name->len != v[i].name.len
./nginx/src/http/ngx_http_variables.c-463-                || ngx_strncasecmp(name->data, v[i].name.data, name->len) != 0)
--
./nginx/src/http/ngx_http_variables.c-468-            return i;
./nginx/src/http/ngx_http_variables.c-469-        }
./nginx/src/http/ngx_http_variables.c-470-    }
./nginx/src/http/ngx_http_variables.c-471-
./nginx/src/http/ngx_http_variables.c-472-    v = ngx_array_push(&cmcf->variables);
./nginx/src/http/ngx_http_variables.c-473-    if (v == NULL) {
./nginx/src/http/ngx_http_variables.c-474-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-475-    }
./nginx/src/http/ngx_http_variables.c-476-
./nginx/src/http/ngx_http_variables.c-477-    v->name.len = name->len;
./nginx/src/http/ngx_http_variables.c:478:    v->name.data = ngx_pnalloc(cf->pool, name->len);
./nginx/src/http/ngx_http_variables.c-479-    if (v->name.data == NULL) {
./nginx/src/http/ngx_http_variables.c-480-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-481-    }
./nginx/src/http/ngx_http_variables.c-482-
./nginx/src/http/ngx_http_variables.c-483-    ngx_strlow(v->name.data, name->data, name->len);
./nginx/src/http/ngx_http_variables.c-484-
./nginx/src/http/ngx_http_variables.c-485-    v->set_handler = NULL;
./nginx/src/http/ngx_http_variables.c-486-    v->get_handler = NULL;
./nginx/src/http/ngx_http_variables.c-487-    v->data = 0;
./nginx/src/http/ngx_http_variables.c-488-    v->flags = 0;
--
./nginx/src/http/ngx_http_variables.c-559-    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-560-
./nginx/src/http/ngx_http_variables.c-561-    v = ngx_hash_find(&cmcf->variables_hash, key, name->data, name->len);
./nginx/src/http/ngx_http_variables.c-562-
./nginx/src/http/ngx_http_variables.c-563-    if (v) {
./nginx/src/http/ngx_http_variables.c-564-        if (v->flags & NGX_HTTP_VAR_INDEXED) {
./nginx/src/http/ngx_http_variables.c-565-            return ngx_http_get_flushed_variable(r, v->index);
./nginx/src/http/ngx_http_variables.c-566-
./nginx/src/http/ngx_http_variables.c-567-        } else {
./nginx/src/http/ngx_http_variables.c-568-
./nginx/src/http/ngx_http_variables.c:569:            vv = ngx_palloc(r->pool, sizeof(ngx_http_variable_value_t));
./nginx/src/http/ngx_http_variables.c-570-
./nginx/src/http/ngx_http_variables.c-571-            if (vv && v->get_handler(r, vv, v->data) == NGX_OK) {
./nginx/src/http/ngx_http_variables.c-572-                return vv;
./nginx/src/http/ngx_http_variables.c-573-            }
./nginx/src/http/ngx_http_variables.c-574-
./nginx/src/http/ngx_http_variables.c-575-            return NULL;
./nginx/src/http/ngx_http_variables.c-576-        }
./nginx/src/http/ngx_http_variables.c-577-    }
./nginx/src/http/ngx_http_variables.c-578-
./nginx/src/http/ngx_http_variables.c:579:    vv = ngx_palloc(r->pool, sizeof(ngx_http_variable_value_t));
./nginx/src/http/ngx_http_variables.c-580-    if (vv == NULL) {
./nginx/src/http/ngx_http_variables.c-581-        return NULL;
./nginx/src/http/ngx_http_variables.c-582-    }
./nginx/src/http/ngx_http_variables.c-583-
./nginx/src/http/ngx_http_variables.c-584-    if (ngx_strncmp(name->data, "http_", 5) == 0) {
./nginx/src/http/ngx_http_variables.c-585-
./nginx/src/http/ngx_http_variables.c-586-        if (ngx_http_variable_unknown_header_in(r, vv, (uintptr_t) name)
./nginx/src/http/ngx_http_variables.c-587-            == NGX_OK)
./nginx/src/http/ngx_http_variables.c-588-        {
./nginx/src/http/ngx_http_variables.c-589-            return vv;
--
./nginx/src/http/ngx_http_variables.c-669-
./nginx/src/http/ngx_http_variables.c-670-/*s = (ngx_str_t *) ((char *) r + data);*/
./nginx/src/http/ngx_http_variables.c-671-
./nginx/src/http/ngx_http_variables.c-672-/*if (!v->len) {*/
./nginx/src/http/ngx_http_variables.c-673-/*bad:*/
./nginx/src/http/ngx_http_variables.c-674-/*s->len = v->len;*/
./nginx/src/http/ngx_http_variables.c-675-/*s->data = v->data;*/
./nginx/src/http/ngx_http_variables.c-676-/*return;*/
./nginx/src/http/ngx_http_variables.c-677-/*}*/
./nginx/src/http/ngx_http_variables.c-678-
./nginx/src/http/ngx_http_variables.c:679:/*p = ngx_palloc(r->pool, v->len);*/
./nginx/src/http/ngx_http_variables.c-680-/*if (p == NULL) {*/
./nginx/src/http/ngx_http_variables.c-681-/*goto bad;*/
./nginx/src/http/ngx_http_variables.c-682-/*}*/
./nginx/src/http/ngx_http_variables.c-683-
./nginx/src/http/ngx_http_variables.c-684-/*dst = p;*/
./nginx/src/http/ngx_http_variables.c-685-
./nginx/src/http/ngx_http_variables.c-686-/*ngx_unescape_uri(&p, &v->data, len, 0);*/
./nginx/src/http/ngx_http_variables.c-687-/*s->len = p - dst;*/
./nginx/src/http/ngx_http_variables.c-688-/*s->data = p;*/
./nginx/src/http/ngx_http_variables.c-689-/*}*/
--
./nginx/src/http/ngx_http_variables.c-702-
./nginx/src/http/ngx_http_variables.c-703-
./nginx/src/http/ngx_http_variables.c-704-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-705-ngx_http_variable_request_get_size(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-706-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-707-{
./nginx/src/http/ngx_http_variables.c-708-    size_t  *sp;
./nginx/src/http/ngx_http_variables.c-709-
./nginx/src/http/ngx_http_variables.c-710-    sp = (size_t *) ((char *) r + data);
./nginx/src/http/ngx_http_variables.c-711-
./nginx/src/http/ngx_http_variables.c:712:    v->data = ngx_pnalloc(r->pool, NGX_SIZE_T_LEN);
./nginx/src/http/ngx_http_variables.c-713-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-714-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-715-    }
./nginx/src/http/ngx_http_variables.c-716-
./nginx/src/http/ngx_http_variables.c-717-    v->len = ngx_sprintf(v->data, "%uz", *sp) - v->data;
./nginx/src/http/ngx_http_variables.c-718-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-719-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-720-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-721-
./nginx/src/http/ngx_http_variables.c-722-    return NGX_OK;
--
./nginx/src/http/ngx_http_variables.c-809-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-810-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-811-
./nginx/src/http/ngx_http_variables.c-812-    if (n == 1) {
./nginx/src/http/ngx_http_variables.c-813-        v->len = (*h)->value.len;
./nginx/src/http/ngx_http_variables.c-814-        v->data = (*h)->value.data;
./nginx/src/http/ngx_http_variables.c-815-
./nginx/src/http/ngx_http_variables.c-816-        return NGX_OK;
./nginx/src/http/ngx_http_variables.c-817-    }
./nginx/src/http/ngx_http_variables.c-818-
./nginx/src/http/ngx_http_variables.c:819:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_variables.c-820-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-821-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-822-    }
./nginx/src/http/ngx_http_variables.c-823-
./nginx/src/http/ngx_http_variables.c-824-    v->len = len;
./nginx/src/http/ngx_http_variables.c-825-    v->data = p;
./nginx/src/http/ngx_http_variables.c-826-
./nginx/src/http/ngx_http_variables.c-827-    end = p + len;
./nginx/src/http/ngx_http_variables.c-828-
./nginx/src/http/ngx_http_variables.c-829-    for (i = 0; /* void */ ; i++) {
--
./nginx/src/http/ngx_http_variables.c-1024-    struct tcp_info  ti;
./nginx/src/http/ngx_http_variables.c-1025-    socklen_t        len;
./nginx/src/http/ngx_http_variables.c-1026-    uint32_t         value;
./nginx/src/http/ngx_http_variables.c-1027-
./nginx/src/http/ngx_http_variables.c-1028-    len = sizeof(struct tcp_info);
./nginx/src/http/ngx_http_variables.c-1029-    if (getsockopt(r->connection->fd, IPPROTO_TCP, TCP_INFO, &ti, &len) == -1) {
./nginx/src/http/ngx_http_variables.c-1030-        v->not_found = 1;
./nginx/src/http/ngx_http_variables.c-1031-        return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1032-    }
./nginx/src/http/ngx_http_variables.c-1033-
./nginx/src/http/ngx_http_variables.c:1034:    v->data = ngx_pnalloc(r->pool, NGX_INT32_LEN);
./nginx/src/http/ngx_http_variables.c-1035-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-1036-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1037-    }
./nginx/src/http/ngx_http_variables.c-1038-
./nginx/src/http/ngx_http_variables.c-1039-    switch (data) {
./nginx/src/http/ngx_http_variables.c-1040-    case 0:
./nginx/src/http/ngx_http_variables.c-1041-        value = ti.tcpi_rtt;
./nginx/src/http/ngx_http_variables.c-1042-        break;
./nginx/src/http/ngx_http_variables.c-1043-
./nginx/src/http/ngx_http_variables.c-1044-    case 1:
--
./nginx/src/http/ngx_http_variables.c-1157-    struct sockaddr_in   *sin;
./nginx/src/http/ngx_http_variables.c-1158-#if (NGX_HAVE_INET6)
./nginx/src/http/ngx_http_variables.c-1159-    struct sockaddr_in6  *sin6;
./nginx/src/http/ngx_http_variables.c-1160-#endif
./nginx/src/http/ngx_http_variables.c-1161-
./nginx/src/http/ngx_http_variables.c-1162-    v->len = 0;
./nginx/src/http/ngx_http_variables.c-1163-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1164-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1165-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1166-
./nginx/src/http/ngx_http_variables.c:1167:    v->data = ngx_pnalloc(r->pool, sizeof("65535") - 1);
./nginx/src/http/ngx_http_variables.c-1168-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-1169-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1170-    }
./nginx/src/http/ngx_http_variables.c-1171-
./nginx/src/http/ngx_http_variables.c-1172-    switch (r->connection->sockaddr->sa_family) {
./nginx/src/http/ngx_http_variables.c-1173-
./nginx/src/http/ngx_http_variables.c-1174-#if (NGX_HAVE_INET6)
./nginx/src/http/ngx_http_variables.c-1175-    case AF_INET6:
./nginx/src/http/ngx_http_variables.c-1176-        sin6 = (struct sockaddr_in6 *) r->connection->sockaddr;
./nginx/src/http/ngx_http_variables.c-1177-        port = ntohs(sin6->sin6_port);
--
./nginx/src/http/ngx_http_variables.c-1199-    ngx_str_t  s;
./nginx/src/http/ngx_http_variables.c-1200-    u_char     addr[NGX_SOCKADDR_STRLEN];
./nginx/src/http/ngx_http_variables.c-1201-
./nginx/src/http/ngx_http_variables.c-1202-    s.len = NGX_SOCKADDR_STRLEN;
./nginx/src/http/ngx_http_variables.c-1203-    s.data = addr;
./nginx/src/http/ngx_http_variables.c-1204-
./nginx/src/http/ngx_http_variables.c-1205-    if (ngx_connection_local_sockaddr(r->connection, &s, 0) != NGX_OK) {
./nginx/src/http/ngx_http_variables.c-1206-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1207-    }
./nginx/src/http/ngx_http_variables.c-1208-
./nginx/src/http/ngx_http_variables.c:1209:    s.data = ngx_pnalloc(r->pool, s.len);
./nginx/src/http/ngx_http_variables.c-1210-    if (s.data == NULL) {
./nginx/src/http/ngx_http_variables.c-1211-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1212-    }
./nginx/src/http/ngx_http_variables.c-1213-
./nginx/src/http/ngx_http_variables.c-1214-    ngx_memcpy(s.data, addr, s.len);
./nginx/src/http/ngx_http_variables.c-1215-
./nginx/src/http/ngx_http_variables.c-1216-    v->len = s.len;
./nginx/src/http/ngx_http_variables.c-1217-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1218-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1219-    v->not_found = 0;
--
./nginx/src/http/ngx_http_variables.c-1235-
./nginx/src/http/ngx_http_variables.c-1236-    v->len = 0;
./nginx/src/http/ngx_http_variables.c-1237-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1238-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1239-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1240-
./nginx/src/http/ngx_http_variables.c-1241-    if (ngx_connection_local_sockaddr(r->connection, NULL, 0) != NGX_OK) {
./nginx/src/http/ngx_http_variables.c-1242-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1243-    }
./nginx/src/http/ngx_http_variables.c-1244-
./nginx/src/http/ngx_http_variables.c:1245:    v->data = ngx_pnalloc(r->pool, sizeof("65535") - 1);
./nginx/src/http/ngx_http_variables.c-1246-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-1247-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1248-    }
./nginx/src/http/ngx_http_variables.c-1249-
./nginx/src/http/ngx_http_variables.c-1250-    switch (r->connection->local_sockaddr->sa_family) {
./nginx/src/http/ngx_http_variables.c-1251-
./nginx/src/http/ngx_http_variables.c-1252-#if (NGX_HAVE_INET6)
./nginx/src/http/ngx_http_variables.c-1253-    case AF_INET6:
./nginx/src/http/ngx_http_variables.c-1254-        sin6 = (struct sockaddr_in6 *) r->connection->local_sockaddr;
./nginx/src/http/ngx_http_variables.c-1255-        port = ntohs(sin6->sin6_port);
--
./nginx/src/http/ngx_http_variables.c-1423-    real = ngx_realpath(path.data, real);
./nginx/src/http/ngx_http_variables.c-1424-
./nginx/src/http/ngx_http_variables.c-1425-    if (real == NULL) {
./nginx/src/http/ngx_http_variables.c-1426-        ngx_log_error(NGX_LOG_CRIT, r->connection->log, ngx_errno,
./nginx/src/http/ngx_http_variables.c-1427-                      ngx_realpath_n " \"%s\" failed", path.data);
./nginx/src/http/ngx_http_variables.c-1428-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1429-    }
./nginx/src/http/ngx_http_variables.c-1430-
./nginx/src/http/ngx_http_variables.c-1431-    len = ngx_strlen(real);
./nginx/src/http/ngx_http_variables.c-1432-
./nginx/src/http/ngx_http_variables.c:1433:    v->data = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_variables.c-1434-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-1435-#if !(NGX_HAVE_MAX_PATH)
./nginx/src/http/ngx_http_variables.c-1436-        ngx_free(real);
./nginx/src/http/ngx_http_variables.c-1437-#endif
./nginx/src/http/ngx_http_variables.c-1438-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1439-    }
./nginx/src/http/ngx_http_variables.c-1440-
./nginx/src/http/ngx_http_variables.c-1441-    v->len = len;
./nginx/src/http/ngx_http_variables.c-1442-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1443-    v->no_cacheable = 0;
--
./nginx/src/http/ngx_http_variables.c-1539-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1540-}
./nginx/src/http/ngx_http_variables.c-1541-
./nginx/src/http/ngx_http_variables.c-1542-
./nginx/src/http/ngx_http_variables.c-1543-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-1544-ngx_http_variable_bytes_sent(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-1545-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1546-{
./nginx/src/http/ngx_http_variables.c-1547-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-1548-
./nginx/src/http/ngx_http_variables.c:1549:    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
./nginx/src/http/ngx_http_variables.c-1550-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1551-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1552-    }
./nginx/src/http/ngx_http_variables.c-1553-
./nginx/src/http/ngx_http_variables.c-1554-    v->len = ngx_sprintf(p, "%O", r->connection->sent) - p;
./nginx/src/http/ngx_http_variables.c-1555-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1556-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1557-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1558-    v->data = p;
./nginx/src/http/ngx_http_variables.c-1559-
--
./nginx/src/http/ngx_http_variables.c-1567-{
./nginx/src/http/ngx_http_variables.c-1568-    off_t    sent;
./nginx/src/http/ngx_http_variables.c-1569-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-1570-
./nginx/src/http/ngx_http_variables.c-1571-    sent = r->connection->sent - r->header_size;
./nginx/src/http/ngx_http_variables.c-1572-
./nginx/src/http/ngx_http_variables.c-1573-    if (sent < 0) {
./nginx/src/http/ngx_http_variables.c-1574-        sent = 0;
./nginx/src/http/ngx_http_variables.c-1575-    }
./nginx/src/http/ngx_http_variables.c-1576-
./nginx/src/http/ngx_http_variables.c:1577:    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
./nginx/src/http/ngx_http_variables.c-1578-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1579-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1580-    }
./nginx/src/http/ngx_http_variables.c-1581-
./nginx/src/http/ngx_http_variables.c-1582-    v->len = ngx_sprintf(p, "%O", sent) - p;
./nginx/src/http/ngx_http_variables.c-1583-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1584-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1585-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1586-    v->data = p;
./nginx/src/http/ngx_http_variables.c-1587-
--
./nginx/src/http/ngx_http_variables.c-1602-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1603-}
./nginx/src/http/ngx_http_variables.c-1604-
./nginx/src/http/ngx_http_variables.c-1605-
./nginx/src/http/ngx_http_variables.c-1606-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-1607-ngx_http_variable_status(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-1608-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1609-{
./nginx/src/http/ngx_http_variables.c-1610-    ngx_uint_t  status;
./nginx/src/http/ngx_http_variables.c-1611-
./nginx/src/http/ngx_http_variables.c:1612:    v->data = ngx_pnalloc(r->pool, NGX_INT_T_LEN);
./nginx/src/http/ngx_http_variables.c-1613-    if (v->data == NULL) {
./nginx/src/http/ngx_http_variables.c-1614-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1615-    }
./nginx/src/http/ngx_http_variables.c-1616-
./nginx/src/http/ngx_http_variables.c-1617-    if (r->err_status) {
./nginx/src/http/ngx_http_variables.c-1618-        status = r->err_status;
./nginx/src/http/ngx_http_variables.c-1619-
./nginx/src/http/ngx_http_variables.c-1620-    } else if (r->headers_out.status) {
./nginx/src/http/ngx_http_variables.c-1621-        status = r->headers_out.status;
./nginx/src/http/ngx_http_variables.c-1622-
--
./nginx/src/http/ngx_http_variables.c-1665-        v->len = r->headers_out.content_length->value.len;
./nginx/src/http/ngx_http_variables.c-1666-        v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1667-        v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1668-        v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1669-        v->data = r->headers_out.content_length->value.data;
./nginx/src/http/ngx_http_variables.c-1670-
./nginx/src/http/ngx_http_variables.c-1671-        return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1672-    }
./nginx/src/http/ngx_http_variables.c-1673-
./nginx/src/http/ngx_http_variables.c-1674-    if (r->headers_out.content_length_n >= 0) {
./nginx/src/http/ngx_http_variables.c:1675:        p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
./nginx/src/http/ngx_http_variables.c-1676-        if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1677-            return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1678-        }
./nginx/src/http/ngx_http_variables.c-1679-
./nginx/src/http/ngx_http_variables.c-1680-        v->len = ngx_sprintf(p, "%O", r->headers_out.content_length_n) - p;
./nginx/src/http/ngx_http_variables.c-1681-        v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1682-        v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1683-        v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1684-        v->data = p;
./nginx/src/http/ngx_http_variables.c-1685-
--
./nginx/src/http/ngx_http_variables.c-1726-        v->len = r->headers_out.last_modified->value.len;
./nginx/src/http/ngx_http_variables.c-1727-        v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1728-        v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1729-        v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1730-        v->data = r->headers_out.last_modified->value.data;
./nginx/src/http/ngx_http_variables.c-1731-
./nginx/src/http/ngx_http_variables.c-1732-        return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1733-    }
./nginx/src/http/ngx_http_variables.c-1734-
./nginx/src/http/ngx_http_variables.c-1735-    if (r->headers_out.last_modified_time >= 0) {
./nginx/src/http/ngx_http_variables.c:1736:        p = ngx_pnalloc(r->pool,
./nginx/src/http/ngx_http_variables.c-1737-                   sizeof("Last-Modified: Mon, 28 Sep 1970 06:00:00 GMT") - 1);
./nginx/src/http/ngx_http_variables.c-1738-        if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1739-            return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1740-        }
./nginx/src/http/ngx_http_variables.c-1741-
./nginx/src/http/ngx_http_variables.c-1742-        v->len = ngx_http_time(p, r->headers_out.last_modified_time) - p;
./nginx/src/http/ngx_http_variables.c-1743-        v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1744-        v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1745-        v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1746-        v->data = p;
--
./nginx/src/http/ngx_http_variables.c-1785-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1786-{
./nginx/src/http/ngx_http_variables.c-1787-    u_char                    *p;
./nginx/src/http/ngx_http_variables.c-1788-    ngx_http_core_loc_conf_t  *clcf;
./nginx/src/http/ngx_http_variables.c-1789-
./nginx/src/http/ngx_http_variables.c-1790-    if (r->keepalive) {
./nginx/src/http/ngx_http_variables.c-1791-        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-1792-
./nginx/src/http/ngx_http_variables.c-1793-        if (clcf->keepalive_header) {
./nginx/src/http/ngx_http_variables.c-1794-
./nginx/src/http/ngx_http_variables.c:1795:            p = ngx_pnalloc(r->pool, sizeof("timeout=") - 1 + NGX_TIME_T_LEN);
./nginx/src/http/ngx_http_variables.c-1796-            if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1797-                return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1798-            }
./nginx/src/http/ngx_http_variables.c-1799-
./nginx/src/http/ngx_http_variables.c-1800-            v->len = ngx_sprintf(p, "timeout=%T", clcf->keepalive_header) - p;
./nginx/src/http/ngx_http_variables.c-1801-            v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1802-            v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1803-            v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1804-            v->data = p;
./nginx/src/http/ngx_http_variables.c-1805-
--
./nginx/src/http/ngx_http_variables.c-1888-    }
./nginx/src/http/ngx_http_variables.c-1889-
./nginx/src/http/ngx_http_variables.c-1890-    len = buf->last - buf->pos;
./nginx/src/http/ngx_http_variables.c-1891-    cl = cl->next;
./nginx/src/http/ngx_http_variables.c-1892-
./nginx/src/http/ngx_http_variables.c-1893-    for ( /* void */ ; cl; cl = cl->next) {
./nginx/src/http/ngx_http_variables.c-1894-        buf = cl->buf;
./nginx/src/http/ngx_http_variables.c-1895-        len += buf->last - buf->pos;
./nginx/src/http/ngx_http_variables.c-1896-    }
./nginx/src/http/ngx_http_variables.c-1897-
./nginx/src/http/ngx_http_variables.c:1898:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_variables.c-1899-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1900-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1901-    }
./nginx/src/http/ngx_http_variables.c-1902-
./nginx/src/http/ngx_http_variables.c-1903-    v->data = p;
./nginx/src/http/ngx_http_variables.c-1904-    cl = r->request_body->bufs;
./nginx/src/http/ngx_http_variables.c-1905-
./nginx/src/http/ngx_http_variables.c-1906-    for ( /* void */ ; cl; cl = cl->next) {
./nginx/src/http/ngx_http_variables.c-1907-        buf = cl->buf;
./nginx/src/http/ngx_http_variables.c-1908-        p = ngx_cpymem(p, buf->pos, buf->last - buf->pos);
--
./nginx/src/http/ngx_http_variables.c-1936-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1937-}
./nginx/src/http/ngx_http_variables.c-1938-
./nginx/src/http/ngx_http_variables.c-1939-
./nginx/src/http/ngx_http_variables.c-1940-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-1941-ngx_http_variable_request_length(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-1942-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1943-{
./nginx/src/http/ngx_http_variables.c-1944-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-1945-
./nginx/src/http/ngx_http_variables.c:1946:    p = ngx_pnalloc(r->pool, NGX_OFF_T_LEN);
./nginx/src/http/ngx_http_variables.c-1947-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1948-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1949-    }
./nginx/src/http/ngx_http_variables.c-1950-
./nginx/src/http/ngx_http_variables.c-1951-    v->len = ngx_sprintf(p, "%O", r->request_length) - p;
./nginx/src/http/ngx_http_variables.c-1952-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-1953-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-1954-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-1955-    v->data = p;
./nginx/src/http/ngx_http_variables.c-1956-
--
./nginx/src/http/ngx_http_variables.c-1959-
./nginx/src/http/ngx_http_variables.c-1960-
./nginx/src/http/ngx_http_variables.c-1961-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-1962-ngx_http_variable_request_time(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-1963-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1964-{
./nginx/src/http/ngx_http_variables.c-1965-    u_char          *p;
./nginx/src/http/ngx_http_variables.c-1966-    ngx_time_t      *tp;
./nginx/src/http/ngx_http_variables.c-1967-    ngx_msec_int_t   ms;
./nginx/src/http/ngx_http_variables.c-1968-
./nginx/src/http/ngx_http_variables.c:1969:    p = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + 4);
./nginx/src/http/ngx_http_variables.c-1970-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1971-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1972-    }
./nginx/src/http/ngx_http_variables.c-1973-
./nginx/src/http/ngx_http_variables.c-1974-    tp = ngx_timeofday();
./nginx/src/http/ngx_http_variables.c-1975-
./nginx/src/http/ngx_http_variables.c-1976-    ms = (ngx_msec_int_t)
./nginx/src/http/ngx_http_variables.c-1977-             ((tp->sec - r->start_sec) * 1000 + (tp->msec - r->start_msec));
./nginx/src/http/ngx_http_variables.c-1978-    ms = ngx_max(ms, 0);
./nginx/src/http/ngx_http_variables.c-1979-
--
./nginx/src/http/ngx_http_variables.c-1986-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-1987-}
./nginx/src/http/ngx_http_variables.c-1988-
./nginx/src/http/ngx_http_variables.c-1989-
./nginx/src/http/ngx_http_variables.c-1990-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-1991-ngx_http_variable_connection(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-1992-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-1993-{
./nginx/src/http/ngx_http_variables.c-1994-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-1995-
./nginx/src/http/ngx_http_variables.c:1996:    p = ngx_pnalloc(r->pool, NGX_ATOMIC_T_LEN);
./nginx/src/http/ngx_http_variables.c-1997-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-1998-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-1999-    }
./nginx/src/http/ngx_http_variables.c-2000-
./nginx/src/http/ngx_http_variables.c-2001-    v->len = ngx_sprintf(p, "%uA", r->connection->number) - p;
./nginx/src/http/ngx_http_variables.c-2002-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2003-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-2004-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-2005-    v->data = p;
./nginx/src/http/ngx_http_variables.c-2006-
./nginx/src/http/ngx_http_variables.c-2007-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-2008-}
./nginx/src/http/ngx_http_variables.c-2009-
./nginx/src/http/ngx_http_variables.c-2010-
./nginx/src/http/ngx_http_variables.c-2011-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-2012-ngx_http_variable_connection_requests(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-2013-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-2014-{
./nginx/src/http/ngx_http_variables.c-2015-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-2016-
./nginx/src/http/ngx_http_variables.c:2017:    p = ngx_pnalloc(r->pool, NGX_INT_T_LEN);
./nginx/src/http/ngx_http_variables.c-2018-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-2019-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2020-    }
./nginx/src/http/ngx_http_variables.c-2021-
./nginx/src/http/ngx_http_variables.c-2022-    v->len = ngx_sprintf(p, "%ui", r->connection->requests) - p;
./nginx/src/http/ngx_http_variables.c-2023-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2024-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-2025-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-2026-    v->data = p;
./nginx/src/http/ngx_http_variables.c-2027-
--
./nginx/src/http/ngx_http_variables.c-2056-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-2057-}
./nginx/src/http/ngx_http_variables.c-2058-
./nginx/src/http/ngx_http_variables.c-2059-
./nginx/src/http/ngx_http_variables.c-2060-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-2061-ngx_http_variable_pid(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-2062-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-2063-{
./nginx/src/http/ngx_http_variables.c-2064-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-2065-
./nginx/src/http/ngx_http_variables.c:2066:    p = ngx_pnalloc(r->pool, NGX_INT64_LEN);
./nginx/src/http/ngx_http_variables.c-2067-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-2068-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2069-    }
./nginx/src/http/ngx_http_variables.c-2070-
./nginx/src/http/ngx_http_variables.c-2071-    v->len = ngx_sprintf(p, "%P", ngx_pid) - p;
./nginx/src/http/ngx_http_variables.c-2072-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2073-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-2074-    v->not_found = 0;
./nginx/src/http/ngx_http_variables.c-2075-    v->data = p;
./nginx/src/http/ngx_http_variables.c-2076-
--
./nginx/src/http/ngx_http_variables.c-2078-}
./nginx/src/http/ngx_http_variables.c-2079-
./nginx/src/http/ngx_http_variables.c-2080-
./nginx/src/http/ngx_http_variables.c-2081-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-2082-ngx_http_variable_msec(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-2083-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-2084-{
./nginx/src/http/ngx_http_variables.c-2085-    u_char      *p;
./nginx/src/http/ngx_http_variables.c-2086-    ngx_time_t  *tp;
./nginx/src/http/ngx_http_variables.c-2087-
./nginx/src/http/ngx_http_variables.c:2088:    p = ngx_pnalloc(r->pool, NGX_TIME_T_LEN + 4);
./nginx/src/http/ngx_http_variables.c-2089-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-2090-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2091-    }
./nginx/src/http/ngx_http_variables.c-2092-
./nginx/src/http/ngx_http_variables.c-2093-    tp = ngx_timeofday();
./nginx/src/http/ngx_http_variables.c-2094-
./nginx/src/http/ngx_http_variables.c-2095-    v->len = ngx_sprintf(p, "%T.%03M", tp->sec, tp->msec) - p;
./nginx/src/http/ngx_http_variables.c-2096-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2097-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-2098-    v->not_found = 0;
--
./nginx/src/http/ngx_http_variables.c-2101-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-2102-}
./nginx/src/http/ngx_http_variables.c-2103-
./nginx/src/http/ngx_http_variables.c-2104-
./nginx/src/http/ngx_http_variables.c-2105-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-2106-ngx_http_variable_time_iso8601(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-2107-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-2108-{
./nginx/src/http/ngx_http_variables.c-2109-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-2110-
./nginx/src/http/ngx_http_variables.c:2111:    p = ngx_pnalloc(r->pool, ngx_cached_http_log_iso8601.len);
./nginx/src/http/ngx_http_variables.c-2112-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-2113-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2114-    }
./nginx/src/http/ngx_http_variables.c-2115-
./nginx/src/http/ngx_http_variables.c-2116-    ngx_memcpy(p, ngx_cached_http_log_iso8601.data,
./nginx/src/http/ngx_http_variables.c-2117-               ngx_cached_http_log_iso8601.len);
./nginx/src/http/ngx_http_variables.c-2118-
./nginx/src/http/ngx_http_variables.c-2119-    v->len = ngx_cached_http_log_iso8601.len;
./nginx/src/http/ngx_http_variables.c-2120-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2121-    v->no_cacheable = 0;
--
./nginx/src/http/ngx_http_variables.c-2125-    return NGX_OK;
./nginx/src/http/ngx_http_variables.c-2126-}
./nginx/src/http/ngx_http_variables.c-2127-
./nginx/src/http/ngx_http_variables.c-2128-
./nginx/src/http/ngx_http_variables.c-2129-static ngx_int_t
./nginx/src/http/ngx_http_variables.c-2130-ngx_http_variable_time_local(ngx_http_request_t *r,
./nginx/src/http/ngx_http_variables.c-2131-    ngx_http_variable_value_t *v, uintptr_t data)
./nginx/src/http/ngx_http_variables.c-2132-{
./nginx/src/http/ngx_http_variables.c-2133-    u_char  *p;
./nginx/src/http/ngx_http_variables.c-2134-
./nginx/src/http/ngx_http_variables.c:2135:    p = ngx_pnalloc(r->pool, ngx_cached_http_log_time.len);
./nginx/src/http/ngx_http_variables.c-2136-    if (p == NULL) {
./nginx/src/http/ngx_http_variables.c-2137-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2138-    }
./nginx/src/http/ngx_http_variables.c-2139-
./nginx/src/http/ngx_http_variables.c-2140-    ngx_memcpy(p, ngx_cached_http_log_time.data, ngx_cached_http_log_time.len);
./nginx/src/http/ngx_http_variables.c-2141-
./nginx/src/http/ngx_http_variables.c-2142-    v->len = ngx_cached_http_log_time.len;
./nginx/src/http/ngx_http_variables.c-2143-    v->valid = 1;
./nginx/src/http/ngx_http_variables.c-2144-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_variables.c-2145-    v->not_found = 0;
--
./nginx/src/http/ngx_http_variables.c-2153-ngx_http_map_find(ngx_http_request_t *r, ngx_http_map_t *map, ngx_str_t *match)
./nginx/src/http/ngx_http_variables.c-2154-{
./nginx/src/http/ngx_http_variables.c-2155-    void        *value;
./nginx/src/http/ngx_http_variables.c-2156-    u_char      *low;
./nginx/src/http/ngx_http_variables.c-2157-    size_t       len;
./nginx/src/http/ngx_http_variables.c-2158-    ngx_uint_t   key;
./nginx/src/http/ngx_http_variables.c-2159-
./nginx/src/http/ngx_http_variables.c-2160-    len = match->len;
./nginx/src/http/ngx_http_variables.c-2161-
./nginx/src/http/ngx_http_variables.c-2162-    if (len) {
./nginx/src/http/ngx_http_variables.c:2163:        low = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_variables.c-2164-        if (low == NULL) {
./nginx/src/http/ngx_http_variables.c-2165-            return NULL;
./nginx/src/http/ngx_http_variables.c-2166-        }
./nginx/src/http/ngx_http_variables.c-2167-
./nginx/src/http/ngx_http_variables.c-2168-    } else {
./nginx/src/http/ngx_http_variables.c-2169-        low = NULL;
./nginx/src/http/ngx_http_variables.c-2170-    }
./nginx/src/http/ngx_http_variables.c-2171-
./nginx/src/http/ngx_http_variables.c-2172-    key = ngx_hash_strlow(low, match->data, len);
./nginx/src/http/ngx_http_variables.c-2173-
--
./nginx/src/http/ngx_http_variables.c-2225-{
./nginx/src/http/ngx_http_variables.c-2226-    u_char                     *p;
./nginx/src/http/ngx_http_variables.c-2227-    size_t                      size;
./nginx/src/http/ngx_http_variables.c-2228-    ngx_str_t                   name;
./nginx/src/http/ngx_http_variables.c-2229-    ngx_uint_t                  i, n;
./nginx/src/http/ngx_http_variables.c-2230-    ngx_http_variable_t        *v;
./nginx/src/http/ngx_http_variables.c-2231-    ngx_http_regex_t           *re;
./nginx/src/http/ngx_http_variables.c-2232-    ngx_http_regex_variable_t  *rv;
./nginx/src/http/ngx_http_variables.c-2233-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_variables.c-2234-
./nginx/src/http/ngx_http_variables.c:2235:    rc->pool = cf->pool;
./nginx/src/http/ngx_http_variables.c-2236-
./nginx/src/http/ngx_http_variables.c-2237-    if (ngx_regex_compile(rc) != NGX_OK) {
./nginx/src/http/ngx_http_variables.c-2238-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0, "%V", &rc->err);
./nginx/src/http/ngx_http_variables.c-2239-        return NULL;
./nginx/src/http/ngx_http_variables.c-2240-    }
./nginx/src/http/ngx_http_variables.c-2241-
./nginx/src/http/ngx_http_variables.c:2242:    re = ngx_pcalloc(cf->pool, sizeof(ngx_http_regex_t));
./nginx/src/http/ngx_http_variables.c-2243-    if (re == NULL) {
./nginx/src/http/ngx_http_variables.c-2244-        return NULL;
./nginx/src/http/ngx_http_variables.c-2245-    }
./nginx/src/http/ngx_http_variables.c-2246-
./nginx/src/http/ngx_http_variables.c-2247-    re->regex = rc->regex;
./nginx/src/http/ngx_http_variables.c-2248-    re->ncaptures = rc->captures;
./nginx/src/http/ngx_http_variables.c-2249-
./nginx/src/http/ngx_http_variables.c-2250-    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-2251-    cmcf->ncaptures = ngx_max(cmcf->ncaptures, re->ncaptures);
./nginx/src/http/ngx_http_variables.c-2252-
./nginx/src/http/ngx_http_variables.c-2253-    n = (ngx_uint_t) rc->named_captures;
./nginx/src/http/ngx_http_variables.c-2254-
./nginx/src/http/ngx_http_variables.c-2255-    if (n == 0) {
./nginx/src/http/ngx_http_variables.c-2256-        return re;
./nginx/src/http/ngx_http_variables.c-2257-    }
./nginx/src/http/ngx_http_variables.c-2258-
./nginx/src/http/ngx_http_variables.c:2259:    rv = ngx_palloc(rc->pool, n * sizeof(ngx_http_regex_variable_t));
./nginx/src/http/ngx_http_variables.c-2260-    if (rv == NULL) {
./nginx/src/http/ngx_http_variables.c-2261-        return NULL;
./nginx/src/http/ngx_http_variables.c-2262-    }
./nginx/src/http/ngx_http_variables.c-2263-
./nginx/src/http/ngx_http_variables.c-2264-    re->variables = rv;
./nginx/src/http/ngx_http_variables.c-2265-    re->nvariables = n;
./nginx/src/http/ngx_http_variables.c-2266-    re->name = rc->pattern;
./nginx/src/http/ngx_http_variables.c-2267-
./nginx/src/http/ngx_http_variables.c-2268-    size = rc->name_size;
./nginx/src/http/ngx_http_variables.c-2269-    p = rc->names;
--
./nginx/src/http/ngx_http_variables.c-2300-    ngx_uint_t                  i, n, len;
./nginx/src/http/ngx_http_variables.c-2301-    ngx_http_variable_value_t  *vv;
./nginx/src/http/ngx_http_variables.c-2302-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_variables.c-2303-
./nginx/src/http/ngx_http_variables.c-2304-    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-2305-
./nginx/src/http/ngx_http_variables.c-2306-    if (re->ncaptures) {
./nginx/src/http/ngx_http_variables.c-2307-        len = cmcf->ncaptures;
./nginx/src/http/ngx_http_variables.c-2308-
./nginx/src/http/ngx_http_variables.c-2309-        if (r->captures == NULL) {
./nginx/src/http/ngx_http_variables.c:2310:            r->captures = ngx_palloc(r->pool, len * sizeof(int));
./nginx/src/http/ngx_http_variables.c-2311-            if (r->captures == NULL) {
./nginx/src/http/ngx_http_variables.c-2312-                return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2313-            }
./nginx/src/http/ngx_http_variables.c-2314-        }
./nginx/src/http/ngx_http_variables.c-2315-
./nginx/src/http/ngx_http_variables.c-2316-    } else {
./nginx/src/http/ngx_http_variables.c-2317-        len = 0;
./nginx/src/http/ngx_http_variables.c-2318-    }
./nginx/src/http/ngx_http_variables.c-2319-
./nginx/src/http/ngx_http_variables.c-2320-    rc = ngx_regex_exec(re->regex, s, r->captures, len);
--
./nginx/src/http/ngx_http_variables.c-2372-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_variables.c-2373-
./nginx/src/http/ngx_http_variables.c-2374-    cmcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_core_module);
./nginx/src/http/ngx_http_variables.c-2375-
./nginx/src/http/ngx_http_variables.c-2376-    cmcf->variables_keys = ngx_pcalloc(cf->temp_pool,
./nginx/src/http/ngx_http_variables.c-2377-                                       sizeof(ngx_hash_keys_arrays_t));
./nginx/src/http/ngx_http_variables.c-2378-    if (cmcf->variables_keys == NULL) {
./nginx/src/http/ngx_http_variables.c-2379-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2380-    }
./nginx/src/http/ngx_http_variables.c-2381-
./nginx/src/http/ngx_http_variables.c:2382:    cmcf->variables_keys->pool = cf->pool;
./nginx/src/http/ngx_http_variables.c:2383:    cmcf->variables_keys->temp_pool = cf->pool;
./nginx/src/http/ngx_http_variables.c-2384-
./nginx/src/http/ngx_http_variables.c-2385-    if (ngx_hash_keys_array_init(cmcf->variables_keys, NGX_HASH_SMALL)
./nginx/src/http/ngx_http_variables.c-2386-        != NGX_OK)
./nginx/src/http/ngx_http_variables.c-2387-    {
./nginx/src/http/ngx_http_variables.c-2388-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2389-    }
./nginx/src/http/ngx_http_variables.c-2390-
./nginx/src/http/ngx_http_variables.c-2391-    for (cv = ngx_http_core_variables; cv->name.len; cv++) {
./nginx/src/http/ngx_http_variables.c:2392:        v = ngx_palloc(cf->pool, sizeof(ngx_http_variable_t));
./nginx/src/http/ngx_http_variables.c-2393-        if (v == NULL) {
./nginx/src/http/ngx_http_variables.c-2394-            return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2395-        }
./nginx/src/http/ngx_http_variables.c-2396-
./nginx/src/http/ngx_http_variables.c-2397-        *v = *cv;
./nginx/src/http/ngx_http_variables.c-2398-
./nginx/src/http/ngx_http_variables.c-2399-        rc = ngx_hash_add_key(cmcf->variables_keys, &v->name, v,
./nginx/src/http/ngx_http_variables.c-2400-                              NGX_HASH_READONLY_KEY);
./nginx/src/http/ngx_http_variables.c-2401-
./nginx/src/http/ngx_http_variables.c-2402-        if (rc == NGX_OK) {
--
./nginx/src/http/ngx_http_variables.c-2508-            key[n].key.data = NULL;
./nginx/src/http/ngx_http_variables.c-2509-        }
./nginx/src/http/ngx_http_variables.c-2510-    }
./nginx/src/http/ngx_http_variables.c-2511-
./nginx/src/http/ngx_http_variables.c-2512-
./nginx/src/http/ngx_http_variables.c-2513-    hash.hash = &cmcf->variables_hash;
./nginx/src/http/ngx_http_variables.c-2514-    hash.key = ngx_hash_key;
./nginx/src/http/ngx_http_variables.c-2515-    hash.max_size = cmcf->variables_hash_max_size;
./nginx/src/http/ngx_http_variables.c-2516-    hash.bucket_size = cmcf->variables_hash_bucket_size;
./nginx/src/http/ngx_http_variables.c-2517-    hash.name = "variables_hash";
./nginx/src/http/ngx_http_variables.c:2518:    hash.pool = cf->pool;
./nginx/src/http/ngx_http_variables.c-2519-    hash.temp_pool = NULL;
./nginx/src/http/ngx_http_variables.c-2520-
./nginx/src/http/ngx_http_variables.c-2521-    if (ngx_hash_init(&hash, cmcf->variables_keys->keys.elts,
./nginx/src/http/ngx_http_variables.c-2522-                      cmcf->variables_keys->keys.nelts)
./nginx/src/http/ngx_http_variables.c-2523-        != NGX_OK)
./nginx/src/http/ngx_http_variables.c-2524-    {
./nginx/src/http/ngx_http_variables.c-2525-        return NGX_ERROR;
./nginx/src/http/ngx_http_variables.c-2526-    }
./nginx/src/http/ngx_http_variables.c-2527-
./nginx/src/http/ngx_http_variables.c-2528-    cmcf->variables_keys = NULL;
--
./nginx/src/http/ngx_http_request.c-178-    { ngx_null_string, 0, NULL }
./nginx/src/http/ngx_http_request.c-179-};
./nginx/src/http/ngx_http_request.c-180-
./nginx/src/http/ngx_http_request.c-181-
./nginx/src/http/ngx_http_request.c-182-void
./nginx/src/http/ngx_http_request.c-183-ngx_http_init_connection(ngx_connection_t *c)
./nginx/src/http/ngx_http_request.c-184-{
./nginx/src/http/ngx_http_request.c-185-    ngx_event_t         *rev;
./nginx/src/http/ngx_http_request.c-186-    ngx_http_log_ctx_t  *ctx;
./nginx/src/http/ngx_http_request.c-187-
./nginx/src/http/ngx_http_request.c:188:    ctx = ngx_palloc(c->pool, sizeof(ngx_http_log_ctx_t));
./nginx/src/http/ngx_http_request.c-189-    if (ctx == NULL) {
./nginx/src/http/ngx_http_request.c-190-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-191-        return;
./nginx/src/http/ngx_http_request.c-192-    }
./nginx/src/http/ngx_http_request.c-193-
./nginx/src/http/ngx_http_request.c-194-    ctx->connection = c;
./nginx/src/http/ngx_http_request.c-195-    ctx->request = NULL;
./nginx/src/http/ngx_http_request.c-196-    ctx->current_request = NULL;
./nginx/src/http/ngx_http_request.c-197-
./nginx/src/http/ngx_http_request.c-198-    c->log->connection = c->number;
--
./nginx/src/http/ngx_http_request.c-266-
./nginx/src/http/ngx_http_request.c-267-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-268-        return;
./nginx/src/http/ngx_http_request.c-269-    }
./nginx/src/http/ngx_http_request.c-270-
./nginx/src/http/ngx_http_request.c-271-    c->requests++;
./nginx/src/http/ngx_http_request.c-272-
./nginx/src/http/ngx_http_request.c-273-    hc = c->data;
./nginx/src/http/ngx_http_request.c-274-
./nginx/src/http/ngx_http_request.c-275-    if (hc == NULL) {
./nginx/src/http/ngx_http_request.c:276:        hc = ngx_pcalloc(c->pool, sizeof(ngx_http_connection_t));
./nginx/src/http/ngx_http_request.c-277-        if (hc == NULL) {
./nginx/src/http/ngx_http_request.c-278-            ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-279-            return;
./nginx/src/http/ngx_http_request.c-280-        }
./nginx/src/http/ngx_http_request.c-281-    }
./nginx/src/http/ngx_http_request.c-282-
./nginx/src/http/ngx_http_request.c-283-    r = hc->request;
./nginx/src/http/ngx_http_request.c-284-
./nginx/src/http/ngx_http_request.c-285-    if (r) {
./nginx/src/http/ngx_http_request.c-286-        ngx_memzero(r, sizeof(ngx_http_request_t));
./nginx/src/http/ngx_http_request.c-287-
./nginx/src/http/ngx_http_request.c-288-        r->pipeline = hc->pipeline;
./nginx/src/http/ngx_http_request.c-289-
./nginx/src/http/ngx_http_request.c-290-        r->content_length_n = -1;
./nginx/src/http/ngx_http_request.c-291-
./nginx/src/http/ngx_http_request.c-292-        if (hc->nbusy) {
./nginx/src/http/ngx_http_request.c-293-            r->header_in = hc->busy[0];
./nginx/src/http/ngx_http_request.c-294-        }
./nginx/src/http/ngx_http_request.c-295-
./nginx/src/http/ngx_http_request.c-296-    } else {
./nginx/src/http/ngx_http_request.c:297:        r = ngx_pcalloc(c->pool, sizeof(ngx_http_request_t));
./nginx/src/http/ngx_http_request.c-298-        if (r == NULL) {
./nginx/src/http/ngx_http_request.c-299-            ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-300-            return;
./nginx/src/http/ngx_http_request.c-301-        }
./nginx/src/http/ngx_http_request.c-302-
./nginx/src/http/ngx_http_request.c-303-        r->content_length_n = -1;
./nginx/src/http/ngx_http_request.c-304-
./nginx/src/http/ngx_http_request.c-305-        hc->request = r;
./nginx/src/http/ngx_http_request.c-306-    }
./nginx/src/http/ngx_http_request.c-307-
--
./nginx/src/http/ngx_http_request.c-438-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_request.c-439-    c->log->file = clcf->error_log->file;
./nginx/src/http/ngx_http_request.c-440-#if (NGX_ENABLE_SYSLOG)
./nginx/src/http/ngx_http_request.c-441-    c->log->priority = clcf->error_log->priority;
./nginx/src/http/ngx_http_request.c-442-#endif
./nginx/src/http/ngx_http_request.c-443-    if (!(c->log->log_level & NGX_LOG_DEBUG_CONNECTION)) {
./nginx/src/http/ngx_http_request.c-444-        c->log->log_level = clcf->error_log->log_level;
./nginx/src/http/ngx_http_request.c-445-    }
./nginx/src/http/ngx_http_request.c-446-
./nginx/src/http/ngx_http_request.c-447-    if (c->buffer == NULL) {
./nginx/src/http/ngx_http_request.c:448:        c->buffer = ngx_create_temp_buf(c->pool,
./nginx/src/http/ngx_http_request.c-449-                                        cscf->client_header_buffer_size);
./nginx/src/http/ngx_http_request.c-450-        if (c->buffer == NULL) {
./nginx/src/http/ngx_http_request.c-451-            ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-452-            return;
./nginx/src/http/ngx_http_request.c-453-        }
./nginx/src/http/ngx_http_request.c-454-    }
./nginx/src/http/ngx_http_request.c-455-
./nginx/src/http/ngx_http_request.c-456-    if (r->header_in == NULL) {
./nginx/src/http/ngx_http_request.c-457-        r->header_in = c->buffer;
./nginx/src/http/ngx_http_request.c-458-    }
./nginx/src/http/ngx_http_request.c-459-
./nginx/src/http/ngx_http_request.c:460:    r->pool = ngx_create_pool(cscf->request_pool_size, c->log);
./nginx/src/http/ngx_http_request.c:461:    if (r->pool == NULL) {
./nginx/src/http/ngx_http_request.c-462-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-463-        return;
./nginx/src/http/ngx_http_request.c-464-    }
./nginx/src/http/ngx_http_request.c-465-
./nginx/src/http/ngx_http_request.c-466-
./nginx/src/http/ngx_http_request.c:467:    if (ngx_list_init(&r->headers_out.headers, r->pool, 20,
./nginx/src/http/ngx_http_request.c-468-                      sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_request.c-469-        != NGX_OK)
./nginx/src/http/ngx_http_request.c-470-    {
./nginx/src/http/ngx_http_request.c:471:        ngx_destroy_pool(r->pool);
./nginx/src/http/ngx_http_request.c-472-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-473-        return;
./nginx/src/http/ngx_http_request.c-474-    }
./nginx/src/http/ngx_http_request.c-475-
./nginx/src/http/ngx_http_request.c:476:    r->ctx = ngx_pcalloc(r->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_request.c-477-    if (r->ctx == NULL) {
./nginx/src/http/ngx_http_request.c:478:        ngx_destroy_pool(r->pool);
./nginx/src/http/ngx_http_request.c-479-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-480-        return;
./nginx/src/http/ngx_http_request.c-481-    }
./nginx/src/http/ngx_http_request.c-482-
./nginx/src/http/ngx_http_request.c-483-    cmcf = ngx_http_get_module_main_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_request.c-484-
./nginx/src/http/ngx_http_request.c:485:    r->variables = ngx_pcalloc(r->pool, cmcf->variables.nelts
./nginx/src/http/ngx_http_request.c-486-                                        * sizeof(ngx_http_variable_value_t));
./nginx/src/http/ngx_http_request.c-487-    if (r->variables == NULL) {
./nginx/src/http/ngx_http_request.c:488:        ngx_destroy_pool(r->pool);
./nginx/src/http/ngx_http_request.c-489-        ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-490-        return;
./nginx/src/http/ngx_http_request.c-491-    }
./nginx/src/http/ngx_http_request.c-492-
./nginx/src/http/ngx_http_request.c-493-    c->single_connection = 1;
./nginx/src/http/ngx_http_request.c-494-    c->destroyed = 0;
./nginx/src/http/ngx_http_request.c-495-
./nginx/src/http/ngx_http_request.c-496-    r->main = r;
./nginx/src/http/ngx_http_request.c-497-    r->count = 1;
./nginx/src/http/ngx_http_request.c-498-
--
./nginx/src/http/ngx_http_request.c-764-
./nginx/src/http/ngx_http_request.c-765-            if (r->args_start) {
./nginx/src/http/ngx_http_request.c-766-                r->uri.len = r->args_start - 1 - r->uri_start;
./nginx/src/http/ngx_http_request.c-767-            } else {
./nginx/src/http/ngx_http_request.c-768-                r->uri.len = r->uri_end - r->uri_start;
./nginx/src/http/ngx_http_request.c-769-            }
./nginx/src/http/ngx_http_request.c-770-
./nginx/src/http/ngx_http_request.c-771-
./nginx/src/http/ngx_http_request.c-772-            if (r->complex_uri || r->quoted_uri) {
./nginx/src/http/ngx_http_request.c-773-
./nginx/src/http/ngx_http_request.c:774:                r->uri.data = ngx_pnalloc(r->pool, r->uri.len + 1);
./nginx/src/http/ngx_http_request.c-775-                if (r->uri.data == NULL) {
./nginx/src/http/ngx_http_request.c-776-                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-777-                    return;
./nginx/src/http/ngx_http_request.c-778-                }
./nginx/src/http/ngx_http_request.c-779-
./nginx/src/http/ngx_http_request.c-780-                /* add unescape_uri */
./nginx/src/http/ngx_http_request.c:781:                r->unescape_uri.data = ngx_palloc(r->pool, r->uri.len + 1);
./nginx/src/http/ngx_http_request.c-782-                if (r->unescape_uri.data == NULL) {
./nginx/src/http/ngx_http_request.c-783-                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-784-                    return;
./nginx/src/http/ngx_http_request.c-785-                }
./nginx/src/http/ngx_http_request.c-786-                dst = r->unescape_uri.data;
./nginx/src/http/ngx_http_request.c-787-                src = r->uri.data;
./nginx/src/http/ngx_http_request.c-788-                ngx_unescape_uri(&dst, &src, r->uri.len, 0);
./nginx/src/http/ngx_http_request.c-789-                r->unescape_uri.len = dst - r->unescape_uri.data;
./nginx/src/http/ngx_http_request.c-790-                /* end */
./nginx/src/http/ngx_http_request.c-791-
--
./nginx/src/http/ngx_http_request.c-804-                r->uri.data = r->uri_start;
./nginx/src/http/ngx_http_request.c-805-            }
./nginx/src/http/ngx_http_request.c-806-
./nginx/src/http/ngx_http_request.c-807-
./nginx/src/http/ngx_http_request.c-808-            r->unparsed_uri.len = r->uri_end - r->uri_start;
./nginx/src/http/ngx_http_request.c-809-            r->unparsed_uri.data = r->uri_start;
./nginx/src/http/ngx_http_request.c-810-
./nginx/src/http/ngx_http_request.c-811-            r->valid_unparsed_uri = r->space_in_uri ? 0 : 1;
./nginx/src/http/ngx_http_request.c-812-
./nginx/src/http/ngx_http_request.c-813-            /* add unescape_request_uri */
./nginx/src/http/ngx_http_request.c:814:            r->unescape_request_uri.data = ngx_palloc(r->pool, r->unparsed_uri.len + 1);
./nginx/src/http/ngx_http_request.c-815-
./nginx/src/http/ngx_http_request.c-816-            if (r->unescape_request_uri.data == NULL) {
./nginx/src/http/ngx_http_request.c-817-                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-818-                return;
./nginx/src/http/ngx_http_request.c-819-            }
./nginx/src/http/ngx_http_request.c-820-            dst = r->unescape_request_uri.data;
./nginx/src/http/ngx_http_request.c-821-            src = r->unparsed_uri.data;
./nginx/src/http/ngx_http_request.c-822-            ngx_unescape_uri(&src, &src, r->unparsed_uri.len, 0);
./nginx/src/http/ngx_http_request.c-823-            r->unescape_uri.len = dst - r->unescape_uri.data;
./nginx/src/http/ngx_http_request.c-824-            /* end */
--
./nginx/src/http/ngx_http_request.c-841-
./nginx/src/http/ngx_http_request.c-842-                r->exten.data = r->uri_ext;
./nginx/src/http/ngx_http_request.c-843-            }
./nginx/src/http/ngx_http_request.c-844-
./nginx/src/http/ngx_http_request.c-845-
./nginx/src/http/ngx_http_request.c-846-            if (r->args_start && r->uri_end > r->args_start) {
./nginx/src/http/ngx_http_request.c-847-                r->args.len = r->uri_end - r->args_start;
./nginx/src/http/ngx_http_request.c-848-                r->args.data = r->args_start;
./nginx/src/http/ngx_http_request.c-849-
./nginx/src/http/ngx_http_request.c-850-                /* add unescape_args */
./nginx/src/http/ngx_http_request.c:851:                r->unescape_args.data = ngx_palloc(r->pool, r->args.len + 1);
./nginx/src/http/ngx_http_request.c-852-
./nginx/src/http/ngx_http_request.c-853-                if (r->unescape_args.data == NULL) {
./nginx/src/http/ngx_http_request.c-854-                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-855-                    return;
./nginx/src/http/ngx_http_request.c-856-                }
./nginx/src/http/ngx_http_request.c-857-                dst = r->unescape_args.data;
./nginx/src/http/ngx_http_request.c-858-                src = r->args.data;
./nginx/src/http/ngx_http_request.c-859-                ngx_unescape_uri(&dst, &src, r->args.len, 0);
./nginx/src/http/ngx_http_request.c-860-                r->unescape_args.len = dst - r->unescape_args.data;
./nginx/src/http/ngx_http_request.c-861-                /* end */
--
./nginx/src/http/ngx_http_request.c-953-                {
./nginx/src/http/ngx_http_request.c-954-                    ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-955-                    return;
./nginx/src/http/ngx_http_request.c-956-                }
./nginx/src/http/ngx_http_request.c-957-
./nginx/src/http/ngx_http_request.c-958-                ngx_http_process_request(r);
./nginx/src/http/ngx_http_request.c-959-                return;
./nginx/src/http/ngx_http_request.c-960-            }
./nginx/src/http/ngx_http_request.c-961-
./nginx/src/http/ngx_http_request.c-962-
./nginx/src/http/ngx_http_request.c:963:            if (ngx_list_init(&r->headers_in.headers, r->pool, 20,
./nginx/src/http/ngx_http_request.c-964-                              sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_request.c-965-                != NGX_OK)
./nginx/src/http/ngx_http_request.c-966-            {
./nginx/src/http/ngx_http_request.c-967-                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-968-                return;
./nginx/src/http/ngx_http_request.c-969-            }
./nginx/src/http/ngx_http_request.c-970-
./nginx/src/http/ngx_http_request.c-971-
./nginx/src/http/ngx_http_request.c:972:            if (ngx_array_init(&r->headers_in.cookies, r->pool, 2,
./nginx/src/http/ngx_http_request.c-973-                               sizeof(ngx_table_elt_t *))
./nginx/src/http/ngx_http_request.c-974-                != NGX_OK)
./nginx/src/http/ngx_http_request.c-975-            {
./nginx/src/http/ngx_http_request.c-976-                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-977-                return;
./nginx/src/http/ngx_http_request.c-978-            }
./nginx/src/http/ngx_http_request.c-979-
./nginx/src/http/ngx_http_request.c-980-            c->log->action = "reading client request headers";
./nginx/src/http/ngx_http_request.c-981-
./nginx/src/http/ngx_http_request.c-982-            rev->handler = ngx_http_process_request_headers;
--
./nginx/src/http/ngx_http_request.c-1131-            h->hash = r->header_hash;
./nginx/src/http/ngx_http_request.c-1132-
./nginx/src/http/ngx_http_request.c-1133-            h->key.len = r->header_name_end - r->header_name_start;
./nginx/src/http/ngx_http_request.c-1134-            h->key.data = r->header_name_start;
./nginx/src/http/ngx_http_request.c-1135-            h->key.data[h->key.len] = '\0';
./nginx/src/http/ngx_http_request.c-1136-
./nginx/src/http/ngx_http_request.c-1137-            h->value.len = r->header_end - r->header_start;
./nginx/src/http/ngx_http_request.c-1138-            h->value.data = r->header_start;
./nginx/src/http/ngx_http_request.c-1139-            h->value.data[h->value.len] = '\0';
./nginx/src/http/ngx_http_request.c-1140-
./nginx/src/http/ngx_http_request.c:1141:            h->lowcase_key = ngx_pnalloc(r->pool, h->key.len);
./nginx/src/http/ngx_http_request.c-1142-            if (h->lowcase_key == NULL) {
./nginx/src/http/ngx_http_request.c-1143-                ngx_http_close_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_request.c-1144-                return;
./nginx/src/http/ngx_http_request.c-1145-            }
./nginx/src/http/ngx_http_request.c-1146-
./nginx/src/http/ngx_http_request.c-1147-            if (h->key.len == r->lowcase_index) {
./nginx/src/http/ngx_http_request.c-1148-                ngx_memcpy(h->lowcase_key, r->lowcase_header, h->key.len);
./nginx/src/http/ngx_http_request.c-1149-
./nginx/src/http/ngx_http_request.c-1150-            } else {
./nginx/src/http/ngx_http_request.c-1151-                ngx_strlow(h->lowcase_key, h->key.data, h->key.len);
--
./nginx/src/http/ngx_http_request.c-1301-    if (hc->nfree) {
./nginx/src/http/ngx_http_request.c-1302-        b = hc->free[--hc->nfree];
./nginx/src/http/ngx_http_request.c-1303-
./nginx/src/http/ngx_http_request.c-1304-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_request.c-1305-                       "http large header free: %p %uz",
./nginx/src/http/ngx_http_request.c-1306-                       b->pos, b->end - b->last);
./nginx/src/http/ngx_http_request.c-1307-
./nginx/src/http/ngx_http_request.c-1308-    } else if (hc->nbusy < cscf->large_client_header_buffers.num) {
./nginx/src/http/ngx_http_request.c-1309-
./nginx/src/http/ngx_http_request.c-1310-        if (hc->busy == NULL) {
./nginx/src/http/ngx_http_request.c:1311:            hc->busy = ngx_palloc(r->connection->pool,
./nginx/src/http/ngx_http_request.c-1312-                  cscf->large_client_header_buffers.num * sizeof(ngx_buf_t *));
./nginx/src/http/ngx_http_request.c-1313-            if (hc->busy == NULL) {
./nginx/src/http/ngx_http_request.c-1314-                return NGX_ERROR;
./nginx/src/http/ngx_http_request.c-1315-            }
./nginx/src/http/ngx_http_request.c-1316-        }
./nginx/src/http/ngx_http_request.c-1317-
./nginx/src/http/ngx_http_request.c:1318:        b = ngx_create_temp_buf(r->connection->pool,
./nginx/src/http/ngx_http_request.c-1319-                                cscf->large_client_header_buffers.size);
./nginx/src/http/ngx_http_request.c-1320-        if (b == NULL) {
./nginx/src/http/ngx_http_request.c-1321-            return NGX_ERROR;
./nginx/src/http/ngx_http_request.c-1322-        }
./nginx/src/http/ngx_http_request.c-1323-
./nginx/src/http/ngx_http_request.c-1324-        ngx_log_debug2(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_request.c-1325-                       "http large header alloc: %p %uz",
./nginx/src/http/ngx_http_request.c-1326-                       b->pos, b->end - b->last);
./nginx/src/http/ngx_http_request.c-1327-
./nginx/src/http/ngx_http_request.c-1328-    } else {
--
./nginx/src/http/ngx_http_request.c-1807-
./nginx/src/http/ngx_http_request.c-1808-            break;
./nginx/src/http/ngx_http_request.c-1809-        }
./nginx/src/http/ngx_http_request.c-1810-    }
./nginx/src/http/ngx_http_request.c-1811-
./nginx/src/http/ngx_http_request.c-1812-    if (dot_pos == host_len - 1) {
./nginx/src/http/ngx_http_request.c-1813-        host_len--;
./nginx/src/http/ngx_http_request.c-1814-    }
./nginx/src/http/ngx_http_request.c-1815-
./nginx/src/http/ngx_http_request.c-1816-    if (alloc) {
./nginx/src/http/ngx_http_request.c:1817:        *host = ngx_pnalloc(r->pool, host_len);
./nginx/src/http/ngx_http_request.c-1818-        if (*host == NULL) {
./nginx/src/http/ngx_http_request.c-1819-            return -1;
./nginx/src/http/ngx_http_request.c-1820-        }
./nginx/src/http/ngx_http_request.c-1821-
./nginx/src/http/ngx_http_request.c-1822-        ngx_strlow(*host, h, host_len);
./nginx/src/http/ngx_http_request.c-1823-    }
./nginx/src/http/ngx_http_request.c-1824-
./nginx/src/http/ngx_http_request.c-1825-    return host_len;
./nginx/src/http/ngx_http_request.c-1826-}
./nginx/src/http/ngx_http_request.c-1827-
--
./nginx/src/http/ngx_http_request.c-1957-    }
./nginx/src/http/ngx_http_request.c-1958-}
./nginx/src/http/ngx_http_request.c-1959-
./nginx/src/http/ngx_http_request.c-1960-
./nginx/src/http/ngx_http_request.c-1961-ngx_int_t
./nginx/src/http/ngx_http_request.c-1962-ngx_http_post_request(ngx_http_request_t *r, ngx_http_posted_request_t *pr)
./nginx/src/http/ngx_http_request.c-1963-{
./nginx/src/http/ngx_http_request.c-1964-    ngx_http_posted_request_t  **p;
./nginx/src/http/ngx_http_request.c-1965-
./nginx/src/http/ngx_http_request.c-1966-    if (pr == NULL) {
./nginx/src/http/ngx_http_request.c:1967:        pr = ngx_palloc(r->pool, sizeof(ngx_http_posted_request_t));
./nginx/src/http/ngx_http_request.c-1968-        if (pr == NULL) {
./nginx/src/http/ngx_http_request.c-1969-            return NGX_ERROR;
./nginx/src/http/ngx_http_request.c-1970-        }
./nginx/src/http/ngx_http_request.c-1971-    }
./nginx/src/http/ngx_http_request.c-1972-
./nginx/src/http/ngx_http_request.c-1973-    pr->request = r;
./nginx/src/http/ngx_http_request.c-1974-    pr->next = NULL;
./nginx/src/http/ngx_http_request.c-1975-
./nginx/src/http/ngx_http_request.c-1976-    for (p = &r->main->posted_requests; *p; p = &(*p)->next) { /* void */ }
./nginx/src/http/ngx_http_request.c-1977-
--
./nginx/src/http/ngx_http_request.c-2538-             * If the large header buffers were allocated while the previous
./nginx/src/http/ngx_http_request.c-2539-             * request processing then we do not use c->buffer for
./nginx/src/http/ngx_http_request.c-2540-             * the pipelined request (see ngx_http_init_request()).
./nginx/src/http/ngx_http_request.c-2541-             *
./nginx/src/http/ngx_http_request.c-2542-             * Now we would move the large header buffers to the free list.
./nginx/src/http/ngx_http_request.c-2543-             */
./nginx/src/http/ngx_http_request.c-2544-
./nginx/src/http/ngx_http_request.c-2545-            cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_request.c-2546-
./nginx/src/http/ngx_http_request.c-2547-            if (hc->free == NULL) {
./nginx/src/http/ngx_http_request.c:2548:                hc->free = ngx_palloc(c->pool,
./nginx/src/http/ngx_http_request.c-2549-                  cscf->large_client_header_buffers.num * sizeof(ngx_buf_t *));
./nginx/src/http/ngx_http_request.c-2550-
./nginx/src/http/ngx_http_request.c-2551-                if (hc->free == NULL) {
./nginx/src/http/ngx_http_request.c-2552-                    ngx_http_close_request(r, 0);
./nginx/src/http/ngx_http_request.c-2553-                    return;
./nginx/src/http/ngx_http_request.c-2554-                }
./nginx/src/http/ngx_http_request.c-2555-            }
./nginx/src/http/ngx_http_request.c-2556-
./nginx/src/http/ngx_http_request.c-2557-            for (i = 0; i < hc->nbusy - 1; i++) {
./nginx/src/http/ngx_http_request.c-2558-                f = hc->busy[i];
--
./nginx/src/http/ngx_http_request.c-2596-        rev->handler = ngx_http_init_request;
./nginx/src/http/ngx_http_request.c-2597-        ngx_post_event(rev, &ngx_posted_events);
./nginx/src/http/ngx_http_request.c-2598-        return;
./nginx/src/http/ngx_http_request.c-2599-    }
./nginx/src/http/ngx_http_request.c-2600-
./nginx/src/http/ngx_http_request.c-2601-    hc->pipeline = 0;
./nginx/src/http/ngx_http_request.c-2602-
./nginx/src/http/ngx_http_request.c-2603-    /*
./nginx/src/http/ngx_http_request.c-2604-     * To keep a memory footprint as small as possible for an idle
./nginx/src/http/ngx_http_request.c-2605-     * keepalive connection we try to free the ngx_http_request_t and
./nginx/src/http/ngx_http_request.c:2606:     * c->buffer's memory if they were allocated outside the c->pool.
./nginx/src/http/ngx_http_request.c:2607:     * The large header buffers are always allocated outside the c->pool and
./nginx/src/http/ngx_http_request.c-2608-     * are freed too.
./nginx/src/http/ngx_http_request.c-2609-     */
./nginx/src/http/ngx_http_request.c-2610-
./nginx/src/http/ngx_http_request.c:2611:    if (ngx_pfree(c->pool, r) == NGX_OK) {
./nginx/src/http/ngx_http_request.c-2612-        hc->request = NULL;
./nginx/src/http/ngx_http_request.c-2613-    }
./nginx/src/http/ngx_http_request.c-2614-
./nginx/src/http/ngx_http_request.c-2615-    b = c->buffer;
./nginx/src/http/ngx_http_request.c-2616-
./nginx/src/http/ngx_http_request.c:2617:    if (ngx_pfree(c->pool, b->start) == NGX_OK) {
./nginx/src/http/ngx_http_request.c-2618-
./nginx/src/http/ngx_http_request.c-2619-        /*
./nginx/src/http/ngx_http_request.c-2620-         * the special note for ngx_http_keepalive_handler() that
./nginx/src/http/ngx_http_request.c-2621-         * c->buffer's memory was freed
./nginx/src/http/ngx_http_request.c-2622-         */
./nginx/src/http/ngx_http_request.c-2623-
./nginx/src/http/ngx_http_request.c-2624-        b->pos = NULL;
./nginx/src/http/ngx_http_request.c-2625-
./nginx/src/http/ngx_http_request.c-2626-    } else {
./nginx/src/http/ngx_http_request.c-2627-        b->pos = b->start;
./nginx/src/http/ngx_http_request.c-2628-        b->last = b->start;
./nginx/src/http/ngx_http_request.c-2629-    }
./nginx/src/http/ngx_http_request.c-2630-
./nginx/src/http/ngx_http_request.c-2631-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0, "hc free: %p %d",
./nginx/src/http/ngx_http_request.c-2632-                   hc->free, hc->nfree);
./nginx/src/http/ngx_http_request.c-2633-
./nginx/src/http/ngx_http_request.c-2634-    if (hc->free) {
./nginx/src/http/ngx_http_request.c-2635-        for (i = 0; i < hc->nfree; i++) {
./nginx/src/http/ngx_http_request.c:2636:            ngx_pfree(c->pool, hc->free[i]->start);
./nginx/src/http/ngx_http_request.c-2637-            hc->free[i] = NULL;
./nginx/src/http/ngx_http_request.c-2638-        }
./nginx/src/http/ngx_http_request.c-2639-
./nginx/src/http/ngx_http_request.c-2640-        hc->nfree = 0;
./nginx/src/http/ngx_http_request.c-2641-    }
./nginx/src/http/ngx_http_request.c-2642-
./nginx/src/http/ngx_http_request.c-2643-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0, "hc busy: %p %d",
./nginx/src/http/ngx_http_request.c-2644-                   hc->busy, hc->nbusy);
./nginx/src/http/ngx_http_request.c-2645-
./nginx/src/http/ngx_http_request.c-2646-    if (hc->busy) {
./nginx/src/http/ngx_http_request.c-2647-        for (i = 0; i < hc->nbusy; i++) {
./nginx/src/http/ngx_http_request.c:2648:            ngx_pfree(c->pool, hc->busy[i]->start);
./nginx/src/http/ngx_http_request.c-2649-            hc->busy[i] = NULL;
./nginx/src/http/ngx_http_request.c-2650-        }
./nginx/src/http/ngx_http_request.c-2651-
./nginx/src/http/ngx_http_request.c-2652-        hc->nbusy = 0;
./nginx/src/http/ngx_http_request.c-2653-    }
./nginx/src/http/ngx_http_request.c-2654-
./nginx/src/http/ngx_http_request.c-2655-#if (NGX_HTTP_SSL)
./nginx/src/http/ngx_http_request.c-2656-    if (c->ssl) {
./nginx/src/http/ngx_http_request.c-2657-        ngx_ssl_free_buffer(c);
./nginx/src/http/ngx_http_request.c-2658-    }
--
./nginx/src/http/ngx_http_request.c-2764-    size = b->end - b->start;
./nginx/src/http/ngx_http_request.c-2765-
./nginx/src/http/ngx_http_request.c-2766-    if (b->pos == NULL) {
./nginx/src/http/ngx_http_request.c-2767-
./nginx/src/http/ngx_http_request.c-2768-        /*
./nginx/src/http/ngx_http_request.c-2769-         * The c->buffer's memory was freed by ngx_http_set_keepalive().
./nginx/src/http/ngx_http_request.c-2770-         * However, the c->buffer->start and c->buffer->end were not changed
./nginx/src/http/ngx_http_request.c-2771-         * to keep the buffer size.
./nginx/src/http/ngx_http_request.c-2772-         */
./nginx/src/http/ngx_http_request.c-2773-
./nginx/src/http/ngx_http_request.c:2774:        b->pos = ngx_palloc(c->pool, size);
./nginx/src/http/ngx_http_request.c-2775-        if (b->pos == NULL) {
./nginx/src/http/ngx_http_request.c-2776-            ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-2777-            return;
./nginx/src/http/ngx_http_request.c-2778-        }
./nginx/src/http/ngx_http_request.c-2779-
./nginx/src/http/ngx_http_request.c-2780-        b->start = b->pos;
./nginx/src/http/ngx_http_request.c-2781-        b->last = b->pos;
./nginx/src/http/ngx_http_request.c-2782-        b->end = b->pos + size;
./nginx/src/http/ngx_http_request.c-2783-    }
./nginx/src/http/ngx_http_request.c-2784-
--
./nginx/src/http/ngx_http_request.c-2797-        if (ngx_handle_read_event(rev, 0) != NGX_OK) {
./nginx/src/http/ngx_http_request.c-2798-            ngx_http_close_connection(c);
./nginx/src/http/ngx_http_request.c-2799-            return;
./nginx/src/http/ngx_http_request.c-2800-        }
./nginx/src/http/ngx_http_request.c-2801-
./nginx/src/http/ngx_http_request.c-2802-        /*
./nginx/src/http/ngx_http_request.c-2803-         * Like ngx_http_set_keepalive() we are trying to not hold
./nginx/src/http/ngx_http_request.c-2804-         * c->buffer's memory for a keepalive connection.
./nginx/src/http/ngx_http_request.c-2805-         */
./nginx/src/http/ngx_http_request.c-2806-
./nginx/src/http/ngx_http_request.c:2807:        if (ngx_pfree(c->pool, b->start) == NGX_OK) {
./nginx/src/http/ngx_http_request.c-2808-
./nginx/src/http/ngx_http_request.c-2809-            /*
./nginx/src/http/ngx_http_request.c-2810-             * the special note that c->buffer's memory was freed
./nginx/src/http/ngx_http_request.c-2811-             */
./nginx/src/http/ngx_http_request.c-2812-
./nginx/src/http/ngx_http_request.c-2813-            b->pos = NULL;
./nginx/src/http/ngx_http_request.c-2814-        }
./nginx/src/http/ngx_http_request.c-2815-
./nginx/src/http/ngx_http_request.c-2816-        return;
./nginx/src/http/ngx_http_request.c-2817-    }
--
./nginx/src/http/ngx_http_request.c-2965-    return;
./nginx/src/http/ngx_http_request.c-2966-}
./nginx/src/http/ngx_http_request.c-2967-
./nginx/src/http/ngx_http_request.c-2968-
./nginx/src/http/ngx_http_request.c-2969-ngx_int_t
./nginx/src/http/ngx_http_request.c-2970-ngx_http_send_special(ngx_http_request_t *r, ngx_uint_t flags)
./nginx/src/http/ngx_http_request.c-2971-{
./nginx/src/http/ngx_http_request.c-2972-    ngx_buf_t    *b;
./nginx/src/http/ngx_http_request.c-2973-    ngx_chain_t   out;
./nginx/src/http/ngx_http_request.c-2974-
./nginx/src/http/ngx_http_request.c:2975:    b = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_request.c-2976-    if (b == NULL) {
./nginx/src/http/ngx_http_request.c-2977-        return NGX_ERROR;
./nginx/src/http/ngx_http_request.c-2978-    }
./nginx/src/http/ngx_http_request.c-2979-
./nginx/src/http/ngx_http_request.c-2980-    if (flags & NGX_HTTP_LAST) {
./nginx/src/http/ngx_http_request.c-2981-
./nginx/src/http/ngx_http_request.c-2982-        if (r == r->main && !r->post_action) {
./nginx/src/http/ngx_http_request.c-2983-            b->last_buf = 1;
./nginx/src/http/ngx_http_request.c-2984-
./nginx/src/http/ngx_http_request.c-2985-        } else {
--
./nginx/src/http/ngx_http_request.c-3068-    ngx_log_t                 *log;
./nginx/src/http/ngx_http_request.c-3069-    struct linger              linger;
./nginx/src/http/ngx_http_request.c-3070-    ngx_http_cleanup_t        *cln;
./nginx/src/http/ngx_http_request.c-3071-    ngx_http_log_ctx_t        *ctx;
./nginx/src/http/ngx_http_request.c-3072-    ngx_http_core_loc_conf_t  *clcf;
./nginx/src/http/ngx_http_request.c-3073-
./nginx/src/http/ngx_http_request.c-3074-    log = r->connection->log;
./nginx/src/http/ngx_http_request.c-3075-
./nginx/src/http/ngx_http_request.c-3076-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, log, 0, "http close request");
./nginx/src/http/ngx_http_request.c-3077-
./nginx/src/http/ngx_http_request.c:3078:    if (r->pool == NULL) {
./nginx/src/http/ngx_http_request.c-3079-        ngx_log_error(NGX_LOG_ALERT, log, 0, "http request already closed");
./nginx/src/http/ngx_http_request.c-3080-        return;
./nginx/src/http/ngx_http_request.c-3081-    }
./nginx/src/http/ngx_http_request.c-3082-
./nginx/src/http/ngx_http_request.c-3083-    for (cln = r->cleanup; cln; cln = cln->next) {
./nginx/src/http/ngx_http_request.c-3084-        if (cln->handler) {
./nginx/src/http/ngx_http_request.c-3085-            cln->handler(cln->data);
./nginx/src/http/ngx_http_request.c-3086-        }
./nginx/src/http/ngx_http_request.c-3087-    }
./nginx/src/http/ngx_http_request.c-3088-
--
./nginx/src/http/ngx_http_request.c-3117-
./nginx/src/http/ngx_http_request.c-3118-            if (setsockopt(r->connection->fd, SOL_SOCKET, SO_LINGER,
./nginx/src/http/ngx_http_request.c-3119-                           (const void *) &linger, sizeof(struct linger)) == -1)
./nginx/src/http/ngx_http_request.c-3120-            {
./nginx/src/http/ngx_http_request.c-3121-                ngx_log_error(NGX_LOG_ALERT, log, ngx_socket_errno,
./nginx/src/http/ngx_http_request.c-3122-                              "setsockopt(SO_LINGER) failed");
./nginx/src/http/ngx_http_request.c-3123-            }
./nginx/src/http/ngx_http_request.c-3124-        }
./nginx/src/http/ngx_http_request.c-3125-    }
./nginx/src/http/ngx_http_request.c-3126-
./nginx/src/http/ngx_http_request.c:3127:    /* the various request strings were allocated from r->pool */
./nginx/src/http/ngx_http_request.c-3128-    ctx = log->data;
./nginx/src/http/ngx_http_request.c-3129-    ctx->request = NULL;
./nginx/src/http/ngx_http_request.c-3130-
./nginx/src/http/ngx_http_request.c-3131-    r->request_line.len = 0;
./nginx/src/http/ngx_http_request.c-3132-
./nginx/src/http/ngx_http_request.c-3133-    r->connection->destroyed = 1;
./nginx/src/http/ngx_http_request.c-3134-
./nginx/src/http/ngx_http_request.c:3135:    ngx_destroy_pool(r->pool);
./nginx/src/http/ngx_http_request.c-3136-}
./nginx/src/http/ngx_http_request.c-3137-
./nginx/src/http/ngx_http_request.c-3138-
./nginx/src/http/ngx_http_request.c-3139-static void
./nginx/src/http/ngx_http_request.c-3140-ngx_http_log_request(ngx_http_request_t *r)
./nginx/src/http/ngx_http_request.c-3141-{
./nginx/src/http/ngx_http_request.c-3142-    ngx_uint_t                  i, n;
./nginx/src/http/ngx_http_request.c-3143-    ngx_http_handler_pt        *log_handler;
./nginx/src/http/ngx_http_request.c-3144-    ngx_http_core_main_conf_t  *cmcf;
./nginx/src/http/ngx_http_request.c-3145-
--
./nginx/src/http/ngx_http_request.c-3150-
./nginx/src/http/ngx_http_request.c-3151-    for (i = 0; i < n; i++) {
./nginx/src/http/ngx_http_request.c-3152-        log_handler[i](r);
./nginx/src/http/ngx_http_request.c-3153-    }
./nginx/src/http/ngx_http_request.c-3154-}
./nginx/src/http/ngx_http_request.c-3155-
./nginx/src/http/ngx_http_request.c-3156-
./nginx/src/http/ngx_http_request.c-3157-static void
./nginx/src/http/ngx_http_request.c-3158-ngx_http_close_connection(ngx_connection_t *c)
./nginx/src/http/ngx_http_request.c-3159-{
./nginx/src/http/ngx_http_request.c:3160:    ngx_pool_t  *pool;
./nginx/src/http/ngx_http_request.c-3161-
./nginx/src/http/ngx_http_request.c-3162-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, c->log, 0,
./nginx/src/http/ngx_http_request.c-3163-                   "close http connection: %d", c->fd);
./nginx/src/http/ngx_http_request.c-3164-
./nginx/src/http/ngx_http_request.c-3165-#if (NGX_HTTP_SSL)
./nginx/src/http/ngx_http_request.c-3166-
./nginx/src/http/ngx_http_request.c-3167-    if (c->ssl) {
./nginx/src/http/ngx_http_request.c-3168-        if (ngx_ssl_shutdown(c) == NGX_AGAIN) {
./nginx/src/http/ngx_http_request.c-3169-            c->ssl->handler = ngx_http_close_connection;
./nginx/src/http/ngx_http_request.c-3170-            return;
--
./nginx/src/http/ngx_http_request.c-3172-    }
./nginx/src/http/ngx_http_request.c-3173-
./nginx/src/http/ngx_http_request.c-3174-#endif
./nginx/src/http/ngx_http_request.c-3175-
./nginx/src/http/ngx_http_request.c-3176-#if (NGX_STAT_STUB)
./nginx/src/http/ngx_http_request.c-3177-    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
./nginx/src/http/ngx_http_request.c-3178-#endif
./nginx/src/http/ngx_http_request.c-3179-
./nginx/src/http/ngx_http_request.c-3180-    c->destroyed = 1;
./nginx/src/http/ngx_http_request.c-3181-
./nginx/src/http/ngx_http_request.c:3182:    pool = c->pool;
./nginx/src/http/ngx_http_request.c-3183-
./nginx/src/http/ngx_http_request.c-3184-    ngx_close_connection(c);
./nginx/src/http/ngx_http_request.c-3185-
./nginx/src/http/ngx_http_request.c:3186:    ngx_destroy_pool(pool);
./nginx/src/http/ngx_http_request.c-3187-}
./nginx/src/http/ngx_http_request.c-3188-
./nginx/src/http/ngx_http_request.c-3189-
./nginx/src/http/ngx_http_request.c-3190-static u_char *
./nginx/src/http/ngx_http_request.c-3191-ngx_http_log_error(ngx_log_t *log, u_char *buf, size_t len)
./nginx/src/http/ngx_http_request.c-3192-{
./nginx/src/http/ngx_http_request.c-3193-    u_char              *p;
./nginx/src/http/ngx_http_request.c-3194-    ngx_http_request_t  *r;
./nginx/src/http/ngx_http_request.c-3195-    ngx_http_log_ctx_t  *ctx;
./nginx/src/http/ngx_http_request.c-3196-
--
./nginx/src/http/ngx_http_upstream.c-396-{
./nginx/src/http/ngx_http_upstream.c-397-    ngx_http_upstream_t  *u;
./nginx/src/http/ngx_http_upstream.c-398-
./nginx/src/http/ngx_http_upstream.c-399-    u = r->upstream;
./nginx/src/http/ngx_http_upstream.c-400-
./nginx/src/http/ngx_http_upstream.c-401-    if (u && u->cleanup) {
./nginx/src/http/ngx_http_upstream.c-402-        r->main->count++;
./nginx/src/http/ngx_http_upstream.c-403-        ngx_http_upstream_cleanup(r);
./nginx/src/http/ngx_http_upstream.c-404-    }
./nginx/src/http/ngx_http_upstream.c-405-
./nginx/src/http/ngx_http_upstream.c:406:    u = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_t));
./nginx/src/http/ngx_http_upstream.c-407-    if (u == NULL) {
./nginx/src/http/ngx_http_upstream.c-408-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-409-    }
./nginx/src/http/ngx_http_upstream.c-410-
./nginx/src/http/ngx_http_upstream.c-411-    r->upstream = u;
./nginx/src/http/ngx_http_upstream.c-412-
./nginx/src/http/ngx_http_upstream.c-413-    u->peer.log = r->connection->log;
./nginx/src/http/ngx_http_upstream.c-414-    u->peer.log_error = NGX_ERROR_ERR;
./nginx/src/http/ngx_http_upstream.c-415-#if (NGX_THREADS)
./nginx/src/http/ngx_http_upstream.c-416-    u->peer.lock = &r->connection->lock;
--
./nginx/src/http/ngx_http_upstream.c-514-    if (u->create_request(r) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-515-        ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-516-        return;
./nginx/src/http/ngx_http_upstream.c-517-    }
./nginx/src/http/ngx_http_upstream.c-518-
./nginx/src/http/ngx_http_upstream.c-519-    u->peer.local = u->conf->local;
./nginx/src/http/ngx_http_upstream.c-520-
./nginx/src/http/ngx_http_upstream.c-521-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_upstream.c-522-
./nginx/src/http/ngx_http_upstream.c-523-    u->output.alignment = clcf->directio_alignment;
./nginx/src/http/ngx_http_upstream.c:524:    u->output.pool = r->pool;
./nginx/src/http/ngx_http_upstream.c-525-    u->output.bufs.num = 1;
./nginx/src/http/ngx_http_upstream.c-526-    u->output.bufs.size = clcf->client_body_buffer_size;
./nginx/src/http/ngx_http_upstream.c-527-    u->output.output_filter = ngx_chain_writer;
./nginx/src/http/ngx_http_upstream.c-528-    u->output.filter_ctx = &u->writer;
./nginx/src/http/ngx_http_upstream.c-529-
./nginx/src/http/ngx_http_upstream.c:530:    u->writer.pool = r->pool;
./nginx/src/http/ngx_http_upstream.c-531-
./nginx/src/http/ngx_http_upstream.c-532-    if (r->upstream_states == NULL) {
./nginx/src/http/ngx_http_upstream.c-533-
./nginx/src/http/ngx_http_upstream.c:534:        r->upstream_states = ngx_array_create(r->pool, 1,
./nginx/src/http/ngx_http_upstream.c-535-                                            sizeof(ngx_http_upstream_state_t));
./nginx/src/http/ngx_http_upstream.c-536-        if (r->upstream_states == NULL) {
./nginx/src/http/ngx_http_upstream.c-537-            ngx_http_finalize_request(r, NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-538-            return;
./nginx/src/http/ngx_http_upstream.c-539-        }
./nginx/src/http/ngx_http_upstream.c-540-
./nginx/src/http/ngx_http_upstream.c-541-    } else {
./nginx/src/http/ngx_http_upstream.c-542-
./nginx/src/http/ngx_http_upstream.c-543-        u->state = ngx_array_push(r->upstream_states);
./nginx/src/http/ngx_http_upstream.c-544-        if (u->state == NULL) {
--
./nginx/src/http/ngx_http_upstream.c-843-    }
./nginx/src/http/ngx_http_upstream.c-844-
./nginx/src/http/ngx_http_upstream.c-845-    /* TODO: cache stack */
./nginx/src/http/ngx_http_upstream.c-846-
./nginx/src/http/ngx_http_upstream.c-847-    u->buffer = *c->buf;
./nginx/src/http/ngx_http_upstream.c-848-    u->buffer.pos += c->header_start;
./nginx/src/http/ngx_http_upstream.c-849-
./nginx/src/http/ngx_http_upstream.c-850-    ngx_memzero(&u->headers_in, sizeof(ngx_http_upstream_headers_in_t));
./nginx/src/http/ngx_http_upstream.c-851-    u->headers_in.content_length_n = -1;
./nginx/src/http/ngx_http_upstream.c-852-
./nginx/src/http/ngx_http_upstream.c:853:    if (ngx_list_init(&u->headers_in.headers, r->pool, 8,
./nginx/src/http/ngx_http_upstream.c-854-                      sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_upstream.c-855-        != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-856-    {
./nginx/src/http/ngx_http_upstream.c-857-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-858-    }
./nginx/src/http/ngx_http_upstream.c-859-
./nginx/src/http/ngx_http_upstream.c-860-    rc = u->process_header(r);
./nginx/src/http/ngx_http_upstream.c-861-
./nginx/src/http/ngx_http_upstream.c-862-    if (rc == NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-863-
--
./nginx/src/http/ngx_http_upstream.c-1157-
./nginx/src/http/ngx_http_upstream.c-1158-    tp = ngx_timeofday();
./nginx/src/http/ngx_http_upstream.c-1159-    u->state->response_sec = tp->sec;
./nginx/src/http/ngx_http_upstream.c-1160-    u->state->response_msec = tp->msec;
./nginx/src/http/ngx_http_upstream.c-1161-
./nginx/src/http/ngx_http_upstream.c-1162-/** add transparent by anhk. **/
./nginx/src/http/ngx_http_upstream.c-1163-    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_upstream.c-1164-    /*cscf = *(r->srv_conf);*/
./nginx/src/http/ngx_http_upstream.c-1165-    if (cscf->server_transparent == NGX_HTTP_SERVER_TRANSPARENT_ON) {
./nginx/src/http/ngx_http_upstream.c-1166-        addr_tmp = u->peer.local;
./nginx/src/http/ngx_http_upstream.c:1167:        u->peer.local = ngx_palloc(r->connection->pool, sizeof(ngx_addr_t));
./nginx/src/http/ngx_http_upstream.c-1168-        if (u->peer.local == NULL) {
./nginx/src/http/ngx_http_upstream.c-1169-            ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1170-                                            NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1171-            return;
./nginx/src/http/ngx_http_upstream.c-1172-        }
./nginx/src/http/ngx_http_upstream.c-1173-        /** bind client's address when connect to server **/
./nginx/src/http/ngx_http_upstream.c-1174-        u->peer.local->name = r->connection->addr_text;
./nginx/src/http/ngx_http_upstream.c-1175-        u->peer.local->sockaddr = r->connection->sockaddr;
./nginx/src/http/ngx_http_upstream.c-1176-        u->peer.local->socklen = r->connection->socklen;
./nginx/src/http/ngx_http_upstream.c-1177-    }
--
./nginx/src/http/ngx_http_upstream.c-1216-    }
./nginx/src/http/ngx_http_upstream.c-1217-#else
./nginx/src/http/ngx_http_upstream.c-1218-    rc = ngx_event_connect_peer(&u->peer);
./nginx/src/http/ngx_http_upstream.c-1219-#endif
./nginx/src/http/ngx_http_upstream.c-1220-
./nginx/src/http/ngx_http_upstream.c-1221-#if (NGX_HTTP_STICKY || NGX_HTTP_UPSTREAM_MULTIPLEX)
./nginx/src/http/ngx_http_upstream.c-1222-bad:
./nginx/src/http/ngx_http_upstream.c-1223-#endif
./nginx/src/http/ngx_http_upstream.c-1224-	/** add transparent by anhk **/
./nginx/src/http/ngx_http_upstream.c-1225-    if (cscf->server_transparent == NGX_HTTP_SERVER_TRANSPARENT_ON) {
./nginx/src/http/ngx_http_upstream.c:1226:        ngx_pfree(r->connection->pool, u->peer.local);
./nginx/src/http/ngx_http_upstream.c-1227-        u->peer.local = addr_tmp;
./nginx/src/http/ngx_http_upstream.c-1228-    }
./nginx/src/http/ngx_http_upstream.c-1229-
./nginx/src/http/ngx_http_upstream.c-1230-    ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_upstream.c-1231-                   "http upstream connect: %i", rc);
./nginx/src/http/ngx_http_upstream.c-1232-
./nginx/src/http/ngx_http_upstream.c-1233-    if (rc == NGX_ERROR) {
./nginx/src/http/ngx_http_upstream.c-1234-        ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1235-                                           NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1236-        return;
--
./nginx/src/http/ngx_http_upstream.c-1257-
./nginx/src/http/ngx_http_upstream.c-1258-    c->write->handler = ngx_http_upstream_handler;
./nginx/src/http/ngx_http_upstream.c-1259-    c->read->handler = ngx_http_upstream_handler;
./nginx/src/http/ngx_http_upstream.c-1260-
./nginx/src/http/ngx_http_upstream.c-1261-    u->write_event_handler = ngx_http_upstream_send_request_handler;
./nginx/src/http/ngx_http_upstream.c-1262-    u->read_event_handler = ngx_http_upstream_process_header;
./nginx/src/http/ngx_http_upstream.c-1263-
./nginx/src/http/ngx_http_upstream.c-1264-    c->sendfile &= r->connection->sendfile;
./nginx/src/http/ngx_http_upstream.c-1265-    u->output.sendfile = c->sendfile;
./nginx/src/http/ngx_http_upstream.c-1266-
./nginx/src/http/ngx_http_upstream.c:1267:    if (c->pool == NULL) {
./nginx/src/http/ngx_http_upstream.c-1268-
./nginx/src/http/ngx_http_upstream.c:1269:        /* we need separate pool here to be able to cache SSL connections */
./nginx/src/http/ngx_http_upstream.c-1270-
./nginx/src/http/ngx_http_upstream.c:1271:        c->pool = ngx_create_pool(128, r->connection->log);
./nginx/src/http/ngx_http_upstream.c:1272:        if (c->pool == NULL) {
./nginx/src/http/ngx_http_upstream.c-1273-            ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1274-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1275-            return;
./nginx/src/http/ngx_http_upstream.c-1276-        }
./nginx/src/http/ngx_http_upstream.c-1277-    }
./nginx/src/http/ngx_http_upstream.c-1278-
./nginx/src/http/ngx_http_upstream.c-1279-    c->log = r->connection->log;
./nginx/src/http/ngx_http_upstream.c:1280:    c->pool->log = c->log;
./nginx/src/http/ngx_http_upstream.c-1281-    c->read->log = c->log;
./nginx/src/http/ngx_http_upstream.c-1282-    c->write->log = c->log;
./nginx/src/http/ngx_http_upstream.c-1283-
./nginx/src/http/ngx_http_upstream.c-1284-    /* init or reinit the ngx_output_chain() and ngx_chain_writer() contexts */
./nginx/src/http/ngx_http_upstream.c-1285-
./nginx/src/http/ngx_http_upstream.c-1286-    u->writer.out = NULL;
./nginx/src/http/ngx_http_upstream.c-1287-    u->writer.last = &u->writer.out;
./nginx/src/http/ngx_http_upstream.c-1288-    u->writer.connection = c;
./nginx/src/http/ngx_http_upstream.c-1289-    u->writer.limit = 0;
./nginx/src/http/ngx_http_upstream.c-1290-
--
./nginx/src/http/ngx_http_upstream.c-1299-    if (r->request_body
./nginx/src/http/ngx_http_upstream.c-1300-        && r->request_body->buf
./nginx/src/http/ngx_http_upstream.c-1301-        && r->request_body->temp_file
./nginx/src/http/ngx_http_upstream.c-1302-        && r == r->main)
./nginx/src/http/ngx_http_upstream.c-1303-    {
./nginx/src/http/ngx_http_upstream.c-1304-        /*
./nginx/src/http/ngx_http_upstream.c-1305-         * the r->request_body->buf can be reused for one request only,
./nginx/src/http/ngx_http_upstream.c-1306-         * the subrequests should allocate their own temporary bufs
./nginx/src/http/ngx_http_upstream.c-1307-         */
./nginx/src/http/ngx_http_upstream.c-1308-
./nginx/src/http/ngx_http_upstream.c:1309:        u->output.free = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_upstream.c-1310-        if (u->output.free == NULL) {
./nginx/src/http/ngx_http_upstream.c-1311-            ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1312-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1313-            return;
./nginx/src/http/ngx_http_upstream.c-1314-        }
./nginx/src/http/ngx_http_upstream.c-1315-
./nginx/src/http/ngx_http_upstream.c-1316-        u->output.free->buf = r->request_body->buf;
./nginx/src/http/ngx_http_upstream.c-1317-        u->output.free->next = NULL;
./nginx/src/http/ngx_http_upstream.c-1318-        u->output.allocated = 1;
./nginx/src/http/ngx_http_upstream.c-1319-
--
./nginx/src/http/ngx_http_upstream.c-1425-
./nginx/src/http/ngx_http_upstream.c-1426-    if (u->reinit_request(r) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-1427-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-1428-    }
./nginx/src/http/ngx_http_upstream.c-1429-
./nginx/src/http/ngx_http_upstream.c-1430-    u->keepalive = 0;
./nginx/src/http/ngx_http_upstream.c-1431-
./nginx/src/http/ngx_http_upstream.c-1432-    ngx_memzero(&u->headers_in, sizeof(ngx_http_upstream_headers_in_t));
./nginx/src/http/ngx_http_upstream.c-1433-    u->headers_in.content_length_n = -1;
./nginx/src/http/ngx_http_upstream.c-1434-
./nginx/src/http/ngx_http_upstream.c:1435:    if (ngx_list_init(&u->headers_in.headers, r->pool, 8,
./nginx/src/http/ngx_http_upstream.c-1436-                      sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_upstream.c-1437-        != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-1438-    {
./nginx/src/http/ngx_http_upstream.c-1439-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-1440-    }
./nginx/src/http/ngx_http_upstream.c-1441-
./nginx/src/http/ngx_http_upstream.c-1442-    /* reinit the request chain */
./nginx/src/http/ngx_http_upstream.c-1443-
./nginx/src/http/ngx_http_upstream.c-1444-    for (cl = u->request_bufs; cl; cl = cl->next) {
./nginx/src/http/ngx_http_upstream.c-1445-        cl->buf->pos = cl->buf->start;
./nginx/src/http/ngx_http_upstream.c-1446-        cl->buf->file_pos = 0;
./nginx/src/http/ngx_http_upstream.c-1447-    }
./nginx/src/http/ngx_http_upstream.c-1448-
./nginx/src/http/ngx_http_upstream.c-1449-    /* reinit the subrequest's ngx_output_chain() context */
./nginx/src/http/ngx_http_upstream.c-1450-
./nginx/src/http/ngx_http_upstream.c-1451-    if (r->request_body && r->request_body->temp_file
./nginx/src/http/ngx_http_upstream.c-1452-        && r != r->main && u->output.buf)
./nginx/src/http/ngx_http_upstream.c-1453-    {
./nginx/src/http/ngx_http_upstream.c:1454:        u->output.free = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_upstream.c-1455-        if (u->output.free == NULL) {
./nginx/src/http/ngx_http_upstream.c-1456-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-1457-        }
./nginx/src/http/ngx_http_upstream.c-1458-
./nginx/src/http/ngx_http_upstream.c-1459-        u->output.free->buf = u->output.buf;
./nginx/src/http/ngx_http_upstream.c-1460-        u->output.free->next = NULL;
./nginx/src/http/ngx_http_upstream.c-1461-
./nginx/src/http/ngx_http_upstream.c-1462-        u->output.buf->pos = u->output.buf->start;
./nginx/src/http/ngx_http_upstream.c-1463-        u->output.buf->last = u->output.buf->start;
./nginx/src/http/ngx_http_upstream.c-1464-    }
--
./nginx/src/http/ngx_http_upstream.c-1646-#if (NGX_HTTP_STICKY)
./nginx/src/http/ngx_http_upstream.c-1647-        /* do not sticky backup server */
./nginx/src/http/ngx_http_upstream.c-1648-        if (!u->peer.backup && sscf->enable) {
./nginx/src/http/ngx_http_upstream.c-1649-            u->peer.delete_sticky(&u->peer, u->peer.sticky_data);
./nginx/src/http/ngx_http_upstream.c-1650-        }
./nginx/src/http/ngx_http_upstream.c-1651-#endif
./nginx/src/http/ngx_http_upstream.c-1652-        return;
./nginx/src/http/ngx_http_upstream.c-1653-    }
./nginx/src/http/ngx_http_upstream.c-1654-
./nginx/src/http/ngx_http_upstream.c-1655-    if (u->buffer.start == NULL) {
./nginx/src/http/ngx_http_upstream.c:1656:        u->buffer.start = ngx_palloc(r->pool, u->conf->buffer_size);
./nginx/src/http/ngx_http_upstream.c-1657-        if (u->buffer.start == NULL) {
./nginx/src/http/ngx_http_upstream.c-1658-            ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1659-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1660-            return;
./nginx/src/http/ngx_http_upstream.c-1661-        }
./nginx/src/http/ngx_http_upstream.c-1662-
./nginx/src/http/ngx_http_upstream.c-1663-        u->buffer.pos = u->buffer.start;
./nginx/src/http/ngx_http_upstream.c-1664-        u->buffer.last = u->buffer.start;
./nginx/src/http/ngx_http_upstream.c-1665-        u->buffer.end = u->buffer.start + u->conf->buffer_size;
./nginx/src/http/ngx_http_upstream.c-1666-        u->buffer.temporary = 1;
./nginx/src/http/ngx_http_upstream.c-1667-
./nginx/src/http/ngx_http_upstream.c-1668-        u->buffer.tag = u->output.tag;
./nginx/src/http/ngx_http_upstream.c-1669-
./nginx/src/http/ngx_http_upstream.c:1670:        if (ngx_list_init(&u->headers_in.headers, r->pool, 8,
./nginx/src/http/ngx_http_upstream.c-1671-                          sizeof(ngx_table_elt_t))
./nginx/src/http/ngx_http_upstream.c-1672-            != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-1673-        {
./nginx/src/http/ngx_http_upstream.c-1674-            ngx_http_upstream_finalize_request(r, u,
./nginx/src/http/ngx_http_upstream.c-1675-                                               NGX_HTTP_INTERNAL_SERVER_ERROR);
./nginx/src/http/ngx_http_upstream.c-1676-            return;
./nginx/src/http/ngx_http_upstream.c-1677-        }
./nginx/src/http/ngx_http_upstream.c-1678-
./nginx/src/http/ngx_http_upstream.c-1679-#if (NGX_HTTP_CACHE)
./nginx/src/http/ngx_http_upstream.c-1680-
--
./nginx/src/http/ngx_http_upstream.c-2219-
./nginx/src/http/ngx_http_upstream.c-2220-        } else {
./nginx/src/http/ngx_http_upstream.c-2221-            ngx_http_upstream_finalize_request(r, u, rc);
./nginx/src/http/ngx_http_upstream.c-2222-            return;
./nginx/src/http/ngx_http_upstream.c-2223-        }
./nginx/src/http/ngx_http_upstream.c-2224-    }
./nginx/src/http/ngx_http_upstream.c-2225-
./nginx/src/http/ngx_http_upstream.c-2226-    u->header_sent = 1;
./nginx/src/http/ngx_http_upstream.c-2227-
./nginx/src/http/ngx_http_upstream.c-2228-    if (r->request_body && r->request_body->temp_file) {
./nginx/src/http/ngx_http_upstream.c:2229:        ngx_pool_run_cleanup_file(r->pool, r->request_body->temp_file->file.fd);
./nginx/src/http/ngx_http_upstream.c-2230-        r->request_body->temp_file->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_upstream.c-2231-    }
./nginx/src/http/ngx_http_upstream.c-2232-
./nginx/src/http/ngx_http_upstream.c-2233-    clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_upstream.c-2234-
./nginx/src/http/ngx_http_upstream.c-2235-    if (!u->buffering) {
./nginx/src/http/ngx_http_upstream.c-2236-
./nginx/src/http/ngx_http_upstream.c-2237-        if (u->input_filter == NULL) {
./nginx/src/http/ngx_http_upstream.c-2238-            u->input_filter_init = ngx_http_upstream_non_buffered_filter_init;
./nginx/src/http/ngx_http_upstream.c-2239-            u->input_filter = ngx_http_upstream_non_buffered_filter;
--
./nginx/src/http/ngx_http_upstream.c-2297-        }
./nginx/src/http/ngx_http_upstream.c-2298-
./nginx/src/http/ngx_http_upstream.c-2299-        return;
./nginx/src/http/ngx_http_upstream.c-2300-    }
./nginx/src/http/ngx_http_upstream.c-2301-
./nginx/src/http/ngx_http_upstream.c-2302-    /* TODO: preallocate event_pipe bufs, look "Content-Length" */
./nginx/src/http/ngx_http_upstream.c-2303-
./nginx/src/http/ngx_http_upstream.c-2304-#if (NGX_HTTP_CACHE)
./nginx/src/http/ngx_http_upstream.c-2305-
./nginx/src/http/ngx_http_upstream.c-2306-    if (r->cache && r->cache->file.fd != NGX_INVALID_FILE) {
./nginx/src/http/ngx_http_upstream.c:2307:        ngx_pool_run_cleanup_file(r->pool, r->cache->file.fd);
./nginx/src/http/ngx_http_upstream.c-2308-        r->cache->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_upstream.c-2309-    }
./nginx/src/http/ngx_http_upstream.c-2310-
./nginx/src/http/ngx_http_upstream.c-2311-    switch (ngx_http_test_predicates(r, u->conf->no_cache)) {
./nginx/src/http/ngx_http_upstream.c-2312-
./nginx/src/http/ngx_http_upstream.c-2313-    case NGX_ERROR:
./nginx/src/http/ngx_http_upstream.c-2314-        ngx_http_upstream_finalize_request(r, u, 0);
./nginx/src/http/ngx_http_upstream.c-2315-        return;
./nginx/src/http/ngx_http_upstream.c-2316-
./nginx/src/http/ngx_http_upstream.c-2317-    case NGX_DECLINED:
--
./nginx/src/http/ngx_http_upstream.c-2382-
./nginx/src/http/ngx_http_upstream.c-2383-    p = u->pipe;
./nginx/src/http/ngx_http_upstream.c-2384-
./nginx/src/http/ngx_http_upstream.c-2385-    p->output_filter = (ngx_event_pipe_output_filter_pt) ngx_http_output_filter;
./nginx/src/http/ngx_http_upstream.c-2386-    p->output_ctx = r;
./nginx/src/http/ngx_http_upstream.c-2387-    p->tag = u->output.tag;
./nginx/src/http/ngx_http_upstream.c-2388-    p->bufs = u->conf->bufs;
./nginx/src/http/ngx_http_upstream.c-2389-    p->busy_size = u->conf->busy_buffers_size;
./nginx/src/http/ngx_http_upstream.c-2390-    p->upstream = u->peer.connection;
./nginx/src/http/ngx_http_upstream.c-2391-    p->downstream = c;
./nginx/src/http/ngx_http_upstream.c:2392:    p->pool = r->pool;
./nginx/src/http/ngx_http_upstream.c-2393-    p->log = c->log;
./nginx/src/http/ngx_http_upstream.c-2394-
./nginx/src/http/ngx_http_upstream.c-2395-    p->cacheable = u->cacheable || u->store;
./nginx/src/http/ngx_http_upstream.c-2396-
./nginx/src/http/ngx_http_upstream.c:2397:    p->temp_file = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/src/http/ngx_http_upstream.c-2398-    if (p->temp_file == NULL) {
./nginx/src/http/ngx_http_upstream.c-2399-        ngx_http_upstream_finalize_request(r, u, 0);
./nginx/src/http/ngx_http_upstream.c-2400-        return;
./nginx/src/http/ngx_http_upstream.c-2401-    }
./nginx/src/http/ngx_http_upstream.c-2402-
./nginx/src/http/ngx_http_upstream.c-2403-    p->temp_file->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_upstream.c-2404-    p->temp_file->file.log = c->log;
./nginx/src/http/ngx_http_upstream.c-2405-    p->temp_file->path = u->conf->temp_path;
./nginx/src/http/ngx_http_upstream.c:2406:    p->temp_file->pool = r->pool;
./nginx/src/http/ngx_http_upstream.c-2407-
./nginx/src/http/ngx_http_upstream.c-2408-    if (p->cacheable) {
./nginx/src/http/ngx_http_upstream.c-2409-        p->temp_file->persistent = 1;
./nginx/src/http/ngx_http_upstream.c-2410-
./nginx/src/http/ngx_http_upstream.c-2411-    } else {
./nginx/src/http/ngx_http_upstream.c-2412-        p->temp_file->log_level = NGX_LOG_WARN;
./nginx/src/http/ngx_http_upstream.c-2413-        p->temp_file->warn = "an upstream response is buffered "
./nginx/src/http/ngx_http_upstream.c-2414-                             "to a temporary file";
./nginx/src/http/ngx_http_upstream.c-2415-    }
./nginx/src/http/ngx_http_upstream.c-2416-
./nginx/src/http/ngx_http_upstream.c-2417-    p->max_temp_file_size = u->conf->max_temp_file_size;
./nginx/src/http/ngx_http_upstream.c-2418-    p->temp_file_write_size = u->conf->temp_file_write_size;
./nginx/src/http/ngx_http_upstream.c-2419-
./nginx/src/http/ngx_http_upstream.c:2420:    p->preread_bufs = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_upstream.c-2421-    if (p->preread_bufs == NULL) {
./nginx/src/http/ngx_http_upstream.c-2422-        ngx_http_upstream_finalize_request(r, u, 0);
./nginx/src/http/ngx_http_upstream.c-2423-        return;
./nginx/src/http/ngx_http_upstream.c-2424-    }
./nginx/src/http/ngx_http_upstream.c-2425-
./nginx/src/http/ngx_http_upstream.c-2426-    p->preread_bufs->buf = &u->buffer;
./nginx/src/http/ngx_http_upstream.c-2427-    p->preread_bufs->next = NULL;
./nginx/src/http/ngx_http_upstream.c-2428-    u->buffer.recycled = 1;
./nginx/src/http/ngx_http_upstream.c-2429-
./nginx/src/http/ngx_http_upstream.c-2430-    p->preread_size = u->buffer.last - u->buffer.pos;
./nginx/src/http/ngx_http_upstream.c-2431-
./nginx/src/http/ngx_http_upstream.c-2432-    if (u->cacheable) {
./nginx/src/http/ngx_http_upstream.c-2433-
./nginx/src/http/ngx_http_upstream.c:2434:        p->buf_to_file = ngx_calloc_buf(r->pool);
./nginx/src/http/ngx_http_upstream.c-2435-        if (p->buf_to_file == NULL) {
./nginx/src/http/ngx_http_upstream.c-2436-            ngx_http_upstream_finalize_request(r, u, 0);
./nginx/src/http/ngx_http_upstream.c-2437-            return;
./nginx/src/http/ngx_http_upstream.c-2438-        }
./nginx/src/http/ngx_http_upstream.c-2439-
./nginx/src/http/ngx_http_upstream.c-2440-        p->buf_to_file->start = u->buffer.start;
./nginx/src/http/ngx_http_upstream.c-2441-        p->buf_to_file->pos = u->buffer.start;
./nginx/src/http/ngx_http_upstream.c-2442-        p->buf_to_file->last = u->buffer.pos;
./nginx/src/http/ngx_http_upstream.c-2443-        p->buf_to_file->temporary = 1;
./nginx/src/http/ngx_http_upstream.c-2444-    }
--
./nginx/src/http/ngx_http_upstream.c-2567-        if (do_write) {
./nginx/src/http/ngx_http_upstream.c-2568-
./nginx/src/http/ngx_http_upstream.c-2569-            if (u->out_bufs || u->busy_bufs) {
./nginx/src/http/ngx_http_upstream.c-2570-                rc = ngx_http_output_filter(r, u->out_bufs);
./nginx/src/http/ngx_http_upstream.c-2571-
./nginx/src/http/ngx_http_upstream.c-2572-                if (rc == NGX_ERROR) {
./nginx/src/http/ngx_http_upstream.c-2573-                    ngx_http_upstream_finalize_request(r, u, 0);
./nginx/src/http/ngx_http_upstream.c-2574-                    return;
./nginx/src/http/ngx_http_upstream.c-2575-                }
./nginx/src/http/ngx_http_upstream.c-2576-
./nginx/src/http/ngx_http_upstream.c:2577:                ngx_chain_update_chains(r->pool, &u->free_bufs, &u->busy_bufs,
./nginx/src/http/ngx_http_upstream.c-2578-                                        &u->out_bufs, u->output.tag);
./nginx/src/http/ngx_http_upstream.c-2579-            }
./nginx/src/http/ngx_http_upstream.c-2580-
./nginx/src/http/ngx_http_upstream.c-2581-            if (u->busy_bufs == NULL) {
./nginx/src/http/ngx_http_upstream.c-2582-
./nginx/src/http/ngx_http_upstream.c-2583-                if (u->length == 0
./nginx/src/http/ngx_http_upstream.c-2584-                    || upstream->read->eof
./nginx/src/http/ngx_http_upstream.c-2585-                    || upstream->read->error)
./nginx/src/http/ngx_http_upstream.c-2586-                {
./nginx/src/http/ngx_http_upstream.c-2587-                    ngx_http_upstream_finalize_request(r, u, 0);
--
./nginx/src/http/ngx_http_upstream.c-2670-    ngx_buf_t            *b;
./nginx/src/http/ngx_http_upstream.c-2671-    ngx_chain_t          *cl, **ll;
./nginx/src/http/ngx_http_upstream.c-2672-    ngx_http_upstream_t  *u;
./nginx/src/http/ngx_http_upstream.c-2673-
./nginx/src/http/ngx_http_upstream.c-2674-    u = r->upstream;
./nginx/src/http/ngx_http_upstream.c-2675-
./nginx/src/http/ngx_http_upstream.c-2676-    for (cl = u->out_bufs, ll = &u->out_bufs; cl; cl = cl->next) {
./nginx/src/http/ngx_http_upstream.c-2677-        ll = &cl->next;
./nginx/src/http/ngx_http_upstream.c-2678-    }
./nginx/src/http/ngx_http_upstream.c-2679-
./nginx/src/http/ngx_http_upstream.c:2680:    cl = ngx_chain_get_free_buf(r->pool, &u->free_bufs);
./nginx/src/http/ngx_http_upstream.c-2681-    if (cl == NULL) {
./nginx/src/http/ngx_http_upstream.c-2682-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-2683-    }
./nginx/src/http/ngx_http_upstream.c-2684-
./nginx/src/http/ngx_http_upstream.c-2685-    *ll = cl;
./nginx/src/http/ngx_http_upstream.c-2686-
./nginx/src/http/ngx_http_upstream.c-2687-    cl->buf->flush = 1;
./nginx/src/http/ngx_http_upstream.c-2688-    cl->buf->memory = 1;
./nginx/src/http/ngx_http_upstream.c-2689-
./nginx/src/http/ngx_http_upstream.c-2690-    b = &u->buffer;
--
./nginx/src/http/ngx_http_upstream.c-2888-    ngx_str_t               path;
./nginx/src/http/ngx_http_upstream.c-2889-    ngx_temp_file_t        *tf;
./nginx/src/http/ngx_http_upstream.c-2890-    ngx_ext_rename_file_t   ext;
./nginx/src/http/ngx_http_upstream.c-2891-
./nginx/src/http/ngx_http_upstream.c-2892-    tf = u->pipe->temp_file;
./nginx/src/http/ngx_http_upstream.c-2893-
./nginx/src/http/ngx_http_upstream.c-2894-    if (tf->file.fd == NGX_INVALID_FILE) {
./nginx/src/http/ngx_http_upstream.c-2895-
./nginx/src/http/ngx_http_upstream.c-2896-        /* create file for empty 200 response */
./nginx/src/http/ngx_http_upstream.c-2897-
./nginx/src/http/ngx_http_upstream.c:2898:        tf = ngx_pcalloc(r->pool, sizeof(ngx_temp_file_t));
./nginx/src/http/ngx_http_upstream.c-2899-        if (tf == NULL) {
./nginx/src/http/ngx_http_upstream.c-2900-            return;
./nginx/src/http/ngx_http_upstream.c-2901-        }
./nginx/src/http/ngx_http_upstream.c-2902-
./nginx/src/http/ngx_http_upstream.c-2903-        tf->file.fd = NGX_INVALID_FILE;
./nginx/src/http/ngx_http_upstream.c-2904-        tf->file.log = r->connection->log;
./nginx/src/http/ngx_http_upstream.c-2905-        tf->path = u->conf->temp_path;
./nginx/src/http/ngx_http_upstream.c:2906:        tf->pool = r->pool;
./nginx/src/http/ngx_http_upstream.c-2907-        tf->persistent = 1;
./nginx/src/http/ngx_http_upstream.c-2908-
./nginx/src/http/ngx_http_upstream.c:2909:        if (ngx_create_temp_file(&tf->file, tf->path, tf->pool,
./nginx/src/http/ngx_http_upstream.c-2910-                                 tf->persistent, tf->clean, tf->access)
./nginx/src/http/ngx_http_upstream.c-2911-            != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-2912-        {
./nginx/src/http/ngx_http_upstream.c-2913-            return;
./nginx/src/http/ngx_http_upstream.c-2914-        }
./nginx/src/http/ngx_http_upstream.c-2915-
./nginx/src/http/ngx_http_upstream.c-2916-        u->pipe->temp_file = tf;
./nginx/src/http/ngx_http_upstream.c-2917-    }
./nginx/src/http/ngx_http_upstream.c-2918-
./nginx/src/http/ngx_http_upstream.c-2919-    ext.access = u->conf->store_access;
--
./nginx/src/http/ngx_http_upstream.c-3072-#if (NGX_HTTP_SSL)
./nginx/src/http/ngx_http_upstream.c-3073-
./nginx/src/http/ngx_http_upstream.c-3074-        if (u->peer.connection->ssl) {
./nginx/src/http/ngx_http_upstream.c-3075-            u->peer.connection->ssl->no_wait_shutdown = 1;
./nginx/src/http/ngx_http_upstream.c-3076-            u->peer.connection->ssl->no_send_shutdown = 1;
./nginx/src/http/ngx_http_upstream.c-3077-
./nginx/src/http/ngx_http_upstream.c-3078-            (void) ngx_ssl_shutdown(u->peer.connection);
./nginx/src/http/ngx_http_upstream.c-3079-        }
./nginx/src/http/ngx_http_upstream.c-3080-#endif
./nginx/src/http/ngx_http_upstream.c-3081-
./nginx/src/http/ngx_http_upstream.c:3082:        if (u->peer.connection->pool) {
./nginx/src/http/ngx_http_upstream.c:3083:            ngx_destroy_pool(u->peer.connection->pool);
./nginx/src/http/ngx_http_upstream.c-3084-        }
./nginx/src/http/ngx_http_upstream.c-3085-
./nginx/src/http/ngx_http_upstream.c-3086-        ngx_close_connection(u->peer.connection);
./nginx/src/http/ngx_http_upstream.c-3087-        u->peer.connection = NULL;
./nginx/src/http/ngx_http_upstream.c-3088-    }
./nginx/src/http/ngx_http_upstream.c-3089-
./nginx/src/http/ngx_http_upstream.c-3090-#if 0
./nginx/src/http/ngx_http_upstream.c-3091-    if (u->conf->busy_lock && !u->busy_locked) {
./nginx/src/http/ngx_http_upstream.c-3092-        ngx_http_upstream_busy_lock(p);
./nginx/src/http/ngx_http_upstream.c-3093-        return;
--
./nginx/src/http/ngx_http_upstream.c-3178-            u->peer.connection->ssl->no_wait_shutdown = 1;
./nginx/src/http/ngx_http_upstream.c-3179-
./nginx/src/http/ngx_http_upstream.c-3180-            (void) ngx_ssl_shutdown(u->peer.connection);
./nginx/src/http/ngx_http_upstream.c-3181-        }
./nginx/src/http/ngx_http_upstream.c-3182-#endif
./nginx/src/http/ngx_http_upstream.c-3183-
./nginx/src/http/ngx_http_upstream.c-3184-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_upstream.c-3185-                       "close http upstream connection: %d",
./nginx/src/http/ngx_http_upstream.c-3186-                       u->peer.connection->fd);
./nginx/src/http/ngx_http_upstream.c-3187-
./nginx/src/http/ngx_http_upstream.c:3188:        if (u->peer.connection->pool) {
./nginx/src/http/ngx_http_upstream.c:3189:            ngx_destroy_pool(u->peer.connection->pool);
./nginx/src/http/ngx_http_upstream.c-3190-        }
./nginx/src/http/ngx_http_upstream.c-3191-
./nginx/src/http/ngx_http_upstream.c-3192-        ngx_close_connection(u->peer.connection);
./nginx/src/http/ngx_http_upstream.c-3193-    }
./nginx/src/http/ngx_http_upstream.c-3194-
./nginx/src/http/ngx_http_upstream.c-3195-    u->peer.connection = NULL;
./nginx/src/http/ngx_http_upstream.c-3196-
./nginx/src/http/ngx_http_upstream.c-3197-    if (u->pipe && u->pipe->temp_file) {
./nginx/src/http/ngx_http_upstream.c-3198-        ngx_log_debug1(NGX_LOG_DEBUG_HTTP, r->connection->log, 0,
./nginx/src/http/ngx_http_upstream.c-3199-                       "http upstream temp fd: %d",
--
./nginx/src/http/ngx_http_upstream.c-3324-    ngx_table_elt_t *h, ngx_uint_t offset)
./nginx/src/http/ngx_http_upstream.c-3325-{
./nginx/src/http/ngx_http_upstream.c-3326-    ngx_array_t          *pa;
./nginx/src/http/ngx_http_upstream.c-3327-    ngx_table_elt_t     **ph;
./nginx/src/http/ngx_http_upstream.c-3328-    ngx_http_upstream_t  *u;
./nginx/src/http/ngx_http_upstream.c-3329-
./nginx/src/http/ngx_http_upstream.c-3330-    u = r->upstream;
./nginx/src/http/ngx_http_upstream.c-3331-    pa = &u->headers_in.cache_control;
./nginx/src/http/ngx_http_upstream.c-3332-
./nginx/src/http/ngx_http_upstream.c-3333-    if (pa->elts == NULL) {
./nginx/src/http/ngx_http_upstream.c:3334:       if (ngx_array_init(pa, r->pool, 2, sizeof(ngx_table_elt_t *)) != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-3335-       {
./nginx/src/http/ngx_http_upstream.c-3336-           return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-3337-       }
./nginx/src/http/ngx_http_upstream.c-3338-    }
./nginx/src/http/ngx_http_upstream.c-3339-
./nginx/src/http/ngx_http_upstream.c-3340-    ph = ngx_array_push(pa);
./nginx/src/http/ngx_http_upstream.c-3341-    if (ph == NULL) {
./nginx/src/http/ngx_http_upstream.c-3342-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-3343-    }
./nginx/src/http/ngx_http_upstream.c-3344-
--
./nginx/src/http/ngx_http_upstream.c-3640-static ngx_int_t
./nginx/src/http/ngx_http_upstream.c-3641-ngx_http_upstream_copy_multi_header_lines(ngx_http_request_t *r,
./nginx/src/http/ngx_http_upstream.c-3642-    ngx_table_elt_t *h, ngx_uint_t offset)
./nginx/src/http/ngx_http_upstream.c-3643-{
./nginx/src/http/ngx_http_upstream.c-3644-    ngx_array_t      *pa;
./nginx/src/http/ngx_http_upstream.c-3645-    ngx_table_elt_t  *ho, **ph;
./nginx/src/http/ngx_http_upstream.c-3646-
./nginx/src/http/ngx_http_upstream.c-3647-    pa = (ngx_array_t *) ((char *) &r->headers_out + offset);
./nginx/src/http/ngx_http_upstream.c-3648-
./nginx/src/http/ngx_http_upstream.c-3649-    if (pa->elts == NULL) {
./nginx/src/http/ngx_http_upstream.c:3650:        if (ngx_array_init(pa, r->pool, 2, sizeof(ngx_table_elt_t *)) != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-3651-        {
./nginx/src/http/ngx_http_upstream.c-3652-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-3653-        }
./nginx/src/http/ngx_http_upstream.c-3654-    }
./nginx/src/http/ngx_http_upstream.c-3655-
./nginx/src/http/ngx_http_upstream.c-3656-    ph = ngx_array_push(pa);
./nginx/src/http/ngx_http_upstream.c-3657-    if (ph == NULL) {
./nginx/src/http/ngx_http_upstream.c-3658-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-3659-    }
./nginx/src/http/ngx_http_upstream.c-3660-
--
./nginx/src/http/ngx_http_upstream.c-3969-
./nginx/src/http/ngx_http_upstream.c-3970-    for (i = 0; i < r->upstream_states->nelts; i++) {
./nginx/src/http/ngx_http_upstream.c-3971-        if (state[i].peer) {
./nginx/src/http/ngx_http_upstream.c-3972-            len += state[i].peer->len + 2;
./nginx/src/http/ngx_http_upstream.c-3973-
./nginx/src/http/ngx_http_upstream.c-3974-        } else {
./nginx/src/http/ngx_http_upstream.c-3975-            len += 3;
./nginx/src/http/ngx_http_upstream.c-3976-        }
./nginx/src/http/ngx_http_upstream.c-3977-    }
./nginx/src/http/ngx_http_upstream.c-3978-
./nginx/src/http/ngx_http_upstream.c:3979:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_upstream.c-3980-    if (p == NULL) {
./nginx/src/http/ngx_http_upstream.c-3981-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-3982-    }
./nginx/src/http/ngx_http_upstream.c-3983-
./nginx/src/http/ngx_http_upstream.c-3984-    v->data = p;
./nginx/src/http/ngx_http_upstream.c-3985-
./nginx/src/http/ngx_http_upstream.c-3986-    i = 0;
./nginx/src/http/ngx_http_upstream.c-3987-
./nginx/src/http/ngx_http_upstream.c-3988-    for ( ;; ) {
./nginx/src/http/ngx_http_upstream.c-3989-        if (state[i].peer) {
--
./nginx/src/http/ngx_http_upstream.c-4030-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_upstream.c-4031-    v->not_found = 0;
./nginx/src/http/ngx_http_upstream.c-4032-
./nginx/src/http/ngx_http_upstream.c-4033-    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
./nginx/src/http/ngx_http_upstream.c-4034-        v->not_found = 1;
./nginx/src/http/ngx_http_upstream.c-4035-        return NGX_OK;
./nginx/src/http/ngx_http_upstream.c-4036-    }
./nginx/src/http/ngx_http_upstream.c-4037-
./nginx/src/http/ngx_http_upstream.c-4038-    len = r->upstream_states->nelts * (3 + 2);
./nginx/src/http/ngx_http_upstream.c-4039-
./nginx/src/http/ngx_http_upstream.c:4040:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_upstream.c-4041-    if (p == NULL) {
./nginx/src/http/ngx_http_upstream.c-4042-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-4043-    }
./nginx/src/http/ngx_http_upstream.c-4044-
./nginx/src/http/ngx_http_upstream.c-4045-    v->data = p;
./nginx/src/http/ngx_http_upstream.c-4046-
./nginx/src/http/ngx_http_upstream.c-4047-    i = 0;
./nginx/src/http/ngx_http_upstream.c-4048-    state = r->upstream_states->elts;
./nginx/src/http/ngx_http_upstream.c-4049-
./nginx/src/http/ngx_http_upstream.c-4050-    for ( ;; ) {
--
./nginx/src/http/ngx_http_upstream.c-4096-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_upstream.c-4097-    v->not_found = 0;
./nginx/src/http/ngx_http_upstream.c-4098-
./nginx/src/http/ngx_http_upstream.c-4099-    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
./nginx/src/http/ngx_http_upstream.c-4100-        v->not_found = 1;
./nginx/src/http/ngx_http_upstream.c-4101-        return NGX_OK;
./nginx/src/http/ngx_http_upstream.c-4102-    }
./nginx/src/http/ngx_http_upstream.c-4103-
./nginx/src/http/ngx_http_upstream.c-4104-    len = r->upstream_states->nelts * (NGX_TIME_T_LEN + 4 + 2);
./nginx/src/http/ngx_http_upstream.c-4105-
./nginx/src/http/ngx_http_upstream.c:4106:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_upstream.c-4107-    if (p == NULL) {
./nginx/src/http/ngx_http_upstream.c-4108-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-4109-    }
./nginx/src/http/ngx_http_upstream.c-4110-
./nginx/src/http/ngx_http_upstream.c-4111-    v->data = p;
./nginx/src/http/ngx_http_upstream.c-4112-
./nginx/src/http/ngx_http_upstream.c-4113-    i = 0;
./nginx/src/http/ngx_http_upstream.c-4114-    state = r->upstream_states->elts;
./nginx/src/http/ngx_http_upstream.c-4115-
./nginx/src/http/ngx_http_upstream.c-4116-    for ( ;; ) {
--
./nginx/src/http/ngx_http_upstream.c-4164-    v->no_cacheable = 0;
./nginx/src/http/ngx_http_upstream.c-4165-    v->not_found = 0;
./nginx/src/http/ngx_http_upstream.c-4166-
./nginx/src/http/ngx_http_upstream.c-4167-    if (r->upstream_states == NULL || r->upstream_states->nelts == 0) {
./nginx/src/http/ngx_http_upstream.c-4168-        v->not_found = 1;
./nginx/src/http/ngx_http_upstream.c-4169-        return NGX_OK;
./nginx/src/http/ngx_http_upstream.c-4170-    }
./nginx/src/http/ngx_http_upstream.c-4171-
./nginx/src/http/ngx_http_upstream.c-4172-    len = r->upstream_states->nelts * (NGX_OFF_T_LEN + 2);
./nginx/src/http/ngx_http_upstream.c-4173-
./nginx/src/http/ngx_http_upstream.c:4174:    p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_upstream.c-4175-    if (p == NULL) {
./nginx/src/http/ngx_http_upstream.c-4176-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream.c-4177-    }
./nginx/src/http/ngx_http_upstream.c-4178-
./nginx/src/http/ngx_http_upstream.c-4179-    v->data = p;
./nginx/src/http/ngx_http_upstream.c-4180-
./nginx/src/http/ngx_http_upstream.c-4181-    i = 0;
./nginx/src/http/ngx_http_upstream.c-4182-    state = r->upstream_states->elts;
./nginx/src/http/ngx_http_upstream.c-4183-
./nginx/src/http/ngx_http_upstream.c-4184-    for ( ;; ) {
--
./nginx/src/http/ngx_http_upstream.c-4280-                                         |NGX_HTTP_UPSTREAM_BACKUP
./nginx/src/http/ngx_http_upstream.c-4281-                                         |NGX_HTTP_UPSTREAM_MAX_CONN
./nginx/src/http/ngx_http_upstream.c-4282-                                         |NGX_HTTP_UPSTREAM_MAX_REQ
./nginx/src/http/ngx_http_upstream.c-4283-                                         |NGX_HTTP_UPSTREAM_BANDWIDTH);
./nginx/src/http/ngx_http_upstream.c-4284-
./nginx/src/http/ngx_http_upstream.c-4285-    if (uscf == NULL) {
./nginx/src/http/ngx_http_upstream.c-4286-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4287-    }
./nginx/src/http/ngx_http_upstream.c-4288-
./nginx/src/http/ngx_http_upstream.c-4289-
./nginx/src/http/ngx_http_upstream.c:4290:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/ngx_http_upstream.c-4291-    if (ctx == NULL) {
./nginx/src/http/ngx_http_upstream.c-4292-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4293-    }
./nginx/src/http/ngx_http_upstream.c-4294-
./nginx/src/http/ngx_http_upstream.c-4295-    http_ctx = cf->ctx;
./nginx/src/http/ngx_http_upstream.c-4296-    ctx->main_conf = http_ctx->main_conf;
./nginx/src/http/ngx_http_upstream.c-4297-
./nginx/src/http/ngx_http_upstream.c-4298-    /* the upstream{}'s srv_conf */
./nginx/src/http/ngx_http_upstream.c-4299-
./nginx/src/http/ngx_http_upstream.c:4300:    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_upstream.c-4301-    if (ctx->srv_conf == NULL) {
./nginx/src/http/ngx_http_upstream.c-4302-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4303-    }
./nginx/src/http/ngx_http_upstream.c-4304-
./nginx/src/http/ngx_http_upstream.c-4305-    ctx->srv_conf[ngx_http_upstream_module.ctx_index] = uscf;
./nginx/src/http/ngx_http_upstream.c-4306-
./nginx/src/http/ngx_http_upstream.c-4307-    uscf->srv_conf = ctx->srv_conf;
./nginx/src/http/ngx_http_upstream.c-4308-
./nginx/src/http/ngx_http_upstream.c-4309-
./nginx/src/http/ngx_http_upstream.c-4310-    /* the upstream{}'s loc_conf */
./nginx/src/http/ngx_http_upstream.c-4311-
./nginx/src/http/ngx_http_upstream.c:4312:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http_upstream.c-4313-    if (ctx->loc_conf == NULL) {
./nginx/src/http/ngx_http_upstream.c-4314-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4315-    }
./nginx/src/http/ngx_http_upstream.c-4316-
./nginx/src/http/ngx_http_upstream.c-4317-    for (m = 0; ngx_modules[m]; m++) {
./nginx/src/http/ngx_http_upstream.c-4318-        if (ngx_modules[m]->type != NGX_HTTP_MODULE) {
./nginx/src/http/ngx_http_upstream.c-4319-            continue;
./nginx/src/http/ngx_http_upstream.c-4320-        }
./nginx/src/http/ngx_http_upstream.c-4321-
./nginx/src/http/ngx_http_upstream.c-4322-        module = ngx_modules[m]->ctx;
--
./nginx/src/http/ngx_http_upstream.c-4374-    ngx_str_t                   *value, s;
./nginx/src/http/ngx_http_upstream.c-4375-    ngx_url_t                    u;
./nginx/src/http/ngx_http_upstream.c-4376-    ngx_int_t                    weight, max_fails;
./nginx/src/http/ngx_http_upstream.c-4377-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/src/http/ngx_http_upstream.c-4378-    ngx_int_t                    maxconn, maxreq;
./nginx/src/http/ngx_http_upstream.c-4379-#endif
./nginx/src/http/ngx_http_upstream.c-4380-    ngx_uint_t                   i;
./nginx/src/http/ngx_http_upstream.c-4381-    ngx_http_upstream_server_t  *us;
./nginx/src/http/ngx_http_upstream.c-4382-
./nginx/src/http/ngx_http_upstream.c-4383-    if (uscf->servers == NULL) {
./nginx/src/http/ngx_http_upstream.c:4384:        uscf->servers = ngx_array_create(cf->pool, 4,
./nginx/src/http/ngx_http_upstream.c-4385-                                         sizeof(ngx_http_upstream_server_t));
./nginx/src/http/ngx_http_upstream.c-4386-        if (uscf->servers == NULL) {
./nginx/src/http/ngx_http_upstream.c-4387-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4388-        }
./nginx/src/http/ngx_http_upstream.c-4389-    }
./nginx/src/http/ngx_http_upstream.c-4390-
./nginx/src/http/ngx_http_upstream.c-4391-    us = ngx_array_push(uscf->servers);
./nginx/src/http/ngx_http_upstream.c-4392-    if (us == NULL) {
./nginx/src/http/ngx_http_upstream.c-4393-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4394-    }
./nginx/src/http/ngx_http_upstream.c-4395-
./nginx/src/http/ngx_http_upstream.c-4396-    ngx_memzero(us, sizeof(ngx_http_upstream_server_t));
./nginx/src/http/ngx_http_upstream.c-4397-
./nginx/src/http/ngx_http_upstream.c-4398-    value = cf->args->elts;
./nginx/src/http/ngx_http_upstream.c-4399-
./nginx/src/http/ngx_http_upstream.c-4400-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/http/ngx_http_upstream.c-4401-
./nginx/src/http/ngx_http_upstream.c-4402-    u.url = value[1];
./nginx/src/http/ngx_http_upstream.c-4403-    u.default_port = 80;
./nginx/src/http/ngx_http_upstream.c-4404-
./nginx/src/http/ngx_http_upstream.c:4405:    if (ngx_parse_url(cf->pool, &u) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-4406-        if (u.err) {
./nginx/src/http/ngx_http_upstream.c-4407-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_upstream.c-4408-                               "%s in upstream \"%V\"", u.err, &u.url);
./nginx/src/http/ngx_http_upstream.c-4409-        }
./nginx/src/http/ngx_http_upstream.c-4410-
./nginx/src/http/ngx_http_upstream.c-4411-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4412-    }
./nginx/src/http/ngx_http_upstream.c-4413-
./nginx/src/http/ngx_http_upstream.c-4414-    weight = 1;
./nginx/src/http/ngx_http_upstream.c-4415-    max_fails = 1;
--
./nginx/src/http/ngx_http_upstream.c-4546-}
./nginx/src/http/ngx_http_upstream.c-4547-
./nginx/src/http/ngx_http_upstream.c-4548-ngx_http_upstream_srv_conf_t *
./nginx/src/http/ngx_http_upstream.c-4549-ngx_http_upstream_lookup(ngx_http_request_t *r, ngx_url_t *u)
./nginx/src/http/ngx_http_upstream.c-4550-{
./nginx/src/http/ngx_http_upstream.c-4551-    ngx_uint_t                      i;
./nginx/src/http/ngx_http_upstream.c-4552-    ngx_http_upstream_srv_conf_t   **uscfp;
./nginx/src/http/ngx_http_upstream.c-4553-    ngx_http_upstream_main_conf_t  *umcf;
./nginx/src/http/ngx_http_upstream.c-4554-    ngx_http_core_srv_conf_t       *cscf;
./nginx/src/http/ngx_http_upstream.c-4555-
./nginx/src/http/ngx_http_upstream.c:4556:    /* max supported vserver+pool name length is less than 1024 */
./nginx/src/http/ngx_http_upstream.c-4557-    u_char                          upstream_name[1024];
./nginx/src/http/ngx_http_upstream.c-4558-    ngx_int_t                       len = 0;
./nginx/src/http/ngx_http_upstream.c-4559-
./nginx/src/http/ngx_http_upstream.c:4560:    if (ngx_parse_url(r->pool, u) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-4561-        if (u->err) {
./nginx/src/http/ngx_http_upstream.c-4562-            return NULL;
./nginx/src/http/ngx_http_upstream.c-4563-        }
./nginx/src/http/ngx_http_upstream.c-4564-    }
./nginx/src/http/ngx_http_upstream.c-4565-
./nginx/src/http/ngx_http_upstream.c-4566-    ngx_memset(upstream_name, 0, 1024);
./nginx/src/http/ngx_http_upstream.c-4567-    cscf = ngx_http_get_module_srv_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_upstream.c-4568-    ngx_snprintf(upstream_name, 1023, "%V-", &cscf->server_name);
./nginx/src/http/ngx_http_upstream.c-4569-    len = ngx_strlen(upstream_name);
./nginx/src/http/ngx_http_upstream.c-4570-
--
./nginx/src/http/ngx_http_upstream.c-4602-ngx_http_upstream_srv_conf_t *
./nginx/src/http/ngx_http_upstream.c-4603-ngx_http_upstream_add(ngx_conf_t *cf, ngx_url_t *u, ngx_uint_t flags)
./nginx/src/http/ngx_http_upstream.c-4604-{
./nginx/src/http/ngx_http_upstream.c-4605-    ngx_uint_t                      i;
./nginx/src/http/ngx_http_upstream.c-4606-    ngx_http_upstream_server_t     *us;
./nginx/src/http/ngx_http_upstream.c-4607-    ngx_http_upstream_srv_conf_t   *uscf, **uscfp;
./nginx/src/http/ngx_http_upstream.c-4608-    ngx_http_upstream_main_conf_t  *umcf;
./nginx/src/http/ngx_http_upstream.c-4609-
./nginx/src/http/ngx_http_upstream.c-4610-    if (!(flags & NGX_HTTP_UPSTREAM_CREATE)) {
./nginx/src/http/ngx_http_upstream.c-4611-
./nginx/src/http/ngx_http_upstream.c:4612:        if (ngx_parse_url(cf->pool, u) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-4613-            if (u->err) {
./nginx/src/http/ngx_http_upstream.c-4614-                ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_upstream.c-4615-                                   "%s in upstream \"%V\"", u->err, &u->url);
./nginx/src/http/ngx_http_upstream.c-4616-            }
./nginx/src/http/ngx_http_upstream.c-4617-
./nginx/src/http/ngx_http_upstream.c-4618-            return NULL;
./nginx/src/http/ngx_http_upstream.c-4619-        }
./nginx/src/http/ngx_http_upstream.c-4620-    }
./nginx/src/http/ngx_http_upstream.c-4621-
./nginx/src/http/ngx_http_upstream.c-4622-    umcf = ngx_http_conf_get_module_main_conf(cf, ngx_http_upstream_module);
--
./nginx/src/http/ngx_http_upstream.c-4665-            continue;
./nginx/src/http/ngx_http_upstream.c-4666-        }
./nginx/src/http/ngx_http_upstream.c-4667-
./nginx/src/http/ngx_http_upstream.c-4668-        if (flags & NGX_HTTP_UPSTREAM_CREATE) {
./nginx/src/http/ngx_http_upstream.c-4669-            uscfp[i]->flags = flags;
./nginx/src/http/ngx_http_upstream.c-4670-        }
./nginx/src/http/ngx_http_upstream.c-4671-
./nginx/src/http/ngx_http_upstream.c-4672-        return uscfp[i];
./nginx/src/http/ngx_http_upstream.c-4673-    }
./nginx/src/http/ngx_http_upstream.c-4674-
./nginx/src/http/ngx_http_upstream.c:4675:    uscf = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_srv_conf_t));
./nginx/src/http/ngx_http_upstream.c-4676-    if (uscf == NULL) {
./nginx/src/http/ngx_http_upstream.c-4677-        return NULL;
./nginx/src/http/ngx_http_upstream.c-4678-    }
./nginx/src/http/ngx_http_upstream.c-4679-
./nginx/src/http/ngx_http_upstream.c-4680-    uscf->flags = flags;
./nginx/src/http/ngx_http_upstream.c-4681-    uscf->host = u->host;
./nginx/src/http/ngx_http_upstream.c-4682-    uscf->file_name = cf->conf_file->file.name.data;
./nginx/src/http/ngx_http_upstream.c-4683-    uscf->line = cf->conf_file->line;
./nginx/src/http/ngx_http_upstream.c-4684-    uscf->port = u->port;
./nginx/src/http/ngx_http_upstream.c-4685-    uscf->default_port = u->default_port;
./nginx/src/http/ngx_http_upstream.c-4686-
./nginx/src/http/ngx_http_upstream.c-4687-    if (u->naddrs == 1) {
./nginx/src/http/ngx_http_upstream.c:4688:        uscf->servers = ngx_array_create(cf->pool, 1,
./nginx/src/http/ngx_http_upstream.c-4689-                                         sizeof(ngx_http_upstream_server_t));
./nginx/src/http/ngx_http_upstream.c-4690-        if (uscf->servers == NULL) {
./nginx/src/http/ngx_http_upstream.c-4691-            return NULL;
./nginx/src/http/ngx_http_upstream.c-4692-        }
./nginx/src/http/ngx_http_upstream.c-4693-
./nginx/src/http/ngx_http_upstream.c-4694-        us = ngx_array_push(uscf->servers);
./nginx/src/http/ngx_http_upstream.c-4695-        if (us == NULL) {
./nginx/src/http/ngx_http_upstream.c-4696-            return NULL;
./nginx/src/http/ngx_http_upstream.c-4697-        }
./nginx/src/http/ngx_http_upstream.c-4698-
--
./nginx/src/http/ngx_http_upstream.c-4718-    void *conf)
./nginx/src/http/ngx_http_upstream.c-4719-{
./nginx/src/http/ngx_http_upstream.c-4720-    char  *p = conf;
./nginx/src/http/ngx_http_upstream.c-4721-
./nginx/src/http/ngx_http_upstream.c-4722-    ngx_int_t     rc;
./nginx/src/http/ngx_http_upstream.c-4723-    ngx_str_t    *value;
./nginx/src/http/ngx_http_upstream.c-4724-    ngx_addr_t  **paddr;
./nginx/src/http/ngx_http_upstream.c-4725-
./nginx/src/http/ngx_http_upstream.c-4726-    paddr = (ngx_addr_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_upstream.c-4727-
./nginx/src/http/ngx_http_upstream.c:4728:    *paddr = ngx_palloc(cf->pool, sizeof(ngx_addr_t));
./nginx/src/http/ngx_http_upstream.c-4729-    if (*paddr == NULL) {
./nginx/src/http/ngx_http_upstream.c-4730-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4731-    }
./nginx/src/http/ngx_http_upstream.c-4732-
./nginx/src/http/ngx_http_upstream.c-4733-    value = cf->args->elts;
./nginx/src/http/ngx_http_upstream.c-4734-
./nginx/src/http/ngx_http_upstream.c:4735:    rc = ngx_parse_addr(cf->pool, *paddr, value[1].data, value[1].len);
./nginx/src/http/ngx_http_upstream.c-4736-
./nginx/src/http/ngx_http_upstream.c-4737-    switch (rc) {
./nginx/src/http/ngx_http_upstream.c-4738-    case NGX_OK:
./nginx/src/http/ngx_http_upstream.c-4739-        (*paddr)->name = value[1];
./nginx/src/http/ngx_http_upstream.c-4740-        return NGX_CONF_OK;
./nginx/src/http/ngx_http_upstream.c-4741-
./nginx/src/http/ngx_http_upstream.c-4742-    case NGX_DECLINED:
./nginx/src/http/ngx_http_upstream.c-4743-        ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/http/ngx_http_upstream.c-4744-                           "invalid address \"%V\"", &value[1]);
./nginx/src/http/ngx_http_upstream.c-4745-        /* fall through */
--
./nginx/src/http/ngx_http_upstream.c-4756-{
./nginx/src/http/ngx_http_upstream.c-4757-    char  *p = conf;
./nginx/src/http/ngx_http_upstream.c-4758-
./nginx/src/http/ngx_http_upstream.c-4759-    ngx_str_t                   *value;
./nginx/src/http/ngx_http_upstream.c-4760-    ngx_array_t                **a;
./nginx/src/http/ngx_http_upstream.c-4761-    ngx_http_upstream_param_t   *param;
./nginx/src/http/ngx_http_upstream.c-4762-
./nginx/src/http/ngx_http_upstream.c-4763-    a = (ngx_array_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_upstream.c-4764-
./nginx/src/http/ngx_http_upstream.c-4765-    if (*a == NULL) {
./nginx/src/http/ngx_http_upstream.c:4766:        *a = ngx_array_create(cf->pool, 4, sizeof(ngx_http_upstream_param_t));
./nginx/src/http/ngx_http_upstream.c-4767-        if (*a == NULL) {
./nginx/src/http/ngx_http_upstream.c-4768-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4769-        }
./nginx/src/http/ngx_http_upstream.c-4770-    }
./nginx/src/http/ngx_http_upstream.c-4771-
./nginx/src/http/ngx_http_upstream.c-4772-    param = ngx_array_push(*a);
./nginx/src/http/ngx_http_upstream.c-4773-    if (param == NULL) {
./nginx/src/http/ngx_http_upstream.c-4774-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4775-    }
./nginx/src/http/ngx_http_upstream.c-4776-
--
./nginx/src/http/ngx_http_upstream.c-4892-                if (ngx_strcasecmp(h[i].data, hk[j].key.data) == 0) {
./nginx/src/http/ngx_http_upstream.c-4893-                    hk[j].key.data = NULL;
./nginx/src/http/ngx_http_upstream.c-4894-                    break;
./nginx/src/http/ngx_http_upstream.c-4895-                }
./nginx/src/http/ngx_http_upstream.c-4896-            }
./nginx/src/http/ngx_http_upstream.c-4897-        }
./nginx/src/http/ngx_http_upstream.c-4898-    }
./nginx/src/http/ngx_http_upstream.c-4899-
./nginx/src/http/ngx_http_upstream.c-4900-    hash->hash = &conf->hide_headers_hash;
./nginx/src/http/ngx_http_upstream.c-4901-    hash->key = ngx_hash_key_lc;
./nginx/src/http/ngx_http_upstream.c:4902:    hash->pool = cf->pool;
./nginx/src/http/ngx_http_upstream.c-4903-    hash->temp_pool = NULL;
./nginx/src/http/ngx_http_upstream.c-4904-
./nginx/src/http/ngx_http_upstream.c-4905-    return ngx_hash_init(hash, hide_headers.elts, hide_headers.nelts);
./nginx/src/http/ngx_http_upstream.c-4906-}
./nginx/src/http/ngx_http_upstream.c-4907-
./nginx/src/http/ngx_http_upstream.c-4908-
./nginx/src/http/ngx_http_upstream.c-4909-static void *
./nginx/src/http/ngx_http_upstream.c-4910-ngx_http_upstream_create_main_conf(ngx_conf_t *cf)
./nginx/src/http/ngx_http_upstream.c-4911-{
./nginx/src/http/ngx_http_upstream.c-4912-    ngx_http_upstream_main_conf_t  *umcf;
./nginx/src/http/ngx_http_upstream.c-4913-
./nginx/src/http/ngx_http_upstream.c:4914:    umcf = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_main_conf_t));
./nginx/src/http/ngx_http_upstream.c-4915-    if (umcf == NULL) {
./nginx/src/http/ngx_http_upstream.c-4916-        return NULL;
./nginx/src/http/ngx_http_upstream.c-4917-    }
./nginx/src/http/ngx_http_upstream.c-4918-
./nginx/src/http/ngx_http_upstream.c:4919:    if (ngx_array_init(&umcf->upstreams, cf->pool, 4,
./nginx/src/http/ngx_http_upstream.c-4920-                       sizeof(ngx_http_upstream_srv_conf_t *))
./nginx/src/http/ngx_http_upstream.c-4921-        != NGX_OK)
./nginx/src/http/ngx_http_upstream.c-4922-    {
./nginx/src/http/ngx_http_upstream.c-4923-        return NULL;
./nginx/src/http/ngx_http_upstream.c-4924-    }
./nginx/src/http/ngx_http_upstream.c-4925-
./nginx/src/http/ngx_http_upstream.c-4926-    return umcf;
./nginx/src/http/ngx_http_upstream.c-4927-}
./nginx/src/http/ngx_http_upstream.c-4928-
./nginx/src/http/ngx_http_upstream.c-4929-
--
./nginx/src/http/ngx_http_upstream.c-4973-        hk->key = header->name;
./nginx/src/http/ngx_http_upstream.c-4974-        hk->key_hash = ngx_hash_key_lc(header->name.data, header->name.len);
./nginx/src/http/ngx_http_upstream.c-4975-        hk->value = header;
./nginx/src/http/ngx_http_upstream.c-4976-    }
./nginx/src/http/ngx_http_upstream.c-4977-
./nginx/src/http/ngx_http_upstream.c-4978-    hash.hash = &umcf->headers_in_hash;
./nginx/src/http/ngx_http_upstream.c-4979-    hash.key = ngx_hash_key_lc;
./nginx/src/http/ngx_http_upstream.c-4980-    hash.max_size = 512;
./nginx/src/http/ngx_http_upstream.c-4981-    hash.bucket_size = ngx_align(64, ngx_cacheline_size);
./nginx/src/http/ngx_http_upstream.c-4982-    hash.name = "upstream_headers_in_hash";
./nginx/src/http/ngx_http_upstream.c:4983:    hash.pool = cf->pool;
./nginx/src/http/ngx_http_upstream.c-4984-    hash.temp_pool = NULL;
./nginx/src/http/ngx_http_upstream.c-4985-
./nginx/src/http/ngx_http_upstream.c-4986-    if (ngx_hash_init(&hash, headers_in.elts, headers_in.nelts) != NGX_OK) {
./nginx/src/http/ngx_http_upstream.c-4987-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4988-    }
./nginx/src/http/ngx_http_upstream.c-4989-
./nginx/src/http/ngx_http_upstream.c-4990-
./nginx/src/http/ngx_http_upstream.c-4991-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/src/http/ngx_http_upstream.c:4992:    /* upstream ctx pool */
./nginx/src/http/ngx_http_upstream.c:4993:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (64));
./nginx/src/http/ngx_http_upstream.c-4994-    if (zone_name.data == NULL) {
./nginx/src/http/ngx_http_upstream.c-4995-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-4996-    }
./nginx/src/http/ngx_http_upstream.c-4997-
./nginx/src/http/ngx_http_upstream.c-4998-    ngx_snprintf(zone_name.data, 64, "$upstream_ctx_pool");
./nginx/src/http/ngx_http_upstream.c-4999-    zone_name.len = ngx_strlen(zone_name.data);
./nginx/src/http/ngx_http_upstream.c-5000-
./nginx/src/http/ngx_http_upstream.c-5001-    umcf->upstream_ctx.shm_zone = ngx_shared_memory_add(cf, &zone_name, 1024 * 1024 * 2,
./nginx/src/http/ngx_http_upstream.c-5002-            &ngx_http_upstream_module);
./nginx/src/http/ngx_http_upstream.c-5003-    if (umcf->upstream_ctx.shm_zone == NULL) {
./nginx/src/http/ngx_http_upstream.c-5004-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-5005-    }
./nginx/src/http/ngx_http_upstream.c-5006-	
./nginx/src/http/ngx_http_upstream.c-5007-    umcf->upstream_ctx.shm_zone->init = ngx_http_upstream_limit_init_upstream_zone;
./nginx/src/http/ngx_http_upstream.c-5008-    umcf->upstream_ctx.shm_zone->data = umcf;
./nginx/src/http/ngx_http_upstream.c-5009-
./nginx/src/http/ngx_http_upstream.c:5010:    /* rserver ctx pool */
./nginx/src/http/ngx_http_upstream.c:5011:    zone_name.data = ngx_pcalloc(cf->pool, sizeof(u_char) * (64));
./nginx/src/http/ngx_http_upstream.c-5012-    if (zone_name.data == NULL) {
./nginx/src/http/ngx_http_upstream.c-5013-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_upstream.c-5014-    }
./nginx/src/http/ngx_http_upstream.c-5015-
./nginx/src/http/ngx_http_upstream.c-5016-    ngx_snprintf(zone_name.data, 64, "$rserver_limit");
./nginx/src/http/ngx_http_upstream.c-5017-    zone_name.len = ngx_strlen(zone_name.data);
./nginx/src/http/ngx_http_upstream.c-5018-
./nginx/src/http/ngx_http_upstream.c-5019-    umcf->ctx.shm_zone = ngx_shared_memory_add(cf, &zone_name, 1024 * 1024 * 10,
./nginx/src/http/ngx_http_upstream.c-5020-            &ngx_http_upstream_module);
./nginx/src/http/ngx_http_upstream.c-5021-    if (umcf->ctx.shm_zone == NULL) {
--
./nginx/src/http/ngx_http_upstream_round_robin.c-44-
./nginx/src/http/ngx_http_upstream_round_robin.c-45-#if 0
./nginx/src/http/ngx_http_upstream_round_robin.c-46-    ngx_log_debug0(NGX_LOG_DEBUG_HTTP, cf->log, 0,
./nginx/src/http/ngx_http_upstream_round_robin.c-47-                   "init multiplex");
./nginx/src/http/ngx_http_upstream_round_robin.c-48-#endif
./nginx/src/http/ngx_http_upstream_round_robin.c-49-
./nginx/src/http/ngx_http_upstream_round_robin.c-50-#if 0
./nginx/src/http/ngx_http_upstream_round_robin.c-51-	syslog(LOG_INFO, "init multiplex");
./nginx/src/http/ngx_http_upstream_round_robin.c-52-#endif
./nginx/src/http/ngx_http_upstream_round_robin.c-53-
./nginx/src/http/ngx_http_upstream_round_robin.c:54:    cached = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http_upstream_round_robin.c-55-                sizeof(ngx_http_upstream_multiplex_cache_t) * umsf->max_cached);
./nginx/src/http/ngx_http_upstream_round_robin.c-56-    if (cached == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-57-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-58-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-59-    
./nginx/src/http/ngx_http_upstream_round_robin.c:60:    queue_ctx = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http_upstream_round_robin.c-61-            sizeof(ngx_http_upstream_multiplex_cache_ctx_t) * peers->number);
./nginx/src/http/ngx_http_upstream_round_robin.c-62-    if (queue_ctx == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-63-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-64-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-65-
./nginx/src/http/ngx_http_upstream_round_robin.c-66-    ngx_queue_init(&umsf->free);
./nginx/src/http/ngx_http_upstream_round_robin.c-67-    for (i = 0; i < peers->number; i++) {
./nginx/src/http/ngx_http_upstream_round_robin.c-68-        ngx_queue_init(&queue_ctx[i].cache);
./nginx/src/http/ngx_http_upstream_round_robin.c-69-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-70-
--
./nginx/src/http/ngx_http_upstream_round_robin.c-113-            w += server[i].naddrs * server[i].weight;
./nginx/src/http/ngx_http_upstream_round_robin.c-114-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-115-
./nginx/src/http/ngx_http_upstream_round_robin.c-116-        if (n == 0) {
./nginx/src/http/ngx_http_upstream_round_robin.c-117-            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
./nginx/src/http/ngx_http_upstream_round_robin.c-118-                          "no servers in upstream \"%V\" in %s:%ui",
./nginx/src/http/ngx_http_upstream_round_robin.c-119-                          &us->host, us->file_name, us->line);
./nginx/src/http/ngx_http_upstream_round_robin.c-120-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-121-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-122-
./nginx/src/http/ngx_http_upstream_round_robin.c:123:        peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-124-                              + sizeof(ngx_http_upstream_rr_peer_t) * (n - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-125-        if (peers == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-126-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-127-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-128-
./nginx/src/http/ngx_http_upstream_round_robin.c-129-        peers->single = (n == 1);
./nginx/src/http/ngx_http_upstream_round_robin.c-130-        peers->number = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-131-        peers->weighted = (w != n);
./nginx/src/http/ngx_http_upstream_round_robin.c-132-        peers->total_weight = w;
./nginx/src/http/ngx_http_upstream_round_robin.c-133-        peers->name = &us->host;
--
./nginx/src/http/ngx_http_upstream_round_robin.c-178-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-179-
./nginx/src/http/ngx_http_upstream_round_robin.c-180-        if (n == 0) {
./nginx/src/http/ngx_http_upstream_round_robin.c-181-#if (NGX_HTTP_UPSTREAM_MULTIPLEX)
./nginx/src/http/ngx_http_upstream_round_robin.c-182-            goto init_multiplex;
./nginx/src/http/ngx_http_upstream_round_robin.c-183-#else
./nginx/src/http/ngx_http_upstream_round_robin.c-184-            return NGX_OK;
./nginx/src/http/ngx_http_upstream_round_robin.c-185-#endif
./nginx/src/http/ngx_http_upstream_round_robin.c-186-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-187-
./nginx/src/http/ngx_http_upstream_round_robin.c:188:        backup = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-189-                              + sizeof(ngx_http_upstream_rr_peer_t) * (n - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-190-        if (backup == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-191-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-192-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-193-
./nginx/src/http/ngx_http_upstream_round_robin.c-194-        peers->single = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-195-        backup->single = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-196-        backup->number = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-197-        backup->weighted = (w != n);
./nginx/src/http/ngx_http_upstream_round_robin.c-198-        backup->total_weight = w;
--
./nginx/src/http/ngx_http_upstream_round_robin.c-249-                      "no port in upstream \"%V\" in %s:%ui",
./nginx/src/http/ngx_http_upstream_round_robin.c-250-                      &us->host, us->file_name, us->line);
./nginx/src/http/ngx_http_upstream_round_robin.c-251-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-252-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-253-
./nginx/src/http/ngx_http_upstream_round_robin.c-254-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-255-
./nginx/src/http/ngx_http_upstream_round_robin.c-256-    u.host = us->host;
./nginx/src/http/ngx_http_upstream_round_robin.c-257-    u.port = (in_port_t) (us->port ? us->port : us->default_port);
./nginx/src/http/ngx_http_upstream_round_robin.c-258-
./nginx/src/http/ngx_http_upstream_round_robin.c:259:    if (ngx_inet_resolve_host(cf->pool, &u) != NGX_OK) {
./nginx/src/http/ngx_http_upstream_round_robin.c-260-        if (u.err) {
./nginx/src/http/ngx_http_upstream_round_robin.c-261-            ngx_log_error(NGX_LOG_EMERG, cf->log, 0,
./nginx/src/http/ngx_http_upstream_round_robin.c-262-                          "%s in upstream \"%V\" in %s:%ui",
./nginx/src/http/ngx_http_upstream_round_robin.c-263-                          u.err, &us->host, us->file_name, us->line);
./nginx/src/http/ngx_http_upstream_round_robin.c-264-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-265-
./nginx/src/http/ngx_http_upstream_round_robin.c-266-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-267-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-268-
./nginx/src/http/ngx_http_upstream_round_robin.c-269-    n = u.naddrs;
./nginx/src/http/ngx_http_upstream_round_robin.c-270-
./nginx/src/http/ngx_http_upstream_round_robin.c:271:    peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-272-                              + sizeof(ngx_http_upstream_rr_peer_t) * (n - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-273-    if (peers == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-274-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-275-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-276-
./nginx/src/http/ngx_http_upstream_round_robin.c-277-    peers->single = (n == 1);
./nginx/src/http/ngx_http_upstream_round_robin.c-278-    peers->number = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-279-    peers->weighted = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-280-    peers->total_weight = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-281-    peers->name = &us->host;
--
./nginx/src/http/ngx_http_upstream_round_robin.c-419-        n = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-420-
./nginx/src/http/ngx_http_upstream_round_robin.c-421-        for (i = 0; i < us->servers->nelts; i++) {
./nginx/src/http/ngx_http_upstream_round_robin.c-422-            if (server[i].backup) {
./nginx/src/http/ngx_http_upstream_round_robin.c-423-                continue;
./nginx/src/http/ngx_http_upstream_round_robin.c-424-            }
./nginx/src/http/ngx_http_upstream_round_robin.c-425-
./nginx/src/http/ngx_http_upstream_round_robin.c-426-            n += server[i].naddrs;
./nginx/src/http/ngx_http_upstream_round_robin.c-427-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-428-
./nginx/src/http/ngx_http_upstream_round_robin.c:429:        peers = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-430-                              + sizeof(ngx_http_upstream_rr_peer_t) * (n - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-431-        if (peers == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-432-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-433-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-434-
./nginx/src/http/ngx_http_upstream_round_robin.c-435-        peers->single = (n == 1);
./nginx/src/http/ngx_http_upstream_round_robin.c-436-        peers->number = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-437-        peers->name = &us->host;
./nginx/src/http/ngx_http_upstream_round_robin.c-438-
./nginx/src/http/ngx_http_upstream_round_robin.c-439-        n = 0;
--
./nginx/src/http/ngx_http_upstream_round_robin.c-473-                continue;
./nginx/src/http/ngx_http_upstream_round_robin.c-474-            }
./nginx/src/http/ngx_http_upstream_round_robin.c-475-
./nginx/src/http/ngx_http_upstream_round_robin.c-476-            n += server[i].naddrs;
./nginx/src/http/ngx_http_upstream_round_robin.c-477-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-478-
./nginx/src/http/ngx_http_upstream_round_robin.c-479-        if (n == 0) {
./nginx/src/http/ngx_http_upstream_round_robin.c-480-            return NGX_OK;
./nginx/src/http/ngx_http_upstream_round_robin.c-481-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-482-
./nginx/src/http/ngx_http_upstream_round_robin.c:483:        backup = ngx_pcalloc(cf->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-484-                              + sizeof(ngx_http_upstream_rr_peer_t) * (n - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-485-        if (backup == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-486-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-487-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-488-
./nginx/src/http/ngx_http_upstream_round_robin.c-489-        peers->single = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-490-        backup->single = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-491-        backup->number = n;
./nginx/src/http/ngx_http_upstream_round_robin.c-492-        backup->name = &us->host;
./nginx/src/http/ngx_http_upstream_round_robin.c-493-
--
./nginx/src/http/ngx_http_upstream_round_robin.c-526-ngx_int_t
./nginx/src/http/ngx_http_upstream_round_robin.c-527-ngx_http_upstream_init_round_robin_peer(ngx_http_request_t *r,
./nginx/src/http/ngx_http_upstream_round_robin.c-528-    ngx_http_upstream_srv_conf_t *us)
./nginx/src/http/ngx_http_upstream_round_robin.c-529-{
./nginx/src/http/ngx_http_upstream_round_robin.c-530-    ngx_uint_t                         n;
./nginx/src/http/ngx_http_upstream_round_robin.c-531-    ngx_http_upstream_rr_peer_data_t  *rrp;
./nginx/src/http/ngx_http_upstream_round_robin.c-532-
./nginx/src/http/ngx_http_upstream_round_robin.c-533-    rrp = r->upstream->peer.data;
./nginx/src/http/ngx_http_upstream_round_robin.c-534-
./nginx/src/http/ngx_http_upstream_round_robin.c-535-    if (rrp == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c:536:        rrp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_rr_peer_data_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-537-        if (rrp == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-538-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-539-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-540-
./nginx/src/http/ngx_http_upstream_round_robin.c-541-        r->upstream->peer.data = rrp;
./nginx/src/http/ngx_http_upstream_round_robin.c-542-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-543-
./nginx/src/http/ngx_http_upstream_round_robin.c-544-    rrp->peers = us->peer.data;
./nginx/src/http/ngx_http_upstream_round_robin.c-545-    rrp->current = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-546-
--
./nginx/src/http/ngx_http_upstream_round_robin.c-550-        n = rrp->peers->next->number;
./nginx/src/http/ngx_http_upstream_round_robin.c-551-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-552-
./nginx/src/http/ngx_http_upstream_round_robin.c-553-    if (n <= 8 * sizeof(uintptr_t)) {
./nginx/src/http/ngx_http_upstream_round_robin.c-554-        rrp->tried = &rrp->data;
./nginx/src/http/ngx_http_upstream_round_robin.c-555-        rrp->data = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-556-
./nginx/src/http/ngx_http_upstream_round_robin.c-557-    } else {
./nginx/src/http/ngx_http_upstream_round_robin.c-558-        n = (n + (8 * sizeof(uintptr_t) - 1)) / (8 * sizeof(uintptr_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-559-
./nginx/src/http/ngx_http_upstream_round_robin.c:560:        rrp->tried = ngx_pcalloc(r->pool, n * sizeof(uintptr_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-561-        if (rrp->tried == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-562-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-563-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-564-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-565-
./nginx/src/http/ngx_http_upstream_round_robin.c-566-#if (NGX_HTTP_RSERVER_LIMIT)
./nginx/src/http/ngx_http_upstream_round_robin.c-567-    r->upstream->peer.get = ngx_http_upstream_get_round_robin_peer_max;
./nginx/src/http/ngx_http_upstream_round_robin.c-568-    r->upstream->peer.free = ngx_http_upstream_free_round_robin_peer_max;
./nginx/src/http/ngx_http_upstream_round_robin.c-569-    r->upstream->peer.update_current = ngx_http_upstream_update_current_round_robin;
./nginx/src/http/ngx_http_upstream_round_robin.c-570-    r->upstream->peer.increase_conn = ngx_http_upstream_increase_round_robin_peer_conn;
--
./nginx/src/http/ngx_http_upstream_round_robin.c-598-    u_char                            *p;
./nginx/src/http/ngx_http_upstream_round_robin.c-599-    size_t                             len;
./nginx/src/http/ngx_http_upstream_round_robin.c-600-    ngx_uint_t                         i, n;
./nginx/src/http/ngx_http_upstream_round_robin.c-601-    struct sockaddr_in                *sin;
./nginx/src/http/ngx_http_upstream_round_robin.c-602-    ngx_http_upstream_rr_peers_t      *peers;
./nginx/src/http/ngx_http_upstream_round_robin.c-603-    ngx_http_upstream_rr_peer_data_t  *rrp;
./nginx/src/http/ngx_http_upstream_round_robin.c-604-
./nginx/src/http/ngx_http_upstream_round_robin.c-605-    rrp = r->upstream->peer.data;
./nginx/src/http/ngx_http_upstream_round_robin.c-606-
./nginx/src/http/ngx_http_upstream_round_robin.c-607-    if (rrp == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c:608:        rrp = ngx_palloc(r->pool, sizeof(ngx_http_upstream_rr_peer_data_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-609-        if (rrp == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-610-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-611-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-612-
./nginx/src/http/ngx_http_upstream_round_robin.c-613-        r->upstream->peer.data = rrp;
./nginx/src/http/ngx_http_upstream_round_robin.c-614-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-615-
./nginx/src/http/ngx_http_upstream_round_robin.c:616:    peers = ngx_pcalloc(r->pool, sizeof(ngx_http_upstream_rr_peers_t)
./nginx/src/http/ngx_http_upstream_round_robin.c-617-                     + sizeof(ngx_http_upstream_rr_peer_t) * (ur->naddrs - 1));
./nginx/src/http/ngx_http_upstream_round_robin.c-618-    if (peers == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-619-        return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-620-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-621-
./nginx/src/http/ngx_http_upstream_round_robin.c-622-    peers->single = (ur->naddrs == 1);
./nginx/src/http/ngx_http_upstream_round_robin.c-623-    peers->number = ur->naddrs;
./nginx/src/http/ngx_http_upstream_round_robin.c-624-    peers->name = &ur->host;
./nginx/src/http/ngx_http_upstream_round_robin.c-625-
./nginx/src/http/ngx_http_upstream_round_robin.c-626-    if (ur->sockaddr) {
--
./nginx/src/http/ngx_http_upstream_round_robin.c-632-        peers->peer[0].current_weight = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-633-        peers->peer[0].max_fails = 1;
./nginx/src/http/ngx_http_upstream_round_robin.c-634-        peers->peer[0].fail_timeout = 10;
./nginx/src/http/ngx_http_upstream_round_robin.c-635-
./nginx/src/http/ngx_http_upstream_round_robin.c-636-    } else {
./nginx/src/http/ngx_http_upstream_round_robin.c-637-
./nginx/src/http/ngx_http_upstream_round_robin.c-638-        for (i = 0; i < ur->naddrs; i++) {
./nginx/src/http/ngx_http_upstream_round_robin.c-639-
./nginx/src/http/ngx_http_upstream_round_robin.c-640-            len = NGX_INET_ADDRSTRLEN + sizeof(":65536") - 1;
./nginx/src/http/ngx_http_upstream_round_robin.c-641-
./nginx/src/http/ngx_http_upstream_round_robin.c:642:            p = ngx_pnalloc(r->pool, len);
./nginx/src/http/ngx_http_upstream_round_robin.c-643-            if (p == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-644-                return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-645-            }
./nginx/src/http/ngx_http_upstream_round_robin.c-646-
./nginx/src/http/ngx_http_upstream_round_robin.c-647-            len = ngx_inet_ntop(AF_INET, &ur->addrs[i], p, NGX_INET_ADDRSTRLEN);
./nginx/src/http/ngx_http_upstream_round_robin.c-648-            len = ngx_sprintf(&p[len], ":%d", ur->port) - p;
./nginx/src/http/ngx_http_upstream_round_robin.c-649-
./nginx/src/http/ngx_http_upstream_round_robin.c:650:            sin = ngx_pcalloc(r->pool, sizeof(struct sockaddr_in));
./nginx/src/http/ngx_http_upstream_round_robin.c-651-            if (sin == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-652-                return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-653-            }
./nginx/src/http/ngx_http_upstream_round_robin.c-654-
./nginx/src/http/ngx_http_upstream_round_robin.c-655-            sin->sin_family = AF_INET;
./nginx/src/http/ngx_http_upstream_round_robin.c-656-            sin->sin_port = htons(ur->port);
./nginx/src/http/ngx_http_upstream_round_robin.c-657-            sin->sin_addr.s_addr = ur->addrs[i];
./nginx/src/http/ngx_http_upstream_round_robin.c-658-
./nginx/src/http/ngx_http_upstream_round_robin.c-659-            peers->peer[i].sockaddr = (struct sockaddr *) sin;
./nginx/src/http/ngx_http_upstream_round_robin.c-660-            peers->peer[i].socklen = sizeof(struct sockaddr_in);
--
./nginx/src/http/ngx_http_upstream_round_robin.c-672-    rrp->current = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-673-
./nginx/src/http/ngx_http_upstream_round_robin.c-674-    if (rrp->peers->number <= 8 * sizeof(uintptr_t)) {
./nginx/src/http/ngx_http_upstream_round_robin.c-675-        rrp->tried = &rrp->data;
./nginx/src/http/ngx_http_upstream_round_robin.c-676-        rrp->data = 0;
./nginx/src/http/ngx_http_upstream_round_robin.c-677-
./nginx/src/http/ngx_http_upstream_round_robin.c-678-    } else {
./nginx/src/http/ngx_http_upstream_round_robin.c-679-        n = (rrp->peers->number + (8 * sizeof(uintptr_t) - 1))
./nginx/src/http/ngx_http_upstream_round_robin.c-680-                / (8 * sizeof(uintptr_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-681-
./nginx/src/http/ngx_http_upstream_round_robin.c:682:        rrp->tried = ngx_pcalloc(r->pool, n * sizeof(uintptr_t));
./nginx/src/http/ngx_http_upstream_round_robin.c-683-        if (rrp->tried == NULL) {
./nginx/src/http/ngx_http_upstream_round_robin.c-684-            return NGX_ERROR;
./nginx/src/http/ngx_http_upstream_round_robin.c-685-        }
./nginx/src/http/ngx_http_upstream_round_robin.c-686-    }
./nginx/src/http/ngx_http_upstream_round_robin.c-687-
./nginx/src/http/ngx_http_upstream_round_robin.c-688-    r->upstream->peer.get = ngx_http_upstream_get_round_robin_peer;
./nginx/src/http/ngx_http_upstream_round_robin.c-689-    r->upstream->peer.free = ngx_http_upstream_free_round_robin_peer;
./nginx/src/http/ngx_http_upstream_round_robin.c-690-    r->upstream->peer.tries = rrp->peers->number;
./nginx/src/http/ngx_http_upstream_round_robin.c-691-#if (NGX_HTTP_SSL)
./nginx/src/http/ngx_http_upstream_round_robin.c-692-    r->upstream->peer.set_session = ngx_http_upstream_empty_set_session;
--
./nginx/src/http/ngx_http_copy_filter_module.c-87-    ngx_http_copy_filter_conf_t  *conf;
./nginx/src/http/ngx_http_copy_filter_module.c-88-
./nginx/src/http/ngx_http_copy_filter_module.c-89-    c = r->connection;
./nginx/src/http/ngx_http_copy_filter_module.c-90-
./nginx/src/http/ngx_http_copy_filter_module.c-91-    ngx_log_debug2(NGX_LOG_DEBUG_HTTP, c->log, 0,
./nginx/src/http/ngx_http_copy_filter_module.c-92-                   "http copy filter: \"%V?%V\"", &r->uri, &r->args);
./nginx/src/http/ngx_http_copy_filter_module.c-93-
./nginx/src/http/ngx_http_copy_filter_module.c-94-    ctx = ngx_http_get_module_ctx(r, ngx_http_copy_filter_module);
./nginx/src/http/ngx_http_copy_filter_module.c-95-
./nginx/src/http/ngx_http_copy_filter_module.c-96-    if (ctx == NULL) {
./nginx/src/http/ngx_http_copy_filter_module.c:97:        ctx = ngx_pcalloc(r->pool, sizeof(ngx_output_chain_ctx_t));
./nginx/src/http/ngx_http_copy_filter_module.c-98-        if (ctx == NULL) {
./nginx/src/http/ngx_http_copy_filter_module.c-99-            return NGX_ERROR;
./nginx/src/http/ngx_http_copy_filter_module.c-100-        }
./nginx/src/http/ngx_http_copy_filter_module.c-101-
./nginx/src/http/ngx_http_copy_filter_module.c-102-        ngx_http_set_ctx(r, ctx, ngx_http_copy_filter_module);
./nginx/src/http/ngx_http_copy_filter_module.c-103-
./nginx/src/http/ngx_http_copy_filter_module.c-104-        conf = ngx_http_get_module_loc_conf(r, ngx_http_copy_filter_module);
./nginx/src/http/ngx_http_copy_filter_module.c-105-        clcf = ngx_http_get_module_loc_conf(r, ngx_http_core_module);
./nginx/src/http/ngx_http_copy_filter_module.c-106-
./nginx/src/http/ngx_http_copy_filter_module.c-107-        ctx->sendfile = c->sendfile;
./nginx/src/http/ngx_http_copy_filter_module.c-108-        ctx->need_in_memory = r->main_filter_need_in_memory
./nginx/src/http/ngx_http_copy_filter_module.c-109-                              || r->filter_need_in_memory;
./nginx/src/http/ngx_http_copy_filter_module.c-110-        ctx->need_in_temp = r->filter_need_temporary;
./nginx/src/http/ngx_http_copy_filter_module.c-111-
./nginx/src/http/ngx_http_copy_filter_module.c-112-        ctx->alignment = clcf->directio_alignment;
./nginx/src/http/ngx_http_copy_filter_module.c-113-
./nginx/src/http/ngx_http_copy_filter_module.c:114:        ctx->pool = r->pool;
./nginx/src/http/ngx_http_copy_filter_module.c-115-        ctx->bufs = conf->bufs;
./nginx/src/http/ngx_http_copy_filter_module.c-116-        ctx->tag = (ngx_buf_tag_t) &ngx_http_copy_filter_module;
./nginx/src/http/ngx_http_copy_filter_module.c-117-
./nginx/src/http/ngx_http_copy_filter_module.c-118-        ctx->output_filter = (ngx_output_chain_filter_pt)
./nginx/src/http/ngx_http_copy_filter_module.c-119-                                  ngx_http_next_body_filter;
./nginx/src/http/ngx_http_copy_filter_module.c-120-        ctx->filter_ctx = r;
./nginx/src/http/ngx_http_copy_filter_module.c-121-
./nginx/src/http/ngx_http_copy_filter_module.c-122-#if (NGX_HAVE_FILE_AIO)
./nginx/src/http/ngx_http_copy_filter_module.c-123-        if (ngx_file_aio) {
./nginx/src/http/ngx_http_copy_filter_module.c-124-            if (clcf->aio) {
--
./nginx/src/http/ngx_http_copy_filter_module.c-175-                if (c->aio_sendfile == 0) {
./nginx/src/http/ngx_http_copy_filter_module.c-176-                    ngx_log_error(NGX_LOG_ALERT, c->log, 0,
./nginx/src/http/ngx_http_copy_filter_module.c-177-                                  "sendfile(%V) returned busy again",
./nginx/src/http/ngx_http_copy_filter_module.c-178-                                  &file->name);
./nginx/src/http/ngx_http_copy_filter_module.c-179-                }
./nginx/src/http/ngx_http_copy_filter_module.c-180-            }
./nginx/src/http/ngx_http_copy_filter_module.c-181-
./nginx/src/http/ngx_http_copy_filter_module.c-182-            c->busy_sendfile = NULL;
./nginx/src/http/ngx_http_copy_filter_module.c-183-            e = (ngx_http_ephemeral_t *) &r->uri_start;
./nginx/src/http/ngx_http_copy_filter_module.c-184-
./nginx/src/http/ngx_http_copy_filter_module.c:185:            n = ngx_file_aio_read(file, &e->aio_preload, 1, offset, r->pool);
./nginx/src/http/ngx_http_copy_filter_module.c-186-
./nginx/src/http/ngx_http_copy_filter_module.c-187-            if (n > 0) {
./nginx/src/http/ngx_http_copy_filter_module.c-188-                in = NULL;
./nginx/src/http/ngx_http_copy_filter_module.c-189-                continue;
./nginx/src/http/ngx_http_copy_filter_module.c-190-            }
./nginx/src/http/ngx_http_copy_filter_module.c-191-
./nginx/src/http/ngx_http_copy_filter_module.c-192-            rc = n;
./nginx/src/http/ngx_http_copy_filter_module.c-193-
./nginx/src/http/ngx_http_copy_filter_module.c-194-            if (rc == NGX_AGAIN) {
./nginx/src/http/ngx_http_copy_filter_module.c-195-                file->aio->data = r;
--
./nginx/src/http/ngx_http_copy_filter_module.c-260-
./nginx/src/http/ngx_http_copy_filter_module.c-261-#endif
./nginx/src/http/ngx_http_copy_filter_module.c-262-#endif
./nginx/src/http/ngx_http_copy_filter_module.c-263-
./nginx/src/http/ngx_http_copy_filter_module.c-264-
./nginx/src/http/ngx_http_copy_filter_module.c-265-static void *
./nginx/src/http/ngx_http_copy_filter_module.c-266-ngx_http_copy_filter_create_conf(ngx_conf_t *cf)
./nginx/src/http/ngx_http_copy_filter_module.c-267-{
./nginx/src/http/ngx_http_copy_filter_module.c-268-    ngx_http_copy_filter_conf_t *conf;
./nginx/src/http/ngx_http_copy_filter_module.c-269-
./nginx/src/http/ngx_http_copy_filter_module.c:270:    conf = ngx_palloc(cf->pool, sizeof(ngx_http_copy_filter_conf_t));
./nginx/src/http/ngx_http_copy_filter_module.c-271-    if (conf == NULL) {
./nginx/src/http/ngx_http_copy_filter_module.c-272-        return NULL;
./nginx/src/http/ngx_http_copy_filter_module.c-273-    }
./nginx/src/http/ngx_http_copy_filter_module.c-274-
./nginx/src/http/ngx_http_copy_filter_module.c-275-    conf->bufs.num = 0;
./nginx/src/http/ngx_http_copy_filter_module.c-276-
./nginx/src/http/ngx_http_copy_filter_module.c-277-    return conf;
./nginx/src/http/ngx_http_copy_filter_module.c-278-}
./nginx/src/http/ngx_http_copy_filter_module.c-279-
./nginx/src/http/ngx_http_copy_filter_module.c-280-
--
./nginx/src/http/ngx_http_write_filter_module.c-111-        }
./nginx/src/http/ngx_http_write_filter_module.c-112-
./nginx/src/http/ngx_http_write_filter_module.c-113-        if (cl->buf->last_buf) {
./nginx/src/http/ngx_http_write_filter_module.c-114-            last = 1;
./nginx/src/http/ngx_http_write_filter_module.c-115-        }
./nginx/src/http/ngx_http_write_filter_module.c-116-    }
./nginx/src/http/ngx_http_write_filter_module.c-117-
./nginx/src/http/ngx_http_write_filter_module.c-118-    /* add the new chain to the existent one */
./nginx/src/http/ngx_http_write_filter_module.c-119-
./nginx/src/http/ngx_http_write_filter_module.c-120-    for (ln = in; ln; ln = ln->next) {
./nginx/src/http/ngx_http_write_filter_module.c:121:        cl = ngx_alloc_chain_link(r->pool);
./nginx/src/http/ngx_http_write_filter_module.c-122-        if (cl == NULL) {
./nginx/src/http/ngx_http_write_filter_module.c-123-            return NGX_ERROR;
./nginx/src/http/ngx_http_write_filter_module.c-124-        }
./nginx/src/http/ngx_http_write_filter_module.c-125-
./nginx/src/http/ngx_http_write_filter_module.c-126-        cl->buf = ln->buf;
./nginx/src/http/ngx_http_write_filter_module.c-127-        *ll = cl;
./nginx/src/http/ngx_http_write_filter_module.c-128-        ll = &cl->next;
./nginx/src/http/ngx_http_write_filter_module.c-129-
./nginx/src/http/ngx_http_write_filter_module.c-130-        ngx_log_debug7(NGX_LOG_DEBUG_EVENT, c->log, 0,
./nginx/src/http/ngx_http_write_filter_module.c-131-                       "write new buf t:%d f:%d %p, pos %p, size: %z "
--
./nginx/src/http/ngx_http_write_filter_module.c-187-    if (c->write->delayed) {
./nginx/src/http/ngx_http_write_filter_module.c-188-        c->buffered |= NGX_HTTP_WRITE_BUFFERED;
./nginx/src/http/ngx_http_write_filter_module.c-189-        return NGX_AGAIN;
./nginx/src/http/ngx_http_write_filter_module.c-190-    }
./nginx/src/http/ngx_http_write_filter_module.c-191-
./nginx/src/http/ngx_http_write_filter_module.c-192-    if (size == 0 && !(c->buffered & NGX_LOWLEVEL_BUFFERED)) {
./nginx/src/http/ngx_http_write_filter_module.c-193-        if (last || flush) {
./nginx/src/http/ngx_http_write_filter_module.c-194-            for (cl = r->out; cl; /* void */) {
./nginx/src/http/ngx_http_write_filter_module.c-195-                ln = cl;
./nginx/src/http/ngx_http_write_filter_module.c-196-                cl = cl->next;
./nginx/src/http/ngx_http_write_filter_module.c:197:                ngx_free_chain(r->pool, ln);
./nginx/src/http/ngx_http_write_filter_module.c-198-            }
./nginx/src/http/ngx_http_write_filter_module.c-199-
./nginx/src/http/ngx_http_write_filter_module.c-200-            r->out = NULL;
./nginx/src/http/ngx_http_write_filter_module.c-201-            c->buffered &= ~NGX_HTTP_WRITE_BUFFERED;
./nginx/src/http/ngx_http_write_filter_module.c-202-
./nginx/src/http/ngx_http_write_filter_module.c-203-            return NGX_OK;
./nginx/src/http/ngx_http_write_filter_module.c-204-        }
./nginx/src/http/ngx_http_write_filter_module.c-205-
./nginx/src/http/ngx_http_write_filter_module.c-206-        ngx_log_error(NGX_LOG_ALERT, c->log, 0,
./nginx/src/http/ngx_http_write_filter_module.c-207-                      "the http output chain is empty");
--
./nginx/src/http/ngx_http_write_filter_module.c-280-        && c->write->ready
./nginx/src/http/ngx_http_write_filter_module.c-281-        && c->sent - sent >= limit - (off_t) (2 * ngx_pagesize))
./nginx/src/http/ngx_http_write_filter_module.c-282-    {
./nginx/src/http/ngx_http_write_filter_module.c-283-        c->write->delayed = 1;
./nginx/src/http/ngx_http_write_filter_module.c-284-        ngx_add_timer(c->write, 1);
./nginx/src/http/ngx_http_write_filter_module.c-285-    }
./nginx/src/http/ngx_http_write_filter_module.c-286-
./nginx/src/http/ngx_http_write_filter_module.c-287-    for (cl = r->out; cl && cl != chain; /* void */) {
./nginx/src/http/ngx_http_write_filter_module.c-288-        ln = cl;
./nginx/src/http/ngx_http_write_filter_module.c-289-        cl = cl->next;
./nginx/src/http/ngx_http_write_filter_module.c:290:        ngx_free_chain(r->pool, ln);
./nginx/src/http/ngx_http_write_filter_module.c-291-    }
./nginx/src/http/ngx_http_write_filter_module.c-292-
./nginx/src/http/ngx_http_write_filter_module.c-293-    r->out = chain;
./nginx/src/http/ngx_http_write_filter_module.c-294-
./nginx/src/http/ngx_http_write_filter_module.c-295-    if (chain) {
./nginx/src/http/ngx_http_write_filter_module.c-296-        c->buffered |= NGX_HTTP_WRITE_BUFFERED;
./nginx/src/http/ngx_http_write_filter_module.c-297-        return NGX_AGAIN;
./nginx/src/http/ngx_http_write_filter_module.c-298-    }
./nginx/src/http/ngx_http_write_filter_module.c-299-
./nginx/src/http/ngx_http_write_filter_module.c-300-    c->buffered &= ~NGX_HTTP_WRITE_BUFFERED;
--
./nginx/src/http/ngx_http.c-122-    ngx_uint_t                   mi, m, s;
./nginx/src/http/ngx_http.c-123-    ngx_conf_t                   pcf;
./nginx/src/http/ngx_http.c-124-    ngx_http_module_t           *module;
./nginx/src/http/ngx_http.c-125-    ngx_http_conf_ctx_t         *ctx;
./nginx/src/http/ngx_http.c-126-    ngx_http_core_loc_conf_t    *clcf;
./nginx/src/http/ngx_http.c-127-    ngx_http_core_srv_conf_t   **cscfp;
./nginx/src/http/ngx_http.c-128-    ngx_http_core_main_conf_t   *cmcf;
./nginx/src/http/ngx_http.c-129-
./nginx/src/http/ngx_http.c-130-    /* the main http context */
./nginx/src/http/ngx_http.c-131-
./nginx/src/http/ngx_http.c:132:    ctx = ngx_pcalloc(cf->pool, sizeof(ngx_http_conf_ctx_t));
./nginx/src/http/ngx_http.c-133-    if (ctx == NULL) {
./nginx/src/http/ngx_http.c-134-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-135-    }
./nginx/src/http/ngx_http.c-136-
./nginx/src/http/ngx_http.c-137-    *(ngx_http_conf_ctx_t **) conf = ctx;
./nginx/src/http/ngx_http.c-138-
./nginx/src/http/ngx_http.c-139-
./nginx/src/http/ngx_http.c-140-    /* count the number of the http modules and set up their indices */
./nginx/src/http/ngx_http.c-141-
./nginx/src/http/ngx_http.c-142-    ngx_http_max_module = 0;
--
./nginx/src/http/ngx_http.c-144-        if (ngx_modules[m]->type != NGX_HTTP_MODULE) {
./nginx/src/http/ngx_http.c-145-            continue;
./nginx/src/http/ngx_http.c-146-        }
./nginx/src/http/ngx_http.c-147-
./nginx/src/http/ngx_http.c-148-        ngx_modules[m]->ctx_index = ngx_http_max_module++;
./nginx/src/http/ngx_http.c-149-    }
./nginx/src/http/ngx_http.c-150-
./nginx/src/http/ngx_http.c-151-
./nginx/src/http/ngx_http.c-152-    /* the http main_conf context, it is the same in the all http contexts */
./nginx/src/http/ngx_http.c-153-
./nginx/src/http/ngx_http.c:154:    ctx->main_conf = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http.c-155-                                 sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http.c-156-    if (ctx->main_conf == NULL) {
./nginx/src/http/ngx_http.c-157-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-158-    }
./nginx/src/http/ngx_http.c-159-
./nginx/src/http/ngx_http.c-160-
./nginx/src/http/ngx_http.c-161-    /*
./nginx/src/http/ngx_http.c-162-     * the http null srv_conf context, it is used to merge
./nginx/src/http/ngx_http.c-163-     * the server{}s' srv_conf's
./nginx/src/http/ngx_http.c-164-     */
./nginx/src/http/ngx_http.c-165-
./nginx/src/http/ngx_http.c:166:    ctx->srv_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http.c-167-    if (ctx->srv_conf == NULL) {
./nginx/src/http/ngx_http.c-168-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-169-    }
./nginx/src/http/ngx_http.c-170-
./nginx/src/http/ngx_http.c-171-
./nginx/src/http/ngx_http.c-172-    /*
./nginx/src/http/ngx_http.c-173-     * the http null loc_conf context, it is used to merge
./nginx/src/http/ngx_http.c-174-     * the server{}s' loc_conf's
./nginx/src/http/ngx_http.c-175-     */
./nginx/src/http/ngx_http.c-176-
./nginx/src/http/ngx_http.c:177:    ctx->loc_conf = ngx_pcalloc(cf->pool, sizeof(void *) * ngx_http_max_module);
./nginx/src/http/ngx_http.c-178-    if (ctx->loc_conf == NULL) {
./nginx/src/http/ngx_http.c-179-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-180-    }
./nginx/src/http/ngx_http.c-181-
./nginx/src/http/ngx_http.c-182-
./nginx/src/http/ngx_http.c-183-    /*
./nginx/src/http/ngx_http.c-184-     * create the main_conf's, the null srv_conf's, and the null loc_conf's
./nginx/src/http/ngx_http.c-185-     * of the all http modules
./nginx/src/http/ngx_http.c-186-     */
./nginx/src/http/ngx_http.c-187-
--
./nginx/src/http/ngx_http.c-343-    *cf = pcf;
./nginx/src/http/ngx_http.c-344-
./nginx/src/http/ngx_http.c-345-    return rv;
./nginx/src/http/ngx_http.c-346-}
./nginx/src/http/ngx_http.c-347-
./nginx/src/http/ngx_http.c-348-
./nginx/src/http/ngx_http.c-349-static ngx_int_t
./nginx/src/http/ngx_http.c-350-ngx_http_init_phases(ngx_conf_t *cf, ngx_http_core_main_conf_t *cmcf)
./nginx/src/http/ngx_http.c-351-{
./nginx/src/http/ngx_http.c-352-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_POST_READ_PHASE].handlers,
./nginx/src/http/ngx_http.c:353:                       cf->pool, 1, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-354-        != NGX_OK)
./nginx/src/http/ngx_http.c-355-    {
./nginx/src/http/ngx_http.c-356-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-357-    }
./nginx/src/http/ngx_http.c-358-
./nginx/src/http/ngx_http.c-359-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_SERVER_REWRITE_PHASE].handlers,
./nginx/src/http/ngx_http.c:360:                       cf->pool, 1, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-361-        != NGX_OK)
./nginx/src/http/ngx_http.c-362-    {
./nginx/src/http/ngx_http.c-363-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-364-    }
./nginx/src/http/ngx_http.c-365-
./nginx/src/http/ngx_http.c-366-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers,
./nginx/src/http/ngx_http.c:367:                       cf->pool, 1, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-368-        != NGX_OK)
./nginx/src/http/ngx_http.c-369-    {
./nginx/src/http/ngx_http.c-370-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-371-    }
./nginx/src/http/ngx_http.c-372-
./nginx/src/http/ngx_http.c-373-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_PREACCESS_PHASE].handlers,
./nginx/src/http/ngx_http.c:374:                       cf->pool, 1, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-375-        != NGX_OK)
./nginx/src/http/ngx_http.c-376-    {
./nginx/src/http/ngx_http.c-377-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-378-    }
./nginx/src/http/ngx_http.c-379-
./nginx/src/http/ngx_http.c-380-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers,
./nginx/src/http/ngx_http.c:381:                       cf->pool, 2, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-382-        != NGX_OK)
./nginx/src/http/ngx_http.c-383-    {
./nginx/src/http/ngx_http.c-384-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-385-    }
./nginx/src/http/ngx_http.c-386-
./nginx/src/http/ngx_http.c-387-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_CONTENT_PHASE].handlers,
./nginx/src/http/ngx_http.c:388:                       cf->pool, 4, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-389-        != NGX_OK)
./nginx/src/http/ngx_http.c-390-    {
./nginx/src/http/ngx_http.c-391-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-392-    }
./nginx/src/http/ngx_http.c-393-
./nginx/src/http/ngx_http.c-394-    if (ngx_array_init(&cmcf->phases[NGX_HTTP_LOG_PHASE].handlers,
./nginx/src/http/ngx_http.c:395:                       cf->pool, 1, sizeof(ngx_http_handler_pt))
./nginx/src/http/ngx_http.c-396-        != NGX_OK)
./nginx/src/http/ngx_http.c-397-    {
./nginx/src/http/ngx_http.c-398-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-399-    }
./nginx/src/http/ngx_http.c-400-
./nginx/src/http/ngx_http.c-401-    return NGX_OK;
./nginx/src/http/ngx_http.c-402-}
./nginx/src/http/ngx_http.c-403-
./nginx/src/http/ngx_http.c-404-
./nginx/src/http/ngx_http.c-405-static ngx_int_t
--
./nginx/src/http/ngx_http.c-425-        hk->key = header->name;
./nginx/src/http/ngx_http.c-426-        hk->key_hash = ngx_hash_key_lc(header->name.data, header->name.len);
./nginx/src/http/ngx_http.c-427-        hk->value = header;
./nginx/src/http/ngx_http.c-428-    }
./nginx/src/http/ngx_http.c-429-
./nginx/src/http/ngx_http.c-430-    hash.hash = &cmcf->headers_in_hash;
./nginx/src/http/ngx_http.c-431-    hash.key = ngx_hash_key_lc;
./nginx/src/http/ngx_http.c-432-    hash.max_size = 512;
./nginx/src/http/ngx_http.c-433-    hash.bucket_size = ngx_align(64, ngx_cacheline_size);
./nginx/src/http/ngx_http.c-434-    hash.name = "headers_in_hash";
./nginx/src/http/ngx_http.c:435:    hash.pool = cf->pool;
./nginx/src/http/ngx_http.c-436-    hash.temp_pool = NULL;
./nginx/src/http/ngx_http.c-437-
./nginx/src/http/ngx_http.c-438-    if (ngx_hash_init(&hash, headers_in.elts, headers_in.nelts) != NGX_OK) {
./nginx/src/http/ngx_http.c-439-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-440-    }
./nginx/src/http/ngx_http.c-441-
./nginx/src/http/ngx_http.c-442-    return NGX_OK;
./nginx/src/http/ngx_http.c-443-}
./nginx/src/http/ngx_http.c-444-
./nginx/src/http/ngx_http.c-445-
--
./nginx/src/http/ngx_http.c-458-    find_config_index = 0;
./nginx/src/http/ngx_http.c-459-    use_rewrite = cmcf->phases[NGX_HTTP_REWRITE_PHASE].handlers.nelts ? 1 : 0;
./nginx/src/http/ngx_http.c-460-    use_access = cmcf->phases[NGX_HTTP_ACCESS_PHASE].handlers.nelts ? 1 : 0;
./nginx/src/http/ngx_http.c-461-
./nginx/src/http/ngx_http.c-462-    n = use_rewrite + use_access + cmcf->try_files + 1 /* find config phase */;
./nginx/src/http/ngx_http.c-463-
./nginx/src/http/ngx_http.c-464-    for (i = 0; i < NGX_HTTP_LOG_PHASE; i++) {
./nginx/src/http/ngx_http.c-465-        n += cmcf->phases[i].handlers.nelts;
./nginx/src/http/ngx_http.c-466-    }
./nginx/src/http/ngx_http.c-467-
./nginx/src/http/ngx_http.c:468:    ph = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http.c-469-                     n * sizeof(ngx_http_phase_handler_t) + sizeof(void *));
./nginx/src/http/ngx_http.c-470-    if (ph == NULL) {
./nginx/src/http/ngx_http.c-471-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-472-    }
./nginx/src/http/ngx_http.c-473-
./nginx/src/http/ngx_http.c-474-    cmcf->phase_engine.handlers = ph;
./nginx/src/http/ngx_http.c-475-    n = 0;
./nginx/src/http/ngx_http.c-476-
./nginx/src/http/ngx_http.c-477-    for (i = 0; i < NGX_HTTP_LOG_PHASE; i++) {
./nginx/src/http/ngx_http.c-478-        h = cmcf->phases[i].handlers.elts;
--
./nginx/src/http/ngx_http.c-734-        if (clcf->noname) {
./nginx/src/http/ngx_http.c-735-            break;
./nginx/src/http/ngx_http.c-736-        }
./nginx/src/http/ngx_http.c-737-    }
./nginx/src/http/ngx_http.c-738-
./nginx/src/http/ngx_http.c-739-    if (q != ngx_queue_sentinel(locations)) {
./nginx/src/http/ngx_http.c-740-        ngx_queue_split(locations, q, &tail);
./nginx/src/http/ngx_http.c-741-    }
./nginx/src/http/ngx_http.c-742-
./nginx/src/http/ngx_http.c-743-    if (named) {
./nginx/src/http/ngx_http.c:744:        clcfp = ngx_palloc(cf->pool,
./nginx/src/http/ngx_http.c-745-                           (n + 1) * sizeof(ngx_http_core_loc_conf_t **));
./nginx/src/http/ngx_http.c-746-        if (clcfp == NULL) {
./nginx/src/http/ngx_http.c-747-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-748-        }
./nginx/src/http/ngx_http.c-749-
./nginx/src/http/ngx_http.c-750-        cscf->named_locations = clcfp;
./nginx/src/http/ngx_http.c-751-
./nginx/src/http/ngx_http.c-752-        for (q = named;
./nginx/src/http/ngx_http.c-753-             q != ngx_queue_sentinel(locations);
./nginx/src/http/ngx_http.c-754-             q = ngx_queue_next(q))
--
./nginx/src/http/ngx_http.c-760-
./nginx/src/http/ngx_http.c-761-        *clcfp = NULL;
./nginx/src/http/ngx_http.c-762-
./nginx/src/http/ngx_http.c-763-        ngx_queue_split(locations, named, &tail);
./nginx/src/http/ngx_http.c-764-    }
./nginx/src/http/ngx_http.c-765-
./nginx/src/http/ngx_http.c-766-#if (NGX_PCRE)
./nginx/src/http/ngx_http.c-767-
./nginx/src/http/ngx_http.c-768-    if (regex) {
./nginx/src/http/ngx_http.c-769-
./nginx/src/http/ngx_http.c:770:        clcfp = ngx_palloc(cf->pool,
./nginx/src/http/ngx_http.c-771-                           (r + 1) * sizeof(ngx_http_core_loc_conf_t **));
./nginx/src/http/ngx_http.c-772-        if (clcfp == NULL) {
./nginx/src/http/ngx_http.c-773-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-774-        }
./nginx/src/http/ngx_http.c-775-
./nginx/src/http/ngx_http.c-776-        pclcf->regex_locations = clcfp;
./nginx/src/http/ngx_http.c-777-
./nginx/src/http/ngx_http.c-778-        for (q = regex;
./nginx/src/http/ngx_http.c-779-             q != ngx_queue_sentinel(locations);
./nginx/src/http/ngx_http.c-780-             q = ngx_queue_next(q))
--
./nginx/src/http/ngx_http.c-1070-    size_t                          len;
./nginx/src/http/ngx_http.c-1071-    ngx_queue_t                    *q, tail;
./nginx/src/http/ngx_http.c-1072-    ngx_http_location_queue_t      *lq;
./nginx/src/http/ngx_http.c-1073-    ngx_http_location_tree_node_t  *node;
./nginx/src/http/ngx_http.c-1074-
./nginx/src/http/ngx_http.c-1075-    q = ngx_queue_middle(locations);
./nginx/src/http/ngx_http.c-1076-
./nginx/src/http/ngx_http.c-1077-    lq = (ngx_http_location_queue_t *) q;
./nginx/src/http/ngx_http.c-1078-    len = lq->name->len - prefix;
./nginx/src/http/ngx_http.c-1079-
./nginx/src/http/ngx_http.c:1080:    node = ngx_palloc(cf->pool,
./nginx/src/http/ngx_http.c-1081-                      offsetof(ngx_http_location_tree_node_t, name) + len);
./nginx/src/http/ngx_http.c-1082-    if (node == NULL) {
./nginx/src/http/ngx_http.c-1083-        return NULL;
./nginx/src/http/ngx_http.c-1084-    }
./nginx/src/http/ngx_http.c-1085-
./nginx/src/http/ngx_http.c-1086-    node->left = NULL;
./nginx/src/http/ngx_http.c-1087-    node->right = NULL;
./nginx/src/http/ngx_http.c-1088-    node->tree = NULL;
./nginx/src/http/ngx_http.c-1089-    node->exact = lq->exact;
./nginx/src/http/ngx_http.c-1090-    node->inclusive = lq->inclusive;
--
./nginx/src/http/ngx_http.c-1460-    regex = 0;
./nginx/src/http/ngx_http.c-1461-#endif
./nginx/src/http/ngx_http.c-1462-
./nginx/src/http/ngx_http.c-1463-    ngx_memzero(&ha, sizeof(ngx_hash_keys_arrays_t));
./nginx/src/http/ngx_http.c-1464-
./nginx/src/http/ngx_http.c-1465-    ha.temp_pool = ngx_create_pool(16384, cf->log);
./nginx/src/http/ngx_http.c-1466-    if (ha.temp_pool == NULL) {
./nginx/src/http/ngx_http.c-1467-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-1468-    }
./nginx/src/http/ngx_http.c-1469-
./nginx/src/http/ngx_http.c:1470:    ha.pool = cf->pool;
./nginx/src/http/ngx_http.c-1471-
./nginx/src/http/ngx_http.c-1472-    if (ngx_hash_keys_array_init(&ha, NGX_HASH_LARGE) != NGX_OK) {
./nginx/src/http/ngx_http.c-1473-        goto failed;
./nginx/src/http/ngx_http.c-1474-    }
./nginx/src/http/ngx_http.c-1475-
./nginx/src/http/ngx_http.c-1476-    cscfp = addr->servers.elts;
./nginx/src/http/ngx_http.c-1477-
./nginx/src/http/ngx_http.c-1478-    for (s = 0; s < addr->servers.nelts; s++) {
./nginx/src/http/ngx_http.c-1479-
./nginx/src/http/ngx_http.c-1480-        name = cscfp[s]->server_names.elts;
--
./nginx/src/http/ngx_http.c-1507-                              "conflicting server name \"%V\" on %s, ignored",
./nginx/src/http/ngx_http.c-1508-                              &name[n].name, addr->opt.addr);
./nginx/src/http/ngx_http.c-1509-            }
./nginx/src/http/ngx_http.c-1510-        }
./nginx/src/http/ngx_http.c-1511-    }
./nginx/src/http/ngx_http.c-1512-
./nginx/src/http/ngx_http.c-1513-    hash.key = ngx_hash_key_lc;
./nginx/src/http/ngx_http.c-1514-    hash.max_size = cmcf->server_names_hash_max_size;
./nginx/src/http/ngx_http.c-1515-    hash.bucket_size = cmcf->server_names_hash_bucket_size;
./nginx/src/http/ngx_http.c-1516-    hash.name = "server_names_hash";
./nginx/src/http/ngx_http.c:1517:    hash.pool = cf->pool;
./nginx/src/http/ngx_http.c-1518-
./nginx/src/http/ngx_http.c-1519-    if (ha.keys.nelts) {
./nginx/src/http/ngx_http.c-1520-        hash.hash = &addr->hash;
./nginx/src/http/ngx_http.c-1521-        hash.temp_pool = NULL;
./nginx/src/http/ngx_http.c-1522-
./nginx/src/http/ngx_http.c-1523-        if (ngx_hash_init(&hash, ha.keys.elts, ha.keys.nelts) != NGX_OK) {
./nginx/src/http/ngx_http.c-1524-            goto failed;
./nginx/src/http/ngx_http.c-1525-        }
./nginx/src/http/ngx_http.c-1526-    }
./nginx/src/http/ngx_http.c-1527-
--
./nginx/src/http/ngx_http.c-1563-
./nginx/src/http/ngx_http.c-1564-    ngx_destroy_pool(ha.temp_pool);
./nginx/src/http/ngx_http.c-1565-
./nginx/src/http/ngx_http.c-1566-#if (NGX_PCRE)
./nginx/src/http/ngx_http.c-1567-
./nginx/src/http/ngx_http.c-1568-    if (regex == 0) {
./nginx/src/http/ngx_http.c-1569-        return NGX_OK;
./nginx/src/http/ngx_http.c-1570-    }
./nginx/src/http/ngx_http.c-1571-
./nginx/src/http/ngx_http.c-1572-    addr->nregex = regex;
./nginx/src/http/ngx_http.c:1573:    addr->regex = ngx_palloc(cf->pool, regex * sizeof(ngx_http_server_name_t));
./nginx/src/http/ngx_http.c-1574-    if (addr->regex == NULL) {
./nginx/src/http/ngx_http.c-1575-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-1576-    }
./nginx/src/http/ngx_http.c-1577-
./nginx/src/http/ngx_http.c-1578-    i = 0;
./nginx/src/http/ngx_http.c-1579-
./nginx/src/http/ngx_http.c-1580-    for (s = 0; s < addr->servers.nelts; s++) {
./nginx/src/http/ngx_http.c-1581-
./nginx/src/http/ngx_http.c-1582-        name = cscfp[s]->server_names.elts;
./nginx/src/http/ngx_http.c-1583-
--
./nginx/src/http/ngx_http.c-1679-        if (bind_wildcard && !addr[i].opt.bind) {
./nginx/src/http/ngx_http.c-1680-            i++;
./nginx/src/http/ngx_http.c-1681-            continue;
./nginx/src/http/ngx_http.c-1682-        }
./nginx/src/http/ngx_http.c-1683-
./nginx/src/http/ngx_http.c-1684-        ls = ngx_http_add_listening(cf, &addr[i]);
./nginx/src/http/ngx_http.c-1685-        if (ls == NULL) {
./nginx/src/http/ngx_http.c-1686-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-1687-        }
./nginx/src/http/ngx_http.c-1688-
./nginx/src/http/ngx_http.c:1689:        hport = ngx_pcalloc(cf->pool, sizeof(ngx_http_port_t));
./nginx/src/http/ngx_http.c-1690-        if (hport == NULL) {
./nginx/src/http/ngx_http.c-1691-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-1692-        }
./nginx/src/http/ngx_http.c-1693-
./nginx/src/http/ngx_http.c-1694-        ls->servers = hport;
./nginx/src/http/ngx_http.c-1695-
./nginx/src/http/ngx_http.c-1696-        if (i == last - 1) {
./nginx/src/http/ngx_http.c-1697-            hport->naddrs = last;
./nginx/src/http/ngx_http.c-1698-
./nginx/src/http/ngx_http.c-1699-        } else {
--
./nginx/src/http/ngx_http.c-1797-
./nginx/src/http/ngx_http.c-1798-static ngx_int_t
./nginx/src/http/ngx_http.c-1799-ngx_http_add_addrs(ngx_conf_t *cf, ngx_http_port_t *hport,
./nginx/src/http/ngx_http.c-1800-    ngx_http_conf_addr_t *addr)
./nginx/src/http/ngx_http.c-1801-{
./nginx/src/http/ngx_http.c-1802-    ngx_uint_t                 i;
./nginx/src/http/ngx_http.c-1803-    ngx_http_in_addr_t        *addrs;
./nginx/src/http/ngx_http.c-1804-    struct sockaddr_in        *sin;
./nginx/src/http/ngx_http.c-1805-    ngx_http_virtual_names_t  *vn;
./nginx/src/http/ngx_http.c-1806-
./nginx/src/http/ngx_http.c:1807:    hport->addrs = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http.c-1808-                               hport->naddrs * sizeof(ngx_http_in_addr_t));
./nginx/src/http/ngx_http.c-1809-    if (hport->addrs == NULL) {
./nginx/src/http/ngx_http.c-1810-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-1811-    }
./nginx/src/http/ngx_http.c-1812-
./nginx/src/http/ngx_http.c-1813-    addrs = hport->addrs;
./nginx/src/http/ngx_http.c-1814-
./nginx/src/http/ngx_http.c-1815-    for (i = 0; i < hport->naddrs; i++) {
./nginx/src/http/ngx_http.c-1816-
./nginx/src/http/ngx_http.c-1817-        sin = &addr[i].opt.u.sockaddr_in;
--
./nginx/src/http/ngx_http.c-1827-            && (addr[i].wc_tail == NULL
./nginx/src/http/ngx_http.c-1828-                || addr[i].wc_tail->hash.buckets == NULL)
./nginx/src/http/ngx_http.c-1829-#if (NGX_PCRE)
./nginx/src/http/ngx_http.c-1830-            && addr[i].nregex == 0
./nginx/src/http/ngx_http.c-1831-#endif
./nginx/src/http/ngx_http.c-1832-            )
./nginx/src/http/ngx_http.c-1833-        {
./nginx/src/http/ngx_http.c-1834-            continue;
./nginx/src/http/ngx_http.c-1835-        }
./nginx/src/http/ngx_http.c-1836-
./nginx/src/http/ngx_http.c:1837:        vn = ngx_palloc(cf->pool, sizeof(ngx_http_virtual_names_t));
./nginx/src/http/ngx_http.c-1838-        if (vn == NULL) {
./nginx/src/http/ngx_http.c-1839-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-1840-        }
./nginx/src/http/ngx_http.c-1841-
./nginx/src/http/ngx_http.c-1842-        addrs[i].conf.virtual_names = vn;
./nginx/src/http/ngx_http.c-1843-
./nginx/src/http/ngx_http.c-1844-        vn->names.hash = addr[i].hash;
./nginx/src/http/ngx_http.c-1845-        vn->names.wc_head = addr[i].wc_head;
./nginx/src/http/ngx_http.c-1846-        vn->names.wc_tail = addr[i].wc_tail;
./nginx/src/http/ngx_http.c-1847-#if (NGX_PCRE)
--
./nginx/src/http/ngx_http.c-1858-
./nginx/src/http/ngx_http.c-1859-static ngx_int_t
./nginx/src/http/ngx_http.c-1860-ngx_http_add_addrs6(ngx_conf_t *cf, ngx_http_port_t *hport,
./nginx/src/http/ngx_http.c-1861-    ngx_http_conf_addr_t *addr)
./nginx/src/http/ngx_http.c-1862-{
./nginx/src/http/ngx_http.c-1863-    ngx_uint_t                 i;
./nginx/src/http/ngx_http.c-1864-    ngx_http_in6_addr_t       *addrs6;
./nginx/src/http/ngx_http.c-1865-    struct sockaddr_in6       *sin6;
./nginx/src/http/ngx_http.c-1866-    ngx_http_virtual_names_t  *vn;
./nginx/src/http/ngx_http.c-1867-
./nginx/src/http/ngx_http.c:1868:    hport->addrs = ngx_pcalloc(cf->pool,
./nginx/src/http/ngx_http.c-1869-                               hport->naddrs * sizeof(ngx_http_in6_addr_t));
./nginx/src/http/ngx_http.c-1870-    if (hport->addrs == NULL) {
./nginx/src/http/ngx_http.c-1871-        return NGX_ERROR;
./nginx/src/http/ngx_http.c-1872-    }
./nginx/src/http/ngx_http.c-1873-
./nginx/src/http/ngx_http.c-1874-    addrs6 = hport->addrs;
./nginx/src/http/ngx_http.c-1875-
./nginx/src/http/ngx_http.c-1876-    for (i = 0; i < hport->naddrs; i++) {
./nginx/src/http/ngx_http.c-1877-
./nginx/src/http/ngx_http.c-1878-        sin6 = &addr[i].opt.u.sockaddr_in6;
--
./nginx/src/http/ngx_http.c-1888-            && (addr[i].wc_tail == NULL
./nginx/src/http/ngx_http.c-1889-                || addr[i].wc_tail->hash.buckets == NULL)
./nginx/src/http/ngx_http.c-1890-#if (NGX_PCRE)
./nginx/src/http/ngx_http.c-1891-            && addr[i].nregex == 0
./nginx/src/http/ngx_http.c-1892-#endif
./nginx/src/http/ngx_http.c-1893-            )
./nginx/src/http/ngx_http.c-1894-        {
./nginx/src/http/ngx_http.c-1895-            continue;
./nginx/src/http/ngx_http.c-1896-        }
./nginx/src/http/ngx_http.c-1897-
./nginx/src/http/ngx_http.c:1898:        vn = ngx_palloc(cf->pool, sizeof(ngx_http_virtual_names_t));
./nginx/src/http/ngx_http.c-1899-        if (vn == NULL) {
./nginx/src/http/ngx_http.c-1900-            return NGX_ERROR;
./nginx/src/http/ngx_http.c-1901-        }
./nginx/src/http/ngx_http.c-1902-
./nginx/src/http/ngx_http.c-1903-        addrs6[i].conf.virtual_names = vn;
./nginx/src/http/ngx_http.c-1904-
./nginx/src/http/ngx_http.c-1905-        vn->names.hash = addr[i].hash;
./nginx/src/http/ngx_http.c-1906-        vn->names.wc_head = addr[i].wc_head;
./nginx/src/http/ngx_http.c-1907-        vn->names.wc_tail = addr[i].wc_tail;
./nginx/src/http/ngx_http.c-1908-#if (NGX_PCRE)
--
./nginx/src/http/ngx_http.c-2001-
./nginx/src/http/ngx_http.c-2002-        if (*keys == (void *) -1) {
./nginx/src/http/ngx_http.c-2003-            return NGX_CONF_OK;
./nginx/src/http/ngx_http.c-2004-        }
./nginx/src/http/ngx_http.c-2005-
./nginx/src/http/ngx_http.c-2006-        hash.hash = types_hash;
./nginx/src/http/ngx_http.c-2007-        hash.key = NULL;
./nginx/src/http/ngx_http.c-2008-        hash.max_size = 2048;
./nginx/src/http/ngx_http.c-2009-        hash.bucket_size = 64;
./nginx/src/http/ngx_http.c-2010-        hash.name = "test_types_hash";
./nginx/src/http/ngx_http.c:2011:        hash.pool = cf->pool;
./nginx/src/http/ngx_http.c-2012-        hash.temp_pool = NULL;
./nginx/src/http/ngx_http.c-2013-
./nginx/src/http/ngx_http.c-2014-        if (ngx_hash_init(&hash, (*keys)->elts, (*keys)->nelts) != NGX_OK) {
./nginx/src/http/ngx_http.c-2015-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-2016-        }
./nginx/src/http/ngx_http.c-2017-
./nginx/src/http/ngx_http.c-2018-        return NGX_CONF_OK;
./nginx/src/http/ngx_http.c-2019-    }
./nginx/src/http/ngx_http.c-2020-
./nginx/src/http/ngx_http.c-2021-    if (prev_types_hash->buckets == NULL) {
--
./nginx/src/http/ngx_http.c-2031-        } else if (*prev_keys == (void *) -1) {
./nginx/src/http/ngx_http.c-2032-            *keys = *prev_keys;
./nginx/src/http/ngx_http.c-2033-            return NGX_CONF_OK;
./nginx/src/http/ngx_http.c-2034-        }
./nginx/src/http/ngx_http.c-2035-
./nginx/src/http/ngx_http.c-2036-        hash.hash = prev_types_hash;
./nginx/src/http/ngx_http.c-2037-        hash.key = NULL;
./nginx/src/http/ngx_http.c-2038-        hash.max_size = 2048;
./nginx/src/http/ngx_http.c-2039-        hash.bucket_size = 64;
./nginx/src/http/ngx_http.c-2040-        hash.name = "test_types_hash";
./nginx/src/http/ngx_http.c:2041:        hash.pool = cf->pool;
./nginx/src/http/ngx_http.c-2042-        hash.temp_pool = NULL;
./nginx/src/http/ngx_http.c-2043-
./nginx/src/http/ngx_http.c-2044-        if (ngx_hash_init(&hash, (*prev_keys)->elts, (*prev_keys)->nelts)
./nginx/src/http/ngx_http.c-2045-            != NGX_OK)
./nginx/src/http/ngx_http.c-2046-        {
./nginx/src/http/ngx_http.c-2047-            return NGX_CONF_ERROR;
./nginx/src/http/ngx_http.c-2048-        }
./nginx/src/http/ngx_http.c-2049-    }
./nginx/src/http/ngx_http.c-2050-
./nginx/src/http/ngx_http.c-2051-    *types_hash = *prev_types_hash;
--
./nginx/src/http/ngx_http_busy_lock.c-203-    ngx_uint_t             i, dup, invalid;
./nginx/src/http/ngx_http_busy_lock.c-204-    ngx_str_t             *value, line;
./nginx/src/http/ngx_http_busy_lock.c-205-    ngx_http_busy_lock_t  *bl, **blp;
./nginx/src/http/ngx_http_busy_lock.c-206-
./nginx/src/http/ngx_http_busy_lock.c-207-    blp = (ngx_http_busy_lock_t **) (p + cmd->offset);
./nginx/src/http/ngx_http_busy_lock.c-208-    if (*blp) {
./nginx/src/http/ngx_http_busy_lock.c-209-        return "is duplicate";
./nginx/src/http/ngx_http_busy_lock.c-210-    }
./nginx/src/http/ngx_http_busy_lock.c-211-
./nginx/src/http/ngx_http_busy_lock.c-212-    /* ngx_calloc_shared() */
./nginx/src/http/ngx_http_busy_lock.c:213:    bl = ngx_pcalloc(cf->pool, sizeof(ngx_http_busy_lock_t));
./nginx/src/http/ngx_http_busy_lock.c-214-    if (bl == NULL) {
./nginx/src/http/ngx_http_busy_lock.c-215-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_busy_lock.c-216-    }
./nginx/src/http/ngx_http_busy_lock.c-217-    *blp = bl;
./nginx/src/http/ngx_http_busy_lock.c-218-
./nginx/src/http/ngx_http_busy_lock.c-219-    /* ngx_calloc_shared() */
./nginx/src/http/ngx_http_busy_lock.c:220:    bl->mutex = ngx_pcalloc(cf->pool, sizeof(ngx_event_mutex_t));
./nginx/src/http/ngx_http_busy_lock.c-221-    if (bl->mutex == NULL) {
./nginx/src/http/ngx_http_busy_lock.c-222-        return NGX_CONF_ERROR;
./nginx/src/http/ngx_http_busy_lock.c-223-    }
./nginx/src/http/ngx_http_busy_lock.c-224-
./nginx/src/http/ngx_http_busy_lock.c-225-    dup = 0;
./nginx/src/http/ngx_http_busy_lock.c-226-    invalid = 0;
./nginx/src/http/ngx_http_busy_lock.c-227-    value = cf->args->elts;
./nginx/src/http/ngx_http_busy_lock.c-228-
./nginx/src/http/ngx_http_busy_lock.c-229-    for (i = 1; i < cf->args->nelts; i++) {
./nginx/src/http/ngx_http_busy_lock.c-230-
--
./nginx/src/os/unix/ngx_file_aio_read.c-31-extern int  ngx_kqueue;
./nginx/src/os/unix/ngx_file_aio_read.c-32-
./nginx/src/os/unix/ngx_file_aio_read.c-33-
./nginx/src/os/unix/ngx_file_aio_read.c-34-static ssize_t ngx_file_aio_result(ngx_file_t *file, ngx_event_aio_t *aio,
./nginx/src/os/unix/ngx_file_aio_read.c-35-    ngx_event_t *ev);
./nginx/src/os/unix/ngx_file_aio_read.c-36-static void ngx_file_aio_event_handler(ngx_event_t *ev);
./nginx/src/os/unix/ngx_file_aio_read.c-37-
./nginx/src/os/unix/ngx_file_aio_read.c-38-
./nginx/src/os/unix/ngx_file_aio_read.c-39-ssize_t
./nginx/src/os/unix/ngx_file_aio_read.c-40-ngx_file_aio_read(ngx_file_t *file, u_char *buf, size_t size, off_t offset,
./nginx/src/os/unix/ngx_file_aio_read.c:41:    ngx_pool_t *pool)
./nginx/src/os/unix/ngx_file_aio_read.c-42-{
./nginx/src/os/unix/ngx_file_aio_read.c-43-    int               n;
./nginx/src/os/unix/ngx_file_aio_read.c-44-    ngx_event_t      *ev;
./nginx/src/os/unix/ngx_file_aio_read.c-45-    ngx_event_aio_t  *aio;
./nginx/src/os/unix/ngx_file_aio_read.c-46-
./nginx/src/os/unix/ngx_file_aio_read.c-47-    if (!ngx_file_aio) {
./nginx/src/os/unix/ngx_file_aio_read.c-48-        return ngx_read_file(file, buf, size, offset);
./nginx/src/os/unix/ngx_file_aio_read.c-49-    }
./nginx/src/os/unix/ngx_file_aio_read.c-50-
./nginx/src/os/unix/ngx_file_aio_read.c-51-    aio = file->aio;
./nginx/src/os/unix/ngx_file_aio_read.c-52-
./nginx/src/os/unix/ngx_file_aio_read.c-53-    if (aio == NULL) {
./nginx/src/os/unix/ngx_file_aio_read.c:54:        aio = ngx_pcalloc(pool, sizeof(ngx_event_aio_t));
./nginx/src/os/unix/ngx_file_aio_read.c-55-        if (aio == NULL) {
./nginx/src/os/unix/ngx_file_aio_read.c-56-            return NGX_ERROR;
./nginx/src/os/unix/ngx_file_aio_read.c-57-        }
./nginx/src/os/unix/ngx_file_aio_read.c-58-
./nginx/src/os/unix/ngx_file_aio_read.c-59-        aio->file = file;
./nginx/src/os/unix/ngx_file_aio_read.c-60-        aio->fd = file->fd;
./nginx/src/os/unix/ngx_file_aio_read.c-61-        aio->event.data = aio;
./nginx/src/os/unix/ngx_file_aio_read.c-62-        aio->event.ready = 1;
./nginx/src/os/unix/ngx_file_aio_read.c-63-        aio->event.log = file->log;
./nginx/src/os/unix/ngx_file_aio_read.c-64-#if (NGX_HAVE_AIO_SENDFILE)
--
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-77-        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-78-    }
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-79-
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-80-    send = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-81-    eagain = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-82-    flags = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-83-
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-84-    header.elts = headers;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-85-    header.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-86-    header.nalloc = NGX_HEADERS;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c:87:    header.pool = c->pool;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-88-
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-89-    trailer.elts = trailers;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-90-    trailer.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-91-    trailer.nalloc = NGX_TRAILERS;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c:92:    trailer.pool = c->pool;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-93-
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-94-    for ( ;; ) {
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-95-        file = NULL;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-96-        file_size = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-97-        header_size = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-98-        eintr = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-99-        complete = 0;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-100-        prev_send = send;
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-101-
./nginx/src/os/unix/ngx_freebsd_sendfile_chain.c-102-        header.nelts = 0;
--
./nginx/src/os/unix/ngx_user.c-17- * TODO:
./nginx/src/os/unix/ngx_user.c-18- *     ngx_crypt_init() to init mutex
./nginx/src/os/unix/ngx_user.c-19- */
./nginx/src/os/unix/ngx_user.c-20-
./nginx/src/os/unix/ngx_user.c-21-
./nginx/src/os/unix/ngx_user.c-22-#if (NGX_CRYPT)
./nginx/src/os/unix/ngx_user.c-23-
./nginx/src/os/unix/ngx_user.c-24-#if (NGX_HAVE_GNU_CRYPT_R)
./nginx/src/os/unix/ngx_user.c-25-
./nginx/src/os/unix/ngx_user.c-26-ngx_int_t
./nginx/src/os/unix/ngx_user.c:27:ngx_libc_crypt(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/os/unix/ngx_user.c-28-{
./nginx/src/os/unix/ngx_user.c-29-    char               *value;
./nginx/src/os/unix/ngx_user.c-30-    size_t              len;
./nginx/src/os/unix/ngx_user.c-31-    struct crypt_data   cd;
./nginx/src/os/unix/ngx_user.c-32-
./nginx/src/os/unix/ngx_user.c-33-    cd.initialized = 0;
./nginx/src/os/unix/ngx_user.c-34-    /* work around the glibc bug */
./nginx/src/os/unix/ngx_user.c-35-    cd.current_salt[0] = ~salt[0];
./nginx/src/os/unix/ngx_user.c-36-
./nginx/src/os/unix/ngx_user.c-37-    value = crypt_r((char *) key, (char *) salt, &cd);
./nginx/src/os/unix/ngx_user.c-38-
./nginx/src/os/unix/ngx_user.c-39-    if (value) {
./nginx/src/os/unix/ngx_user.c-40-        len = ngx_strlen(value) + 1;
./nginx/src/os/unix/ngx_user.c-41-
./nginx/src/os/unix/ngx_user.c:42:        *encrypted = ngx_pnalloc(pool, len);
./nginx/src/os/unix/ngx_user.c-43-        if (*encrypted == NULL) {
./nginx/src/os/unix/ngx_user.c-44-            return NGX_ERROR;
./nginx/src/os/unix/ngx_user.c-45-        }
./nginx/src/os/unix/ngx_user.c-46-
./nginx/src/os/unix/ngx_user.c-47-        ngx_memcpy(*encrypted, value, len);
./nginx/src/os/unix/ngx_user.c-48-        return NGX_OK;
./nginx/src/os/unix/ngx_user.c-49-    }
./nginx/src/os/unix/ngx_user.c-50-
./nginx/src/os/unix/ngx_user.c:51:    ngx_log_error(NGX_LOG_CRIT, pool->log, ngx_errno, "crypt_r() failed");
./nginx/src/os/unix/ngx_user.c-52-
./nginx/src/os/unix/ngx_user.c-53-    return NGX_ERROR;
./nginx/src/os/unix/ngx_user.c-54-}
./nginx/src/os/unix/ngx_user.c-55-
./nginx/src/os/unix/ngx_user.c-56-#else
./nginx/src/os/unix/ngx_user.c-57-
./nginx/src/os/unix/ngx_user.c-58-ngx_int_t
./nginx/src/os/unix/ngx_user.c:59:ngx_libc_crypt(ngx_pool_t *pool, u_char *key, u_char *salt, u_char **encrypted)
./nginx/src/os/unix/ngx_user.c-60-{
./nginx/src/os/unix/ngx_user.c-61-    char       *value;
./nginx/src/os/unix/ngx_user.c-62-    size_t      len;
./nginx/src/os/unix/ngx_user.c-63-    ngx_err_t   err;
./nginx/src/os/unix/ngx_user.c-64-
./nginx/src/os/unix/ngx_user.c-65-#if (NGX_THREADS && NGX_NONREENTRANT_CRYPT)
./nginx/src/os/unix/ngx_user.c-66-
./nginx/src/os/unix/ngx_user.c-67-    /* crypt() is a time consuming function, so we only try to lock */
./nginx/src/os/unix/ngx_user.c-68-
./nginx/src/os/unix/ngx_user.c-69-    if (ngx_mutex_trylock(ngx_crypt_mutex) != NGX_OK) {
./nginx/src/os/unix/ngx_user.c-70-        return NGX_AGAIN;
./nginx/src/os/unix/ngx_user.c-71-    }
./nginx/src/os/unix/ngx_user.c-72-
./nginx/src/os/unix/ngx_user.c-73-#endif
./nginx/src/os/unix/ngx_user.c-74-
./nginx/src/os/unix/ngx_user.c-75-    value = crypt((char *) key, (char *) salt);
./nginx/src/os/unix/ngx_user.c-76-
./nginx/src/os/unix/ngx_user.c-77-    if (value) {
./nginx/src/os/unix/ngx_user.c-78-        len = ngx_strlen(value) + 1;
./nginx/src/os/unix/ngx_user.c-79-
./nginx/src/os/unix/ngx_user.c:80:        *encrypted = ngx_pnalloc(pool, len);
./nginx/src/os/unix/ngx_user.c-81-        if (*encrypted == NULL) {
./nginx/src/os/unix/ngx_user.c-82-#if (NGX_THREADS && NGX_NONREENTRANT_CRYPT)
./nginx/src/os/unix/ngx_user.c-83-            ngx_mutex_unlock(ngx_crypt_mutex);
./nginx/src/os/unix/ngx_user.c-84-#endif
./nginx/src/os/unix/ngx_user.c-85-            return NGX_ERROR;
./nginx/src/os/unix/ngx_user.c-86-        }
./nginx/src/os/unix/ngx_user.c-87-
./nginx/src/os/unix/ngx_user.c-88-        ngx_memcpy(*encrypted, value, len);
./nginx/src/os/unix/ngx_user.c-89-#if (NGX_THREADS && NGX_NONREENTRANT_CRYPT)
./nginx/src/os/unix/ngx_user.c-90-        ngx_mutex_unlock(ngx_crypt_mutex);
./nginx/src/os/unix/ngx_user.c-91-#endif
./nginx/src/os/unix/ngx_user.c-92-        return NGX_OK;
./nginx/src/os/unix/ngx_user.c-93-    }
./nginx/src/os/unix/ngx_user.c-94-
./nginx/src/os/unix/ngx_user.c-95-    err = ngx_errno;
./nginx/src/os/unix/ngx_user.c-96-
./nginx/src/os/unix/ngx_user.c-97-#if (NGX_THREADS && NGX_NONREENTRANT_CRYPT)
./nginx/src/os/unix/ngx_user.c-98-    ngx_mutex_unlock(ngx_crypt_mutex);
./nginx/src/os/unix/ngx_user.c-99-#endif
./nginx/src/os/unix/ngx_user.c-100-
./nginx/src/os/unix/ngx_user.c:101:    ngx_log_error(NGX_LOG_CRIT, pool->log, err, "crypt() failed");
./nginx/src/os/unix/ngx_user.c-102-
./nginx/src/os/unix/ngx_user.c-103-    return NGX_ERROR;
./nginx/src/os/unix/ngx_user.c-104-}
./nginx/src/os/unix/ngx_user.c-105-
./nginx/src/os/unix/ngx_user.c-106-#endif
./nginx/src/os/unix/ngx_user.c-107-
./nginx/src/os/unix/ngx_user.c-108-#endif /* NGX_CRYPT */
--
./nginx/src/os/unix/ngx_linux_aio_read.c-19-
./nginx/src/os/unix/ngx_linux_aio_read.c-20-static int
./nginx/src/os/unix/ngx_linux_aio_read.c-21-io_submit(aio_context_t ctx, long n, struct iocb **paiocb)
./nginx/src/os/unix/ngx_linux_aio_read.c-22-{
./nginx/src/os/unix/ngx_linux_aio_read.c-23-    return syscall(SYS_io_submit, ctx, n, paiocb);
./nginx/src/os/unix/ngx_linux_aio_read.c-24-}
./nginx/src/os/unix/ngx_linux_aio_read.c-25-
./nginx/src/os/unix/ngx_linux_aio_read.c-26-
./nginx/src/os/unix/ngx_linux_aio_read.c-27-ssize_t
./nginx/src/os/unix/ngx_linux_aio_read.c-28-ngx_file_aio_read(ngx_file_t *file, u_char *buf, size_t size, off_t offset,
./nginx/src/os/unix/ngx_linux_aio_read.c:29:    ngx_pool_t *pool)
./nginx/src/os/unix/ngx_linux_aio_read.c-30-{
./nginx/src/os/unix/ngx_linux_aio_read.c-31-    ngx_err_t         err;
./nginx/src/os/unix/ngx_linux_aio_read.c-32-    struct iocb      *piocb[1];
./nginx/src/os/unix/ngx_linux_aio_read.c-33-    ngx_event_t      *ev;
./nginx/src/os/unix/ngx_linux_aio_read.c-34-    ngx_event_aio_t  *aio;
./nginx/src/os/unix/ngx_linux_aio_read.c-35-
./nginx/src/os/unix/ngx_linux_aio_read.c-36-    if (!ngx_file_aio) {
./nginx/src/os/unix/ngx_linux_aio_read.c-37-        return ngx_read_file(file, buf, size, offset);
./nginx/src/os/unix/ngx_linux_aio_read.c-38-    }
./nginx/src/os/unix/ngx_linux_aio_read.c-39-
./nginx/src/os/unix/ngx_linux_aio_read.c-40-    aio = file->aio;
./nginx/src/os/unix/ngx_linux_aio_read.c-41-
./nginx/src/os/unix/ngx_linux_aio_read.c-42-    if (aio == NULL) {
./nginx/src/os/unix/ngx_linux_aio_read.c:43:        aio = ngx_pcalloc(pool, sizeof(ngx_event_aio_t));
./nginx/src/os/unix/ngx_linux_aio_read.c-44-        if (aio == NULL) {
./nginx/src/os/unix/ngx_linux_aio_read.c-45-            return NGX_ERROR;
./nginx/src/os/unix/ngx_linux_aio_read.c-46-        }
./nginx/src/os/unix/ngx_linux_aio_read.c-47-
./nginx/src/os/unix/ngx_linux_aio_read.c-48-        aio->file = file;
./nginx/src/os/unix/ngx_linux_aio_read.c-49-        aio->fd = file->fd;
./nginx/src/os/unix/ngx_linux_aio_read.c-50-        aio->event.data = aio;
./nginx/src/os/unix/ngx_linux_aio_read.c-51-        aio->event.ready = 1;
./nginx/src/os/unix/ngx_linux_aio_read.c-52-        aio->event.log = file->log;
./nginx/src/os/unix/ngx_linux_aio_read.c-53-        file->aio = aio;
--
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-74-    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-75-        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-76-    }
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-77-
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-78-
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-79-    send = 0;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-80-
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-81-    vec.elts = sfvs;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-82-    vec.size = sizeof(sendfilevec_t);
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-83-    vec.nalloc = NGX_SENDFILEVECS;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c:84:    vec.pool = c->pool;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-85-
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-86-    for ( ;; ) {
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-87-        fd = SFV_FD_SELF;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-88-        prev = NULL;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-89-        fprev = 0;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-90-        sfv = NULL;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-91-        eintr = 0;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-92-        complete = 0;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-93-        sent = 0;
./nginx/src/os/unix/ngx_solaris_sendfilev_chain.c-94-        prev_send = send;
--
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-66-    if (limit == 0 || limit > (off_t) (NGX_SENDFILE_LIMIT - ngx_pagesize)) {
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-67-        limit = NGX_SENDFILE_LIMIT - ngx_pagesize;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-68-    }
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-69-
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-70-
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-71-    send = 0;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-72-
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-73-    header.elts = headers;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-74-    header.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-75-    header.nalloc = NGX_HEADERS;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c:76:    header.pool = c->pool;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-77-
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-78-    for ( ;; ) {
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-79-        file = NULL;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-80-        file_size = 0;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-81-        eintr = 0;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-82-        complete = 0;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-83-        prev_send = send;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-84-
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-85-        header.nelts = 0;
./nginx/src/os/unix/ngx_linux_sendfile_chain.c-86-
--
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-73-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-74-    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-75-        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-76-    }
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-77-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-78-    send = 0;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-79-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-80-    header.elts = headers;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-81-    header.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-82-    header.nalloc = NGX_HEADERS;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c:83:    header.pool = c->pool;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-84-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-85-    trailer.elts = trailers;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-86-    trailer.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-87-    trailer.nalloc = NGX_TRAILERS;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c:88:    trailer.pool = c->pool;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-89-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-90-    for ( ;; ) {
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-91-        file = NULL;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-92-        file_size = 0;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-93-        header_size = 0;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-94-        eintr = 0;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-95-        complete = 0;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-96-        prev_send = send;
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-97-
./nginx/src/os/unix/ngx_darwin_sendfile_chain.c-98-        header.nelts = 0;
--
./nginx/src/os/unix/ngx_readv_chain.c-55-    }
./nginx/src/os/unix/ngx_readv_chain.c-56-
./nginx/src/os/unix/ngx_readv_chain.c-57-    prev = NULL;
./nginx/src/os/unix/ngx_readv_chain.c-58-    iov = NULL;
./nginx/src/os/unix/ngx_readv_chain.c-59-    size = 0;
./nginx/src/os/unix/ngx_readv_chain.c-60-
./nginx/src/os/unix/ngx_readv_chain.c-61-    vec.elts = iovs;
./nginx/src/os/unix/ngx_readv_chain.c-62-    vec.nelts = 0;
./nginx/src/os/unix/ngx_readv_chain.c-63-    vec.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_readv_chain.c-64-    vec.nalloc = NGX_IOVS;
./nginx/src/os/unix/ngx_readv_chain.c:65:    vec.pool = c->pool;
./nginx/src/os/unix/ngx_readv_chain.c-66-
./nginx/src/os/unix/ngx_readv_chain.c-67-    /* coalesce the neighbouring bufs */
./nginx/src/os/unix/ngx_readv_chain.c-68-
./nginx/src/os/unix/ngx_readv_chain.c-69-    while (chain) {
./nginx/src/os/unix/ngx_readv_chain.c-70-        if (prev == chain->buf->last) {
./nginx/src/os/unix/ngx_readv_chain.c-71-            iov->iov_len += chain->buf->end - chain->buf->last;
./nginx/src/os/unix/ngx_readv_chain.c-72-
./nginx/src/os/unix/ngx_readv_chain.c-73-        } else {
./nginx/src/os/unix/ngx_readv_chain.c-74-            if (vec.nelts >= IOV_MAX) {
./nginx/src/os/unix/ngx_readv_chain.c-75-                break;
--
./nginx/src/os/unix/ngx_readv_chain.c-183-    struct iovec  *iov, iovs[NGX_IOVS];
./nginx/src/os/unix/ngx_readv_chain.c-184-
./nginx/src/os/unix/ngx_readv_chain.c-185-    prev = NULL;
./nginx/src/os/unix/ngx_readv_chain.c-186-    iov = NULL;
./nginx/src/os/unix/ngx_readv_chain.c-187-    size = 0;
./nginx/src/os/unix/ngx_readv_chain.c-188-
./nginx/src/os/unix/ngx_readv_chain.c-189-    vec.elts = iovs;
./nginx/src/os/unix/ngx_readv_chain.c-190-    vec.nelts = 0;
./nginx/src/os/unix/ngx_readv_chain.c-191-    vec.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_readv_chain.c-192-    vec.nalloc = NGX_IOVS;
./nginx/src/os/unix/ngx_readv_chain.c:193:    vec.pool = c->pool;
./nginx/src/os/unix/ngx_readv_chain.c-194-
./nginx/src/os/unix/ngx_readv_chain.c-195-    /* coalesce the neighbouring bufs */
./nginx/src/os/unix/ngx_readv_chain.c-196-
./nginx/src/os/unix/ngx_readv_chain.c-197-    while (chain) {
./nginx/src/os/unix/ngx_readv_chain.c-198-        if (prev == chain->buf->last) {
./nginx/src/os/unix/ngx_readv_chain.c-199-            iov->iov_len += chain->buf->end - chain->buf->last;
./nginx/src/os/unix/ngx_readv_chain.c-200-
./nginx/src/os/unix/ngx_readv_chain.c-201-        } else {
./nginx/src/os/unix/ngx_readv_chain.c-202-            if (vec.nelts >= IOV_MAX) {
./nginx/src/os/unix/ngx_readv_chain.c-203-                break;
--
./nginx/src/os/unix/ngx_files.c-143-    }
./nginx/src/os/unix/ngx_files.c-144-
./nginx/src/os/unix/ngx_files.c-145-    return fd;
./nginx/src/os/unix/ngx_files.c-146-}
./nginx/src/os/unix/ngx_files.c-147-
./nginx/src/os/unix/ngx_files.c-148-
./nginx/src/os/unix/ngx_files.c-149-#define NGX_IOVS  8
./nginx/src/os/unix/ngx_files.c-150-
./nginx/src/os/unix/ngx_files.c-151-ssize_t
./nginx/src/os/unix/ngx_files.c-152-ngx_write_chain_to_file(ngx_file_t *file, ngx_chain_t *cl, off_t offset,
./nginx/src/os/unix/ngx_files.c:153:    ngx_pool_t *pool)
./nginx/src/os/unix/ngx_files.c-154-{
./nginx/src/os/unix/ngx_files.c-155-    u_char        *prev;
./nginx/src/os/unix/ngx_files.c-156-    size_t         size;
./nginx/src/os/unix/ngx_files.c-157-    ssize_t        total, n;
./nginx/src/os/unix/ngx_files.c-158-    ngx_array_t    vec;
./nginx/src/os/unix/ngx_files.c-159-    struct iovec  *iov, iovs[NGX_IOVS];
./nginx/src/os/unix/ngx_files.c-160-
./nginx/src/os/unix/ngx_files.c-161-    /* use pwrite() if there is the only buf in a chain */
./nginx/src/os/unix/ngx_files.c-162-
./nginx/src/os/unix/ngx_files.c-163-    if (cl->next == NULL) {
./nginx/src/os/unix/ngx_files.c-164-        return ngx_write_file(file, cl->buf->pos,
./nginx/src/os/unix/ngx_files.c-165-                              (size_t) (cl->buf->last - cl->buf->pos),
./nginx/src/os/unix/ngx_files.c-166-                              offset);
./nginx/src/os/unix/ngx_files.c-167-    }
./nginx/src/os/unix/ngx_files.c-168-
./nginx/src/os/unix/ngx_files.c-169-    total = 0;
./nginx/src/os/unix/ngx_files.c-170-
./nginx/src/os/unix/ngx_files.c-171-    vec.elts = iovs;
./nginx/src/os/unix/ngx_files.c-172-    vec.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_files.c-173-    vec.nalloc = NGX_IOVS;
./nginx/src/os/unix/ngx_files.c:174:    vec.pool = pool;
./nginx/src/os/unix/ngx_files.c-175-
./nginx/src/os/unix/ngx_files.c-176-    do {
./nginx/src/os/unix/ngx_files.c-177-        prev = NULL;
./nginx/src/os/unix/ngx_files.c-178-        iov = NULL;
./nginx/src/os/unix/ngx_files.c-179-        size = 0;
./nginx/src/os/unix/ngx_files.c-180-
./nginx/src/os/unix/ngx_files.c-181-        vec.nelts = 0;
./nginx/src/os/unix/ngx_files.c-182-
./nginx/src/os/unix/ngx_files.c-183-        /* create the iovec and coalesce the neighbouring bufs */
./nginx/src/os/unix/ngx_files.c-184-
--
./nginx/src/os/unix/ngx_writev_chain.c-51-
./nginx/src/os/unix/ngx_writev_chain.c-52-    if (limit == 0 || limit > (off_t) (NGX_MAX_SIZE_T_VALUE - ngx_pagesize)) {
./nginx/src/os/unix/ngx_writev_chain.c-53-        limit = NGX_MAX_SIZE_T_VALUE - ngx_pagesize;
./nginx/src/os/unix/ngx_writev_chain.c-54-    }
./nginx/src/os/unix/ngx_writev_chain.c-55-
./nginx/src/os/unix/ngx_writev_chain.c-56-    send = 0;
./nginx/src/os/unix/ngx_writev_chain.c-57-
./nginx/src/os/unix/ngx_writev_chain.c-58-    vec.elts = iovs;
./nginx/src/os/unix/ngx_writev_chain.c-59-    vec.size = sizeof(struct iovec);
./nginx/src/os/unix/ngx_writev_chain.c-60-    vec.nalloc = NGX_IOVS;
./nginx/src/os/unix/ngx_writev_chain.c:61:    vec.pool = c->pool;
./nginx/src/os/unix/ngx_writev_chain.c-62-
./nginx/src/os/unix/ngx_writev_chain.c-63-    for ( ;; ) {
./nginx/src/os/unix/ngx_writev_chain.c-64-        prev = NULL;
./nginx/src/os/unix/ngx_writev_chain.c-65-        iov = NULL;
./nginx/src/os/unix/ngx_writev_chain.c-66-        eintr = 0;
./nginx/src/os/unix/ngx_writev_chain.c-67-        complete = 0;
./nginx/src/os/unix/ngx_writev_chain.c-68-        prev_send = send;
./nginx/src/os/unix/ngx_writev_chain.c-69-
./nginx/src/os/unix/ngx_writev_chain.c-70-        vec.nelts = 0;
./nginx/src/os/unix/ngx_writev_chain.c-71-
--
./nginx/src/os/unix/ngx_channel.c-199-{
./nginx/src/os/unix/ngx_channel.c-200-    ngx_event_t       *ev, *rev, *wev;
./nginx/src/os/unix/ngx_channel.c-201-    ngx_connection_t  *c;
./nginx/src/os/unix/ngx_channel.c-202-
./nginx/src/os/unix/ngx_channel.c-203-    c = ngx_get_connection(fd, cycle->log);
./nginx/src/os/unix/ngx_channel.c-204-
./nginx/src/os/unix/ngx_channel.c-205-    if (c == NULL) {
./nginx/src/os/unix/ngx_channel.c-206-        return NGX_ERROR;
./nginx/src/os/unix/ngx_channel.c-207-    }
./nginx/src/os/unix/ngx_channel.c-208-
./nginx/src/os/unix/ngx_channel.c:209:    c->pool = cycle->pool;
./nginx/src/os/unix/ngx_channel.c-210-
./nginx/src/os/unix/ngx_channel.c-211-    rev = c->read;
./nginx/src/os/unix/ngx_channel.c-212-    wev = c->write;
./nginx/src/os/unix/ngx_channel.c-213-
./nginx/src/os/unix/ngx_channel.c-214-    rev->log = cycle->log;
./nginx/src/os/unix/ngx_channel.c-215-    wev->log = cycle->log;
./nginx/src/os/unix/ngx_channel.c-216-
./nginx/src/os/unix/ngx_channel.c-217-#if (NGX_THREADS)
./nginx/src/os/unix/ngx_channel.c-218-    rev->lock = &c->lock;
./nginx/src/os/unix/ngx_channel.c-219-    wev->lock = &c->lock;
--
./nginx/src/os/unix/ngx_process_cycle.c-123-
./nginx/src/os/unix/ngx_process_cycle.c-124-    sigemptyset(&set);
./nginx/src/os/unix/ngx_process_cycle.c-125-
./nginx/src/os/unix/ngx_process_cycle.c-126-
./nginx/src/os/unix/ngx_process_cycle.c-127-    size = sizeof(master_process);
./nginx/src/os/unix/ngx_process_cycle.c-128-
./nginx/src/os/unix/ngx_process_cycle.c-129-    for (i = 0; i < ngx_argc; i++) {
./nginx/src/os/unix/ngx_process_cycle.c-130-        size += ngx_strlen(ngx_argv[i]) + 1;
./nginx/src/os/unix/ngx_process_cycle.c-131-    }
./nginx/src/os/unix/ngx_process_cycle.c-132-
./nginx/src/os/unix/ngx_process_cycle.c:133:    title = ngx_pnalloc(cycle->pool, size);
./nginx/src/os/unix/ngx_process_cycle.c-134-
./nginx/src/os/unix/ngx_process_cycle.c-135-    p = ngx_cpymem(title, master_process, sizeof(master_process) - 1);
./nginx/src/os/unix/ngx_process_cycle.c-136-    for (i = 0; i < ngx_argc; i++) {
./nginx/src/os/unix/ngx_process_cycle.c-137-        *p++ = ' ';
./nginx/src/os/unix/ngx_process_cycle.c-138-        p = ngx_cpystrn(p, (u_char *) ngx_argv[i], size);
./nginx/src/os/unix/ngx_process_cycle.c-139-    }
./nginx/src/os/unix/ngx_process_cycle.c-140-
./nginx/src/os/unix/ngx_process_cycle.c-141-    ngx_setproctitle(title);
./nginx/src/os/unix/ngx_process_cycle.c-142-
./nginx/src/os/unix/ngx_process_cycle.c-143-
--
./nginx/src/os/unix/ngx_process_cycle.c-793-            ngx_modules[i]->exit_master(cycle);
./nginx/src/os/unix/ngx_process_cycle.c-794-        }
./nginx/src/os/unix/ngx_process_cycle.c-795-    }
./nginx/src/os/unix/ngx_process_cycle.c-796-
./nginx/src/os/unix/ngx_process_cycle.c-797-    ngx_close_listening_sockets(cycle);
./nginx/src/os/unix/ngx_process_cycle.c-798-
./nginx/src/os/unix/ngx_process_cycle.c-799-    /*
./nginx/src/os/unix/ngx_process_cycle.c-800-     * Copy ngx_cycle->log related data to the special static exit cycle,
./nginx/src/os/unix/ngx_process_cycle.c-801-     * log, and log file structures enough to allow a signal handler to log.
./nginx/src/os/unix/ngx_process_cycle.c-802-     * The handler may be called when standard ngx_cycle->log allocated from
./nginx/src/os/unix/ngx_process_cycle.c:803:     * ngx_cycle->pool is already destroyed.
./nginx/src/os/unix/ngx_process_cycle.c-804-     */
./nginx/src/os/unix/ngx_process_cycle.c-805-
./nginx/src/os/unix/ngx_process_cycle.c-806-    ngx_exit_log_file.fd = ngx_cycle->log->file->fd;
./nginx/src/os/unix/ngx_process_cycle.c-807-
./nginx/src/os/unix/ngx_process_cycle.c-808-    ngx_exit_log = *ngx_cycle->log;
./nginx/src/os/unix/ngx_process_cycle.c-809-    ngx_exit_log.file = &ngx_exit_log_file;
./nginx/src/os/unix/ngx_process_cycle.c-810-
./nginx/src/os/unix/ngx_process_cycle.c-811-    ngx_exit_cycle.log = &ngx_exit_log;
./nginx/src/os/unix/ngx_process_cycle.c-812-    ngx_exit_cycle.files = ngx_cycle->files;
./nginx/src/os/unix/ngx_process_cycle.c-813-    ngx_exit_cycle.files_n = ngx_cycle->files_n;
./nginx/src/os/unix/ngx_process_cycle.c-814-    ngx_cycle = &ngx_exit_cycle;
./nginx/src/os/unix/ngx_process_cycle.c-815-
./nginx/src/os/unix/ngx_process_cycle.c:816:    ngx_destroy_pool(cycle->pool);
./nginx/src/os/unix/ngx_process_cycle.c-817-
./nginx/src/os/unix/ngx_process_cycle.c-818-    exit(0);
./nginx/src/os/unix/ngx_process_cycle.c-819-}
./nginx/src/os/unix/ngx_process_cycle.c-820-
./nginx/src/os/unix/ngx_process_cycle.c-821-
./nginx/src/os/unix/ngx_process_cycle.c-822-static void
./nginx/src/os/unix/ngx_process_cycle.c-823-ngx_worker_process_cycle(ngx_cycle_t *cycle, void *data)
./nginx/src/os/unix/ngx_process_cycle.c-824-{
./nginx/src/os/unix/ngx_process_cycle.c-825-    ngx_int_t worker = (intptr_t) data;
./nginx/src/os/unix/ngx_process_cycle.c-826-
--
./nginx/src/os/unix/ngx_process_cycle.c-1145-        if (ngx_debug_quit) {
./nginx/src/os/unix/ngx_process_cycle.c-1146-            ngx_log_error(NGX_LOG_ALERT, cycle->log, 0, "aborting");
./nginx/src/os/unix/ngx_process_cycle.c-1147-            ngx_debug_point();
./nginx/src/os/unix/ngx_process_cycle.c-1148-        }
./nginx/src/os/unix/ngx_process_cycle.c-1149-    }
./nginx/src/os/unix/ngx_process_cycle.c-1150-
./nginx/src/os/unix/ngx_process_cycle.c-1151-    /*
./nginx/src/os/unix/ngx_process_cycle.c-1152-     * Copy ngx_cycle->log related data to the special static exit cycle,
./nginx/src/os/unix/ngx_process_cycle.c-1153-     * log, and log file structures enough to allow a signal handler to log.
./nginx/src/os/unix/ngx_process_cycle.c-1154-     * The handler may be called when standard ngx_cycle->log allocated from
./nginx/src/os/unix/ngx_process_cycle.c:1155:     * ngx_cycle->pool is already destroyed.
./nginx/src/os/unix/ngx_process_cycle.c-1156-     */
./nginx/src/os/unix/ngx_process_cycle.c-1157-
./nginx/src/os/unix/ngx_process_cycle.c-1158-    ngx_exit_log_file.fd = ngx_cycle->log->file->fd;
./nginx/src/os/unix/ngx_process_cycle.c-1159-
./nginx/src/os/unix/ngx_process_cycle.c-1160-    ngx_exit_log = *ngx_cycle->log;
./nginx/src/os/unix/ngx_process_cycle.c-1161-    ngx_exit_log.file = &ngx_exit_log_file;
./nginx/src/os/unix/ngx_process_cycle.c-1162-
./nginx/src/os/unix/ngx_process_cycle.c-1163-    ngx_exit_cycle.log = &ngx_exit_log;
./nginx/src/os/unix/ngx_process_cycle.c-1164-    ngx_exit_cycle.files = ngx_cycle->files;
./nginx/src/os/unix/ngx_process_cycle.c-1165-    ngx_exit_cycle.files_n = ngx_cycle->files_n;
./nginx/src/os/unix/ngx_process_cycle.c-1166-    ngx_cycle = &ngx_exit_cycle;
./nginx/src/os/unix/ngx_process_cycle.c-1167-
./nginx/src/os/unix/ngx_process_cycle.c:1168:    ngx_destroy_pool(cycle->pool);
./nginx/src/os/unix/ngx_process_cycle.c-1169-
./nginx/src/os/unix/ngx_process_cycle.c-1170-    ngx_log_error(NGX_LOG_NOTICE, ngx_cycle->log, 0, "exit");
./nginx/src/os/unix/ngx_process_cycle.c-1171-
./nginx/src/os/unix/ngx_process_cycle.c-1172-    exit(0);
./nginx/src/os/unix/ngx_process_cycle.c-1173-}
./nginx/src/os/unix/ngx_process_cycle.c-1174-
./nginx/src/os/unix/ngx_process_cycle.c-1175-
./nginx/src/os/unix/ngx_process_cycle.c-1176-static void
./nginx/src/os/unix/ngx_process_cycle.c-1177-ngx_channel_handler(ngx_event_t *ev)
./nginx/src/os/unix/ngx_process_cycle.c-1178-{
--
./nginx/src/event/ngx_event_openssl.c-556-
./nginx/src/event/ngx_event_openssl.c-557-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-558-}
./nginx/src/event/ngx_event_openssl.c-559-
./nginx/src/event/ngx_event_openssl.c-560-
./nginx/src/event/ngx_event_openssl.c-561-ngx_int_t
./nginx/src/event/ngx_event_openssl.c-562-ngx_ssl_create_connection(ngx_ssl_t *ssl, ngx_connection_t *c, ngx_uint_t flags)
./nginx/src/event/ngx_event_openssl.c-563-{
./nginx/src/event/ngx_event_openssl.c-564-    ngx_ssl_connection_t  *sc;
./nginx/src/event/ngx_event_openssl.c-565-
./nginx/src/event/ngx_event_openssl.c:566:    sc = ngx_pcalloc(c->pool, sizeof(ngx_ssl_connection_t));
./nginx/src/event/ngx_event_openssl.c-567-    if (sc == NULL) {
./nginx/src/event/ngx_event_openssl.c-568-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-569-    }
./nginx/src/event/ngx_event_openssl.c-570-
./nginx/src/event/ngx_event_openssl.c-571-    sc->buffer = ((flags & NGX_SSL_BUFFER) != 0);
./nginx/src/event/ngx_event_openssl.c-572-
./nginx/src/event/ngx_event_openssl.c-573-    sc->connection = SSL_new(ssl->ctx);
./nginx/src/event/ngx_event_openssl.c-574-
./nginx/src/event/ngx_event_openssl.c-575-    if (sc->connection == NULL) {
./nginx/src/event/ngx_event_openssl.c-576-        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "SSL_new() failed");
--
./nginx/src/event/ngx_event_openssl.c-1053-
./nginx/src/event/ngx_event_openssl.c-1054-    /* the maximum limit size is the maximum int32_t value - the page size */
./nginx/src/event/ngx_event_openssl.c-1055-
./nginx/src/event/ngx_event_openssl.c-1056-    if (limit == 0 || limit > (off_t) (NGX_MAX_INT32_VALUE - ngx_pagesize)) {
./nginx/src/event/ngx_event_openssl.c-1057-        limit = NGX_MAX_INT32_VALUE - ngx_pagesize;
./nginx/src/event/ngx_event_openssl.c-1058-    }
./nginx/src/event/ngx_event_openssl.c-1059-
./nginx/src/event/ngx_event_openssl.c-1060-    buf = c->ssl->buf;
./nginx/src/event/ngx_event_openssl.c-1061-
./nginx/src/event/ngx_event_openssl.c-1062-    if (buf == NULL) {
./nginx/src/event/ngx_event_openssl.c:1063:        buf = ngx_create_temp_buf(c->pool, NGX_SSL_BUFSIZE);
./nginx/src/event/ngx_event_openssl.c-1064-        if (buf == NULL) {
./nginx/src/event/ngx_event_openssl.c-1065-            return NGX_CHAIN_ERROR;
./nginx/src/event/ngx_event_openssl.c-1066-        }
./nginx/src/event/ngx_event_openssl.c-1067-
./nginx/src/event/ngx_event_openssl.c-1068-        c->ssl->buf = buf;
./nginx/src/event/ngx_event_openssl.c-1069-    }
./nginx/src/event/ngx_event_openssl.c-1070-
./nginx/src/event/ngx_event_openssl.c-1071-    if (buf->start == NULL) {
./nginx/src/event/ngx_event_openssl.c:1072:        buf->start = ngx_palloc(c->pool, NGX_SSL_BUFSIZE);
./nginx/src/event/ngx_event_openssl.c-1073-        if (buf->start == NULL) {
./nginx/src/event/ngx_event_openssl.c-1074-            return NGX_CHAIN_ERROR;
./nginx/src/event/ngx_event_openssl.c-1075-        }
./nginx/src/event/ngx_event_openssl.c-1076-
./nginx/src/event/ngx_event_openssl.c-1077-        buf->pos = buf->start;
./nginx/src/event/ngx_event_openssl.c-1078-        buf->last = buf->start;
./nginx/src/event/ngx_event_openssl.c-1079-        buf->end = buf->start + NGX_SSL_BUFSIZE;
./nginx/src/event/ngx_event_openssl.c-1080-    }
./nginx/src/event/ngx_event_openssl.c-1081-
./nginx/src/event/ngx_event_openssl.c-1082-    send = buf->last - buf->pos;
--
./nginx/src/event/ngx_event_openssl.c-1255-    c = rev->data;
./nginx/src/event/ngx_event_openssl.c-1256-
./nginx/src/event/ngx_event_openssl.c-1257-    c->write->handler(c->write);
./nginx/src/event/ngx_event_openssl.c-1258-}
./nginx/src/event/ngx_event_openssl.c-1259-
./nginx/src/event/ngx_event_openssl.c-1260-
./nginx/src/event/ngx_event_openssl.c-1261-void
./nginx/src/event/ngx_event_openssl.c-1262-ngx_ssl_free_buffer(ngx_connection_t *c)
./nginx/src/event/ngx_event_openssl.c-1263-{
./nginx/src/event/ngx_event_openssl.c-1264-    if (c->ssl->buf && c->ssl->buf->start) {
./nginx/src/event/ngx_event_openssl.c:1265:        if (ngx_pfree(c->pool, c->ssl->buf->start) == NGX_OK) {
./nginx/src/event/ngx_event_openssl.c-1266-            c->ssl->buf->start = NULL;
./nginx/src/event/ngx_event_openssl.c-1267-        }
./nginx/src/event/ngx_event_openssl.c-1268-    }
./nginx/src/event/ngx_event_openssl.c-1269-}
./nginx/src/event/ngx_event_openssl.c-1270-
./nginx/src/event/ngx_event_openssl.c-1271-
./nginx/src/event/ngx_event_openssl.c-1272-ngx_int_t
./nginx/src/event/ngx_event_openssl.c-1273-ngx_ssl_shutdown(ngx_connection_t *c)
./nginx/src/event/ngx_event_openssl.c-1274-{
./nginx/src/event/ngx_event_openssl.c-1275-    int        n, sslerr, mode;
--
./nginx/src/event/ngx_event_openssl.c-1669- * of a session is 118 or 119 bytes for SSLv3/TSLv1.
./nginx/src/event/ngx_event_openssl.c-1670- *
./nginx/src/event/ngx_event_openssl.c-1671- * Thus on 32-bit platforms we allocate separately an rbtree node,
./nginx/src/event/ngx_event_openssl.c-1672- * a session id, and an ASN1 representation, they take accordingly
./nginx/src/event/ngx_event_openssl.c-1673- * 64, 32, and 128 bytes.
./nginx/src/event/ngx_event_openssl.c-1674- *
./nginx/src/event/ngx_event_openssl.c-1675- * On 64-bit platforms we allocate separately an rbtree node + session_id,
./nginx/src/event/ngx_event_openssl.c-1676- * and an ASN1 representation, they take accordingly 128 and 128 bytes.
./nginx/src/event/ngx_event_openssl.c-1677- *
./nginx/src/event/ngx_event_openssl.c-1678- * OpenSSL's i2d_SSL_SESSION() and d2i_SSL_SESSION are slow,
./nginx/src/event/ngx_event_openssl.c:1679: * so they are outside the code locked by shared pool mutex
./nginx/src/event/ngx_event_openssl.c-1680- */
./nginx/src/event/ngx_event_openssl.c-1681-
./nginx/src/event/ngx_event_openssl.c-1682-static int
./nginx/src/event/ngx_event_openssl.c-1683-ngx_ssl_new_session(ngx_ssl_conn_t *ssl_conn, ngx_ssl_session_t *sess)
./nginx/src/event/ngx_event_openssl.c-1684-{
./nginx/src/event/ngx_event_openssl.c-1685-    int                       len;
./nginx/src/event/ngx_event_openssl.c-1686-    u_char                   *p, *id, *cached_sess;
./nginx/src/event/ngx_event_openssl.c-1687-    uint32_t                  hash;
./nginx/src/event/ngx_event_openssl.c-1688-    SSL_CTX                  *ssl_ctx;
./nginx/src/event/ngx_event_openssl.c-1689-    ngx_shm_zone_t           *shm_zone;
--
./nginx/src/event/ngx_event_openssl.c-2090-void
./nginx/src/event/ngx_event_openssl.c-2091-ngx_ssl_cleanup_ctx(void *data)
./nginx/src/event/ngx_event_openssl.c-2092-{
./nginx/src/event/ngx_event_openssl.c-2093-    ngx_ssl_t  *ssl = data;
./nginx/src/event/ngx_event_openssl.c-2094-
./nginx/src/event/ngx_event_openssl.c-2095-    SSL_CTX_free(ssl->ctx);
./nginx/src/event/ngx_event_openssl.c-2096-}
./nginx/src/event/ngx_event_openssl.c-2097-
./nginx/src/event/ngx_event_openssl.c-2098-
./nginx/src/event/ngx_event_openssl.c-2099-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2100:ngx_ssl_get_protocol(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2101-{
./nginx/src/event/ngx_event_openssl.c-2102-    s->data = (u_char *) SSL_get_version(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2103-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2104-}
./nginx/src/event/ngx_event_openssl.c-2105-
./nginx/src/event/ngx_event_openssl.c-2106-
./nginx/src/event/ngx_event_openssl.c-2107-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2108:ngx_ssl_get_cipher_name(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2109-{
./nginx/src/event/ngx_event_openssl.c-2110-    s->data = (u_char *) SSL_get_cipher_name(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2111-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2112-}
./nginx/src/event/ngx_event_openssl.c-2113-
./nginx/src/event/ngx_event_openssl.c-2114-
./nginx/src/event/ngx_event_openssl.c-2115-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2116:ngx_ssl_get_session_id(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2117-{
./nginx/src/event/ngx_event_openssl.c-2118-    int           len;
./nginx/src/event/ngx_event_openssl.c-2119-    u_char       *p, *buf;
./nginx/src/event/ngx_event_openssl.c-2120-    SSL_SESSION  *sess;
./nginx/src/event/ngx_event_openssl.c-2121-
./nginx/src/event/ngx_event_openssl.c-2122-    sess = SSL_get0_session(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2123-
./nginx/src/event/ngx_event_openssl.c-2124-    len = i2d_SSL_SESSION(sess, NULL);
./nginx/src/event/ngx_event_openssl.c-2125-
./nginx/src/event/ngx_event_openssl.c-2126-    buf = ngx_alloc(len, c->log);
./nginx/src/event/ngx_event_openssl.c-2127-    if (buf == NULL) {
./nginx/src/event/ngx_event_openssl.c-2128-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2129-    }
./nginx/src/event/ngx_event_openssl.c-2130-
./nginx/src/event/ngx_event_openssl.c-2131-    s->len = 2 * len;
./nginx/src/event/ngx_event_openssl.c:2132:    s->data = ngx_pnalloc(pool, 2 * len);
./nginx/src/event/ngx_event_openssl.c-2133-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2134-        ngx_free(buf);
./nginx/src/event/ngx_event_openssl.c-2135-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2136-    }
./nginx/src/event/ngx_event_openssl.c-2137-
./nginx/src/event/ngx_event_openssl.c-2138-    p = buf;
./nginx/src/event/ngx_event_openssl.c-2139-    i2d_SSL_SESSION(sess, &p);
./nginx/src/event/ngx_event_openssl.c-2140-
./nginx/src/event/ngx_event_openssl.c-2141-    ngx_hex_dump(s->data, buf, len);
./nginx/src/event/ngx_event_openssl.c-2142-
./nginx/src/event/ngx_event_openssl.c-2143-    ngx_free(buf);
./nginx/src/event/ngx_event_openssl.c-2144-
./nginx/src/event/ngx_event_openssl.c-2145-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2146-}
./nginx/src/event/ngx_event_openssl.c-2147-
./nginx/src/event/ngx_event_openssl.c-2148-
./nginx/src/event/ngx_event_openssl.c-2149-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2150:ngx_ssl_get_raw_certificate(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2151-{
./nginx/src/event/ngx_event_openssl.c-2152-    size_t   len;
./nginx/src/event/ngx_event_openssl.c-2153-    BIO     *bio;
./nginx/src/event/ngx_event_openssl.c-2154-    X509    *cert;
./nginx/src/event/ngx_event_openssl.c-2155-
./nginx/src/event/ngx_event_openssl.c-2156-    s->len = 0;
./nginx/src/event/ngx_event_openssl.c-2157-
./nginx/src/event/ngx_event_openssl.c-2158-    cert = SSL_get_peer_certificate(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2159-    if (cert == NULL) {
./nginx/src/event/ngx_event_openssl.c-2160-        return NGX_OK;
--
./nginx/src/event/ngx_event_openssl.c-2168-    }
./nginx/src/event/ngx_event_openssl.c-2169-
./nginx/src/event/ngx_event_openssl.c-2170-    if (PEM_write_bio_X509(bio, cert) == 0) {
./nginx/src/event/ngx_event_openssl.c-2171-        ngx_ssl_error(NGX_LOG_ALERT, c->log, 0, "PEM_write_bio_X509() failed");
./nginx/src/event/ngx_event_openssl.c-2172-        goto failed;
./nginx/src/event/ngx_event_openssl.c-2173-    }
./nginx/src/event/ngx_event_openssl.c-2174-
./nginx/src/event/ngx_event_openssl.c-2175-    len = BIO_pending(bio);
./nginx/src/event/ngx_event_openssl.c-2176-    s->len = len;
./nginx/src/event/ngx_event_openssl.c-2177-
./nginx/src/event/ngx_event_openssl.c:2178:    s->data = ngx_pnalloc(pool, len);
./nginx/src/event/ngx_event_openssl.c-2179-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2180-        goto failed;
./nginx/src/event/ngx_event_openssl.c-2181-    }
./nginx/src/event/ngx_event_openssl.c-2182-
./nginx/src/event/ngx_event_openssl.c-2183-    BIO_read(bio, s->data, len);
./nginx/src/event/ngx_event_openssl.c-2184-
./nginx/src/event/ngx_event_openssl.c-2185-    BIO_free(bio);
./nginx/src/event/ngx_event_openssl.c-2186-    X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2187-
./nginx/src/event/ngx_event_openssl.c-2188-    return NGX_OK;
--
./nginx/src/event/ngx_event_openssl.c-2190-failed:
./nginx/src/event/ngx_event_openssl.c-2191-
./nginx/src/event/ngx_event_openssl.c-2192-    BIO_free(bio);
./nginx/src/event/ngx_event_openssl.c-2193-    X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2194-
./nginx/src/event/ngx_event_openssl.c-2195-    return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2196-}
./nginx/src/event/ngx_event_openssl.c-2197-
./nginx/src/event/ngx_event_openssl.c-2198-
./nginx/src/event/ngx_event_openssl.c-2199-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2200:ngx_ssl_get_certificate(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2201-{
./nginx/src/event/ngx_event_openssl.c-2202-    u_char      *p;
./nginx/src/event/ngx_event_openssl.c-2203-    size_t       len;
./nginx/src/event/ngx_event_openssl.c-2204-    ngx_uint_t   i;
./nginx/src/event/ngx_event_openssl.c-2205-    ngx_str_t    cert;
./nginx/src/event/ngx_event_openssl.c-2206-
./nginx/src/event/ngx_event_openssl.c:2207:    if (ngx_ssl_get_raw_certificate(c, pool, &cert) != NGX_OK) {
./nginx/src/event/ngx_event_openssl.c-2208-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2209-    }
./nginx/src/event/ngx_event_openssl.c-2210-
./nginx/src/event/ngx_event_openssl.c-2211-    if (cert.len == 0) {
./nginx/src/event/ngx_event_openssl.c-2212-        s->len = 0;
./nginx/src/event/ngx_event_openssl.c-2213-        return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2214-    }
./nginx/src/event/ngx_event_openssl.c-2215-
./nginx/src/event/ngx_event_openssl.c-2216-    len = cert.len - 1;
./nginx/src/event/ngx_event_openssl.c-2217-
./nginx/src/event/ngx_event_openssl.c-2218-    for (i = 0; i < cert.len - 1; i++) {
./nginx/src/event/ngx_event_openssl.c-2219-        if (cert.data[i] == LF) {
./nginx/src/event/ngx_event_openssl.c-2220-            len++;
./nginx/src/event/ngx_event_openssl.c-2221-        }
./nginx/src/event/ngx_event_openssl.c-2222-    }
./nginx/src/event/ngx_event_openssl.c-2223-
./nginx/src/event/ngx_event_openssl.c-2224-    s->len = len;
./nginx/src/event/ngx_event_openssl.c:2225:    s->data = ngx_pnalloc(pool, len);
./nginx/src/event/ngx_event_openssl.c-2226-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2227-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2228-    }
./nginx/src/event/ngx_event_openssl.c-2229-
./nginx/src/event/ngx_event_openssl.c-2230-    p = s->data;
./nginx/src/event/ngx_event_openssl.c-2231-
./nginx/src/event/ngx_event_openssl.c-2232-    for (i = 0; i < cert.len - 1; i++) {
./nginx/src/event/ngx_event_openssl.c-2233-        *p++ = cert.data[i];
./nginx/src/event/ngx_event_openssl.c-2234-        if (cert.data[i] == LF) {
./nginx/src/event/ngx_event_openssl.c-2235-            *p++ = '\t';
./nginx/src/event/ngx_event_openssl.c-2236-        }
./nginx/src/event/ngx_event_openssl.c-2237-    }
./nginx/src/event/ngx_event_openssl.c-2238-
./nginx/src/event/ngx_event_openssl.c-2239-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2240-}
./nginx/src/event/ngx_event_openssl.c-2241-
./nginx/src/event/ngx_event_openssl.c-2242-
./nginx/src/event/ngx_event_openssl.c-2243-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2244:ngx_ssl_get_subject_dn(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2245-{
./nginx/src/event/ngx_event_openssl.c-2246-    char       *p;
./nginx/src/event/ngx_event_openssl.c-2247-    size_t      len;
./nginx/src/event/ngx_event_openssl.c-2248-    X509       *cert;
./nginx/src/event/ngx_event_openssl.c-2249-    X509_NAME  *name;
./nginx/src/event/ngx_event_openssl.c-2250-
./nginx/src/event/ngx_event_openssl.c-2251-    s->len = 0;
./nginx/src/event/ngx_event_openssl.c-2252-
./nginx/src/event/ngx_event_openssl.c-2253-    cert = SSL_get_peer_certificate(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2254-    if (cert == NULL) {
--
./nginx/src/event/ngx_event_openssl.c-2259-    if (name == NULL) {
./nginx/src/event/ngx_event_openssl.c-2260-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2261-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2262-    }
./nginx/src/event/ngx_event_openssl.c-2263-
./nginx/src/event/ngx_event_openssl.c-2264-    p = X509_NAME_oneline(name, NULL, 0);
./nginx/src/event/ngx_event_openssl.c-2265-
./nginx/src/event/ngx_event_openssl.c-2266-    for (len = 0; p[len]; len++) { /* void */ }
./nginx/src/event/ngx_event_openssl.c-2267-
./nginx/src/event/ngx_event_openssl.c-2268-    s->len = len;
./nginx/src/event/ngx_event_openssl.c:2269:    s->data = ngx_pnalloc(pool, len);
./nginx/src/event/ngx_event_openssl.c-2270-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2271-        OPENSSL_free(p);
./nginx/src/event/ngx_event_openssl.c-2272-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2273-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2274-    }
./nginx/src/event/ngx_event_openssl.c-2275-
./nginx/src/event/ngx_event_openssl.c-2276-    ngx_memcpy(s->data, p, len);
./nginx/src/event/ngx_event_openssl.c-2277-
./nginx/src/event/ngx_event_openssl.c-2278-    OPENSSL_free(p);
./nginx/src/event/ngx_event_openssl.c-2279-    X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2280-
./nginx/src/event/ngx_event_openssl.c-2281-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2282-}
./nginx/src/event/ngx_event_openssl.c-2283-
./nginx/src/event/ngx_event_openssl.c-2284-
./nginx/src/event/ngx_event_openssl.c-2285-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2286:ngx_ssl_get_issuer_dn(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2287-{
./nginx/src/event/ngx_event_openssl.c-2288-    char       *p;
./nginx/src/event/ngx_event_openssl.c-2289-    size_t      len;
./nginx/src/event/ngx_event_openssl.c-2290-    X509       *cert;
./nginx/src/event/ngx_event_openssl.c-2291-    X509_NAME  *name;
./nginx/src/event/ngx_event_openssl.c-2292-
./nginx/src/event/ngx_event_openssl.c-2293-    s->len = 0;
./nginx/src/event/ngx_event_openssl.c-2294-
./nginx/src/event/ngx_event_openssl.c-2295-    cert = SSL_get_peer_certificate(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2296-    if (cert == NULL) {
--
./nginx/src/event/ngx_event_openssl.c-2301-    if (name == NULL) {
./nginx/src/event/ngx_event_openssl.c-2302-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2303-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2304-    }
./nginx/src/event/ngx_event_openssl.c-2305-
./nginx/src/event/ngx_event_openssl.c-2306-    p = X509_NAME_oneline(name, NULL, 0);
./nginx/src/event/ngx_event_openssl.c-2307-
./nginx/src/event/ngx_event_openssl.c-2308-    for (len = 0; p[len]; len++) { /* void */ }
./nginx/src/event/ngx_event_openssl.c-2309-
./nginx/src/event/ngx_event_openssl.c-2310-    s->len = len;
./nginx/src/event/ngx_event_openssl.c:2311:    s->data = ngx_pnalloc(pool, len);
./nginx/src/event/ngx_event_openssl.c-2312-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2313-        OPENSSL_free(p);
./nginx/src/event/ngx_event_openssl.c-2314-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2315-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2316-    }
./nginx/src/event/ngx_event_openssl.c-2317-
./nginx/src/event/ngx_event_openssl.c-2318-    ngx_memcpy(s->data, p, len);
./nginx/src/event/ngx_event_openssl.c-2319-
./nginx/src/event/ngx_event_openssl.c-2320-    OPENSSL_free(p);
./nginx/src/event/ngx_event_openssl.c-2321-    X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2322-
./nginx/src/event/ngx_event_openssl.c-2323-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2324-}
./nginx/src/event/ngx_event_openssl.c-2325-
./nginx/src/event/ngx_event_openssl.c-2326-
./nginx/src/event/ngx_event_openssl.c-2327-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2328:ngx_ssl_get_serial_number(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2329-{
./nginx/src/event/ngx_event_openssl.c-2330-    size_t   len;
./nginx/src/event/ngx_event_openssl.c-2331-    X509    *cert;
./nginx/src/event/ngx_event_openssl.c-2332-    BIO     *bio;
./nginx/src/event/ngx_event_openssl.c-2333-
./nginx/src/event/ngx_event_openssl.c-2334-    s->len = 0;
./nginx/src/event/ngx_event_openssl.c-2335-
./nginx/src/event/ngx_event_openssl.c-2336-    cert = SSL_get_peer_certificate(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2337-    if (cert == NULL) {
./nginx/src/event/ngx_event_openssl.c-2338-        return NGX_OK;
--
./nginx/src/event/ngx_event_openssl.c-2341-    bio = BIO_new(BIO_s_mem());
./nginx/src/event/ngx_event_openssl.c-2342-    if (bio == NULL) {
./nginx/src/event/ngx_event_openssl.c-2343-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2344-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2345-    }
./nginx/src/event/ngx_event_openssl.c-2346-
./nginx/src/event/ngx_event_openssl.c-2347-    i2a_ASN1_INTEGER(bio, X509_get_serialNumber(cert));
./nginx/src/event/ngx_event_openssl.c-2348-    len = BIO_pending(bio);
./nginx/src/event/ngx_event_openssl.c-2349-
./nginx/src/event/ngx_event_openssl.c-2350-    s->len = len;
./nginx/src/event/ngx_event_openssl.c:2351:    s->data = ngx_pnalloc(pool, len);
./nginx/src/event/ngx_event_openssl.c-2352-    if (s->data == NULL) {
./nginx/src/event/ngx_event_openssl.c-2353-        BIO_free(bio);
./nginx/src/event/ngx_event_openssl.c-2354-        X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2355-        return NGX_ERROR;
./nginx/src/event/ngx_event_openssl.c-2356-    }
./nginx/src/event/ngx_event_openssl.c-2357-
./nginx/src/event/ngx_event_openssl.c-2358-    BIO_read(bio, s->data, len);
./nginx/src/event/ngx_event_openssl.c-2359-    BIO_free(bio);
./nginx/src/event/ngx_event_openssl.c-2360-    X509_free(cert);
./nginx/src/event/ngx_event_openssl.c-2361-
./nginx/src/event/ngx_event_openssl.c-2362-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2363-}
./nginx/src/event/ngx_event_openssl.c-2364-
./nginx/src/event/ngx_event_openssl.c-2365-
./nginx/src/event/ngx_event_openssl.c-2366-ngx_int_t
./nginx/src/event/ngx_event_openssl.c:2367:ngx_ssl_get_client_verify(ngx_connection_t *c, ngx_pool_t *pool, ngx_str_t *s)
./nginx/src/event/ngx_event_openssl.c-2368-{
./nginx/src/event/ngx_event_openssl.c-2369-    X509  *cert;
./nginx/src/event/ngx_event_openssl.c-2370-
./nginx/src/event/ngx_event_openssl.c-2371-    if (SSL_get_verify_result(c->ssl->connection) != X509_V_OK) {
./nginx/src/event/ngx_event_openssl.c-2372-        ngx_str_set(s, "FAILED");
./nginx/src/event/ngx_event_openssl.c-2373-        return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2374-    }
./nginx/src/event/ngx_event_openssl.c-2375-
./nginx/src/event/ngx_event_openssl.c-2376-    cert = SSL_get_peer_certificate(c->ssl->connection);
./nginx/src/event/ngx_event_openssl.c-2377-
--
./nginx/src/event/ngx_event_openssl.c-2386-
./nginx/src/event/ngx_event_openssl.c-2387-    return NGX_OK;
./nginx/src/event/ngx_event_openssl.c-2388-}
./nginx/src/event/ngx_event_openssl.c-2389-
./nginx/src/event/ngx_event_openssl.c-2390-
./nginx/src/event/ngx_event_openssl.c-2391-static void *
./nginx/src/event/ngx_event_openssl.c-2392-ngx_openssl_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/ngx_event_openssl.c-2393-{
./nginx/src/event/ngx_event_openssl.c-2394-    ngx_openssl_conf_t  *oscf;
./nginx/src/event/ngx_event_openssl.c-2395-
./nginx/src/event/ngx_event_openssl.c:2396:    oscf = ngx_pcalloc(cycle->pool, sizeof(ngx_openssl_conf_t));
./nginx/src/event/ngx_event_openssl.c-2397-    if (oscf == NULL) {
./nginx/src/event/ngx_event_openssl.c-2398-        return NULL;
./nginx/src/event/ngx_event_openssl.c-2399-    }
./nginx/src/event/ngx_event_openssl.c-2400-
./nginx/src/event/ngx_event_openssl.c-2401-    /*
./nginx/src/event/ngx_event_openssl.c-2402-     * set by ngx_pcalloc():
./nginx/src/event/ngx_event_openssl.c-2403-     *
./nginx/src/event/ngx_event_openssl.c-2404-     *     oscf->engine = 0;
./nginx/src/event/ngx_event_openssl.c-2405-     */
./nginx/src/event/ngx_event_openssl.c-2406-
--
./nginx/src/event/ngx_event_pipe.c-176-                    p->free_raw_bufs = p->free_raw_bufs->next;
./nginx/src/event/ngx_event_pipe.c-177-                    chain->next = NULL;
./nginx/src/event/ngx_event_pipe.c-178-                } else {
./nginx/src/event/ngx_event_pipe.c-179-                    p->free_raw_bufs = NULL;
./nginx/src/event/ngx_event_pipe.c-180-                }
./nginx/src/event/ngx_event_pipe.c-181-
./nginx/src/event/ngx_event_pipe.c-182-            } else if (p->allocated < p->bufs.num) {
./nginx/src/event/ngx_event_pipe.c-183-
./nginx/src/event/ngx_event_pipe.c-184-                /* allocate a new buf if it's still allowed */
./nginx/src/event/ngx_event_pipe.c-185-
./nginx/src/event/ngx_event_pipe.c:186:                b = ngx_create_temp_buf(p->pool, p->bufs.size);
./nginx/src/event/ngx_event_pipe.c-187-                if (b == NULL) {
./nginx/src/event/ngx_event_pipe.c-188-                    return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-189-                }
./nginx/src/event/ngx_event_pipe.c-190-
./nginx/src/event/ngx_event_pipe.c-191-                p->allocated++;
./nginx/src/event/ngx_event_pipe.c-192-
./nginx/src/event/ngx_event_pipe.c:193:                chain = ngx_alloc_chain_link(p->pool);
./nginx/src/event/ngx_event_pipe.c-194-                if (chain == NULL) {
./nginx/src/event/ngx_event_pipe.c-195-                    return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-196-                }
./nginx/src/event/ngx_event_pipe.c-197-
./nginx/src/event/ngx_event_pipe.c-198-                chain->buf = b;
./nginx/src/event/ngx_event_pipe.c-199-                chain->next = NULL;
./nginx/src/event/ngx_event_pipe.c-200-
./nginx/src/event/ngx_event_pipe.c-201-            } else if (!p->cacheable
./nginx/src/event/ngx_event_pipe.c-202-                       && p->downstream->data == p->output_ctx
./nginx/src/event/ngx_event_pipe.c-203-                       && p->downstream->write->ready
--
./nginx/src/event/ngx_event_pipe.c-314-
./nginx/src/event/ngx_event_pipe.c-315-                /* STUB */ cl->buf->num = p->num++;
./nginx/src/event/ngx_event_pipe.c-316-
./nginx/src/event/ngx_event_pipe.c-317-                if (p->input_filter(p, cl->buf) == NGX_ERROR) {
./nginx/src/event/ngx_event_pipe.c-318-                    return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-319-                }
./nginx/src/event/ngx_event_pipe.c-320-
./nginx/src/event/ngx_event_pipe.c-321-                n -= size;
./nginx/src/event/ngx_event_pipe.c-322-                ln = cl;
./nginx/src/event/ngx_event_pipe.c-323-                cl = cl->next;
./nginx/src/event/ngx_event_pipe.c:324:                ngx_free_chain(p->pool, ln);
./nginx/src/event/ngx_event_pipe.c-325-
./nginx/src/event/ngx_event_pipe.c-326-            } else {
./nginx/src/event/ngx_event_pipe.c-327-                cl->buf->last += n;
./nginx/src/event/ngx_event_pipe.c-328-                n = 0;
./nginx/src/event/ngx_event_pipe.c-329-            }
./nginx/src/event/ngx_event_pipe.c-330-        }
./nginx/src/event/ngx_event_pipe.c-331-
./nginx/src/event/ngx_event_pipe.c-332-        if (cl) {
./nginx/src/event/ngx_event_pipe.c-333-            for (ln = cl; ln->next; ln = ln->next) { /* void */ }
./nginx/src/event/ngx_event_pipe.c-334-
--
./nginx/src/event/ngx_event_pipe.c-402-        if (cl->buf->last - cl->buf->pos >= p->length) {
./nginx/src/event/ngx_event_pipe.c-403-
./nginx/src/event/ngx_event_pipe.c-404-            p->free_raw_bufs = cl->next;
./nginx/src/event/ngx_event_pipe.c-405-
./nginx/src/event/ngx_event_pipe.c-406-            /* STUB */ cl->buf->num = p->num++;
./nginx/src/event/ngx_event_pipe.c-407-
./nginx/src/event/ngx_event_pipe.c-408-            if (p->input_filter(p, cl->buf) == NGX_ERROR) {
./nginx/src/event/ngx_event_pipe.c-409-                 return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-410-            }
./nginx/src/event/ngx_event_pipe.c-411-
./nginx/src/event/ngx_event_pipe.c:412:            ngx_free_chain(p->pool, cl);
./nginx/src/event/ngx_event_pipe.c-413-        }
./nginx/src/event/ngx_event_pipe.c-414-    }
./nginx/src/event/ngx_event_pipe.c-415-
./nginx/src/event/ngx_event_pipe.c-416-    if (p->length == 0) {
./nginx/src/event/ngx_event_pipe.c-417-        p->upstream_done = 1;
./nginx/src/event/ngx_event_pipe.c-418-        p->read = 1;
./nginx/src/event/ngx_event_pipe.c-419-    }
./nginx/src/event/ngx_event_pipe.c-420-
./nginx/src/event/ngx_event_pipe.c-421-    if ((p->upstream_eof || p->upstream_error) && p->free_raw_bufs) {
./nginx/src/event/ngx_event_pipe.c-422-
--
./nginx/src/event/ngx_event_pipe.c-424-
./nginx/src/event/ngx_event_pipe.c-425-        if (p->input_filter(p, p->free_raw_bufs->buf) == NGX_ERROR) {
./nginx/src/event/ngx_event_pipe.c-426-            return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-427-        }
./nginx/src/event/ngx_event_pipe.c-428-
./nginx/src/event/ngx_event_pipe.c-429-        p->free_raw_bufs = p->free_raw_bufs->next;
./nginx/src/event/ngx_event_pipe.c-430-
./nginx/src/event/ngx_event_pipe.c-431-        if (p->free_bufs && p->buf_to_file == NULL) {
./nginx/src/event/ngx_event_pipe.c-432-            for (cl = p->free_raw_bufs; cl; cl = cl->next) {
./nginx/src/event/ngx_event_pipe.c-433-                if (cl->buf->shadow == NULL) {
./nginx/src/event/ngx_event_pipe.c:434:                    ngx_pfree(p->pool, cl->buf->start);
./nginx/src/event/ngx_event_pipe.c-435-                }
./nginx/src/event/ngx_event_pipe.c-436-            }
./nginx/src/event/ngx_event_pipe.c-437-        }
./nginx/src/event/ngx_event_pipe.c-438-    }
./nginx/src/event/ngx_event_pipe.c-439-
./nginx/src/event/ngx_event_pipe.c-440-    if (p->cacheable && p->in) {
./nginx/src/event/ngx_event_pipe.c-441-        if (ngx_event_pipe_write_chain_to_temp_file(p) == NGX_ABORT) {
./nginx/src/event/ngx_event_pipe.c-442-            return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-443-        }
./nginx/src/event/ngx_event_pipe.c-444-    }
--
./nginx/src/event/ngx_event_pipe.c-631-            }
./nginx/src/event/ngx_event_pipe.c-632-
./nginx/src/event/ngx_event_pipe.c-633-            /* a workaround for AIO */
./nginx/src/event/ngx_event_pipe.c-634-            if (flushed++ > 10) {
./nginx/src/event/ngx_event_pipe.c-635-                return NGX_BUSY;
./nginx/src/event/ngx_event_pipe.c-636-            }
./nginx/src/event/ngx_event_pipe.c-637-        }
./nginx/src/event/ngx_event_pipe.c-638-
./nginx/src/event/ngx_event_pipe.c-639-        rc = p->output_filter(p->output_ctx, out);
./nginx/src/event/ngx_event_pipe.c-640-
./nginx/src/event/ngx_event_pipe.c:641:        ngx_chain_update_chains(p->pool, &p->free, &p->busy, &out, p->tag);
./nginx/src/event/ngx_event_pipe.c-642-
./nginx/src/event/ngx_event_pipe.c-643-        if (rc == NGX_ERROR) {
./nginx/src/event/ngx_event_pipe.c-644-            p->downstream_error = 1;
./nginx/src/event/ngx_event_pipe.c-645-            return ngx_event_pipe_drain_chains(p);
./nginx/src/event/ngx_event_pipe.c-646-        }
./nginx/src/event/ngx_event_pipe.c-647-
./nginx/src/event/ngx_event_pipe.c-648-        for (cl = p->free; cl; cl = cl->next) {
./nginx/src/event/ngx_event_pipe.c-649-
./nginx/src/event/ngx_event_pipe.c-650-            if (cl->buf->temp_file) {
./nginx/src/event/ngx_event_pipe.c-651-                if (p->cacheable || !p->cyclic_temp_file) {
--
./nginx/src/event/ngx_event_pipe.c-776-                b->file_last = p->temp_file->offset;
./nginx/src/event/ngx_event_pipe.c-777-                goto free;
./nginx/src/event/ngx_event_pipe.c-778-            }
./nginx/src/event/ngx_event_pipe.c-779-
./nginx/src/event/ngx_event_pipe.c-780-            last_out = &cl->next;
./nginx/src/event/ngx_event_pipe.c-781-
./nginx/src/event/ngx_event_pipe.c-782-        } else {
./nginx/src/event/ngx_event_pipe.c-783-            last_out = &p->out;
./nginx/src/event/ngx_event_pipe.c-784-        }
./nginx/src/event/ngx_event_pipe.c-785-
./nginx/src/event/ngx_event_pipe.c:786:        cl = ngx_chain_get_free_buf(p->pool, &p->free);
./nginx/src/event/ngx_event_pipe.c-787-        if (cl == NULL) {
./nginx/src/event/ngx_event_pipe.c-788-            return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-789-        }
./nginx/src/event/ngx_event_pipe.c-790-
./nginx/src/event/ngx_event_pipe.c-791-        b = cl->buf;
./nginx/src/event/ngx_event_pipe.c-792-
./nginx/src/event/ngx_event_pipe.c-793-        ngx_memzero(b, sizeof(ngx_buf_t));
./nginx/src/event/ngx_event_pipe.c-794-
./nginx/src/event/ngx_event_pipe.c-795-        b->tag = p->tag;
./nginx/src/event/ngx_event_pipe.c-796-
--
./nginx/src/event/ngx_event_pipe.c-817-    for (cl = out; cl; cl = next) {
./nginx/src/event/ngx_event_pipe.c-818-        next = cl->next;
./nginx/src/event/ngx_event_pipe.c-819-
./nginx/src/event/ngx_event_pipe.c-820-        cl->next = p->free;
./nginx/src/event/ngx_event_pipe.c-821-        p->free = cl;
./nginx/src/event/ngx_event_pipe.c-822-
./nginx/src/event/ngx_event_pipe.c-823-        b = cl->buf;
./nginx/src/event/ngx_event_pipe.c-824-
./nginx/src/event/ngx_event_pipe.c-825-        if (b->last_shadow) {
./nginx/src/event/ngx_event_pipe.c-826-
./nginx/src/event/ngx_event_pipe.c:827:            tl = ngx_alloc_chain_link(p->pool);
./nginx/src/event/ngx_event_pipe.c-828-            if (tl == NULL) {
./nginx/src/event/ngx_event_pipe.c-829-                return NGX_ABORT;
./nginx/src/event/ngx_event_pipe.c-830-            }
./nginx/src/event/ngx_event_pipe.c-831-
./nginx/src/event/ngx_event_pipe.c-832-            tl->buf = b->shadow;
./nginx/src/event/ngx_event_pipe.c-833-            tl->next = NULL;
./nginx/src/event/ngx_event_pipe.c-834-
./nginx/src/event/ngx_event_pipe.c-835-            *last_free = tl;
./nginx/src/event/ngx_event_pipe.c-836-            last_free = &tl->next;
./nginx/src/event/ngx_event_pipe.c-837-
--
./nginx/src/event/ngx_event_pipe.c-855-    ngx_chain_t  *cl;
./nginx/src/event/ngx_event_pipe.c-856-
./nginx/src/event/ngx_event_pipe.c-857-    if (buf->pos == buf->last) {
./nginx/src/event/ngx_event_pipe.c-858-        return NGX_OK;
./nginx/src/event/ngx_event_pipe.c-859-    }
./nginx/src/event/ngx_event_pipe.c-860-
./nginx/src/event/ngx_event_pipe.c-861-    if (p->free) {
./nginx/src/event/ngx_event_pipe.c-862-        cl = p->free;
./nginx/src/event/ngx_event_pipe.c-863-        b = cl->buf;
./nginx/src/event/ngx_event_pipe.c-864-        p->free = cl->next;
./nginx/src/event/ngx_event_pipe.c:865:        ngx_free_chain(p->pool, cl);
./nginx/src/event/ngx_event_pipe.c-866-
./nginx/src/event/ngx_event_pipe.c-867-    } else {
./nginx/src/event/ngx_event_pipe.c:868:        b = ngx_alloc_buf(p->pool);
./nginx/src/event/ngx_event_pipe.c-869-        if (b == NULL) {
./nginx/src/event/ngx_event_pipe.c-870-            return NGX_ERROR;
./nginx/src/event/ngx_event_pipe.c-871-        }
./nginx/src/event/ngx_event_pipe.c-872-    }
./nginx/src/event/ngx_event_pipe.c-873-
./nginx/src/event/ngx_event_pipe.c-874-    ngx_memcpy(b, buf, sizeof(ngx_buf_t));
./nginx/src/event/ngx_event_pipe.c-875-    b->shadow = buf;
./nginx/src/event/ngx_event_pipe.c-876-    b->tag = p->tag;
./nginx/src/event/ngx_event_pipe.c-877-    b->last_shadow = 1;
./nginx/src/event/ngx_event_pipe.c-878-    b->recycled = 1;
./nginx/src/event/ngx_event_pipe.c-879-    buf->shadow = b;
./nginx/src/event/ngx_event_pipe.c-880-
./nginx/src/event/ngx_event_pipe.c:881:    cl = ngx_alloc_chain_link(p->pool);
./nginx/src/event/ngx_event_pipe.c-882-    if (cl == NULL) {
./nginx/src/event/ngx_event_pipe.c-883-        return NGX_ERROR;
./nginx/src/event/ngx_event_pipe.c-884-    }
./nginx/src/event/ngx_event_pipe.c-885-
./nginx/src/event/ngx_event_pipe.c-886-    cl->buf = b;
./nginx/src/event/ngx_event_pipe.c-887-    cl->next = NULL;
./nginx/src/event/ngx_event_pipe.c-888-
./nginx/src/event/ngx_event_pipe.c-889-    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, p->log, 0, "input buf #%d", b->num);
./nginx/src/event/ngx_event_pipe.c-890-
./nginx/src/event/ngx_event_pipe.c-891-    if (p->in) {
--
./nginx/src/event/ngx_event_pipe.c-934-
./nginx/src/event/ngx_event_pipe.c-935-    buf->shadow = NULL;
./nginx/src/event/ngx_event_pipe.c-936-}
./nginx/src/event/ngx_event_pipe.c-937-
./nginx/src/event/ngx_event_pipe.c-938-
./nginx/src/event/ngx_event_pipe.c-939-ngx_int_t
./nginx/src/event/ngx_event_pipe.c-940-ngx_event_pipe_add_free_buf(ngx_event_pipe_t *p, ngx_buf_t *b)
./nginx/src/event/ngx_event_pipe.c-941-{
./nginx/src/event/ngx_event_pipe.c-942-    ngx_chain_t  *cl;
./nginx/src/event/ngx_event_pipe.c-943-
./nginx/src/event/ngx_event_pipe.c:944:    cl = ngx_alloc_chain_link(p->pool);
./nginx/src/event/ngx_event_pipe.c-945-    if (cl == NULL) {
./nginx/src/event/ngx_event_pipe.c-946-        return NGX_ERROR;
./nginx/src/event/ngx_event_pipe.c-947-    }
./nginx/src/event/ngx_event_pipe.c-948-
./nginx/src/event/ngx_event_pipe.c-949-    if (p->buf_to_file && b->start == p->buf_to_file->start) {
./nginx/src/event/ngx_event_pipe.c-950-        b->pos = p->buf_to_file->last;
./nginx/src/event/ngx_event_pipe.c-951-        b->last = p->buf_to_file->last;
./nginx/src/event/ngx_event_pipe.c-952-
./nginx/src/event/ngx_event_pipe.c-953-    } else {
./nginx/src/event/ngx_event_pipe.c-954-        b->pos = b->start;
--
./nginx/src/event/modules/ngx_kqueue_module.c-754-                    kev->flags, kev->fflags,
./nginx/src/event/modules/ngx_kqueue_module.c-755-                    kev->data, kev->udata);
./nginx/src/event/modules/ngx_kqueue_module.c-756-}
./nginx/src/event/modules/ngx_kqueue_module.c-757-
./nginx/src/event/modules/ngx_kqueue_module.c-758-
./nginx/src/event/modules/ngx_kqueue_module.c-759-static void *
./nginx/src/event/modules/ngx_kqueue_module.c-760-ngx_kqueue_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/modules/ngx_kqueue_module.c-761-{
./nginx/src/event/modules/ngx_kqueue_module.c-762-    ngx_kqueue_conf_t  *kcf;
./nginx/src/event/modules/ngx_kqueue_module.c-763-
./nginx/src/event/modules/ngx_kqueue_module.c:764:    kcf = ngx_palloc(cycle->pool, sizeof(ngx_kqueue_conf_t));
./nginx/src/event/modules/ngx_kqueue_module.c-765-    if (kcf == NULL) {
./nginx/src/event/modules/ngx_kqueue_module.c-766-        return NULL;
./nginx/src/event/modules/ngx_kqueue_module.c-767-    }
./nginx/src/event/modules/ngx_kqueue_module.c-768-
./nginx/src/event/modules/ngx_kqueue_module.c-769-    kcf->changes = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_kqueue_module.c-770-    kcf->events = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_kqueue_module.c-771-
./nginx/src/event/modules/ngx_kqueue_module.c-772-    return kcf;
./nginx/src/event/modules/ngx_kqueue_module.c-773-}
./nginx/src/event/modules/ngx_kqueue_module.c-774-
--
./nginx/src/event/modules/ngx_epoll_module.c-806-}
./nginx/src/event/modules/ngx_epoll_module.c-807-
./nginx/src/event/modules/ngx_epoll_module.c-808-#endif
./nginx/src/event/modules/ngx_epoll_module.c-809-
./nginx/src/event/modules/ngx_epoll_module.c-810-
./nginx/src/event/modules/ngx_epoll_module.c-811-static void *
./nginx/src/event/modules/ngx_epoll_module.c-812-ngx_epoll_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/modules/ngx_epoll_module.c-813-{
./nginx/src/event/modules/ngx_epoll_module.c-814-    ngx_epoll_conf_t  *epcf;
./nginx/src/event/modules/ngx_epoll_module.c-815-
./nginx/src/event/modules/ngx_epoll_module.c:816:    epcf = ngx_palloc(cycle->pool, sizeof(ngx_epoll_conf_t));
./nginx/src/event/modules/ngx_epoll_module.c-817-    if (epcf == NULL) {
./nginx/src/event/modules/ngx_epoll_module.c-818-        return NULL;
./nginx/src/event/modules/ngx_epoll_module.c-819-    }
./nginx/src/event/modules/ngx_epoll_module.c-820-
./nginx/src/event/modules/ngx_epoll_module.c-821-    epcf->events = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_epoll_module.c-822-    epcf->aio_requests = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_epoll_module.c-823-
./nginx/src/event/modules/ngx_epoll_module.c-824-    return epcf;
./nginx/src/event/modules/ngx_epoll_module.c-825-}
./nginx/src/event/modules/ngx_epoll_module.c-826-
--
./nginx/src/event/modules/ngx_devpoll_module.c-291-    size_t             n;
./nginx/src/event/modules/ngx_devpoll_module.c-292-    ngx_connection_t  *c;
./nginx/src/event/modules/ngx_devpoll_module.c-293-
./nginx/src/event/modules/ngx_devpoll_module.c-294-    c = ev->data;
./nginx/src/event/modules/ngx_devpoll_module.c-295-
./nginx/src/event/modules/ngx_devpoll_module.c-296-    ngx_log_debug3(NGX_LOG_DEBUG_EVENT, ev->log, 0,
./nginx/src/event/modules/ngx_devpoll_module.c-297-                   "devpoll fd:%d ev:%04Xi fl:%04Xi", c->fd, event, flags);
./nginx/src/event/modules/ngx_devpoll_module.c-298-
./nginx/src/event/modules/ngx_devpoll_module.c-299-    if (nchanges >= max_changes) {
./nginx/src/event/modules/ngx_devpoll_module.c-300-        ngx_log_error(NGX_LOG_WARN, ev->log, 0,
./nginx/src/event/modules/ngx_devpoll_module.c:301:                      "/dev/pool change list is filled up");
./nginx/src/event/modules/ngx_devpoll_module.c-302-
./nginx/src/event/modules/ngx_devpoll_module.c-303-        n = nchanges * sizeof(struct pollfd);
./nginx/src/event/modules/ngx_devpoll_module.c-304-        if (write(dp, change_list, n) != (ssize_t) n) {
./nginx/src/event/modules/ngx_devpoll_module.c-305-            ngx_log_error(NGX_LOG_ALERT, ev->log, ngx_errno,
./nginx/src/event/modules/ngx_devpoll_module.c-306-                          "write(/dev/poll) failed");
./nginx/src/event/modules/ngx_devpoll_module.c-307-            return NGX_ERROR;
./nginx/src/event/modules/ngx_devpoll_module.c-308-        }
./nginx/src/event/modules/ngx_devpoll_module.c-309-
./nginx/src/event/modules/ngx_devpoll_module.c-310-        nchanges = 0;
./nginx/src/event/modules/ngx_devpoll_module.c-311-    }
--
./nginx/src/event/modules/ngx_devpoll_module.c-538-
./nginx/src/event/modules/ngx_devpoll_module.c-539-    return NGX_OK;
./nginx/src/event/modules/ngx_devpoll_module.c-540-}
./nginx/src/event/modules/ngx_devpoll_module.c-541-
./nginx/src/event/modules/ngx_devpoll_module.c-542-
./nginx/src/event/modules/ngx_devpoll_module.c-543-static void *
./nginx/src/event/modules/ngx_devpoll_module.c-544-ngx_devpoll_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/modules/ngx_devpoll_module.c-545-{
./nginx/src/event/modules/ngx_devpoll_module.c-546-    ngx_devpoll_conf_t  *dpcf;
./nginx/src/event/modules/ngx_devpoll_module.c-547-
./nginx/src/event/modules/ngx_devpoll_module.c:548:    dpcf = ngx_palloc(cycle->pool, sizeof(ngx_devpoll_conf_t));
./nginx/src/event/modules/ngx_devpoll_module.c-549-    if (dpcf == NULL) {
./nginx/src/event/modules/ngx_devpoll_module.c-550-        return NULL;
./nginx/src/event/modules/ngx_devpoll_module.c-551-    }
./nginx/src/event/modules/ngx_devpoll_module.c-552-
./nginx/src/event/modules/ngx_devpoll_module.c-553-    dpcf->changes = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_devpoll_module.c-554-    dpcf->events = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_devpoll_module.c-555-
./nginx/src/event/modules/ngx_devpoll_module.c-556-    return dpcf;
./nginx/src/event/modules/ngx_devpoll_module.c-557-}
./nginx/src/event/modules/ngx_devpoll_module.c-558-
--
./nginx/src/event/modules/ngx_rtsig_module.c-695-
./nginx/src/event/modules/ngx_rtsig_module.c-696-    return NGX_OK;
./nginx/src/event/modules/ngx_rtsig_module.c-697-}
./nginx/src/event/modules/ngx_rtsig_module.c-698-
./nginx/src/event/modules/ngx_rtsig_module.c-699-
./nginx/src/event/modules/ngx_rtsig_module.c-700-static void *
./nginx/src/event/modules/ngx_rtsig_module.c-701-ngx_rtsig_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/modules/ngx_rtsig_module.c-702-{
./nginx/src/event/modules/ngx_rtsig_module.c-703-    ngx_rtsig_conf_t  *rtscf;
./nginx/src/event/modules/ngx_rtsig_module.c-704-
./nginx/src/event/modules/ngx_rtsig_module.c:705:    rtscf = ngx_palloc(cycle->pool, sizeof(ngx_rtsig_conf_t));
./nginx/src/event/modules/ngx_rtsig_module.c-706-    if (rtscf == NULL) {
./nginx/src/event/modules/ngx_rtsig_module.c-707-        return NULL;
./nginx/src/event/modules/ngx_rtsig_module.c-708-    }
./nginx/src/event/modules/ngx_rtsig_module.c-709-
./nginx/src/event/modules/ngx_rtsig_module.c-710-    rtscf->signo = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_rtsig_module.c-711-    rtscf->overflow_events = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_rtsig_module.c-712-    rtscf->overflow_test = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_rtsig_module.c-713-    rtscf->overflow_threshold = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_rtsig_module.c-714-
./nginx/src/event/modules/ngx_rtsig_module.c-715-    return rtscf;
--
./nginx/src/event/modules/ngx_eventport_module.c-604-
./nginx/src/event/modules/ngx_eventport_module.c-605-    return NGX_OK;
./nginx/src/event/modules/ngx_eventport_module.c-606-}
./nginx/src/event/modules/ngx_eventport_module.c-607-
./nginx/src/event/modules/ngx_eventport_module.c-608-
./nginx/src/event/modules/ngx_eventport_module.c-609-static void *
./nginx/src/event/modules/ngx_eventport_module.c-610-ngx_eventport_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/modules/ngx_eventport_module.c-611-{
./nginx/src/event/modules/ngx_eventport_module.c-612-    ngx_eventport_conf_t  *epcf;
./nginx/src/event/modules/ngx_eventport_module.c-613-
./nginx/src/event/modules/ngx_eventport_module.c:614:    epcf = ngx_palloc(cycle->pool, sizeof(ngx_eventport_conf_t));
./nginx/src/event/modules/ngx_eventport_module.c-615-    if (epcf == NULL) {
./nginx/src/event/modules/ngx_eventport_module.c-616-        return NULL;
./nginx/src/event/modules/ngx_eventport_module.c-617-    }
./nginx/src/event/modules/ngx_eventport_module.c-618-
./nginx/src/event/modules/ngx_eventport_module.c-619-    epcf->events = NGX_CONF_UNSET;
./nginx/src/event/modules/ngx_eventport_module.c-620-
./nginx/src/event/modules/ngx_eventport_module.c-621-    return epcf;
./nginx/src/event/modules/ngx_eventport_module.c-622-}
./nginx/src/event/modules/ngx_eventport_module.c-623-
./nginx/src/event/modules/ngx_eventport_module.c-624-
--
./nginx/src/event/ngx_event.c-907-
./nginx/src/event/ngx_event.c-908-    ngx_event_max_module = 0;
./nginx/src/event/ngx_event.c-909-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/event/ngx_event.c-910-        if (ngx_modules[i]->type != NGX_EVENT_MODULE) {
./nginx/src/event/ngx_event.c-911-            continue;
./nginx/src/event/ngx_event.c-912-        }
./nginx/src/event/ngx_event.c-913-
./nginx/src/event/ngx_event.c-914-        ngx_modules[i]->ctx_index = ngx_event_max_module++;
./nginx/src/event/ngx_event.c-915-    }
./nginx/src/event/ngx_event.c-916-
./nginx/src/event/ngx_event.c:917:    ctx = ngx_pcalloc(cf->pool, sizeof(void *));
./nginx/src/event/ngx_event.c-918-    if (ctx == NULL) {
./nginx/src/event/ngx_event.c-919-        return NGX_CONF_ERROR;
./nginx/src/event/ngx_event.c-920-    }
./nginx/src/event/ngx_event.c-921-
./nginx/src/event/ngx_event.c:922:    *ctx = ngx_pcalloc(cf->pool, ngx_event_max_module * sizeof(void *));
./nginx/src/event/ngx_event.c-923-    if (*ctx == NULL) {
./nginx/src/event/ngx_event.c-924-        return NGX_CONF_ERROR;
./nginx/src/event/ngx_event.c-925-    }
./nginx/src/event/ngx_event.c-926-
./nginx/src/event/ngx_event.c-927-    *(void **) conf = ctx;
./nginx/src/event/ngx_event.c-928-
./nginx/src/event/ngx_event.c-929-    for (i = 0; ngx_modules[i]; i++) {
./nginx/src/event/ngx_event.c-930-        if (ngx_modules[i]->type != NGX_EVENT_MODULE) {
./nginx/src/event/ngx_event.c-931-            continue;
./nginx/src/event/ngx_event.c-932-        }
--
./nginx/src/event/ngx_event.c-1114-        }
./nginx/src/event/ngx_event.c-1115-
./nginx/src/event/ngx_event.c-1116-        *cidr = c;
./nginx/src/event/ngx_event.c-1117-
./nginx/src/event/ngx_event.c-1118-        return NGX_CONF_OK;
./nginx/src/event/ngx_event.c-1119-    }
./nginx/src/event/ngx_event.c-1120-
./nginx/src/event/ngx_event.c-1121-    ngx_memzero(&u, sizeof(ngx_url_t));
./nginx/src/event/ngx_event.c-1122-    u.host = value[1];
./nginx/src/event/ngx_event.c-1123-
./nginx/src/event/ngx_event.c:1124:    if (ngx_inet_resolve_host(cf->pool, &u) != NGX_OK) {
./nginx/src/event/ngx_event.c-1125-        if (u.err) {
./nginx/src/event/ngx_event.c-1126-            ngx_conf_log_error(NGX_LOG_EMERG, cf, 0,
./nginx/src/event/ngx_event.c-1127-                               "%s in debug_connection \"%V\"",
./nginx/src/event/ngx_event.c-1128-                               u.err, &u.host);
./nginx/src/event/ngx_event.c-1129-        }
./nginx/src/event/ngx_event.c-1130-
./nginx/src/event/ngx_event.c-1131-        return NGX_CONF_ERROR;
./nginx/src/event/ngx_event.c-1132-    }
./nginx/src/event/ngx_event.c-1133-
./nginx/src/event/ngx_event.c-1134-    cidr = ngx_array_push_n(&ecf->debug_connection, u.naddrs);
--
./nginx/src/event/ngx_event.c-1169-
./nginx/src/event/ngx_event.c-1170-    return NGX_CONF_OK;
./nginx/src/event/ngx_event.c-1171-}
./nginx/src/event/ngx_event.c-1172-
./nginx/src/event/ngx_event.c-1173-
./nginx/src/event/ngx_event.c-1174-static void *
./nginx/src/event/ngx_event.c-1175-ngx_event_core_create_conf(ngx_cycle_t *cycle)
./nginx/src/event/ngx_event.c-1176-{
./nginx/src/event/ngx_event.c-1177-    ngx_event_conf_t  *ecf;
./nginx/src/event/ngx_event.c-1178-
./nginx/src/event/ngx_event.c:1179:    ecf = ngx_palloc(cycle->pool, sizeof(ngx_event_conf_t));
./nginx/src/event/ngx_event.c-1180-    if (ecf == NULL) {
./nginx/src/event/ngx_event.c-1181-        return NULL;
./nginx/src/event/ngx_event.c-1182-    }
./nginx/src/event/ngx_event.c-1183-
./nginx/src/event/ngx_event.c-1184-    ecf->connections = NGX_CONF_UNSET_UINT;
./nginx/src/event/ngx_event.c-1185-    ecf->use = NGX_CONF_UNSET_UINT;
./nginx/src/event/ngx_event.c-1186-    ecf->multi_accept = NGX_CONF_UNSET;
./nginx/src/event/ngx_event.c-1187-    ecf->accept_mutex = NGX_CONF_UNSET;
./nginx/src/event/ngx_event.c-1188-    ecf->accept_mutex_delay = NGX_CONF_UNSET_MSEC;
./nginx/src/event/ngx_event.c-1189-    ecf->name = (void *) NGX_CONF_UNSET;
./nginx/src/event/ngx_event.c-1190-
./nginx/src/event/ngx_event.c-1191-#if (NGX_DEBUG)
./nginx/src/event/ngx_event.c-1192-
./nginx/src/event/ngx_event.c:1193:    if (ngx_array_init(&ecf->debug_connection, cycle->pool, 4,
./nginx/src/event/ngx_event.c-1194-                       sizeof(ngx_cidr_t)) == NGX_ERROR)
./nginx/src/event/ngx_event.c-1195-    {
./nginx/src/event/ngx_event.c-1196-        return NULL;
./nginx/src/event/ngx_event.c-1197-    }
./nginx/src/event/ngx_event.c-1198-
./nginx/src/event/ngx_event.c-1199-#endif
./nginx/src/event/ngx_event.c-1200-
./nginx/src/event/ngx_event.c-1201-    return ecf;
./nginx/src/event/ngx_event.c-1202-}
./nginx/src/event/ngx_event.c-1203-
--
./nginx/src/event/ngx_event_accept.c-149-                              ngx_close_socket_n " failed");
./nginx/src/event/ngx_event_accept.c-150-            }
./nginx/src/event/ngx_event_accept.c-151-
./nginx/src/event/ngx_event_accept.c-152-            return;
./nginx/src/event/ngx_event_accept.c-153-        }
./nginx/src/event/ngx_event_accept.c-154-
./nginx/src/event/ngx_event_accept.c-155-#if (NGX_STAT_STUB)
./nginx/src/event/ngx_event_accept.c-156-        (void) ngx_atomic_fetch_add(ngx_stat_active, 1);
./nginx/src/event/ngx_event_accept.c-157-#endif
./nginx/src/event/ngx_event_accept.c-158-
./nginx/src/event/ngx_event_accept.c:159:        c->pool = ngx_create_pool(ls->pool_size, ev->log);
./nginx/src/event/ngx_event_accept.c:160:        if (c->pool == NULL) {
./nginx/src/event/ngx_event_accept.c-161-            ngx_close_accepted_connection(c);
./nginx/src/event/ngx_event_accept.c-162-            return;
./nginx/src/event/ngx_event_accept.c-163-        }
./nginx/src/event/ngx_event_accept.c-164-
./nginx/src/event/ngx_event_accept.c:165:        c->sockaddr = ngx_palloc(c->pool, socklen);
./nginx/src/event/ngx_event_accept.c-166-        if (c->sockaddr == NULL) {
./nginx/src/event/ngx_event_accept.c-167-            ngx_close_accepted_connection(c);
./nginx/src/event/ngx_event_accept.c-168-            return;
./nginx/src/event/ngx_event_accept.c-169-        }
./nginx/src/event/ngx_event_accept.c-170-
./nginx/src/event/ngx_event_accept.c-171-        ngx_memcpy(c->sockaddr, sa, socklen);
./nginx/src/event/ngx_event_accept.c-172-
./nginx/src/event/ngx_event_accept.c:173:        log = ngx_palloc(c->pool, sizeof(ngx_log_t));
./nginx/src/event/ngx_event_accept.c-174-        if (log == NULL) {
./nginx/src/event/ngx_event_accept.c-175-            ngx_close_accepted_connection(c);
./nginx/src/event/ngx_event_accept.c-176-            return;
./nginx/src/event/ngx_event_accept.c-177-        }
./nginx/src/event/ngx_event_accept.c-178-
./nginx/src/event/ngx_event_accept.c-179-        /* set a blocking mode for aio and non-blocking mode for others */
./nginx/src/event/ngx_event_accept.c-180-
./nginx/src/event/ngx_event_accept.c-181-        if (ngx_inherited_nonblocking) {
./nginx/src/event/ngx_event_accept.c-182-            if (ngx_event_flags & NGX_USE_AIO_EVENT) {
./nginx/src/event/ngx_event_accept.c-183-                if (ngx_blocking(s) == -1) {
--
./nginx/src/event/ngx_event_accept.c-200-        }
./nginx/src/event/ngx_event_accept.c-201-
./nginx/src/event/ngx_event_accept.c-202-        *log = ls->log;
./nginx/src/event/ngx_event_accept.c-203-
./nginx/src/event/ngx_event_accept.c-204-        c->recv = ngx_recv;
./nginx/src/event/ngx_event_accept.c-205-        c->send = ngx_send;
./nginx/src/event/ngx_event_accept.c-206-        c->recv_chain = ngx_recv_chain;
./nginx/src/event/ngx_event_accept.c-207-        c->send_chain = ngx_send_chain;
./nginx/src/event/ngx_event_accept.c-208-
./nginx/src/event/ngx_event_accept.c-209-        c->log = log;
./nginx/src/event/ngx_event_accept.c:210:        c->pool->log = log;
./nginx/src/event/ngx_event_accept.c-211-
./nginx/src/event/ngx_event_accept.c-212-        c->socklen = socklen;
./nginx/src/event/ngx_event_accept.c-213-        c->listening = ls;
./nginx/src/event/ngx_event_accept.c-214-        c->local_sockaddr = ls->sockaddr;
./nginx/src/event/ngx_event_accept.c-215-
./nginx/src/event/ngx_event_accept.c-216-        c->unexpected_eof = 1;
./nginx/src/event/ngx_event_accept.c-217-
./nginx/src/event/ngx_event_accept.c-218-#if (NGX_HAVE_UNIX_DOMAIN)
./nginx/src/event/ngx_event_accept.c-219-        if (c->sockaddr->sa_family == AF_UNIX) {
./nginx/src/event/ngx_event_accept.c-220-            c->tcp_nopush = NGX_TCP_NOPUSH_DISABLED;
--
./nginx/src/event/ngx_event_accept.c-262-#endif
./nginx/src/event/ngx_event_accept.c-263-
./nginx/src/event/ngx_event_accept.c-264-#if (NGX_THREADS)
./nginx/src/event/ngx_event_accept.c-265-        rev->lock = &c->lock;
./nginx/src/event/ngx_event_accept.c-266-        wev->lock = &c->lock;
./nginx/src/event/ngx_event_accept.c-267-        rev->own_lock = &c->lock;
./nginx/src/event/ngx_event_accept.c-268-        wev->own_lock = &c->lock;
./nginx/src/event/ngx_event_accept.c-269-#endif
./nginx/src/event/ngx_event_accept.c-270-
./nginx/src/event/ngx_event_accept.c-271-        if (ls->addr_ntop) {
./nginx/src/event/ngx_event_accept.c:272:            c->addr_text.data = ngx_pnalloc(c->pool, ls->addr_text_max_len);
./nginx/src/event/ngx_event_accept.c-273-            if (c->addr_text.data == NULL) {
./nginx/src/event/ngx_event_accept.c-274-                ngx_close_accepted_connection(c);
./nginx/src/event/ngx_event_accept.c-275-                return;
./nginx/src/event/ngx_event_accept.c-276-            }
./nginx/src/event/ngx_event_accept.c-277-
./nginx/src/event/ngx_event_accept.c-278-            c->addr_text.len = ngx_sock_ntop(c->sockaddr, c->addr_text.data,
./nginx/src/event/ngx_event_accept.c-279-                                             ls->addr_text_max_len, 0);
./nginx/src/event/ngx_event_accept.c-280-            if (c->addr_text.len == 0) {
./nginx/src/event/ngx_event_accept.c-281-                ngx_close_accepted_connection(c);
./nginx/src/event/ngx_event_accept.c-282-                return;
--
./nginx/src/event/ngx_event_accept.c-480-    ngx_free_connection(c);
./nginx/src/event/ngx_event_accept.c-481-
./nginx/src/event/ngx_event_accept.c-482-    fd = c->fd;
./nginx/src/event/ngx_event_accept.c-483-    c->fd = (ngx_socket_t) -1;
./nginx/src/event/ngx_event_accept.c-484-
./nginx/src/event/ngx_event_accept.c-485-    if (ngx_close_socket(fd) == -1) {
./nginx/src/event/ngx_event_accept.c-486-        ngx_log_error(NGX_LOG_ALERT, c->log, ngx_socket_errno,
./nginx/src/event/ngx_event_accept.c-487-                      ngx_close_socket_n " failed");
./nginx/src/event/ngx_event_accept.c-488-    }
./nginx/src/event/ngx_event_accept.c-489-
./nginx/src/event/ngx_event_accept.c:490:    if (c->pool) {
./nginx/src/event/ngx_event_accept.c:491:        ngx_destroy_pool(c->pool);
./nginx/src/event/ngx_event_accept.c-492-    }
./nginx/src/event/ngx_event_accept.c-493-
./nginx/src/event/ngx_event_accept.c-494-#if (NGX_STAT_STUB)
./nginx/src/event/ngx_event_accept.c-495-    (void) ngx_atomic_fetch_add(ngx_stat_active, -1);
./nginx/src/event/ngx_event_accept.c-496-#endif
./nginx/src/event/ngx_event_accept.c-497-}
./nginx/src/event/ngx_event_accept.c-498-
./nginx/src/event/ngx_event_accept.c-499-
./nginx/src/event/ngx_event_accept.c-500-u_char *
./nginx/src/event/ngx_event_accept.c-501-ngx_accept_log_error(ngx_log_t *log, u_char *buf, size_t len)
--
./gslbdnsd/gslbdnsd_lt_schedule.c-10-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_lt_schedule.c-11-
./gslbdnsd/gslbdnsd_lt_schedule.c-12-
./gslbdnsd/gslbdnsd_lt_schedule.c-13-static struct list_head * gslbdnsd_lt_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_lt_schedule.c-14-						struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_lt_schedule.c-15-						struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_lt_schedule.c-16-						struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_lt_schedule.c-17-{
./gslbdnsd/gslbdnsd_lt_schedule.c-18-	struct list_head *rserver_head = NULL;
./gslbdnsd/gslbdnsd_lt_schedule.c-19-	struct gslbdnsd_rserver *rserver = NULL, *least = NULL;
./gslbdnsd/gslbdnsd_lt_schedule.c:20:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_lt_schedule.c-21-	unsigned long throughput = 0;
./gslbdnsd/gslbdnsd_lt_schedule.c-22-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_lt_schedule.c-23-
./gslbdnsd/gslbdnsd_lt_schedule.c:24:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_lt_schedule.c-25-		gslbdnsd_err("gslbdnsd_pool_get5");
./gslbdnsd/gslbdnsd_lt_schedule.c-26-		goto out;
./gslbdnsd/gslbdnsd_lt_schedule.c-27-	}
./gslbdnsd/gslbdnsd_lt_schedule.c-28-
./gslbdnsd/gslbdnsd_lt_schedule.c-29-	if ((rserver_head = gslbdnsd_rserver_head_alloc_and_init()) == NULL) {
./gslbdnsd/gslbdnsd_lt_schedule.c-30-		gslbdnsd_err("gslbdnsd_rserver_head_alloc_and_init");
./gslbdnsd/gslbdnsd_lt_schedule.c-31-		goto out;
./gslbdnsd/gslbdnsd_lt_schedule.c-32-	}
./gslbdnsd/gslbdnsd_lt_schedule.c-33-
./gslbdnsd/gslbdnsd_lt_schedule.c:34:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_lt_schedule.c-35-		if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_lt_schedule.c-36-						cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_lt_schedule.c-37-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_lt_schedule.c-38-			if (!least) {
./gslbdnsd/gslbdnsd_lt_schedule.c-39-				least = rserver;
./gslbdnsd/gslbdnsd_lt_schedule.c-40-				throughput = rserver->throughput;
./gslbdnsd/gslbdnsd_lt_schedule.c-41-			} else if (rserver->throughput < throughput)
./gslbdnsd/gslbdnsd_lt_schedule.c-42-				least = rserver;
./gslbdnsd/gslbdnsd_lt_schedule.c-43-		}
./gslbdnsd/gslbdnsd_lt_schedule.c-44-	}
--
./gslbdnsd/gslbdnsd_topology_schedule.c-10-#include "gslbdnsd_struct.h"
./gslbdnsd/gslbdnsd_topology_schedule.c-11-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_topology_schedule.c-12-
./gslbdnsd/gslbdnsd_topology_schedule.c-13-static int gslbdnsd_rserver_policy_self(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_topology_schedule.c-14-					struct gslbdnsd_vserver *vserver, 
./gslbdnsd/gslbdnsd_topology_schedule.c-15-					struct sockaddr_storage *network,
./gslbdnsd/gslbdnsd_topology_schedule.c-16-					struct list_head *rserver_head,
./gslbdnsd/gslbdnsd_topology_schedule.c-17-					char *netmask,
./gslbdnsd/gslbdnsd_topology_schedule.c-18-					struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_topology_schedule.c-19-{
./gslbdnsd/gslbdnsd_topology_schedule.c:20:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_topology_schedule.c-21-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_topology_schedule.c-22-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_topology_schedule.c-23-	
./gslbdnsd/gslbdnsd_topology_schedule.c:24:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_topology_schedule.c-25-		gslbdnsd_err("gslbdnsd_pool_get8");
./gslbdnsd/gslbdnsd_topology_schedule.c-26-		goto out;
./gslbdnsd/gslbdnsd_topology_schedule.c-27-	}
./gslbdnsd/gslbdnsd_topology_schedule.c-28-
./gslbdnsd/gslbdnsd_topology_schedule.c:29:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_topology_schedule.c-30-		if (gslbdnsd_rserver_available(rserver, cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_topology_schedule.c-31-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_topology_schedule.c-32-			if (gslbdnsd_network_cmp(network, 
./gslbdnsd/gslbdnsd_topology_schedule.c-33-						&rserver->rserver_config->ip, 
./gslbdnsd/gslbdnsd_topology_schedule.c-34-						netmask)) { 	// equal
./gslbdnsd/gslbdnsd_topology_schedule.c-35-				crserver = gslbdnsd_conn_rserver_create(rserver);
./gslbdnsd/gslbdnsd_topology_schedule.c-36-				if (crserver)
./gslbdnsd/gslbdnsd_topology_schedule.c-37-					gslbdnsd_conn_rserver_hash(crserver, rserver_head);
./gslbdnsd/gslbdnsd_topology_schedule.c-38-			}
./gslbdnsd/gslbdnsd_topology_schedule.c-39-		}
--
./gslbdnsd/gslbdnsd_misc.c-630-out:
./gslbdnsd/gslbdnsd_misc.c-631-	return -1;
./gslbdnsd/gslbdnsd_misc.c-632-}
./gslbdnsd/gslbdnsd_misc.c-633-
./gslbdnsd/gslbdnsd_misc.c-634-int gslbdnsd_trash_flush(void)
./gslbdnsd/gslbdnsd_misc.c-635-{
./gslbdnsd/gslbdnsd_misc.c-636-	struct gslbdnsd_config *config = gslbdnsd_config_get();
./gslbdnsd/gslbdnsd_misc.c-637-	struct gslbdnsd_event *ep = NULL, *enxt = NULL;
./gslbdnsd/gslbdnsd_misc.c-638-	struct gslbdnsd_vserver *vserver = NULL, *vnxt = NULL;
./gslbdnsd/gslbdnsd_misc.c-639-	struct gslbdnsd_rserver *rserver = NULL, *rnxt = NULL;
./gslbdnsd/gslbdnsd_misc.c:640:	struct gslbdnsd_pool *pool = NULL, *pnxt = NULL;
./gslbdnsd/gslbdnsd_misc.c-641-
./gslbdnsd/gslbdnsd_misc.c-642-	list_for_each_entry_safe(ep, enxt, &config->trash_event_head, node) {
./gslbdnsd/gslbdnsd_misc.c-643-		if (gslbdnsd_event_refcnt_eq_zero(ep)) {
./gslbdnsd/gslbdnsd_misc.c-644-			gslbdnsd_event_unhash(ep);
./gslbdnsd/gslbdnsd_misc.c-645-			gslbdnsd_event_destroy(ep);
./gslbdnsd/gslbdnsd_misc.c-646-		}
./gslbdnsd/gslbdnsd_misc.c-647-	}
./gslbdnsd/gslbdnsd_misc.c-648-
./gslbdnsd/gslbdnsd_misc.c-649-	list_for_each_entry_safe(vserver, vnxt, &config->trash_vserver_head, node) {
./gslbdnsd/gslbdnsd_misc.c-650-		if (gslbdnsd_vserver_refcnt_eq_zero(vserver)) {
--
./gslbdnsd/gslbdnsd_misc.c-653-		}
./gslbdnsd/gslbdnsd_misc.c-654-	}
./gslbdnsd/gslbdnsd_misc.c-655-
./gslbdnsd/gslbdnsd_misc.c-656-	list_for_each_entry_safe(rserver, rnxt, &config->trash_rserver_head, node) {
./gslbdnsd/gslbdnsd_misc.c-657-		if (gslbdnsd_rserver_refcnt_eq_zero(rserver)) {
./gslbdnsd/gslbdnsd_misc.c-658-			gslbdnsd_rserver_unhash(rserver);
./gslbdnsd/gslbdnsd_misc.c-659-			gslbdnsd_rserver_destroy(rserver);
./gslbdnsd/gslbdnsd_misc.c-660-		}
./gslbdnsd/gslbdnsd_misc.c-661-	}
./gslbdnsd/gslbdnsd_misc.c-662-
./gslbdnsd/gslbdnsd_misc.c:663:	list_for_each_entry_safe(pool, pnxt, &config->trash_pool_head, node) {
./gslbdnsd/gslbdnsd_misc.c:664:		if (gslbdnsd_pool_refcnt_eq_zero(pool)) {
./gslbdnsd/gslbdnsd_misc.c:665:			gslbdnsd_pool_unhash(pool);
./gslbdnsd/gslbdnsd_misc.c:666:			gslbdnsd_pool_destroy(pool);
./gslbdnsd/gslbdnsd_misc.c-667-		}
./gslbdnsd/gslbdnsd_misc.c-668-	}
./gslbdnsd/gslbdnsd_misc.c-669-
./gslbdnsd/gslbdnsd_misc.c-670-	return 0;
./gslbdnsd/gslbdnsd_misc.c-671-}
./gslbdnsd/gslbdnsd_misc.c-672-
./gslbdnsd/gslbdnsd_misc.c-673-int gslbdnsd_dispatch_loop(void)
./gslbdnsd/gslbdnsd_misc.c-674-{
./gslbdnsd/gslbdnsd_misc.c-675-	struct gslbdnsd_config *config = gslbdnsd_config_get();
./gslbdnsd/gslbdnsd_misc.c-676-
--
./gslbdnsd/gslbdnsd_misc.c-843-	answer->dlen = htons(len);
./gslbdnsd/gslbdnsd_misc.c-844-	
./gslbdnsd/gslbdnsd_misc.c-845-	return len;
./gslbdnsd/gslbdnsd_misc.c-846-}
./gslbdnsd/gslbdnsd_misc.c-847-
./gslbdnsd/gslbdnsd_misc.c-848-int gslbdnsd_config_create(struct gslbdnsd_config *config, const char *filename)
./gslbdnsd/gslbdnsd_misc.c-849-{
./gslbdnsd/gslbdnsd_misc.c-850-	struct gslbdnsd_listener *listener = NULL;
./gslbdnsd/gslbdnsd_misc.c-851-	struct gslbdnsd_vserver *vserver = NULL;
./gslbdnsd/gslbdnsd_misc.c-852-	struct gslbdnsd_scheduler *scheduler = NULL;
./gslbdnsd/gslbdnsd_misc.c:853:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_misc.c-854-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_misc.c-855-	
./gslbdnsd/gslbdnsd_misc.c-856-	struct gslb_listener *listener_config = NULL;
./gslbdnsd/gslbdnsd_misc.c-857-	struct gslb_vserver *vserver_config = NULL;
./gslbdnsd/gslbdnsd_misc.c-858-	struct gslb_pool *pool_config = NULL;
./gslbdnsd/gslbdnsd_misc.c-859-	struct gslb_rserver *rserver_config = NULL;
./gslbdnsd/gslbdnsd_misc.c-860-	struct gslb_scheduler *scheduler_config = NULL;
./gslbdnsd/gslbdnsd_misc.c-861-	FILE *fp = NULL;
./gslbdnsd/gslbdnsd_misc.c-862-	char buf[BUFSIZ];
./gslbdnsd/gslbdnsd_misc.c-863-
--
./gslbdnsd/gslbdnsd_misc.c-891-		list_for_each_entry(scheduler, &vserver->scheduler_head, node) {
./gslbdnsd/gslbdnsd_misc.c-892-			scheduler_config = scheduler->scheduler_config;
./gslbdnsd/gslbdnsd_misc.c-893-			fprintf(fp, "scheduler: [name: %s, type: %s]\n", 
./gslbdnsd/gslbdnsd_misc.c-894-				scheduler_config->name, scheduler_config->type);
./gslbdnsd/gslbdnsd_misc.c-895-		}		
./gslbdnsd/gslbdnsd_misc.c-896-		fprintf(fp, "[/item]\n");
./gslbdnsd/gslbdnsd_misc.c-897-	}
./gslbdnsd/gslbdnsd_misc.c-898-	fprintf(fp, "[/VSERVER]\n\n");
./gslbdnsd/gslbdnsd_misc.c-899-	
./gslbdnsd/gslbdnsd_misc.c-900-	fprintf(fp, "[POOL]\n");
./gslbdnsd/gslbdnsd_misc.c:901:	list_for_each_entry(pool, &config->pool_head, node) {
./gslbdnsd/gslbdnsd_misc.c:902:		pool_config = pool->pool_config;
./gslbdnsd/gslbdnsd_misc.c-903-		fprintf(fp, "[item]\n");
./gslbdnsd/gslbdnsd_misc.c-904-		fprintf(fp, "name: %s, healthcheck: %s\n", 
./gslbdnsd/gslbdnsd_misc.c-905-			pool_config->name, pool_config->healthcheck);
./gslbdnsd/gslbdnsd_misc.c:906:		list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_misc.c-907-			rserver_config = rserver->rserver_config;
./gslbdnsd/gslbdnsd_misc.c-908-			gslbdnsd_inet_ntop(&rserver_config->ip, buf, sizeof(buf));
./gslbdnsd/gslbdnsd_misc.c-909-			fprintf(fp, "rserver: [ip: %s, type: %s, device: %s, weight: %s, healthcheck: %s, enable: %s, maxreq: %s, state: %s, device_vsname: %s]\n",
./gslbdnsd/gslbdnsd_misc.c-910-				buf, rserver_config->type, rserver_config->device,
./gslbdnsd/gslbdnsd_misc.c-911-				rserver_config->weight, rserver_config->healthcheck,
./gslbdnsd/gslbdnsd_misc.c-912-				rserver_config->enable, rserver_config->maxreq,
./gslbdnsd/gslbdnsd_misc.c-913-				rserver_config->state, rserver_config->device_vsname);
./gslbdnsd/gslbdnsd_misc.c-914-		}
./gslbdnsd/gslbdnsd_misc.c-915-		fprintf(fp, "[/item]\n");
./gslbdnsd/gslbdnsd_misc.c-916-	}
--
./gslbdnsd/gslbdnsd_vserver.c-287-	return -1;
./gslbdnsd/gslbdnsd_vserver.c-288-}
./gslbdnsd/gslbdnsd_vserver.c-289-
./gslbdnsd/gslbdnsd_vserver.c-290-int gslbdnsd_vserver_interval_flush(
./gslbdnsd/gslbdnsd_vserver.c-291-				struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_vserver.c-292-				struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_vserver.c-293-				struct gslbdnsd_vserver *vserver, 
./gslbdnsd/gslbdnsd_vserver.c-294-				unsigned int command)
./gslbdnsd/gslbdnsd_vserver.c-295-{
./gslbdnsd/gslbdnsd_vserver.c-296-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_vserver.c:297:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_vserver.c-298-
./gslbdnsd/gslbdnsd_vserver.c:299:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_vserver.c-300-		gslbdnsd_err("gslbdnsd_pool_get9");
./gslbdnsd/gslbdnsd_vserver.c-301-		goto out;
./gslbdnsd/gslbdnsd_vserver.c-302-	}
./gslbdnsd/gslbdnsd_vserver.c-303-
./gslbdnsd/gslbdnsd_vserver.c:304:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_vserver.c-305-		if (!strcasecmp(rserver->rserver_config->type, GSLBDNSD_RSERVER_TYPE_SITE)
./gslbdnsd/gslbdnsd_vserver.c-306-			&& !strcasecmp(rserver->rserver_config->enable, GSLBDNSD_ENABLE_ON)
./gslbdnsd/gslbdnsd_vserver.c-307-			&& !strcasecmp(rserver->rserver_config->state, 
./gslbdnsd/gslbdnsd_vserver.c-308-						GSLBDNSD_RSERVER_STATE_UP)) {
./gslbdnsd/gslbdnsd_vserver.c-309-			__gslbdnsd_vserver_interval_flush(ep, client_address,
./gslbdnsd/gslbdnsd_vserver.c-310-								rserver, vserver, command);
./gslbdnsd/gslbdnsd_vserver.c-311-		}
./gslbdnsd/gslbdnsd_vserver.c-312-	}
./gslbdnsd/gslbdnsd_vserver.c-313-
./gslbdnsd/gslbdnsd_vserver.c-314-	return 0;
--
./gslbdnsd/gslbdnsd_vserver.c-473-out:
./gslbdnsd/gslbdnsd_vserver.c-474-	gslbdnsd_event_unhash(ep);
./gslbdnsd/gslbdnsd_vserver.c-475-	gslbdnsd_event_destroy(ep);
./gslbdnsd/gslbdnsd_vserver.c-476-	return -1;
./gslbdnsd/gslbdnsd_vserver.c-477-}
./gslbdnsd/gslbdnsd_vserver.c-478-
./gslbdnsd/gslbdnsd_vserver.c-479-struct gslbdnsd_vserver * gslbdnsd_vserver_pool_rserver_get(
./gslbdnsd/gslbdnsd_vserver.c-480-					struct gslbdnsd_rserver *rserver)
./gslbdnsd/gslbdnsd_vserver.c-481-{
./gslbdnsd/gslbdnsd_vserver.c-482-	struct gslbdnsd_vserver *vserver = NULL;
./gslbdnsd/gslbdnsd_vserver.c:483:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_vserver.c-484-
./gslbdnsd/gslbdnsd_vserver.c:485:	pool = gslbdnsd_pool_rserver_get(rserver);
./gslbdnsd/gslbdnsd_vserver.c:486:	if (pool == NULL) {
./gslbdnsd/gslbdnsd_vserver.c-487-		gslbdnsd_err("gslbdnsd_pool_rserver_get");
./gslbdnsd/gslbdnsd_vserver.c-488-		goto out;
./gslbdnsd/gslbdnsd_vserver.c-489-	}
./gslbdnsd/gslbdnsd_vserver.c-490-
./gslbdnsd/gslbdnsd_vserver.c:491:	vserver = gslbdnsd_vserver_pool_get(pool);
./gslbdnsd/gslbdnsd_vserver.c-492-	if (vserver == NULL) {
./gslbdnsd/gslbdnsd_vserver.c-493-		gslbdnsd_err("gslbdnsd_vserver_pool_get");
./gslbdnsd/gslbdnsd_vserver.c-494-		goto out;
./gslbdnsd/gslbdnsd_vserver.c-495-	}
./gslbdnsd/gslbdnsd_vserver.c-496-out:
./gslbdnsd/gslbdnsd_vserver.c-497-	return vserver;
./gslbdnsd/gslbdnsd_vserver.c-498-}
./gslbdnsd/gslbdnsd_vserver.c-499-
./gslbdnsd/gslbdnsd_vserver.c-500-int gslbdnsd_vserver_enable_on(struct gslbdnsd_vserver *vserver)
./gslbdnsd/gslbdnsd_vserver.c-501-{
--
./gslbdnsd/gslbdnsd_vserver.c-515-		return 1;
./gslbdnsd/gslbdnsd_vserver.c-516-
./gslbdnsd/gslbdnsd_vserver.c-517-	return 0;
./gslbdnsd/gslbdnsd_vserver.c-518-}
./gslbdnsd/gslbdnsd_vserver.c-519-
./gslbdnsd/gslbdnsd_vserver.c-520-int gslbdnsd_vserver_multiipaddr_enable_on(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_vserver.c-521-					struct gslbdnsd_vserver *vserver, 
./gslbdnsd/gslbdnsd_vserver.c-522-					struct list_head *rserver_head)
./gslbdnsd/gslbdnsd_vserver.c-523-{
./gslbdnsd/gslbdnsd_vserver.c-524-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_vserver.c:525:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_vserver.c-526-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_vserver.c-527-
./gslbdnsd/gslbdnsd_vserver.c-528-	if (strcasecmp(vserver->vserver_config->multiipaddr_enable, GSLBDNSD_ENABLE_ON))
./gslbdnsd/gslbdnsd_vserver.c-529-		goto out;
./gslbdnsd/gslbdnsd_vserver.c-530-
./gslbdnsd/gslbdnsd_vserver.c:531:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_vserver.c-532-		gslbdnsd_err("gslbdnsd_pool_get10");
./gslbdnsd/gslbdnsd_vserver.c-533-		goto out;
./gslbdnsd/gslbdnsd_vserver.c-534-	}
./gslbdnsd/gslbdnsd_vserver.c-535-
./gslbdnsd/gslbdnsd_vserver.c:536:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_vserver.c-537-		if (gslbdnsd_rserver_available_multiipaddr(rserver, rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_vserver.c-538-							== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_vserver.c-539-			crserver = gslbdnsd_conn_rserver_create(rserver);
./gslbdnsd/gslbdnsd_vserver.c-540-			if (crserver) 
./gslbdnsd/gslbdnsd_vserver.c-541-				gslbdnsd_conn_rserver_hash(crserver, rserver_head);
./gslbdnsd/gslbdnsd_vserver.c-542-		}
./gslbdnsd/gslbdnsd_vserver.c-543-	}
./gslbdnsd/gslbdnsd_vserver.c-544-
./gslbdnsd/gslbdnsd_vserver.c-545-	return 0;
./gslbdnsd/gslbdnsd_vserver.c-546-out:
--
./gslbdnsd/gslbdnsd_wrr_schedule.c-24-		swap(a, b);
./gslbdnsd/gslbdnsd_wrr_schedule.c-25-	while ((r = a % b) != 0) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-26-		a = b;
./gslbdnsd/gslbdnsd_wrr_schedule.c-27-		b = r;
./gslbdnsd/gslbdnsd_wrr_schedule.c-28-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-29-	return b;
./gslbdnsd/gslbdnsd_wrr_schedule.c-30-}
./gslbdnsd/gslbdnsd_wrr_schedule.c-31-
./gslbdnsd/gslbdnsd_wrr_schedule.c-32-static int gslbdnsd_wrr_max_weight(struct gslbdnsd_vserver *vserver)
./gslbdnsd/gslbdnsd_wrr_schedule.c-33-{
./gslbdnsd/gslbdnsd_wrr_schedule.c:34:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-35-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-36-	int new_weight, weight = 0;
./gslbdnsd/gslbdnsd_wrr_schedule.c-37-
./gslbdnsd/gslbdnsd_wrr_schedule.c:38:	pool = gslbdnsd_pool_get(vserver->vserver_config->poolname);
./gslbdnsd/gslbdnsd_wrr_schedule.c:39:	if (pool == NULL) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-40-		gslbdnsd_err("gslbdnsd_pool_get11");
./gslbdnsd/gslbdnsd_wrr_schedule.c-41-		goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-42-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-43-
./gslbdnsd/gslbdnsd_wrr_schedule.c:44:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-45-		new_weight = atoi(rserver->rserver_config->weight);
./gslbdnsd/gslbdnsd_wrr_schedule.c-46-		if (new_weight > weight)
./gslbdnsd/gslbdnsd_wrr_schedule.c-47-			weight = new_weight;
./gslbdnsd/gslbdnsd_wrr_schedule.c-48-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-49-out:
./gslbdnsd/gslbdnsd_wrr_schedule.c-50-	return weight;
./gslbdnsd/gslbdnsd_wrr_schedule.c-51-}
./gslbdnsd/gslbdnsd_wrr_schedule.c-52-
./gslbdnsd/gslbdnsd_wrr_schedule.c-53-static int ip_vs_wrr_gcd_weight(struct gslbdnsd_vserver *vserver)
./gslbdnsd/gslbdnsd_wrr_schedule.c-54-{
./gslbdnsd/gslbdnsd_wrr_schedule.c:55:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-56-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-57-	int weight;
./gslbdnsd/gslbdnsd_wrr_schedule.c-58-	int g = 0;
./gslbdnsd/gslbdnsd_wrr_schedule.c-59-
./gslbdnsd/gslbdnsd_wrr_schedule.c:60:	pool = gslbdnsd_pool_get(vserver->vserver_config->poolname);
./gslbdnsd/gslbdnsd_wrr_schedule.c:61:	if (pool == NULL) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-62-		gslbdnsd_err("gslbdnsd_pool_get12");
./gslbdnsd/gslbdnsd_wrr_schedule.c-63-		goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-64-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-65-
./gslbdnsd/gslbdnsd_wrr_schedule.c:66:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-67-		weight = atoi(rserver->rserver_config->weight);
./gslbdnsd/gslbdnsd_wrr_schedule.c-68-		if (weight > 0) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-69-			if (g > 0)
./gslbdnsd/gslbdnsd_wrr_schedule.c-70-				g = gcd(weight, g);
./gslbdnsd/gslbdnsd_wrr_schedule.c-71-			else
./gslbdnsd/gslbdnsd_wrr_schedule.c-72-				g = weight;
./gslbdnsd/gslbdnsd_wrr_schedule.c-73-		}
./gslbdnsd/gslbdnsd_wrr_schedule.c-74-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-75-out:
./gslbdnsd/gslbdnsd_wrr_schedule.c-76-	return g ? g : 1;
./gslbdnsd/gslbdnsd_wrr_schedule.c-77-}
./gslbdnsd/gslbdnsd_wrr_schedule.c-78-
./gslbdnsd/gslbdnsd_wrr_schedule.c-79-static int gslbdnsd_wrr_schedule_init(struct gslbdnsd_vserver *vserver)
./gslbdnsd/gslbdnsd_wrr_schedule.c-80-{
./gslbdnsd/gslbdnsd_wrr_schedule.c:81:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-82-	struct gslbdnsd_wrr_mark *mark = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-83-
./gslbdnsd/gslbdnsd_wrr_schedule.c:84:	pool = gslbdnsd_pool_get(vserver->vserver_config->poolname);
./gslbdnsd/gslbdnsd_wrr_schedule.c:85:	if (pool == NULL) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-86-		gslbdnsd_err("gslbdnsd_pool_get13");
./gslbdnsd/gslbdnsd_wrr_schedule.c-87-		goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-88-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-89-
./gslbdnsd/gslbdnsd_wrr_schedule.c-90-	mark = calloc(1, sizeof(struct gslbdnsd_wrr_mark));
./gslbdnsd/gslbdnsd_wrr_schedule.c-91-	if (mark == NULL) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-92-		gslbdnsd_err("calloc");
./gslbdnsd/gslbdnsd_wrr_schedule.c-93-		goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-94-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-95-
./gslbdnsd/gslbdnsd_wrr_schedule.c:96:	mark->cl = &pool->rserver_head;
./gslbdnsd/gslbdnsd_wrr_schedule.c-97-	mark->cw = 0;
./gslbdnsd/gslbdnsd_wrr_schedule.c-98-	mark->mw = gslbdnsd_wrr_max_weight(vserver);
./gslbdnsd/gslbdnsd_wrr_schedule.c-99-	mark->di = ip_vs_wrr_gcd_weight(vserver);
./gslbdnsd/gslbdnsd_wrr_schedule.c-100-	vserver->sched_data = mark;
./gslbdnsd/gslbdnsd_wrr_schedule.c-101-
./gslbdnsd/gslbdnsd_wrr_schedule.c-102-	return 0;
./gslbdnsd/gslbdnsd_wrr_schedule.c-103-out:
./gslbdnsd/gslbdnsd_wrr_schedule.c-104-	return -1;
./gslbdnsd/gslbdnsd_wrr_schedule.c-105-}
./gslbdnsd/gslbdnsd_wrr_schedule.c-106-
./gslbdnsd/gslbdnsd_wrr_schedule.c-107-static struct gslbdnsd_rserver * __gslbdnsd_wrr_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_wrr_schedule.c-108-							struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_wrr_schedule.c-109-							struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_wrr_schedule.c-110-{
./gslbdnsd/gslbdnsd_wrr_schedule.c-111-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-112-	struct gslbdnsd_wrr_mark *mark = vserver->sched_data;
./gslbdnsd/gslbdnsd_wrr_schedule.c-113-	struct list_head *p = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c:114:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-115-
./gslbdnsd/gslbdnsd_wrr_schedule.c:116:	pool = gslbdnsd_pool_get(vserver->vserver_config->poolname);
./gslbdnsd/gslbdnsd_wrr_schedule.c:117:	if (pool == NULL) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-118-		gslbdnsd_err("gslbdnsd_pool_get14");
./gslbdnsd/gslbdnsd_wrr_schedule.c-119-		goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-120-	}
./gslbdnsd/gslbdnsd_wrr_schedule.c-121-
./gslbdnsd/gslbdnsd_wrr_schedule.c-122-	p = mark->cl;
./gslbdnsd/gslbdnsd_wrr_schedule.c-123-	while (1) {
./gslbdnsd/gslbdnsd_wrr_schedule.c:124:		if (mark->cl == &pool->rserver_head) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-125-			if (mark->cl == mark->cl->next) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-126-				rserver = NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-127-				goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-128-			}
./gslbdnsd/gslbdnsd_wrr_schedule.c-129-
./gslbdnsd/gslbdnsd_wrr_schedule.c:130:			mark->cl = pool->rserver_head.next;
./gslbdnsd/gslbdnsd_wrr_schedule.c-131-			mark->cw -= mark->di;
./gslbdnsd/gslbdnsd_wrr_schedule.c-132-			if (mark->cw <= 0) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-133-				mark->cw = mark->mw;
./gslbdnsd/gslbdnsd_wrr_schedule.c-134-				if (mark->cw == 0) {
./gslbdnsd/gslbdnsd_wrr_schedule.c:135:					mark->cl = &pool->rserver_head;
./gslbdnsd/gslbdnsd_wrr_schedule.c-136-					rserver= NULL;
./gslbdnsd/gslbdnsd_wrr_schedule.c-137-					goto out;
./gslbdnsd/gslbdnsd_wrr_schedule.c-138-				}
./gslbdnsd/gslbdnsd_wrr_schedule.c-139-			}
./gslbdnsd/gslbdnsd_wrr_schedule.c-140-		} else
./gslbdnsd/gslbdnsd_wrr_schedule.c-141-			mark->cl = mark->cl->next;
./gslbdnsd/gslbdnsd_wrr_schedule.c-142-
./gslbdnsd/gslbdnsd_wrr_schedule.c:143:		if (mark->cl != &pool->rserver_head) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-144-			rserver = list_entry(mark->cl, struct gslbdnsd_rserver, node);
./gslbdnsd/gslbdnsd_wrr_schedule.c-145-			if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_wrr_schedule.c-146-							cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_wrr_schedule.c-147-							== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_wrr_schedule.c-148-				if (atoi(rserver->rserver_config->weight) >= mark->cw)
./gslbdnsd/gslbdnsd_wrr_schedule.c-149-					break;
./gslbdnsd/gslbdnsd_wrr_schedule.c-150-			}
./gslbdnsd/gslbdnsd_wrr_schedule.c-151-		}
./gslbdnsd/gslbdnsd_wrr_schedule.c-152-
./gslbdnsd/gslbdnsd_wrr_schedule.c-153-		if (mark->cl == p && mark->cw == mark->di) {
--
./gslbdnsd/gslbdnsd_conn.c-382-out:
./gslbdnsd/gslbdnsd_conn.c-383-	return GSLBDNSD_RSERVER_HEAD_NOT_AVAILABLE;
./gslbdnsd/gslbdnsd_conn.c-384-
./gslbdnsd/gslbdnsd_conn.c-385-}
./gslbdnsd/gslbdnsd_conn.c-386-
./gslbdnsd/gslbdnsd_conn.c-387-int gslbdnsd_conn_rserver_head_create(struct list_head *rserver_head,
./gslbdnsd/gslbdnsd_conn.c-388-					struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_conn.c-389-					struct list_head *cache_rserver_head,
./gslbdnsd/gslbdnsd_conn.c-390-					int qtype)
./gslbdnsd/gslbdnsd_conn.c-391-{
./gslbdnsd/gslbdnsd_conn.c:392:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_conn.c-393-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_conn.c-394-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_conn.c-395-
./gslbdnsd/gslbdnsd_conn.c:396:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_conn.c-397-		gslbdnsd_err("gslbdnsd_pool_get1");
./gslbdnsd/gslbdnsd_conn.c-398-		goto out;
./gslbdnsd/gslbdnsd_conn.c-399-	}
./gslbdnsd/gslbdnsd_conn.c-400-
./gslbdnsd/gslbdnsd_conn.c:401:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_conn.c-402-		// TODO real rserver must available
./gslbdnsd/gslbdnsd_conn.c-403-		if (gslbdnsd_rserver_available(rserver, cache_rserver_head, qtype) 
./gslbdnsd/gslbdnsd_conn.c-404-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_conn.c-405-			crserver = gslbdnsd_conn_rserver_create(rserver);
./gslbdnsd/gslbdnsd_conn.c-406-			if (crserver)
./gslbdnsd/gslbdnsd_conn.c-407-				gslbdnsd_conn_rserver_hash(crserver, rserver_head);
./gslbdnsd/gslbdnsd_conn.c-408-		}
./gslbdnsd/gslbdnsd_conn.c-409-	}
./gslbdnsd/gslbdnsd_conn.c-410-out:
./gslbdnsd/gslbdnsd_conn.c-411-	return 0;
--
./gslbdnsd/gslbdnsd_config.c-82-	}
./gslbdnsd/gslbdnsd_config.c-83-
./gslbdnsd/gslbdnsd_config.c-84-	return 0;
./gslbdnsd/gslbdnsd_config.c-85-out:
./gslbdnsd/gslbdnsd_config.c-86-	return -1;
./gslbdnsd/gslbdnsd_config.c-87-}
./gslbdnsd/gslbdnsd_config.c-88-
./gslbdnsd/gslbdnsd_config.c-89-static int gslbdnsd_config_load_pool(struct gslbdnsd_config *config)
./gslbdnsd/gslbdnsd_config.c-90-{
./gslbdnsd/gslbdnsd_config.c-91-	LIST_HEAD(head);
./gslbdnsd/gslbdnsd_config.c:92:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_config.c-93-	struct gslb_pool *p = NULL, *pnxt = NULL;
./gslbdnsd/gslbdnsd_config.c-94-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_config.c-95-	struct gslb_rserver *r = NULL, *rnxt = NULL;
./gslbdnsd/gslbdnsd_config.c-96-
./gslbdnsd/gslbdnsd_config.c-97-	module_get_queue(&head, "gslb_pool", NULL);
./gslbdnsd/gslbdnsd_config.c-98-
./gslbdnsd/gslbdnsd_config.c-99-	list_for_each_entry_safe(p, pnxt, &head, list) {
./gslbdnsd/gslbdnsd_config.c-100-		list_del_init(&p->list);
./gslbdnsd/gslbdnsd_config.c:101:		if ((pool = gslbdnsd_pool_create(p)) == NULL) {
./gslbdnsd/gslbdnsd_config.c-102-			gslbdnsd_err("gslbdnsd_pool_create");
./gslbdnsd/gslbdnsd_config.c-103-			goto out;
./gslbdnsd/gslbdnsd_config.c-104-		}
./gslbdnsd/gslbdnsd_config.c-105-		
./gslbdnsd/gslbdnsd_config.c-106-		list_for_each_entry_safe(r, rnxt, &p->gslb_rserver_head, list) {
./gslbdnsd/gslbdnsd_config.c-107-			list_del_init(&r->list);
./gslbdnsd/gslbdnsd_config.c-108-			if ((rserver = gslbdnsd_rserver_create(r)) == NULL) {
./gslbdnsd/gslbdnsd_config.c-109-				gslbdnsd_err("gslbdnsd_rserver_create");
./gslbdnsd/gslbdnsd_config.c-110-				goto out;
./gslbdnsd/gslbdnsd_config.c-111-			}
./gslbdnsd/gslbdnsd_config.c-112-
./gslbdnsd/gslbdnsd_config.c:113:			gslbdnsd_rserver_hash(rserver, pool);
./gslbdnsd/gslbdnsd_config.c-114-		}
./gslbdnsd/gslbdnsd_config.c-115-
./gslbdnsd/gslbdnsd_config.c:116:		gslbdnsd_pool_hash(pool, config);
./gslbdnsd/gslbdnsd_config.c-117-	}
./gslbdnsd/gslbdnsd_config.c-118-
./gslbdnsd/gslbdnsd_config.c-119-	return 0;
./gslbdnsd/gslbdnsd_config.c-120-out:
./gslbdnsd/gslbdnsd_config.c-121-	return -1;
./gslbdnsd/gslbdnsd_config.c-122-}
./gslbdnsd/gslbdnsd_config.c-123-
./gslbdnsd/gslbdnsd_config.c-124-
./gslbdnsd/gslbdnsd_config.c-125-static int gslbdnsd_config_load_topology(struct gslbdnsd_config *config)
./gslbdnsd/gslbdnsd_config.c-126-{
--
./gslbdnsd/gslbdnsd_config.c-186-		}
./gslbdnsd/gslbdnsd_config.c-187-
./gslbdnsd/gslbdnsd_config.c-188-		gslbdnsd_vserver_destroy(vserver);
./gslbdnsd/gslbdnsd_config.c-189-	}
./gslbdnsd/gslbdnsd_config.c-190-
./gslbdnsd/gslbdnsd_config.c-191-	return 0;
./gslbdnsd/gslbdnsd_config.c-192-}
./gslbdnsd/gslbdnsd_config.c-193-
./gslbdnsd/gslbdnsd_config.c-194-static int gslbdnsd_config_unload_pool(struct gslbdnsd_config *config)
./gslbdnsd/gslbdnsd_config.c-195-{
./gslbdnsd/gslbdnsd_config.c:196:	struct gslbdnsd_pool *pool = NULL, *nxt = NULL;
./gslbdnsd/gslbdnsd_config.c-197-
./gslbdnsd/gslbdnsd_config.c:198:	list_for_each_entry_safe(pool, nxt, &config->pool_head, node) {
./gslbdnsd/gslbdnsd_config.c:199:		gslbdnsd_pool_unhash(pool);
./gslbdnsd/gslbdnsd_config.c:200:		if (!gslbdnsd_pool_refcnt_eq_zero(pool)) {
./gslbdnsd/gslbdnsd_config.c:201:			list_add_tail(&pool->node, &config->trash_pool_head);
./gslbdnsd/gslbdnsd_config.c-202-			continue;
./gslbdnsd/gslbdnsd_config.c-203-		}
./gslbdnsd/gslbdnsd_config.c-204-		
./gslbdnsd/gslbdnsd_config.c:205:		gslbdnsd_pool_destroy(pool);
./gslbdnsd/gslbdnsd_config.c-206-	}
./gslbdnsd/gslbdnsd_config.c-207-
./gslbdnsd/gslbdnsd_config.c-208-	return 0;
./gslbdnsd/gslbdnsd_config.c-209-}
./gslbdnsd/gslbdnsd_config.c-210-
./gslbdnsd/gslbdnsd_config.c-211-
./gslbdnsd/gslbdnsd_config.c-212-static int gslbdnsd_config_unload_topology(struct gslbdnsd_config *config)
./gslbdnsd/gslbdnsd_config.c-213-{
./gslbdnsd/gslbdnsd_config.c-214-	struct tp_node *tp_node = NULL, *nnxt = NULL;
./gslbdnsd/gslbdnsd_config.c-215-	struct tp_policy *tp_policy = NULL, *pnxt = NULL;
--
./gslbdnsd/gslbdnsd_ll_schedule.c-10-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_ll_schedule.c-11-
./gslbdnsd/gslbdnsd_ll_schedule.c-12-
./gslbdnsd/gslbdnsd_ll_schedule.c-13-static struct list_head * gslbdnsd_ll_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_ll_schedule.c-14-						struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_ll_schedule.c-15-						struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_ll_schedule.c-16-						struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_ll_schedule.c-17-{
./gslbdnsd/gslbdnsd_ll_schedule.c-18-	struct list_head *rserver_head = NULL;
./gslbdnsd/gslbdnsd_ll_schedule.c-19-	struct gslbdnsd_rserver *rserver = NULL, *least = NULL;
./gslbdnsd/gslbdnsd_ll_schedule.c:20:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_ll_schedule.c-21-	unsigned long load = 0;
./gslbdnsd/gslbdnsd_ll_schedule.c-22-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_ll_schedule.c-23-
./gslbdnsd/gslbdnsd_ll_schedule.c:24:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_ll_schedule.c-25-		gslbdnsd_err("gslbdnsd_pool_get4");
./gslbdnsd/gslbdnsd_ll_schedule.c-26-		goto out;
./gslbdnsd/gslbdnsd_ll_schedule.c-27-	}
./gslbdnsd/gslbdnsd_ll_schedule.c-28-
./gslbdnsd/gslbdnsd_ll_schedule.c-29-	if ((rserver_head = gslbdnsd_rserver_head_alloc_and_init()) == NULL) {
./gslbdnsd/gslbdnsd_ll_schedule.c-30-		gslbdnsd_err("gslbdnsd_rserver_head_alloc_and_init");
./gslbdnsd/gslbdnsd_ll_schedule.c-31-		goto out;
./gslbdnsd/gslbdnsd_ll_schedule.c-32-	}
./gslbdnsd/gslbdnsd_ll_schedule.c-33-	
./gslbdnsd/gslbdnsd_ll_schedule.c:34:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_ll_schedule.c-35-		if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_ll_schedule.c-36-						cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_ll_schedule.c-37-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_ll_schedule.c-38-			if (!least) {
./gslbdnsd/gslbdnsd_ll_schedule.c-39-				least = rserver;
./gslbdnsd/gslbdnsd_ll_schedule.c-40-				load = rserver->load;
./gslbdnsd/gslbdnsd_ll_schedule.c-41-			} else if (rserver->load < load) {
./gslbdnsd/gslbdnsd_ll_schedule.c-42-				least = rserver;
./gslbdnsd/gslbdnsd_ll_schedule.c-43-				load = rserver->load;
./gslbdnsd/gslbdnsd_ll_schedule.c-44-			}
--
./gslbdnsd/gslbdnsd_rr_schedule.c-11-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_rr_schedule.c-12-
./gslbdnsd/gslbdnsd_rr_schedule.c-13-
./gslbdnsd/gslbdnsd_rr_schedule.c-14-static struct list_head * gslbdnsd_rr_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_rr_schedule.c-15-						struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_rr_schedule.c-16-						struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_rr_schedule.c-17-						struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_rr_schedule.c-18-{
./gslbdnsd/gslbdnsd_rr_schedule.c-19-	struct list_head *rserver_head = NULL;
./gslbdnsd/gslbdnsd_rr_schedule.c-20-	struct gslbdnsd_rserver *rserver = NULL, *nxt = NULL;
./gslbdnsd/gslbdnsd_rr_schedule.c:21:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_rr_schedule.c-22-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_rr_schedule.c-23-
./gslbdnsd/gslbdnsd_rr_schedule.c:24:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_rr_schedule.c-25-		gslbdnsd_err("gslbdnsd_pool_get7");
./gslbdnsd/gslbdnsd_rr_schedule.c-26-		goto out;
./gslbdnsd/gslbdnsd_rr_schedule.c-27-	}
./gslbdnsd/gslbdnsd_rr_schedule.c-28-
./gslbdnsd/gslbdnsd_rr_schedule.c-29-	if ((rserver_head = gslbdnsd_rserver_head_alloc_and_init()) == NULL) {
./gslbdnsd/gslbdnsd_rr_schedule.c-30-		gslbdnsd_err("gslbdnsd_rserver_head_alloc_and_init");
./gslbdnsd/gslbdnsd_rr_schedule.c-31-		goto out;
./gslbdnsd/gslbdnsd_rr_schedule.c-32-	}
./gslbdnsd/gslbdnsd_rr_schedule.c-33-
./gslbdnsd/gslbdnsd_rr_schedule.c:34:	list_for_each_entry_safe(rserver, nxt, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_rr_schedule.c-35-		if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_rr_schedule.c-36-						cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_rr_schedule.c-37-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_rr_schedule.c-38-			crserver = gslbdnsd_conn_rserver_create(rserver);
./gslbdnsd/gslbdnsd_rr_schedule.c-39-			if (crserver) {
./gslbdnsd/gslbdnsd_rr_schedule.c:40:				list_move_tail(&rserver->node, &pool->rserver_head);
./gslbdnsd/gslbdnsd_rr_schedule.c-41-				gslbdnsd_conn_rserver_hash(crserver, rserver_head);
./gslbdnsd/gslbdnsd_rr_schedule.c-42-				break;
./gslbdnsd/gslbdnsd_rr_schedule.c-43-			}
./gslbdnsd/gslbdnsd_rr_schedule.c-44-		}
./gslbdnsd/gslbdnsd_rr_schedule.c-45-	}
./gslbdnsd/gslbdnsd_rr_schedule.c-46-
./gslbdnsd/gslbdnsd_rr_schedule.c-47-	gslbdnsd_conn_rserver_head_destroy(cache_rserver_head);
./gslbdnsd/gslbdnsd_rr_schedule.c-48-	return rserver_head;
./gslbdnsd/gslbdnsd_rr_schedule.c-49-out:
./gslbdnsd/gslbdnsd_rr_schedule.c-50-	return NULL;
--
./gslbdnsd/gslbdnsd_pool.c-79-{
./gslbdnsd/gslbdnsd_pool.c-80-	rserver->refcnt--;
./gslbdnsd/gslbdnsd_pool.c-81-	return 0;
./gslbdnsd/gslbdnsd_pool.c-82-}
./gslbdnsd/gslbdnsd_pool.c-83-
./gslbdnsd/gslbdnsd_pool.c-84-int gslbdnsd_rserver_refcnt_eq_zero(struct gslbdnsd_rserver *rserver)
./gslbdnsd/gslbdnsd_pool.c-85-{
./gslbdnsd/gslbdnsd_pool.c-86-	return (rserver->refcnt == 0) ? 1 : 0;
./gslbdnsd/gslbdnsd_pool.c-87-}
./gslbdnsd/gslbdnsd_pool.c-88-
./gslbdnsd/gslbdnsd_pool.c:89:int gslbdnsd_rserver_hash(struct gslbdnsd_rserver *rserver, struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-90-{
./gslbdnsd/gslbdnsd_pool.c:91:	list_add_tail(&rserver->node, &pool->rserver_head);
./gslbdnsd/gslbdnsd_pool.c-92-	return 0;
./gslbdnsd/gslbdnsd_pool.c-93-}
./gslbdnsd/gslbdnsd_pool.c-94-
./gslbdnsd/gslbdnsd_pool.c-95-int gslbdnsd_rserver_unhash(struct gslbdnsd_rserver *rserver)
./gslbdnsd/gslbdnsd_pool.c-96-{
./gslbdnsd/gslbdnsd_pool.c-97-	list_del_init(&rserver->node);
./gslbdnsd/gslbdnsd_pool.c-98-	return 0;
./gslbdnsd/gslbdnsd_pool.c-99-}
./gslbdnsd/gslbdnsd_pool.c-100-
./gslbdnsd/gslbdnsd_pool.c:101:int gslbdnsd_pool_refcnt_eq_zero(struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-102-{
./gslbdnsd/gslbdnsd_pool.c-103-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_pool.c-104-
./gslbdnsd/gslbdnsd_pool.c:105:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_pool.c-106-		if (!gslbdnsd_rserver_refcnt_eq_zero((rserver)))
./gslbdnsd/gslbdnsd_pool.c-107-			return 0;
./gslbdnsd/gslbdnsd_pool.c-108-	}
./gslbdnsd/gslbdnsd_pool.c-109-
./gslbdnsd/gslbdnsd_pool.c-110-	return 1;
./gslbdnsd/gslbdnsd_pool.c-111-}
./gslbdnsd/gslbdnsd_pool.c-112-
./gslbdnsd/gslbdnsd_pool.c-113-struct gslbdnsd_pool * gslbdnsd_pool_get(char *name)
./gslbdnsd/gslbdnsd_pool.c-114-{
./gslbdnsd/gslbdnsd_pool.c-115-	struct gslbdnsd_config *config = gslbdnsd_config_get();
./gslbdnsd/gslbdnsd_pool.c:116:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-117-
./gslbdnsd/gslbdnsd_pool.c:118:	list_for_each_entry(pool, &config->pool_head, node) {
./gslbdnsd/gslbdnsd_pool.c:119:		if (!strcmp(pool->pool_config->name, name))
./gslbdnsd/gslbdnsd_pool.c-120-			goto out;
./gslbdnsd/gslbdnsd_pool.c-121-	}
./gslbdnsd/gslbdnsd_pool.c:122:	pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-123-out:
./gslbdnsd/gslbdnsd_pool.c:124:	return pool;
./gslbdnsd/gslbdnsd_pool.c-125-}
./gslbdnsd/gslbdnsd_pool.c-126-
./gslbdnsd/gslbdnsd_pool.c:127:int gslbdnsd_pool_hash(struct gslbdnsd_pool *pool, struct gslbdnsd_config *config)
./gslbdnsd/gslbdnsd_pool.c-128-{
./gslbdnsd/gslbdnsd_pool.c:129:	list_add_tail(&pool->node, &config->pool_head);
./gslbdnsd/gslbdnsd_pool.c-130-
./gslbdnsd/gslbdnsd_pool.c-131-	return 0;
./gslbdnsd/gslbdnsd_pool.c-132-}
./gslbdnsd/gslbdnsd_pool.c-133-
./gslbdnsd/gslbdnsd_pool.c:134:int gslbdnsd_pool_unhash(struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-135-{
./gslbdnsd/gslbdnsd_pool.c:136:	list_del_init(&pool->node);
./gslbdnsd/gslbdnsd_pool.c-137-	return 0;
./gslbdnsd/gslbdnsd_pool.c-138-}
./gslbdnsd/gslbdnsd_pool.c-139-struct gslbdnsd_pool * gslbdnsd_pool_create(struct gslb_pool *pool_config)
./gslbdnsd/gslbdnsd_pool.c-140-{
./gslbdnsd/gslbdnsd_pool.c:141:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-142-	
./gslbdnsd/gslbdnsd_pool.c:143:	pool = calloc(1, sizeof(struct gslbdnsd_pool));
./gslbdnsd/gslbdnsd_pool.c:144:	if (pool) {
./gslbdnsd/gslbdnsd_pool.c:145:		pool->pool_config = pool_config;
./gslbdnsd/gslbdnsd_pool.c:146:		INIT_LIST_HEAD(&pool->rserver_head);
./gslbdnsd/gslbdnsd_pool.c:147:		INIT_LIST_HEAD(&pool->node);
./gslbdnsd/gslbdnsd_pool.c-148-	}
./gslbdnsd/gslbdnsd_pool.c:149:	return pool;
./gslbdnsd/gslbdnsd_pool.c-150-}
./gslbdnsd/gslbdnsd_pool.c-151-
./gslbdnsd/gslbdnsd_pool.c:152:static int gslbdnsd_pool_empty(struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-153-{
./gslbdnsd/gslbdnsd_pool.c:154:	if (list_empty(&pool->node))
./gslbdnsd/gslbdnsd_pool.c-155-		return 1;
./gslbdnsd/gslbdnsd_pool.c-156-
./gslbdnsd/gslbdnsd_pool.c-157-	return 0;
./gslbdnsd/gslbdnsd_pool.c-158-}
./gslbdnsd/gslbdnsd_pool.c-159-
./gslbdnsd/gslbdnsd_pool.c:160:int gslbdnsd_pool_destroy(struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-161-{
./gslbdnsd/gslbdnsd_pool.c-162-	struct gslbdnsd_rserver *rserver = NULL, *nxt = NULL;
./gslbdnsd/gslbdnsd_pool.c-163-
./gslbdnsd/gslbdnsd_pool.c:164:	if (!gslbdnsd_pool_empty(pool))
./gslbdnsd/gslbdnsd_pool.c:165:		gslbdnsd_pool_unhash(pool);
./gslbdnsd/gslbdnsd_pool.c-166-
./gslbdnsd/gslbdnsd_pool.c:167:	list_for_each_entry_safe(rserver, nxt, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_pool.c-168-		gslbdnsd_rserver_unhash(rserver);
./gslbdnsd/gslbdnsd_pool.c-169-		gslbdnsd_rserver_destroy(rserver);
./gslbdnsd/gslbdnsd_pool.c-170-	}
./gslbdnsd/gslbdnsd_pool.c-171-	
./gslbdnsd/gslbdnsd_pool.c:172:	free(pool->pool_config);
./gslbdnsd/gslbdnsd_pool.c:173:	free(pool);
./gslbdnsd/gslbdnsd_pool.c-174-
./gslbdnsd/gslbdnsd_pool.c-175-	return 0;
./gslbdnsd/gslbdnsd_pool.c-176-}
./gslbdnsd/gslbdnsd_pool.c-177-
./gslbdnsd/gslbdnsd_pool.c-178-struct gslbdnsd_pool * gslbdnsd_pool_rserver_get(struct gslbdnsd_rserver *rserver)
./gslbdnsd/gslbdnsd_pool.c-179-{
./gslbdnsd/gslbdnsd_pool.c-180-	struct gslbdnsd_config *config = gslbdnsd_config_get();
./gslbdnsd/gslbdnsd_pool.c:181:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-182-	struct gslbdnsd_rserver *tmp = NULL;
./gslbdnsd/gslbdnsd_pool.c-183-
./gslbdnsd/gslbdnsd_pool.c:184:	list_for_each_entry(pool, &config->pool_head, node) {
./gslbdnsd/gslbdnsd_pool.c:185:		list_for_each_entry(tmp, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_pool.c-186-			if (tmp == rserver)
./gslbdnsd/gslbdnsd_pool.c-187-				goto out;
./gslbdnsd/gslbdnsd_pool.c-188-		}
./gslbdnsd/gslbdnsd_pool.c-189-	}
./gslbdnsd/gslbdnsd_pool.c:190:	pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-191-out:
./gslbdnsd/gslbdnsd_pool.c:192:	return pool;
./gslbdnsd/gslbdnsd_pool.c-193-}
./gslbdnsd/gslbdnsd_pool.c:194:struct gslbdnsd_vserver * gslbdnsd_vserver_pool_get(struct gslbdnsd_pool *pool)
./gslbdnsd/gslbdnsd_pool.c-195-{
./gslbdnsd/gslbdnsd_pool.c-196-	struct gslbdnsd_config *config = gslbdnsd_config_get();
./gslbdnsd/gslbdnsd_pool.c-197-	struct gslbdnsd_vserver *vserver = NULL;
./gslbdnsd/gslbdnsd_pool.c-198-	struct gslbdnsd_pool *tmp = NULL;
./gslbdnsd/gslbdnsd_pool.c-199-	struct gslb_vserver *vserver_config = NULL;
./gslbdnsd/gslbdnsd_pool.c-200-
./gslbdnsd/gslbdnsd_pool.c-201-	list_for_each_entry(vserver, &config->vserver_head, node) {
./gslbdnsd/gslbdnsd_pool.c-202-		vserver_config = vserver->vserver_config;
./gslbdnsd/gslbdnsd_pool.c-203-		tmp = gslbdnsd_pool_get(vserver_config->poolname);
./gslbdnsd/gslbdnsd_pool.c:204:		if (tmp == pool)
./gslbdnsd/gslbdnsd_pool.c-205-			goto out;
./gslbdnsd/gslbdnsd_pool.c-206-	}
./gslbdnsd/gslbdnsd_pool.c-207-	vserver = NULL;
./gslbdnsd/gslbdnsd_pool.c-208-out:
./gslbdnsd/gslbdnsd_pool.c-209-	return vserver;
./gslbdnsd/gslbdnsd_pool.c-210-}
./gslbdnsd/gslbdnsd_pool.c-211-
./gslbdnsd/gslbdnsd_pool.c-212-int gslbdnsd_conn_rserver_info(struct list_head *head)
./gslbdnsd/gslbdnsd_pool.c-213-{
./gslbdnsd/gslbdnsd_pool.c-214-	struct gslbdnsd_config *config = gslbdnsd_config_get();
--
./gslbdnsd/gslbdnsd_pool.c-255-not_over_limit:
./gslbdnsd/gslbdnsd_pool.c-256-	return GSLBDNSD_RSERVER_NOT_OVER_LIMIT;
./gslbdnsd/gslbdnsd_pool.c-257-over_limit:
./gslbdnsd/gslbdnsd_pool.c-258-	return GSLBDNSD_RSERVER_OVER_LIMIT;
./gslbdnsd/gslbdnsd_pool.c-259-}
./gslbdnsd/gslbdnsd_pool.c-260-
./gslbdnsd/gslbdnsd_pool.c-261-int gslbdnsd_rserver_not_unique(struct gslbdnsd_vserver *vserver, 
./gslbdnsd/gslbdnsd_pool.c-262-					struct list_head *rserver_head)
./gslbdnsd/gslbdnsd_pool.c-263-{
./gslbdnsd/gslbdnsd_pool.c-264-
./gslbdnsd/gslbdnsd_pool.c:265:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_pool.c-266-	struct gslbdnsd_conn_rserver *crserver = NULL, *cnxt = NULL;
./gslbdnsd/gslbdnsd_pool.c-267-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_pool.c-268-
./gslbdnsd/gslbdnsd_pool.c:269:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_pool.c-270-		gslbdnsd_err("gslbdnsd_pool_get6");
./gslbdnsd/gslbdnsd_pool.c-271-		goto out;
./gslbdnsd/gslbdnsd_pool.c-272-	}
./gslbdnsd/gslbdnsd_pool.c-273-
./gslbdnsd/gslbdnsd_pool.c-274-	list_for_each_entry_safe(crserver, cnxt, rserver_head, node) {
./gslbdnsd/gslbdnsd_pool.c-275-		rserver = crserver->rserver;
./gslbdnsd/gslbdnsd_pool.c-276-		if (rserver)
./gslbdnsd/gslbdnsd_pool.c:277:			list_move_tail(&rserver->node, &pool->rserver_head);
./gslbdnsd/gslbdnsd_pool.c-278-		break;
./gslbdnsd/gslbdnsd_pool.c-279-	}
./gslbdnsd/gslbdnsd_pool.c-280-out:
./gslbdnsd/gslbdnsd_pool.c-281-	return 0;
./gslbdnsd/gslbdnsd_pool.c-282-}
--
./gslbdnsd/gslbdnsd_lc_schedule.c-10-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_lc_schedule.c-11-
./gslbdnsd/gslbdnsd_lc_schedule.c-12-
./gslbdnsd/gslbdnsd_lc_schedule.c-13-static struct list_head * gslbdnsd_lc_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_lc_schedule.c-14-						struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_lc_schedule.c-15-						struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_lc_schedule.c-16-						struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_lc_schedule.c-17-{
./gslbdnsd/gslbdnsd_lc_schedule.c-18-	struct list_head *rserver_head = NULL;
./gslbdnsd/gslbdnsd_lc_schedule.c-19-	struct gslbdnsd_rserver *rserver = NULL, *least = NULL;
./gslbdnsd/gslbdnsd_lc_schedule.c:20:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_lc_schedule.c-21-	unsigned long connections = 0;
./gslbdnsd/gslbdnsd_lc_schedule.c-22-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_lc_schedule.c-23-
./gslbdnsd/gslbdnsd_lc_schedule.c:24:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_lc_schedule.c-25-		gslbdnsd_err("gslbdnsd_pool_get3");
./gslbdnsd/gslbdnsd_lc_schedule.c-26-		goto out;
./gslbdnsd/gslbdnsd_lc_schedule.c-27-	}
./gslbdnsd/gslbdnsd_lc_schedule.c-28-
./gslbdnsd/gslbdnsd_lc_schedule.c-29-	if ((rserver_head = gslbdnsd_rserver_head_alloc_and_init()) == NULL) {
./gslbdnsd/gslbdnsd_lc_schedule.c-30-		gslbdnsd_err("gslbdnsd_rserver_head_alloc_and_init");
./gslbdnsd/gslbdnsd_lc_schedule.c-31-		goto out;
./gslbdnsd/gslbdnsd_lc_schedule.c-32-	}
./gslbdnsd/gslbdnsd_lc_schedule.c-33-
./gslbdnsd/gslbdnsd_lc_schedule.c:34:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_lc_schedule.c-35-		if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_lc_schedule.c-36-						cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_lc_schedule.c-37-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_lc_schedule.c-38-			if (!least) {
./gslbdnsd/gslbdnsd_lc_schedule.c-39-				least = rserver;
./gslbdnsd/gslbdnsd_lc_schedule.c-40-				connections = rserver->connections;
./gslbdnsd/gslbdnsd_lc_schedule.c-41-			} else if (rserver->connections < connections) {
./gslbdnsd/gslbdnsd_lc_schedule.c-42-				least = rserver;
./gslbdnsd/gslbdnsd_lc_schedule.c-43-				connections = rserver->connections;
./gslbdnsd/gslbdnsd_lc_schedule.c-44-			}
--
./gslbdnsd/gslbdnsd_ga_schedule.c-10-#include "gslbdnsd_prototype.h"
./gslbdnsd/gslbdnsd_ga_schedule.c-11-
./gslbdnsd/gslbdnsd_ga_schedule.c-12-
./gslbdnsd/gslbdnsd_ga_schedule.c-13-static struct list_head * gslbdnsd_ga_schedule(struct gslbdnsd_event *ep,
./gslbdnsd/gslbdnsd_ga_schedule.c-14-						struct sockaddr_storage *client_address,
./gslbdnsd/gslbdnsd_ga_schedule.c-15-						struct gslbdnsd_vserver *vserver,
./gslbdnsd/gslbdnsd_ga_schedule.c-16-						struct list_head *cache_rserver_head)
./gslbdnsd/gslbdnsd_ga_schedule.c-17-{
./gslbdnsd/gslbdnsd_ga_schedule.c-18-	struct list_head *rserver_head = NULL;
./gslbdnsd/gslbdnsd_ga_schedule.c-19-	struct gslbdnsd_rserver *rserver = NULL;
./gslbdnsd/gslbdnsd_ga_schedule.c:20:	struct gslbdnsd_pool *pool = NULL;
./gslbdnsd/gslbdnsd_ga_schedule.c-21-	struct gslbdnsd_conn_rserver *crserver = NULL;
./gslbdnsd/gslbdnsd_ga_schedule.c-22-
./gslbdnsd/gslbdnsd_ga_schedule.c:23:	if ((pool = gslbdnsd_pool_get(vserver->vserver_config->poolname)) == NULL) {
./gslbdnsd/gslbdnsd_ga_schedule.c-24-		gslbdnsd_err("gslbdnsd_pool_get2");
./gslbdnsd/gslbdnsd_ga_schedule.c-25-		goto out;
./gslbdnsd/gslbdnsd_ga_schedule.c-26-	}
./gslbdnsd/gslbdnsd_ga_schedule.c-27-
./gslbdnsd/gslbdnsd_ga_schedule.c-28-	if ((rserver_head = gslbdnsd_rserver_head_alloc_and_init()) == NULL) {
./gslbdnsd/gslbdnsd_ga_schedule.c-29-		gslbdnsd_err("gslbdnsd_rserver_head_alloc_and_init");
./gslbdnsd/gslbdnsd_ga_schedule.c-30-		goto out;
./gslbdnsd/gslbdnsd_ga_schedule.c-31-	}
./gslbdnsd/gslbdnsd_ga_schedule.c-32-
./gslbdnsd/gslbdnsd_ga_schedule.c:33:	list_for_each_entry(rserver, &pool->rserver_head, node) {
./gslbdnsd/gslbdnsd_ga_schedule.c-34-		if (gslbdnsd_rserver_available(rserver, 
./gslbdnsd/gslbdnsd_ga_schedule.c-35-						cache_rserver_head, ep->qtype) 
./gslbdnsd/gslbdnsd_ga_schedule.c-36-						== GSLBDNSD_RSERVER_AVAILABLE) {
./gslbdnsd/gslbdnsd_ga_schedule.c-37-			crserver = gslbdnsd_conn_rserver_create(rserver);
./gslbdnsd/gslbdnsd_ga_schedule.c-38-			if (crserver) {
./gslbdnsd/gslbdnsd_ga_schedule.c-39-				gslbdnsd_conn_rserver_hash(crserver, rserver_head);
./gslbdnsd/gslbdnsd_ga_schedule.c-40-				break;
./gslbdnsd/gslbdnsd_ga_schedule.c-41-			}
./gslbdnsd/gslbdnsd_ga_schedule.c-42-		}
./gslbdnsd/gslbdnsd_ga_schedule.c-43-	}
